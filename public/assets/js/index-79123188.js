import { i as ap, B as Ed, F as Gf, A as jP, a as Q_, C as WP, P as Ge, R as Qr, S as ls, T as cs, b as YP, c as $i, s as pd, d as eT, M as Pr, e as tT, f as Qn, G as J_, g as zP, h as KP, E as qP, j as XP, I as QP, k as JP, l as ZP, m as $P, p as eL, n as tL, o as Z_, q as sL, r as rL, t as $o, u as _, v as a, w as g, x as Bf, y as kf, z as iL, D as mi, H as Vf, J as q, K as pa, L as co, N as nL, O as aL, Q as ds, U as Id, V as oL, W as lL, X as sT, Y as Xs, Z as cL, _ as uL, $ as hL, a0 as ii, a1 as ni, a2 as Td, a3 as tu, a4 as rT, a5 as iT, a6 as nT, a7 as dL, a8 as _L, a9 as aT, aa as gL, ab as fL, ac as oT, ad as Ch, ae as lT, af as mL, ag as EL, ah as cT, ai as $_, aj as pL, ak as IL, al as TL, am as RL, an as OL, ao as SL, ap as CL, aq as AL, ar as NL, as as yL, at as ML, au as op, av as bL, aw as DL, ax as p_, ay as I_, az as T_, aA as vL } from "./vendor-da6e8cc3.js";
(function() {
    const e = document.createElement("link").relList;
    if (e && e.supports && e.supports("modulepreload"))
        return;
    for (const i of document.querySelectorAll('link[rel="modulepreload"]'))
        r(i);
    new MutationObserver(i => {
        for (const n of i)
            if (n.type === "childList")
                for (const o of n.addedNodes)
                    o.tagName === "LINK" && o.rel === "modulepreload" && r(o)
    }).observe(document, {
        childList: !0,
        subtree: !0
    });
    function t(i) {
        const n = {};
        return i.integrity && (n.integrity = i.integrity), i.referrerPolicy && (n.referrerPolicy = i.referrerPolicy), i.crossOrigin === "use-credentials" ? n.credentials = "include" : i.crossOrigin === "anonymous" ? n.credentials = "omit" : n.credentials = "same-origin", n
    }
    function r(i) {
        if (i.ep)
            return;
        i.ep = !0;
        const n = t(i);
        fetch(i.href, n)
    }
})();
class pe {
    static log(...e)
    {
        this.LOG_DEBUG && console.log(this.logPrefix(), ...e)
    }
    static warn(...e)
    {
        this.LOG_WARN && console.warn(this.logPrefix(), ...e)
    }
    static error(...e)
    {
        this.LOG_ERROR && console.error(this.logPrefix(), ...e)
    }
    static events(...e)
    {
        this.LOG_EVENTS && console.log(this.logPrefix(), ...e)
    }
    static packets(...e)
    {
        this.LOG_PACKETS && console.log(this.logPrefix(), ...e)
    }
    static logPrefix()
    {
        return "[Nitro]"
    }
}
pe.LOG_DEBUG = !1;
pe.LOG_WARN = !1;
pe.LOG_ERROR = !1;
pe.LOG_EVENTS = !1;
pe.LOG_PACKETS = !1;
class as {
    constructor(e=null)
    {
        if (this._length = 0, this._dictionary = new Map, this._array = [], this._keys = [], e)
            for (const [t, r] of e.entries())
                this.add(t, r)
    }
    get length()
    {
        return this._length
    }
    get disposed()
    {
        return !this._dictionary
    }
    dispose()
    {
        if (!this._dictionary) {
            for (const e of this._dictionary.keys())
                this._dictionary.delete(e);
            this._dictionary = null
        }
        this._length = 0,
        this._array = null,
        this._keys = null
    }
    reset()
    {
        for (const e of this._dictionary.keys())
            this._dictionary.delete(e);
        this._length = 0,
        this._array = [],
        this._keys = []
    }
    unshift(e, t)
    {
        return this._dictionary.get(e) !== null ? !1 : (this._dictionary.set(e, t), this._array.unshift(t), this._keys.unshift(e), this._length++, !0)
    }
    add(e, t)
    {
        return this._dictionary.get(e) !== void 0 ? !1 : (this._dictionary.set(e, t), this._array[this._length] = t, this._keys[this._length] = e, this._length++, !0)
    }
    remove(e)
    {
        const t = this._dictionary.get(e);
        if (!t)
            return null;
        const r = this._array.indexOf(t);
        return r >= 0 && (this._array.splice(r, 1), this._keys.splice(r, 1), this._length--), this._dictionary.delete(e), t
    }
    getWithIndex(e)
    {
        return e < 0 || e >= this._length ? null : this._array[e]
    }
    getKey(e)
    {
        return e < 0 || e >= this._length ? null : this._keys[e]
    }
    getKeys()
    {
        return this._keys.slice()
    }
    hasKey(e)
    {
        return this._keys.indexOf(e) > -1
    }
    getValue(e)
    {
        return this._dictionary.get(e)
    }
    getValues()
    {
        return this._array.slice()
    }
    hasValue(e)
    {
        return this._array.indexOf(e) > -1
    }
    indexOf(e)
    {
        return this._array.indexOf(e)
    }
    concatenate(e)
    {
        for (const t of e._keys)
            this.add(t, e.getValue(t))
    }
    clone()
    {
        const e = new as;
        return e.concatenate(this), e
    }
}
const uT = s => {
    let e = "";
    const t = new Uint8Array(s),
        r = t.byteLength;
    for (let i = 0; i < r; i++)
        e += String.fromCharCode(t[i]);
    return window.btoa(e)
};
class Rd {
    constructor(e)
    {
        this._position = 0,
        this._dataView = new DataView(e)
    }
    readBytes(e)
    {
        const t = new Rd(this._dataView.buffer.slice(this._position, this._position + e));
        return this._position += e, t
    }
    readByte()
    {
        const e = this._dataView.getInt8(this._position);
        return this._position++, e
    }
    readShort()
    {
        const e = this._dataView.getInt16(this._position);
        return this._position += 2, e
    }
    readInt()
    {
        const e = this._dataView.getInt32(this._position);
        return this._position += 4, e
    }
    readFloat()
    {
        const e = this._dataView.getFloat32(this._position);
        return this._position += 4, e
    }
    readDouble()
    {
        const e = this._dataView.getFloat64(this._position);
        return this._position += 8, e
    }
    remaining()
    {
        return this._dataView.byteLength - this._position
    }
    toString(e)
    {
        return new TextDecoder().decode(this._dataView.buffer)
    }
    toArrayBuffer()
    {
        return this._dataView.buffer
    }
}
class lp {
    constructor()
    {
        this._buffer = new Uint8Array,
        this._position = 0
    }
    writeByte(e)
    {
        const t = new Uint8Array(1);
        return t[0] = e, this.appendArray(t), this
    }
    writeBytes(e)
    {
        const t = new Uint8Array(e);
        return this.appendArray(t), this
    }
    writeShort(e)
    {
        const t = new Uint8Array(2);
        return t[0] = e >> 8, t[1] = e & 255, this.appendArray(t), this
    }
    writeInt(e)
    {
        const t = new Uint8Array(4);
        return t[0] = e >> 24, t[1] = e >> 16, t[2] = e >> 8, t[3] = e & 255, this.appendArray(t), this
    }
    writeString(e, t=!0)
    {
        const r = new TextEncoder().encode(e);
        return t ? (this.writeShort(r.length), this.appendArray(r)) : this.appendArray(r), this
    }
    appendArray(e)
    {
        if (!e)
            return;
        const t = new Uint8Array(this.position + e.length > this._buffer.length ? this.position + e.length : this._buffer.length);
        t.set(this._buffer),
        t.set(e, this.position),
        this._buffer = t,
        this.position += e.length
    }
    getBuffer()
    {
        return this._buffer.buffer
    }
    get position()
    {
        return this._position
    }
    set position(e)
    {
        this._position = e
    }
    toString(e)
    {
        return new TextDecoder(e).decode(this._buffer)
    }
}
const hT = class {
    constructor(s)
    {
        this._jsonFile = null,
        this._image = null,
        this._imageData = null,
        this._baseTexture = null,
        this.parse(s)
    }
    parse(s)
    {
        const e = new Rd(s);
        let t = e.readShort();
        for (; t > 0;) {
            const r = e.readShort(),
                i = e.readBytes(r).toString(),
                n = e.readInt(),
                o = e.readBytes(n);
            if (i.endsWith(".json")) {
                const l = ap(o.toArrayBuffer());
                this._jsonFile = JSON.parse(hT.TEXT_DECODER.decode(l))
            } else {
                const l = ap(o.toArrayBuffer()),
                    c = uT(l);
                this._baseTexture = new Ed("data:image/png;base64," + c)
            }
            t--
        }
    }
    get jsonFile()
    {
        return this._jsonFile
    }
    get baseTexture()
    {
        return this._baseTexture
    }
}
;
let Hf = hT;
Hf.TEXT_DECODER = new TextDecoder("utf-8");
class dT extends Gf {
    constructor(e)
    {
        super(`attribute vec2 aVertexPosition;
            attribute vec2 aTextureCoord;
            
            uniform mat3 projectionMatrix;
            
            varying vec2 vTextureCoord;
            
            void main(void)
            {
                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);
                vTextureCoord = aTextureCoord;
            }`










        , `varying vec2 vTextureCoord;
            uniform sampler2D uSampler;
            
            uniform float gamma;
            uniform float contrast;
            uniform float saturation;
            uniform float brightness;
            uniform float red;
            uniform float green;
            uniform float blue;
            uniform float alpha;
            
            void main(void)
            {
                vec4 c = texture2D(uSampler, vTextureCoord);
            
                if (c.a > 0.0) {
                    c.rgb /= c.a;
            
                    vec3 rgb = pow(c.rgb, vec3(1. / gamma));
                    rgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb)), rgb, saturation), contrast);
                    rgb.r *= red;
                    rgb.g *= green;
                    rgb.b *= blue;
                    c.rgb = rgb * brightness;
            
                    c.rgb *= c.a;
                }
            
                gl_FragColor = c * alpha;
            }`





























        ),
        this.gamma = 1,
        this.saturation = 1,
        this.contrast = 1,
        this.brightness = 1,
        this.red = 1,
        this.green = 1,
        this.blue = 1,
        this.alpha = 1,
        Object.assign(this, e)
    }
    apply(e, t, r, i)
    {
        this.uniforms.gamma = Math.max(this.gamma, 1e-4),
        this.uniforms.saturation = this.saturation,
        this.uniforms.contrast = this.contrast,
        this.uniforms.brightness = this.brightness,
        this.uniforms.red = this.red,
        this.uniforms.green = this.green,
        this.uniforms.blue = this.blue,
        this.uniforms.alpha = this.alpha,
        e.applyFilter(this, t, r, i)
    }
}
const PL = `
attribute vec2 aVertexPosition;
attribute vec2 aTextureCoord;
uniform mat3 projectionMatrix;
varying vec2 vTextureCoord;
void main(void)
{
    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);
    vTextureCoord = aTextureCoord;
}`








    ,
    LL = `
varying vec2 vTextureCoord;
uniform sampler2D uSampler;
uniform sampler2D mask;
uniform int fromChannel;
uniform int toChannel;

void main(void) {
    vec4 maskColor = texture2D(mask, vTextureCoord);
    vec4 currentColor = texture2D(uSampler, vTextureCoord);
    vec4 adjusted = currentColor;

    if(maskColor.r == 0.0 && maskColor.g == 0.0 && maskColor.b == 0.0)
    {
        adjusted.a = 0.0;
    }

    gl_FragColor = vec4(adjusted.r, adjusted.g, adjusted.b, adjusted.a);
}`

















    ;
class Od extends Gf {
    constructor(e, t, r)
    {
        super(PL, LL, {
            mask: e.castToBaseTexture(),
            fromChannel: t,
            toChannel: r
        })
    }
}
Od.CHANNEL_RED = 0;
Od.CHANNEL_GREEN = 1;
Od.CHANNEL_BLUE = 2;
Od.CHANNEL_ALPHA = 3;
const eg = class  extends jP{
    constructor(s)
    {
        super(s),
        eg.INSTANCE || (eg.INSTANCE = this)
    }
    static get instance()
    {
        return this.INSTANCE || null
    }
}
;
let Gs = eg;
Gs.INSTANCE = null;
const ir = () => {
        var s;
        return ((s = Gs.instance) == null ? void 0 : s.ticker) || null
    },
    UL = () => {
        var s;
        return ((s = ir()) == null ? void 0 : s.FPS) || 0
    },
    Pe = () => {
        var s;
        return ((s = ir()) == null ? void 0 : s.lastTime) || 0
    };
class wL extends Q_ {}
class FL extends Ed {}
class Mi extends WP {}
class _T extends Gf {}
class wi extends Ge {}
class gT extends Qr {}
class qt extends ls {}
class jf extends cs {}
class xL extends YP {}
const GL = `
attribute vec2 aVertexPosition;
attribute vec2 aTextureCoord;
uniform mat3 projectionMatrix;
varying vec2 vTextureCoord;
void main(void)
{
    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);
    vTextureCoord = aTextureCoord;
}`








    ,
    BL = `
varying vec2 vTextureCoord;
uniform sampler2D uSampler;
uniform sampler2D lut;
uniform int channel;

void main(void) {
    vec4 currentColor = texture2D(uSampler, vTextureCoord);
    vec4 adjusted = currentColor;

    if(currentColor.a > 0.0)
    {
        if(channel == 0)
        {
            adjusted = texture2D(lut, vec2((currentColor.r * 255.0 + 0.5) / 256.0, 0.5));
        } else if(channel == 1) {
            adjusted = texture2D(lut, vec2((currentColor.g * 255.0 + 0.5) / 256.0, 0.5));
        } else if(channel == 2) {
            adjusted = texture2D(lut, vec2((currentColor.b * 255.0 + 0.5) / 256.0, 0.5));
        } else if(channel == 3) {
            adjusted = texture2D(lut, vec2((currentColor.a * 255.0 + 0.5) / 256.0, 0.5));
        }
    }

    gl_FragColor = vec4(adjusted.r, adjusted.g, adjusted.b, currentColor.a);
}`
























    ,
    il = class  extends _T{
        constructor(s, e=il.CHANNEL_RED)
        {
            super(GL, BL),
            this._channel = e;
            let t = [];
            t = this.getLutForPalette(s),
            this._lut = FL.fromBuffer(Uint8Array.from(t), t.length / 4, 1, {
                mipmap: 0,
                scaleMode: 0
            }),
            this.uniforms.lut = this._lut,
            this.uniforms.channel = this._channel
        }
        getLutForPalette(s)
        {
            const e = [];
            for (let t = 0; t < s.length; t++)
                e[t * 4 + il.CHANNEL_RED] = s[t] >> 16 & 255,
                e[t * 4 + il.CHANNEL_GREEN] = s[t] >> 8 & 255,
                e[t * 4 + il.CHANNEL_BLUE] = s[t] & 255,
                e[t * 4 + il.CHANNEL_ALPHA] = s[t] >> 24 & 255;
            return e
        }
        get lut()
        {
            return this._lut
        }
        get channel()
        {
            return this._channel
        }
    }
    ;
let Ll = il;
Ll.CHANNEL_RED = 0;
Ll.CHANNEL_GREEN = 1;
Ll.CHANNEL_BLUE = 2;
Ll.CHANNEL_ALPHA = 3;
const fT = class {
    constructor()
    {
        this.RENDER_TEXTURE_POOL = new Map,
        this.RENDER_TEXTURE_CACHE = []
    }
    clearCache()
    {
        this.RENDER_TEXTURE_POOL.forEach(s => s == null ? void 0 : s.destroy(!0)),
        this.RENDER_TEXTURE_POOL.clear(),
        this.RENDER_TEXTURE_CACHE = []
    }
    clearRenderTexture(s)
    {
        return s ? this.writeToRenderTexture(new ls(cs.EMPTY), s) : null
    }
    getTextureIdentifier(s, e, t)
    {
        return `${t ?? fT.DEFAULT_PLANE_ID}:${s}:${e}`
    }
    createRenderTexture(s, e, t=null)
    {
        if (s < 0 || e < 0)
            return null;
        if (!t) {
            const i = $i.create({
                width: s,
                height: e
            });
            return this.RENDER_TEXTURE_CACHE.push(i), i
        }
        t = this.getTextureIdentifier(s, e, t);
        let r = this.RENDER_TEXTURE_POOL.get(t);
        return r || (r = $i.create({
            width: s,
            height: e
        }), this.RENDER_TEXTURE_CACHE.push(r), this.RENDER_TEXTURE_POOL.set(t, r)), r
    }
    createAndFillRenderTexture(s, e, t=null, r=16777215)
    {
        if (s < 0 || e < 0)
            return null;
        const i = this.createRenderTexture(s, e, t);
        return this.clearAndFillRenderTexture(i, r)
    }
    createAndWriteRenderTexture(s, e, t, r=null, i=null)
    {
        if (s < 0 || e < 0)
            return null;
        const n = this.createRenderTexture(s, e, r);
        return this.writeToRenderTexture(t, n, !0, i)
    }
    clearAndFillRenderTexture(s, e=16777215)
    {
        if (!s)
            return null;
        const t = new ls(cs.WHITE);
        return t.tint = e, t.width = s.width, t.height = s.height, this.writeToRenderTexture(t, s)
    }
    writeToRenderTexture(s, e, t=!0, r=null)
    {
        return !s || !e ? null : (this.getRenderer().render(s, {
            renderTexture: e,
            clear: t,
            transform: r
        }), e)
    }
    getPixels(s, e=null)
    {
        return this.getExtractor().pixels(s)
    }
    getRenderer()
    {
        return Gs.instance.renderer
    }
    getExtractor()
    {
        return this.getRenderer().plugins.extract
    }
}
;
let mT = fT;
mT.DEFAULT_PLANE_ID = "DEFAULT";
class pt {
    static generateTexture(e, t=null, r=null, i=1)
    {
        return e ? (r === null && (r = pd.SCALE_MODE), this.getRenderer().generateTexture(e, {
            scaleMode: r,
            resolution: i,
            region: t
        })) : null
    }
    static generateTextureFromImage(e)
    {
        return e ? cs.from(e) : null
    }
    static generateImage(e)
    {
        return e ? this.getExtractor().image(e) : null
    }
    static generateImageUrl(e)
    {
        return e ? this.getExtractor().base64(e) : null
    }
    static generateCanvas(e)
    {
        return e ? this.getExtractor().canvas(e) : null
    }
    static clearRenderTexture(e)
    {
        return e ? this.writeToRenderTexture(new ls(cs.EMPTY), e) : null
    }
    static createRenderTexture(e, t)
    {
        return e < 0 || t < 0 ? null : $i.create({
            width: e,
            height: t
        })
    }
    static createAndFillRenderTexture(e, t, r=16777215)
    {
        if (e < 0 || t < 0)
            return null;
        const i = this.createRenderTexture(e, t);
        return this.clearAndFillRenderTexture(i, r)
    }
    static createAndWriteRenderTexture(e, t, r, i=null)
    {
        if (e < 0 || t < 0)
            return null;
        const n = this.createRenderTexture(e, t);
        return this.writeToRenderTexture(r, n, !0, i)
    }
    static clearAndFillRenderTexture(e, t=16777215)
    {
        if (!e)
            return null;
        const r = new ls(cs.WHITE);
        return r.tint = t, r.width = e.width, r.height = e.height, this.writeToRenderTexture(r, e)
    }
    static writeToRenderTexture(e, t, r=!0, i=null)
    {
        return !e || !t ? null : (this.getRenderer().render(e, {
            renderTexture: t,
            clear: r,
            transform: i
        }), t)
    }
    static getPixels(e, t=null)
    {
        return this.getExtractor().pixels(e)
    }
    static getRenderer()
    {
        return Gs.instance.renderer
    }
    static getExtractor()
    {
        return this.getRenderer().plugins.extract
    }
}
const Ec = class {
    static createAsset(s, e, t, r, i, n=!1, o=!1, l=!1)
    {
        const c = Ec.GRAPHIC_POOL.length ? Ec.GRAPHIC_POOL.pop() : new Ec;
        return c._name = s, c._source = e || null, t ? (c._texture = t, c._initialized = !1) : (c._texture = null, c._initialized = !0), c._usesPalette = l, c._x = r, c._y = i, c._flipH = n, c._flipV = o, c._rectangle = null, c
    }
    recycle()
    {
        this._texture = null,
        Ec.GRAPHIC_POOL.push(this)
    }
    initialize()
    {
        this._initialized || !this._texture || (this._width = this._texture.width, this._height = this._texture.height, this._initialized = !0)
    }
    getImageUrl()
    {
        return pt.generateImageUrl(new ls(this._texture))
    }
    get name()
    {
        return this._name
    }
    get source()
    {
        return this._source
    }
    get texture()
    {
        return this._texture
    }
    get usesPalette()
    {
        return this._usesPalette
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get width()
    {
        return this.initialize(), this._width
    }
    get height()
    {
        return this.initialize(), this._height
    }
    get offsetX()
    {
        return this._flipH ? -this._x : this._x
    }
    get offsetY()
    {
        return this._flipV ? -this._y : this._y
    }
    get flipH()
    {
        return this._flipH
    }
    get flipV()
    {
        return this._flipV
    }
    get rectangle()
    {
        return this._rectangle || (this._rectangle = new Qr(0, 0, this.width, this.height)), this._rectangle
    }
}
;
let ET = Ec;
ET.GRAPHIC_POOL = [];
class kL {
    constructor(e, t, r)
    {
        for (this._palette = e; this._palette.length < 256;)
            this._palette.push([0, 0, 0]);
        this._primaryColor = t,
        this._secondaryColor = r
    }
    dispose() {}
    applyPalette(e)
    {
        var o,
            l;
        const t = pt.createAndWriteRenderTexture(e.width, e.height, new ls(e)),
            r = pt.getPixels(t);
        for (let c = 0; c < r.length; c += 4) {
            let u = this._palette[r[c + 1]];
            u === void 0 && (u = [0, 0, 0]),
            r[c] = u[0],
            r[c + 1] = u[1],
            r[c + 2] = u[2]
        }
        const i = (o = t.baseTexture._glTextures[1]) == null ? void 0 : o.texture,
            n = (l = Gs.instance.renderer) == null ? void 0 : l.gl;
        return n.bindTexture(n.TEXTURE_2D, i), n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, t.width, t.height, 0, n.RGBA, n.UNSIGNED_BYTE, r), n.bindTexture(n.TEXTURE_2D, null), t
    }
    get primaryColor()
    {
        return this._primaryColor
    }
    get secondaryColor()
    {
        return this._secondaryColor
    }
}
const tg = class {
    constructor(s, e)
    {
        if (!s)
            throw new Error("invalid_collection");
        this._name = s.name,
        this._baseTexture = e && e.baseTexture || null,
        this._data = s,
        this._textures = new Map,
        this._assets = new Map,
        this._palettes = new Map,
        this._paletteAssetNames = [],
        e && this.addLibraryAsset(e.textures),
        this.define(s)
    }
    static removeFileExtension(s)
    {
        return s.substring(0, s.lastIndexOf(".")) || s
    }
    dispose()
    {
        if (this._palettes) {
            for (const s of this._palettes.values())
                s.dispose();
            this._palettes.clear()
        }
        if (this._paletteAssetNames && (this.disposePaletteAssets(), this._paletteAssetNames = null), this._assets) {
            for (const s of this._assets.values())
                s.recycle();
            this._assets.clear()
        }
    }
    addReference()
    {
        this._referenceCount++,
        this._referenceTimestamp = Pe()
    }
    removeReference()
    {
        this._referenceCount--,
        this._referenceCount <= 0 && (this._referenceCount = 0, this._referenceTimestamp = Pe(), this.disposePaletteAssets(!1))
    }
    define(s)
    {
        const e = s.assets,
            t = s.palettes;
        e && this.defineAssets(e),
        t && this.definePalettes(t)
    }
    defineAssets(s)
    {
        if (s)
            for (const e in s) {
                const t = s[e];
                if (!t)
                    continue;
                const r = -t.x || 0,
                    i = -t.y || 0;
                let n = !1;
                const o = !1,
                    l = t.usesPalette || !1;
                let c = t.source || "";
                t.flipH && c.length && (n = !0),
                c.length || (c = e);
                const u = this.getLibraryAsset(c);
                if (!u)
                    continue;
                let h = this.createAsset(e, c, u, n, o, r, i, l);
                if (!h) {
                    const d = this.getAsset(e);
                    d && d.name !== d.source && (h = this.replaceAsset(e, c, u, n, o, r, i, l))
                }
            }
    }
    definePalettes(s)
    {
        if (s)
            for (const e in s) {
                const t = s[e];
                if (!t)
                    continue;
                const r = t.id.toString();
                if (this._palettes.get(r))
                    continue;
                let i = 16777215,
                    n = 16777215,
                    o = t.color1;
                o && o.length > 0 && (i = parseInt(o, 16)),
                o = t.color2,
                o && o.length > 0 && (n = parseInt(o, 16)),
                this._palettes.set(r, new kL(t.rgb, i, n))
            }
    }
    createAsset(s, e, t, r, i, n, o, l)
    {
        if (this._assets.get(s))
            return !1;
        const c = ET.createAsset(s, e, t, n, o, r, i, l);
        return this._assets.set(s, c), !0
    }
    replaceAsset(s, e, t, r, i, n, o, l)
    {
        const c = this._assets.get(s);
        return c && (this._assets.delete(s), c.recycle()), this.createAsset(s, e, t, r, i, n, o, l)
    }
    getAsset(s)
    {
        if (!s)
            return null;
        const e = this._assets.get(s);
        return e || null
    }
    getAssetWithPalette(s, e)
    {
        const t = s + "@" + e;
        let r = this.getAsset(t);
        if (!r) {
            if (r = this.getAsset(s), !r || !r.usesPalette)
                return r;
            const i = this.getPalette(e);
            if (i) {
                const n = i.applyPalette(r.texture);
                n && (this._paletteAssetNames.push(t), this.createAsset(t, r.source + "@" + e, n, r.flipH, r.flipV, r.x, r.y, !1), r = this.getAsset(t))
            }
        }
        return r
    }
    getTexture(s)
    {
        return this._textures.get(s)
    }
    getPaletteNames()
    {
        return Array.from(this._palettes.keys())
    }
    getPaletteColors(s)
    {
        const e = this.getPalette(s);
        return e ? [e.primaryColor, e.secondaryColor] : null
    }
    getPalette(s)
    {
        if (!s)
            return null;
        const e = this._palettes.get(s);
        return e || null
    }
    addAsset(s, e, t, r=0, i=0, n=!1, o=!1)
    {
        if (!s || !e)
            return !1;
        const l = this.getLibraryAsset(s);
        return l ? t ? (l.baseTexture = e.baseTexture, l.frame = e.frame, l.trim = e.trim, l.updateUvs(), !0) : !1 : (this._textures.set(s, e), this.createAsset(s, s, e, n, o, r, i, !1))
    }
    disposeAsset(s)
    {
        const e = this._assets.get(s);
        if (!e)
            return;
        this._assets.delete(s);
        const t = this.getLibraryAsset(e.source);
        t && (this._textures.delete(e.source), t.destroy(!0)),
        e.recycle()
    }
    getLibraryAsset(s)
    {
        if (!s)
            return null;
        s = this._name + "_" + s;
        const e = this._textures.get(s);
        return e || null
    }
    addLibraryAsset(s)
    {
        if (s)
            for (const e in s) {
                const t = s[e];
                t && this._textures.set(tg.removeFileExtension(e), t)
            }
    }
    disposePaletteAssets(s=!0)
    {
        if (this._paletteAssetNames && (s || this._paletteAssetNames.length > tg.PALETTE_ASSET_DISPOSE_THRESHOLD)) {
            for (const e of this._paletteAssetNames)
                this.disposeAsset(e);
            this._paletteAssetNames = []
        }
    }
    get referenceCount()
    {
        return this._referenceCount
    }
    get referenceTimestamp()
    {
        return this._referenceTimestamp
    }
    get name()
    {
        return this._name
    }
    get baseTexture()
    {
        return this._baseTexture
    }
    get data()
    {
        return this._data
    }
    get textures()
    {
        return this._textures
    }
    get assets()
    {
        return this._assets
    }
}
;
let Wf = tg;
Wf.PALETTE_ASSET_DISPOSE_THRESHOLD = 10;
const pT = class {
    constructor()
    {
        this._textures = new Map,
        this._collections = new Map
    }
    getTexture(s)
    {
        if (!s)
            return null;
        const e = this._textures.get(s);
        return e || null
    }
    setTexture(s, e)
    {
        !s || !e || this._textures.set(s, e)
    }
    getAsset(s)
    {
        if (!s)
            return null;
        for (const e of this._collections.values()) {
            if (!e)
                continue;
            const t = e.getAsset(s);
            if (t)
                return t
        }
        return null
    }
    getCollection(s)
    {
        if (!s)
            return null;
        const e = this._collections.get(s);
        return e || null
    }
    createCollection(s, e)
    {
        if (!s)
            return null;
        const t = new Wf(s, e);
        if (t) {
            for (const [r, i] of t.textures.entries())
                this.setTexture(r, i);
            this._collections.set(t.name, t)
        }
        return t
    }
    async downloadAsset(s)
    {
        return await this.downloadAssets([s])
    }
    async downloadAssets(s)
    {
        if (!s || !s.length)
            return Promise.resolve(!0);
        try {
            for (const e of s) {
                const t = await fetch(e);
                if (t.status !== 200)
                    continue;
                let r = "application/octet-stream";
                switch (t.headers.has("Content-Type") && (r = t.headers.get("Content-Type")), r) {
                case "application/octet-stream":
                    {
                        const i = await t.arrayBuffer(),
                            n = new Hf(i);
                        await this.processAsset(n.baseTexture, n.jsonFile);
                        break
                    }case "image/png":
                case "image/jpeg":
                case "image/gif":
                    {
                        const i = await t.arrayBuffer(),
                            n = uT(i),
                            o = Ed.from(`data:${r};base64,${n}`),
                            l = async () => {
                                const c = new cs(o);
                                this.setTexture(e, c)
                            };
                        o.valid ? await l() : await new Promise((c, u) => {
                            o.once("update", async () => (await l(), c()))
                        });
                        break
                    }
                }
            }
            return Promise.resolve(!0)
        } catch (e) {
            return pe.error(e), Promise.resolve(!1)
        }
    }
    async processAsset(s, e)
    {
        const t = e.spritesheet;
        if (!s || !t || !Object.keys(t).length) {
            this.createCollection(e, null);
            return
        }
        const r = async () => {
            const i = new eT(s, t);
            await i.parse(),
            this.createCollection(e, i)
        };
        s.valid ? await r() : await new Promise((i, n) => {
            s.once("update", async () => (await r(), i()))
        })
    }
    get collections()
    {
        return this._collections
    }
}
;
let IT = pT;
IT._INSTANCE = new pT;
const zr = () => IT._INSTANCE;
class VL {
    constructor(e, t, r)
    {
        this.name = e,
        this.textures = t,
        this.durations = r
    }
}
class Yf {}
Yf.UNKNOWN = 0;
Yf.BROWSER = 1;
class Sd {}
Sd.UNKNOWN = 0;
Sd.FLASH = 1;
Sd.HTML5 = 2;
class Si {}
Si.CONNECTION_OPENED = "open";
Si.CONNECTION_CLOSED = "close";
Si.CONNECTION_ERROR = "error";
Si.CONNECTION_MESSAGE = "message";
class ye {
    static parseConfiguration(e, t=!1)
    {
        if (!e)
            return !1;
        try {
            const r = new RegExp(/\${(.*?)}/g);
            for (const i in e) {
                let n = e[i];
                typeof n == "string" && (n = this.interpolate(n, r)),
                this._definitions.has(i) ? t && this.setValue(i, n) : this.setValue(i, n)
            }
            return !0
        } catch (r) {
            return pe.error(r.stack), !1
        }
    }
    static interpolate(e, t=null)
    {
        t || (t = new RegExp(/\${(.*?)}/g));
        const r = e.match(t);
        if (r && r.length)
            for (const i of r) {
                const n = this._definitions.get(this.removeInterpolateKey(i));
                n && (e = e.replace(i, n))
            }
        return e
    }
    static removeInterpolateKey(e)
    {
        return e.replace("${", "").replace("}", "")
    }
    static getValue(e, t=null)
    {
        let r = this._definitions.get(e);
        if (r === void 0) {
            if (this._missingKeys.indexOf(e) >= 0)
                return t;
            this._missingKeys.push(e),
            pe.warn(`Missing configuration key: ${e}`),
            r = t
        }
        return r
    }
    static setValue(e, t)
    {
        const r = e.split(".");
        let i = this._config;
        for (let n = 0; n < r.length; n++) {
            const o = r[n].toString();
            if (n !== r.length - 1) {
                i[o] || (i[o] = {}),
                i = i[o];
                continue
            }
            i[o] = t
        }
        this._definitions.set(e, t)
    }
    static get definitions()
    {
        return this._definitions
    }
}
ye._definitions = new Map;
ye._config = {};
ye._missingKeys = [];
const ts = class {
    static getExpressionTimeout(s)
    {
        switch (s = parseInt(s), s) {
        case 1:
            return 5e3;
        case 2:
            return 1400;
        case 3:
            return 2e3;
        case 4:
            return 2e3;
        case 5:
            return 0;
        case 6:
            return 700;
        case 7:
            return 2e3;
        case 8:
            return 1500;
        case 9:
            return 1500;
        case 10:
            return 1500;
        default:
            return 0
        }
    }
    static getExpressionId(s)
    {
        return ts.EXPRESSION_MAP.indexOf(s)
    }
    static getExpression(s)
    {
        return s > ts.EXPRESSION_MAP.length ? null : ts.EXPRESSION_MAP[s]
    }
    static getGestureId(s)
    {
        return ts.GESTURE_MAP.indexOf(s)
    }
    static getGesture(s)
    {
        return s > ts.GESTURE_MAP.length ? null : ts.GESTURE_MAP[s]
    }
    static idToAvatarActionState(s)
    {
        return s === "Lay" ? "lay" : s === "Float" ? "float" : s === "Swim" ? "swim" : s === "Sit" ? "sit" : s === "Respect" ? "respect" : s === "Wave" ? "wave" : s === "Idle" ? "idle" : s === "Dance" ? "dance" : s === "UseItem" ? "usei" : s === "CarryItem" ? "cri" : s === "Talk" ? "talk" : s === "Sleep" ? "Sleep" : s === "Move" ? "mv" : "std"
    }
}
;
let ie = ts;
ie.CARRY_OBJECT = "cri";
ie.DANCE = "dance";
ie.EFFECT = "fx";
ie.EXPRESSION = "expression";
ie.EXPRESSION_BLOW_A_KISS = "blow";
ie.EXPRESSION_CRY = "cry";
ie.EXPRESSION_IDLE = "idle";
ie.EXPRESSION_LAUGH = "laugh";
ie.EXPRESSION_RESPECT = "respect";
ie.EXPRESSION_RIDE_JUMP = "ridejump";
ie.EXPRESSION_SNOWBOARD_OLLIE = "sbollie";
ie.EXPRESSION_SNOWBORD_360 = "sb360";
ie.EXPRESSION_WAVE = "wave";
ie.GESTURE = "gest";
ie.GESTURE_AGGRAVATED = "agr";
ie.GESTURE_SAD = "sad";
ie.GESTURE_SMILE = "sml";
ie.GESTURE_SURPRISED = "srp";
ie.GUIDE_STATUS = "guide";
ie.MUTED = "muted";
ie.PET_GESTURE_BLINK = "eyb";
ie.PET_GESTURE_CRAZY = "crz";
ie.PET_GESTURE_JOY = "joy";
ie.PET_GESTURE_MISERABLE = "mis";
ie.PET_GESTURE_PUZZLED = "puz";
ie.PET_GESTURE_TONGUE = "tng";
ie.PLAYING_GAME = "playing_game";
ie.POSTURE = "posture";
ie.POSTURE_FLOAT = "float";
ie.POSTURE_LAY = "lay";
ie.POSTURE_SIT = "sit";
ie.POSTURE_STAND = "std";
ie.POSTURE_SWIM = "swim";
ie.POSTURE_WALK = "mv";
ie.SIGN = "sign";
ie.SLEEP = "sleep";
ie.SNOWWAR_DIE_BACK = "swdieback";
ie.SNOWWAR_DIE_FRONT = "swdiefront";
ie.SNOWWAR_PICK = "swpick";
ie.SNOWWAR_RUN = "swrun";
ie.SNOWWAR_THROW = "swthrow";
ie.TALK = "talk";
ie.BLINK = "blink";
ie.TYPING = "typing";
ie.USE_OBJECT = "usei";
ie.VOTE = "vote";
ie.GESTURE_MAP = ["", ts.GESTURE_SMILE, ts.GESTURE_AGGRAVATED, ts.GESTURE_SURPRISED, ts.GESTURE_SAD, ts.PET_GESTURE_JOY, ts.PET_GESTURE_CRAZY, ts.PET_GESTURE_TONGUE, ts.PET_GESTURE_BLINK, ts.PET_GESTURE_MISERABLE, ts.PET_GESTURE_PUZZLED];
ie.EXPRESSION_MAP = ["", ts.EXPRESSION_WAVE, ts.EXPRESSION_BLOW_A_KISS, ts.EXPRESSION_LAUGH, ts.EXPRESSION_CRY, ts.EXPRESSION_IDLE, ts.DANCE, ts.EXPRESSION_RESPECT, ts.EXPRESSION_SNOWBOARD_OLLIE, ts.EXPRESSION_SNOWBORD_360, ts.EXPRESSION_RIDE_JUMP];
class Kr {}
Kr.DIRECTION_TO_ANGLE = [45, 90, 135, 180, 225, 270, 315, 0];
Kr.DIRECTION_IS_FLIPPED = [!1, !1, !1, !1, !0, !0, !0, !1];
Kr.MIN_DIRECTION = 0;
Kr.MAX_DIRECTION = 7;
class Er {}
Er.GENERIC = "hd";
Er.HEAD = "head";
Er.TORSO = "torso";
Er.LEGS = "legs";
Er.HOTLOOKS = "hotlooks";
Er.WARDROBE = "wardrobe";
Er.EFFECTS = "effects";
const kr = class {}
;
let Te = kr;
Te.BODY = "bd";
Te.SHOES = "sh";
Te.LEGS = "lg";
Te.CHEST = "ch";
Te.WAIST_ACCESSORY = "wa";
Te.CHEST_ACCESSORY = "ca";
Te.HEAD = "hd";
Te.HAIR = "hr";
Te.FACE_ACCESSORY = "fa";
Te.EYE_ACCESSORY = "ea";
Te.HEAD_ACCESSORY = "ha";
Te.HEAD_ACCESSORY_EXTRA = "he";
Te.COAT_CHEST = "cc";
Te.CHEST_PRINT = "cp";
Te.LEFT_HAND_ITEM = "li";
Te.LEFT_HAND = "lh";
Te.LEFT_SLEEVE = "ls";
Te.RIGHT_HAND = "rh";
Te.RIGHT_SLEEVE = "rs";
Te.FACE = "fc";
Te.EYES = "ey";
Te.HAIR_BIG = "hrb";
Te.RIGHT_HAND_ITEM = "ri";
Te.LEFT_COAT_SLEEVE = "lc";
Te.RIGHT_COAT_SLEEVE = "rc";
Te.FIGURE_SETS = [kr.SHOES, kr.LEGS, kr.CHEST, kr.WAIST_ACCESSORY, kr.CHEST_ACCESSORY, kr.HEAD, kr.HAIR, kr.FACE_ACCESSORY, kr.EYE_ACCESSORY, kr.HEAD_ACCESSORY, kr.HEAD_ACCESSORY_EXTRA, kr.COAT_CHEST, kr.CHEST_PRINT];
class zi {}
zi.NONE = 0;
zi.GUIDE = 1;
zi.REQUESTER = 2;
class li {}
li.LARGE = "h";
li.SMALL = "sh";
class Ys {}
Ys.FULL = "full";
Ys.HEAD = "head";
Ys.BODY = "body";
class Ki {}
Ki.VERTICAL = "vertical";
Ki.SITTING = "sitting";
Ki.HORIZONTAL = "horizontal";
Ki.SWIM = "swim";
Ki.SNOWWARS_HORIZONTAL = "swhorizontal";
class Le {}
Le.DOG = 0;
Le.CAT = 1;
Le.CROCODILE = 2;
Le.TERRIER = 3;
Le.BEAR = 4;
Le.PIG = 5;
Le.LION = 6;
Le.RHINO = 7;
Le.SPIDER = 8;
Le.TURTLE = 9;
Le.CHICKEN = 10;
Le.FROG = 11;
Le.DRAGON = 12;
Le.MONSTER = 13;
Le.MONKEY = 14;
Le.HORSE = 15;
Le.MONSTERPLANT = 16;
Le.BUNNY = 17;
Le.BUNNYEVIL = 18;
Le.BUNNYDEPRESSED = 19;
Le.BUNNYLOVE = 20;
Le.PIGEONGOOD = 21;
Le.PIGEONEVIL = 22;
Le.DEMONMONKEY = 23;
Le.BABYBEAR = 24;
Le.BABYTERRIER = 25;
Le.GNOME = 26;
Le.LEPRECHAUN = 27;
Le.KITTENBABY = 28;
Le.PUPPYBABY = 29;
Le.PIGLETNBABY = 30;
Le.HALOOMPA = 31;
Le.FOOLS = 32;
Le.PTEROSAUR = 33;
Le.VELOCIRAPTOR = 34;
class sr {}
sr.NONE = 0;
sr.HEART = 1;
sr.SMILE = 2;
sr.BOBBA = 3;
sr.RELATIONSHIP_TYPES = [0, 1, 2, 3];
sr.RELATIONSHIP_NAMES = ["None", "Heart", "Smile", "Bobba"];
class ia {}
ia.HOTEL_VIEW = "hotel_view";
ia.HOME_ROOM = "home_room";
ia.NAVIGATOR = "navigator";
ia.CATALOG = "catalog";
ia.INVENTORY = "inventory";
ia.ME_MENU = "me_menu";
ia.FRIEND_LIST = "friendlist";
class Vo {}
Vo.LOVE_LOCK = 0;
Vo.CARVE_A_TREE = 1;
Vo.FRIENDS_PORTRAIT = 2;
Vo.WILD_WEST_WANTED = 3;
Vo.HABBOWEEN = 4;
class za {}
za.CATALOG = "catalog";
za.INVENTORY = "inventory";
class C {}
C.OBJECT_ROOM_ID = "object_room_id";
C.OBJECT_ACCURATE_Z_VALUE = "object_accurate_z_value";
C.TILE_CURSOR_HEIGHT = "tile_cursor_height";
C.FIGURE = "figure";
C.GENDER = "gender";
C.OWN_USER = "own_user";
C.FIGURE_CAN_STAND_UP = "figure_can_stand_up";
C.FIGURE_VERTICAL_OFFSET = "figure_vertical_offset";
C.FIGURE_TALK = "figure_talk";
C.FIGURE_DANCE = "figure_dance";
C.FIGURE_SLEEP = "figure_sleep";
C.FIGURE_BLINK = "figure_blink";
C.FIGURE_EFFECT = "figure_effect";
C.FIGURE_CARRY_OBJECT = "figure_carry_object";
C.FIGURE_USE_OBJECT = "figure_use_object";
C.FIGURE_GESTURE = "figure_gesture";
C.FIGURE_POSTURE = "figure_posture";
C.FIGURE_POSTURE_PARAMETER = "figure_posture_parameter";
C.FIGURE_HIGHLIGHT_ENABLE = "figure_highlight_enable";
C.FIGURE_HIGHLIGHT = "figure_highlight";
C.FURNITURE_PURCHASER_NAME = "furniture_purchaser_name";
C.FURNITURE_PURCHASER_FIGURE = "furniture_purchaser_figure";
C.STD = "std";
C.FIGURE_SIGN = "figure_sign";
C.FIGURE_FLAT_CONTROL = "figure_flat_control";
C.FIGURE_IS_TYPING = "figure_is_typing";
C.FIGURE_IS_MUTED = "figure_is_muted";
C.FIGURE_GAINED_EXPERIENCE = "figure_gained_experience";
C.FIGURE_EXPERIENCE_TIMESTAMP = "figure_experience_timestamp";
C.FIGURE_NUMBER_VALUE = "figure_number_value";
C.FIGURE_IS_PLAYING_GAME = "figure_is_playing_game";
C.FIGURE_GUIDE_STATUS = "figure_guide_status";
C.FIGURE_EXPRESSION = "figure_expression";
C.HEAD_DIRECTION = "head_direction";
C.FURNITURE_CUSTOM_VARIABLES = "furniture_custom_variables";
C.FURNITURE_AUTOMATIC_STATE_INDEX = "furniture_automatic_state_index";
C.FURNITURE_ALWAYS_STACKABLE = "furniture_always_stackable";
C.FURNITURE_DISABLE_PICKING_ANIMATION = "furniture_disable_picking_animation";
C.FURNITURE_DATA_FORMAT = "furniture_data_format";
C.FURNITURE_UNIQUE_SERIAL_NUMBER = "furniture_unique_serial_number";
C.FURNITURE_UNIQUE_EDITION_SIZE = "furniture_unique_edition_size";
C.FURNITURE_CRACKABLE_STATE = "furniture_crackable_state";
C.FURNITURE_CRACKABLE_HITS = "furniture_crackable_hits";
C.FURNITURE_CRACKABLE_TARGET = "furniture_crackable_target";
C.FURNITURE_CREDIT_VALUE = "furniture_credit_value";
C.FURNITURE_DATA = "furniture_data";
C.FURNITURE_ITEMDATA = "furniture_itemdata";
C.FURNITURE_COLOR = "furniture_color";
C.FURNITURE_LIFT_AMOUNT = "furniure_lift_amount";
C.FURNITURE_GUILD_CUSTOMIZED_GUILD_ID = "furniture_guild_customized_guild_id";
C.FURNITURE_GUILD_CUSTOMIZED_ASSET_NAME = "furniture_guild_customized_asset_name";
C.FURNITURE_GUILD_CUSTOMIZED_COLOR_1 = "furniture_guild_customized_color_1";
C.FURNITURE_GUILD_CUSTOMIZED_COLOR_2 = "furniture_guild_customized_color_2";
C.FURNITURE_STATE_UPDATE_TIME = "furniture_state_update_time";
C.FURNITURE_SELECTION_DISABLED = "furniture_selection_disabled";
C.FURNITURE_SIZE_X = "furniture_size_x";
C.FURNITURE_SIZE_Y = "furniture_size_y";
C.FURNITURE_SIZE_Z = "furniture_size_z";
C.FURNITURE_CENTER_X = "furniture_center_x";
C.FURNITURE_CENTER_Y = "furniture_center_y";
C.FURNITURE_CENTER_Z = "furniture_center_z";
C.FURNITURE_ALLOWED_DIRECTIONS = "furniture_allowed_directions";
C.FURNITURE_AD_URL = "furniture_ad_url";
C.FURNITURE_TYPE_ID = "furniture_type_id";
C.FURNITURE_EXTRAS = "furniture_extras";
C.FURNITURE_EXPIRY_TIME = "furniture_expiry_time";
C.FURNITURE_EXPIRTY_TIMESTAMP = "furniture_expiry_timestamp";
C.FURNITURE_REAL_ROOM_OBJECT = "furniture_real_room_object";
C.FURNITURE_IS_STICKIE = "furniture_is_stickie";
C.FURNITURE_BRANDING_IMAGE_STATUS = "furniture_branding_image_status";
C.FURNITURE_BRANDING_IMAGE_URL = "furniture_branding_image_url";
C.FURNITURE_BRANDING_URL = "furniture_branding_url";
C.FURNITURE_BRANDING_OFFSET_X = "furniture_branding_offset_x";
C.FURNITURE_BRANDING_OFFSET_Y = "furniture_branding_offset_y";
C.FURNITURE_BRANDING_OFFSET_Z = "furniture_branding_offset_z";
C.FURNITURE_BRANDING_IS_ANIMATED = "furniture_branding_is_animated";
C.FURNITURE_BADGE_IMAGE_STATUS = "furniture_badge_image_status";
C.FURNITURE_BADGE_ASSET_NAME = "furniture_badge_asset_name";
C.FURNITURE_BADGE_VISIBLE_IN_STATE = "furniture_badge_visible_in_state";
C.FURNITURE_ALPHA_MULTIPLIER = "furniture_alpha_multiplier";
C.FURNITURE_USAGE_POLICY = "furniture_usage_policy";
C.FURNITURE_OWNER_ID = "furniture_owner_id";
C.FURNITURE_OWNER_NAME = "furniture_owner_name";
C.FURNITURE_ROOM_BACKGROUND_COLOR_HUE = "furniture_room_background_color_hue";
C.FURNITURE_ROOM_BACKGROUND_COLOR_SATURATION = "furniture_room_background_color_saturation";
C.FURNITURE_ROOM_BACKGROUND_COLOR_LIGHTNESS = "furniture_room_background_color_lightness";
C.FURNITURE_USES_PLANE_MASK = "furniture_uses_plane_mask";
C.FURNITURE_PLANE_MASK_TYPE = "furniture_plane_mask_type";
C.FURNITURE_IS_VARIABLE_HEIGHT = "furniture_is_variable_height";
C.FURNITURE_VOTE_MAJORITY_RESULT = "furniture_vote_majority_result";
C.FURNITURE_VOTE_COUNTER_COUNT = "furniture_vote_counter_count";
C.FURNITURE_SOUNDBLOCK_RELATIVE_ANIMATION_SPEED = "furniture_soundblock_relative_animation_speed";
C.FURNITURE_MANNEQUIN_NAME = "furniture_mannequin_name";
C.FURNITURE_MANNEQUIN_GENDER = "furniture_mannequin_gender";
C.FURNITURE_MANNEQUIN_FIGURE = "furniture_mannequin_figure";
C.FURNITURE_HIGHSCORE_SCORE_TYPE = "furniture_highscore_score_type";
C.FURNITURE_HIGHSCORE_CLEAR_TYPE = "furniture_highscore_clear_type";
C.FURNITURE_HIGHSCORE_DATA_ENTRY_COUNT = "furniture_highscore_data_entry_count";
C.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_USERS_ = "furniture_highscore_data_entry_base_users_";
C.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_SCORE_ = "furniture_highscore_data_entry_base_score_";
C.FURNITURE_INTERNAL_LINK = "furniture_internal_link";
C.FURNITURE_CLOTHING_BOY = "furniture_clothing_boy";
C.FURNITURE_CLOTHING_GIRL = "furniture_clothing_girl";
C.FURNITURE_PLANETSYSTEM_DATA = "furniture_planetsystem_data";
C.FURNITURE_FIREWORKS_DATA = "furniture_fireworks_data";
C.PET_PALETTE_INDEX = "pet_palette_index";
C.PET_COLOR = "pet_color";
C.PET_HEAD_ONLY = "pet_head_only";
C.PET_CUSTOM_LAYER_IDS = "pet_custom_layer_ids";
C.PET_CUSTOM_PARTS_IDS = "pet_custom_part_ids";
C.PET_CUSTOM_PALETTE_IDS = "pet_custom_palette_ids";
C.PET_IS_RIDING = "pet_is_riding";
C.PET_TYPE = "pet_type";
C.PET_ALLOWED_DIRECTIONS = "pet_allowed_directions";
C.RACE = "race";
C.ROOM_MAP_DATA = "room_map_data";
C.ROOM_PLANE_MASK_XML = "room_plane_mask_xml";
C.ROOM_FLOOR_TYPE = "room_floor_type";
C.ROOM_WALL_TYPE = "room_wall_type";
C.ROOM_LANDSCAPE_TYPE = "room_landscape_type";
C.ROOM_WALL_THICKNESS = "room_wall_thickness";
C.ROOM_FLOOR_THICKNESS = "room_floor_thickness";
C.ROOM_FLOOR_HOLE_UPDATE_TIME = "room_floor_hole_update_time";
C.ROOM_FLOOR_VISIBILITY = "room_floor_visibility";
C.ROOM_WALL_VISIBILITY = "room_wall_visibility";
C.ROOM_LANDSCAPE_VISIBILITY = "room_landscape_visibility";
C.ROOM_DOOR_X = "room_door_x";
C.ROOM_DOOR_Y = "room_door_y";
C.ROOM_DOOR_Z = "room_door_z";
C.ROOM_DOOR_DIR = "room_door_dir";
C.ROOM_BACKGROUND_COLOR = "room_background_color";
C.ROOM_COLORIZE_BG_ONLY = "room_colorize_bg_only";
C.ROOM_RANDOM_SEED = "room_random_seed";
C.ROOM_WORLD_TYPE = "room_world_type";
C.ROOM_SELECTED_X = "room_selected_x";
C.ROOM_SELECTED_Y = "room_selected_y";
C.ROOM_SELECTED_Z = "room_selected_z";
C.ROOM_SELECTED_PLANE = "room_selected_plane";
C.IMAGE_QUERY_SCALE = "image_query_scale";
C.FURNITURE_FRIENDFURNI_ENGRAVING = "furniture_friendfurni_engraving_type";
C.SESSION_URL_PREFIX = "session_url_prefix";
C.SESSION_CURRENT_USER_ID = "session_current_user_id";
class TT {}
TT.UNIQUE_SET = 256;
class Qa {
    constructor()
    {
        this._flags = 0,
        this._uniqueNumber = 0,
        this._uniqueSeries = 0
    }
    parseWrapper(e)
    {
        (this._flags & TT.UNIQUE_SET) > 0 && (this._uniqueNumber = e.readInt(), this._uniqueSeries = e.readInt())
    }
    initializeFromRoomObjectModel(e)
    {
        this._uniqueNumber = e.getValue(C.FURNITURE_UNIQUE_SERIAL_NUMBER),
        this._uniqueSeries = e.getValue(C.FURNITURE_UNIQUE_EDITION_SIZE)
    }
    writeRoomObjectModel(e)
    {
        e && (e.setValue(C.FURNITURE_UNIQUE_SERIAL_NUMBER, this._uniqueNumber), e.setValue(C.FURNITURE_UNIQUE_EDITION_SIZE, this._uniqueSeries))
    }
    getLegacyString()
    {
        return ""
    }
    compare(e)
    {
        return !1
    }
    get state()
    {
        const e = parseInt(this.getLegacyString());
        return isNaN(e) ? 0 : e
    }
    get isUnique()
    {
        return this._uniqueSeries > 0
    }
    get uniqueNumber()
    {
        return this._uniqueNumber
    }
    set uniqueNumber(e)
    {
        this._uniqueNumber = e
    }
    get uniqueSeries()
    {
        return this._uniqueSeries
    }
    set uniqueSeries(e)
    {
        this._uniqueSeries = e
    }
    get rarityLevel()
    {
        return -1
    }
    get flags()
    {
        return this._flags
    }
    set flags(e)
    {
        this._flags = e
    }
}
class Rr {}
Rr.LEGACY_KEY = 0;
Rr.MAP_KEY = 1;
Rr.STRING_KEY = 2;
Rr.VOTE_KEY = 3;
Rr.EMPTY_KEY = 4;
Rr.NUMBER_KEY = 5;
Rr.HIGHSCORE_KEY = 6;
Rr.CRACKABLE_KEY = 7;
const RT = class  extends Qa{
    constructor()
    {
        super(),
        this._state = "",
        this._hits = 0,
        this._target = 0
    }
    parseWrapper(s)
    {
        s && (this._state = s.readString(), this._hits = s.readInt(), this._target = s.readInt(), super.parseWrapper(s))
    }
    initializeFromRoomObjectModel(s)
    {
        super.initializeFromRoomObjectModel(s),
        this._state = s.getValue(C.FURNITURE_CRACKABLE_STATE),
        this._hits = s.getValue(C.FURNITURE_CRACKABLE_HITS),
        this._target = s.getValue(C.FURNITURE_CRACKABLE_TARGET)
    }
    writeRoomObjectModel(s)
    {
        super.writeRoomObjectModel(s),
        s.setValue(C.FURNITURE_DATA_FORMAT, RT.FORMAT_KEY),
        s.setValue(C.FURNITURE_CRACKABLE_STATE, this._state),
        s.setValue(C.FURNITURE_CRACKABLE_HITS, this._hits),
        s.setValue(C.FURNITURE_CRACKABLE_TARGET, this._target)
    }
    getLegacyString()
    {
        return this._state
    }
    compare(s)
    {
        return !0
    }
    get hits()
    {
        return this._hits
    }
    get target()
    {
        return this._target
    }
}
;
let sg = RT;
sg.FORMAT_KEY = Rr.CRACKABLE_KEY;
const OT = class  extends Qa{
    parseWrapper(s)
    {
        s && (this._state = "", super.parseWrapper(s))
    }
    writeRoomObjectModel(s)
    {
        super.writeRoomObjectModel(s),
        s.setValue(C.FURNITURE_DATA_FORMAT, OT.FORMAT_KEY)
    }
    getLegacyString()
    {
        return this._state
    }
    compare(s)
    {
        return super.compare(s)
    }
}
;
let rg = OT;
rg.FORMAT_KEY = Rr.EMPTY_KEY;
class cp {
    constructor()
    {
        this._score = -1,
        this._users = []
    }
    get score()
    {
        return this._score
    }
    set score(e)
    {
        this._score = e
    }
    get users()
    {
        return this._users
    }
    set users(e)
    {
        this._users = e
    }
    addUsername(e)
    {
        this._users.push(e)
    }
}
const ST = class  extends Qa{
    constructor()
    {
        super(),
        this._state = "",
        this._scoreType = -1,
        this._clearType = -1,
        this._entries = []
    }
    parseWrapper(s)
    {
        if (!s)
            return;
        this._state = s.readString(),
        this._scoreType = s.readInt(),
        this._clearType = s.readInt();
        let e = s.readInt();
        for (; e > 0;) {
            const t = new cp;
            t.score = s.readInt();
            let r = s.readInt();
            for (; r > 0;)
                t.addUsername(s.readString()),
                r--;
            this._entries.push(t),
            e--
        }
        super.parseWrapper(s)
    }
    initializeFromRoomObjectModel(s)
    {
        this._scoreType = s.getValue(C.FURNITURE_HIGHSCORE_SCORE_TYPE),
        this._clearType = s.getValue(C.FURNITURE_HIGHSCORE_CLEAR_TYPE),
        this._entries = [];
        const e = s.getValue(C.FURNITURE_HIGHSCORE_DATA_ENTRY_COUNT);
        let t = 0;
        for (; t < e;) {
            const r = new cp;
            r.score = s.getValue(C.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_SCORE_ + t),
            r.users = s.getValue(C.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_USERS_ + t),
            this._entries.push(r),
            t++
        }
        super.initializeFromRoomObjectModel(s)
    }
    writeRoomObjectModel(s)
    {
        if (super.writeRoomObjectModel(s), s.setValue(C.FURNITURE_DATA_FORMAT, ST.FORMAT_KEY), s.setValue(C.FURNITURE_HIGHSCORE_SCORE_TYPE, this._scoreType), s.setValue(C.FURNITURE_HIGHSCORE_CLEAR_TYPE, this._clearType), this._entries) {
            s.setValue(C.FURNITURE_HIGHSCORE_DATA_ENTRY_COUNT, this._entries.length);
            let e = 0;
            for (; e < this._entries.length;) {
                const t = this._entries[e];
                s.setValue(C.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_SCORE_ + e, t.score),
                s.setValue(C.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_USERS_ + e, t.users),
                e++
            }
        }
    }
    getLegacyString()
    {
        return this._state
    }
    get entries()
    {
        return this._entries
    }
    get clearType()
    {
        return this._clearType
    }
    get scoreType()
    {
        return this._scoreType
    }
}
;
let ig = ST;
ig.FORMAT_KEY = Rr.HIGHSCORE_KEY;
const CT = class  extends Qa{
    constructor()
    {
        super(),
        this._data = ""
    }
    parseWrapper(s)
    {
        s && (this._data = s.readString(), super.parseWrapper(s))
    }
    initializeFromRoomObjectModel(s)
    {
        super.initializeFromRoomObjectModel(s),
        this._data = s.getValue(C.FURNITURE_DATA)
    }
    writeRoomObjectModel(s)
    {
        super.writeRoomObjectModel(s),
        s.setValue(C.FURNITURE_DATA_FORMAT, CT.FORMAT_KEY),
        s.setValue(C.FURNITURE_DATA, this._data)
    }
    getLegacyString()
    {
        return this._data
    }
    compare(s)
    {
        return this._data === s.getLegacyString()
    }
    setString(s)
    {
        this._data = s
    }
}
;
let Lr = CT;
Lr.FORMAT_KEY = Rr.LEGACY_KEY;
const ih = class  extends Qa{
    constructor()
    {
        super(),
        this._data = {}
    }
    parseWrapper(s)
    {
        if (!s)
            return;
        this._data = {};
        const e = s.readInt();
        if (e)
            for (let t = 0; t < e; t++)
                this._data[s.readString()] = s.readString();
        super.parseWrapper(s)
    }
    initializeFromRoomObjectModel(s)
    {
        super.initializeFromRoomObjectModel(s),
        this._data = s.getValue(C.FURNITURE_DATA) || {}
    }
    writeRoomObjectModel(s)
    {
        super.writeRoomObjectModel(s),
        s.setValue(C.FURNITURE_DATA_FORMAT, ih.FORMAT_KEY),
        s.setValue(C.FURNITURE_DATA, this._data)
    }
    getLegacyString()
    {
        if (!this._data)
            return "";
        const s = this._data[ih.STATE];
        return s ?? ""
    }
    compare(s)
    {
        return !1
    }
    getValue(s)
    {
        return this._data[s]
    }
    get rarityLevel()
    {
        if (!this._data)
            return -1;
        const s = this._data[ih.RARITY];
        return s == null ? -1 : parseInt(s)
    }
    get data()
    {
        return this._data
    }
}
;
let Ka = ih;
Ka.FORMAT_KEY = Rr.MAP_KEY;
Ka.STATE = "state";
Ka.RARITY = "rarity";
const nh = class  extends Qa{
    constructor()
    {
        super(),
        this._data = []
    }
    parseWrapper(s)
    {
        if (!s)
            return;
        this._data = [];
        const e = s.readInt();
        if (e)
            for (let t = 0; t < e; t++)
                this._data.push(s.readInt());
        super.parseWrapper(s)
    }
    initializeFromRoomObjectModel(s)
    {
        super.initializeFromRoomObjectModel(s),
        this._data = s.getValue(C.FURNITURE_DATA)
    }
    writeRoomObjectModel(s)
    {
        super.writeRoomObjectModel(s),
        s.setValue(C.FURNITURE_DATA_FORMAT, nh.FORMAT_KEY),
        s.setValue(C.FURNITURE_DATA, this._data)
    }
    getLegacyString()
    {
        return !this._data || !this._data.length ? "" : this._data[nh.STATE].toString()
    }
    compare(s)
    {
        if (!(s instanceof nh))
            return !1;
        let e = 0;
        for (; e < this._data.length;) {
            if (e !== 0) {
                if (this._data[e] !== s.getValue(e))
                    return !1
            }
            e++
        }
        return !0
    }
    getValue(s)
    {
        if (!this._data || !this._data.length)
            return -1;
        const e = this._data[s];
        return e ?? -1
    }
}
;
let kc = nh;
kc.FORMAT_KEY = Rr.NUMBER_KEY;
kc.STATE = 0;
const ah = class  extends Qa{
    constructor()
    {
        super(),
        this._data = []
    }
    parseWrapper(s)
    {
        if (!s)
            return;
        this._data = [];
        const e = s.readInt();
        if (e)
            for (let t = 0; t < e; t++)
                this._data.push(s.readString());
        super.parseWrapper(s)
    }
    initializeFromRoomObjectModel(s)
    {
        super.initializeFromRoomObjectModel(s),
        this._data = s.getValue(C.FURNITURE_DATA)
    }
    writeRoomObjectModel(s)
    {
        super.writeRoomObjectModel(s),
        s.setValue(C.FURNITURE_DATA_FORMAT, ah.FORMAT_KEY),
        s.setValue(C.FURNITURE_DATA, this._data)
    }
    getLegacyString()
    {
        return !this._data || !this._data.length ? "" : this._data[ah.STATE]
    }
    compare(s)
    {
        if (!(s instanceof ah))
            return !1;
        let e = 0;
        for (; e < this._data.length;) {
            if (e !== 0) {
                if (this._data[e] !== s.getValue(e))
                    return !1
            }
            e++
        }
        return !0
    }
    getValue(s)
    {
        return this._data[s] || ""
    }
    setValue(s)
    {
        this._data = s
    }
}
;
let en = ah;
en.FORMAT_KEY = Rr.STRING_KEY;
en.STATE = 0;
const AT = class  extends Qa{
    constructor()
    {
        super(),
        this._state = "",
        this._result = 0
    }
    parseWrapper(s)
    {
        s && (this._state = s.readString(), this._result = s.readInt(), super.parseWrapper(s))
    }
    writeRoomObjectModel(s)
    {
        super.writeRoomObjectModel(s),
        s.setValue(C.FURNITURE_DATA_FORMAT, AT.FORMAT_KEY);
        const e = {};
        e.S = this._state,
        e.R = this._result.toString(),
        s.setValue(C.FURNITURE_DATA, e)
    }
    getLegacyString()
    {
        return this._state
    }
    compare(s)
    {
        return !0
    }
    setString(s)
    {
        this._state = s
    }
    get result()
    {
        return this._result
    }
}
;
let Ah = AT;
Ah.FORMAT_KEY = Rr.VOTE_KEY;
class Tn {
    static getData(e)
    {
        let t = null;
        switch (e & 255) {
        case sg.FORMAT_KEY:
            t = new sg;
            break;
        case rg.FORMAT_KEY:
            t = new rg;
            break;
        case ig.FORMAT_KEY:
            t = new ig;
            break;
        case Lr.FORMAT_KEY:
            t = new Lr;
            break;
        case Ka.FORMAT_KEY:
            t = new Ka;
            break;
        case kc.FORMAT_KEY:
            t = new kc;
            break;
        case en.FORMAT_KEY:
            t = new en;
            break;
        case Ah.FORMAT_KEY:
            t = new Ah;
            break
        }
        return t ? (t.flags = e & 65280, t) : null
    }
}
class V {}
V.MINIMUM = -2;
V.ROOM = 0;
V.FLOOR = 10;
V.WALL = 20;
V.UNIT = 100;
V.CURSOR = 200;
class se {}
se.FURNITURE_BASIC = "furniture_basic";
se.FURNITURE_MULTISTATE = "furniture_multistate";
se.FURNITURE_MULTIHEIGHT = "furniture_multiheight";
se.FURNITURE_RANDOMSTATE = "furniture_randomstate";
se.FURNITURE_PLACEHOLDER = "furniture_placeholder";
se.FURNITURE_CREDIT = "furniture_credit";
se.FURNITURE_STICKIE = "furniture_stickie";
se.FURNITURE_PRESENT = "furniture_present";
se.FURNITURE_TROPHY = "furniture_trophy";
se.FURNITURE_ECOTRON_BOX = "furniture_ecotron_box";
se.FURNITURE_DICE = "furniture_dice";
se.FURNITURE_HOCKEY_SCORE = "furniture_hockey_score";
se.FURNITURE_HABBOWHEEL = "furniture_habbowheel";
se.FURNITURE_ONE_WAY_DOOR = "furniture_one_way_door";
se.FURNITURE_PLANET_SYSTEM = "furniture_planet_system";
se.FURNITURE_WINDOW = "furniture_window";
se.FURNITURE_EXTERNAL_IMAGE_WALLITEM = "furniture_external_image_wallitem";
se.FURNITURE_ROOMDIMMER = "furniture_roomdimmer";
se.FURNITURE_SOUND_MACHINE = "furniture_sound_machine";
se.FURNITURE_JUKEBOX = "furniture_jukebox";
se.FURNITURE_CRACKABLE = "furniture_crackable";
se.FURNITURE_PUSHABLE = "furniture_pushable";
se.FURNITURE_CLOTHING_CHANGE = "furniture_clothing_change";
se.FURNITURE_COUNTER_CLOCK = "furniture_counter_clock";
se.FURNITURE_SCORE = "furniture_score";
se.FURNITURE_ES = "furniture_es";
se.FURNITURE_FIREWORKS = "furniture_fireworks";
se.FURNITURE_SONG_DISK = "furniture_song_disk";
se.FURNITURE_BB = "furniture_bb";
se.FURNITURE_BG = "furniture_bg";
se.FURNITURE_WELCOME_GIFT = "furniture_welcome_gift";
se.FURNITURE_FLOOR_HOLE = "furniture_floor_hole";
se.FURNITURE_MANNEQUIN = "furniture_mannequin";
se.FURNITURE_GUILD_CUSTOMIZED = "furniture_guild_customized";
se.FURNITURE_GROUP_FORUM_TERMINAL = "furniture_group_forum_terminal";
se.FURNITURE_PET_CUSTOMIZATION = "furniture_pet_customization";
se.FURNITURE_CUCKOO_CLOCK = "furniture_cuckoo_clock";
se.FURNITURE_VOTE_COUNTER = "furniture_vote_counter";
se.FURNITURE_VOTE_MAJORITY = "furniture_vote_majority";
se.FURNITURE_SOUNDBLOCK = "furniture_soundblock";
se.FURNITURE_RANDOM_TELEPORT = "furniture_random_teleport";
se.FURNITURE_MONSTERPLANT_SEED = "furniture_monsterplant_seed";
se.FURNITURE_PURCHASABLE_CLOTHING = "furniture_purchasable_clothing";
se.FURNITURE_BACKGROUND_COLOR = "furniture_background_color";
se.FURNITURE_MYSTERYBOX = "furniture_mysterybox";
se.FURNITURE_EFFECTBOX = "furniture_effectbox";
se.FURNITURE_MYSTERYTROPHY = "furniture_mysterytrophy";
se.FURNITURE_ACHIEVEMENT_RESOLUTION = "furniture_achievement_resolution";
se.FURNITURE_LOVELOCK = "furniture_lovelock";
se.FURNITURE_WILDWEST_WANTED = "furniture_wildwest_wanted";
se.FURNITURE_HWEEN_LOVELOCK = "furniture_hween_lovelock";
se.FURNITURE_BADGE_DISPLAY = "furniture_badge_display";
se.FURNITURE_HIGH_SCORE = "furniture_high_score";
se.FURNITURE_INTERNAL_LINK = "furniture_internal_link";
se.FURNITURE_CUSTOM_STACK_HEIGHT = "furniture_custom_stack_height";
se.FURNITURE_YOUTUBE = "furniture_youtube";
se.FURNITURE_RENTABLE_SPACE = "furniture_rentable_space";
se.FURNITURE_CHANGE_STATE_WHEN_STEP_ON = "furniture_change_state_when_step_on";
se.FURNITURE_VIMEO = "furniture_vimeo";
se.FURNITURE_EDITABLE_INTERNAL_LINK = "furniture_editable_internal_link";
se.FURNITURE_EDITABLE_ROOM_LINK = "furniture_editable_room_link";
se.FURNITURE_CRAFTING_GIZMO = "furniture_crafting_gizmo";
se.ROOM = "room";
se.USER = "user";
se.BOT = "bot";
se.RENTABLE_BOT = "rentable_bot";
se.PET = "pet";
se.TILE_CURSOR = "tile_cursor";
se.SELECTION_ARROW = "selection_arrow";
se.GAME_SNOWBALL = "game_snowball";
se.GAME_SNOWSPLASH = "game_snowsplash";
class Ne {}
Ne.OBJECT_UNDEFINED = "OBJECT_UNDEFINED";
Ne.OBJECT_MOVE = "OBJECT_MOVE";
Ne.OBJECT_PLACE = "OBJECT_PLACE";
Ne.OBJECT_ROTATE_POSITIVE = "OBJECT_ROTATE_POSITIVE";
Ne.OBJECT_ROTATE_NEGATIVE = "OBJECT_ROTATE_NEGATIVE";
Ne.OBJECT_MOVE_TO = "OBJECT_MOVE_TO";
Ne.OBJECT_PLACE_TO = "OBJECT_PLACE_TO";
Ne.OBJECT_PICKUP = "OBJECT_PICKUP";
Ne.OBJECT_PICKUP_BOT = "OBJECT_PICKUP_BOT";
Ne.OBJECT_PICKUP_PET = "OBJECT_PICKUP_PET";
Ne.OBJECT_EJECT = "OBJECT_EJECT";
Ne.OBJECT_SAVE_STUFF_DATA = "OBJECT_SAVE_STUFF_DATA";
class yt {}
yt.USER = 1;
yt.PET = 2;
yt.BOT = 3;
yt.RENTABLE_BOT = 4;
const fo = class {
    static getTypeNumber(s)
    {
        return fo.AVATAR_TYPES[s]
    }
    static getTypeString(s)
    {
        for (const e in fo.AVATAR_TYPES)
            if (e && fo.AVATAR_TYPES[e] === s)
                return e;
        return null
    }
    static getRealType(s)
    {
        switch (s) {
        case fo.BOT:
        case fo.RENTABLE_BOT:
            return fo.USER;
        default:
            return s
        }
    }
}
;
let it = fo;
it.USER = "user";
it.PET = "pet";
it.BOT = "bot";
it.RENTABLE_BOT = "rentable_bot";
it.MONSTER_PLANT = "monsterplant";
it.AVATAR_TYPES = {
    user: 1,
    pet: 2,
    bot: 3,
    rentable_bot: 4
};
class ae {}
ae.FURNITURE_STATIC = "furniture_static";
ae.FURNITURE_ANIMATED = "furniture_animated";
ae.FURNITURE_RESETTING_ANIMATED = "furniture_resetting_animated";
ae.FURNITURE_POSTER = "furniture_poster";
ae.FURNITURE_EXTERNAL_IMAGE = "furniture_external_image";
ae.FURNITURE_HABBOWHEEL = "furniture_habbowheel";
ae.FURNITURE_VAL_RANDOMIZER = "furniture_val_randomizer";
ae.FURNITURE_BOTTLE = "furniture_bottle";
ae.FURNITURE_PLANET_SYSTEM = "furniture_planet_system";
ae.FURNITURE_QUEUE_TILE = "furniture_queue_tile";
ae.FURNITURE_PARTY_BEAMER = "furniture_party_beamer";
ae.FURNITURE_CUBOID = "furniture_cuboid";
ae.FURNITURE_GIFT_WRAPPED = "furniture_gift_wrapped";
ae.FURNITURE_GIFT_WRAPPED_FIREWORKS = "furniture_gift_wrapped_fireworks";
ae.FURNITURE_COUNTER_CLOCK = "furniture_counter_clock";
ae.FURNITURE_WATER_AREA = "furniture_water_area";
ae.FURNITURE_SCORE_BOARD = "furniture_score_board";
ae.FURNITURE_FIREWORKS = "furniture_fireworks";
ae.FURNITURE_BB = "furniture_bb";
ae.FURNITURE_ISOMETRIC_BB = "furniture_isometric_bb";
ae.FURNITURE_BG = "furniture_bg";
ae.FURNITURE_STICKIE = "furniture_stickie";
ae.FURNITURE_MANNEQUIN = "furniture_mannequin";
ae.FURNITURE_GUILD_CUSTOMIZED = "furniture_guild_customized";
ae.FURNITURE_GUILD_ISOMETRIC_BADGE = "furniture_guild_isometric_badge";
ae.FURNITURE_VOTE_COUNTER = "furniture_vote_counter";
ae.FURNITURE_VOTE_MAJORITY = "furniture_vote_majority";
ae.FURNITURE_SOUNDBLOCK = "furniture_soundblock";
ae.FURNITURE_BADGE_DISPLAY = "furniture_badge_display";
ae.FURNITURE_YOUTUBE = "furniture_youtube";
ae.FURNITURE_BUILDER_PLACEHOLDER = "furniture_builder_placeholder";
ae.ROOM = "room";
ae.USER = "user";
ae.PET_ANIMATED = "pet_animated";
ae.BOT = "bot";
ae.RENTABLE_BOT = "rentable_bot";
ae.TILE_CURSOR = "tile_cursor";
class Kn {
    constructor(e, t, r, i=null)
    {
        this._id = e,
        this._location = t,
        this._targetLocation = r,
        this._movementType = i
    }
    get id()
    {
        return this._id
    }
    get location()
    {
        return this._location
    }
    get targetLocation()
    {
        return this._targetLocation
    }
    get movementType()
    {
        return this._movementType
    }
}
Kn.MOVE = "mv";
Kn.SLIDE = "sld";
class zf {}
zf.KICKED_OUT_OF_ROOM = 4008;
zf.STRIP_LOCKED_FOR_TRADING = -13001;
class yl {}
yl.OLD_IDENTITY = 0;
yl.NEW_IDENTITY = 1;
yl.REAL_NOOB = 2;
class ct {}
ct.NONE = 0;
ct.GUEST = 1;
ct.GUILD_MEMBER = 2;
ct.GUILD_ADMIN = 3;
ct.ROOM_OWNER = 4;
ct.MODERATOR = 5;
const oh = class {
    static getLocalizationKey(s)
    {
        switch (s) {
        case oh.FREE_TRADING:
            return "${trading.mode.free}";
        case oh.ROOM_CONTROLLER_REQUIRED:
            return "${trading.mode.controller}";
        case oh.NO_TRADING:
            return "${trading.mode.not.allowed}"
        }
        return ""
    }
}
;
let Po = oh;
Po.NO_TRADING = 0;
Po.ROOM_CONTROLLER_REQUIRED = 1;
Po.FREE_TRADING = 2;
class xr {}
xr.SUPER_USER = 9;
xr.ADMINISTRATOR = 8;
xr.COMMUNITY = 7;
xr.PLAYER_SUPPORT = 6;
xr.MODERATOR = 5;
xr.EMPLOYEE = 4;
xr.BUS_PARTNER = 3;
xr.PARTNER = 2;
xr.CELEBRITY = 1;
xr.NONE = 0;
var Ao = (s => (s.FLOOR = "S", s.WALL = "I", s.EFFECT = "E", s.BADGE = "B", s.ROBOT = "R", s.HABBO_CLUB = "H", s.PET = "P", s))(Ao || {});
class Fi {}
Fi.MATCH_ALL_PIXELS = -1;
Fi.MATCH_OPAQUE_PIXELS = 128;
Fi.MATCH_NOTHING = 256;
class Dr {}
Dr.DEFAULT = 1;
Dr.ROOM_PLANE = 2;
Dr.AVATAR = 3;
Dr.AVATAR_OWN = 4;
class NT {}
class w {
    constructor(e=0, t=0, r=0)
    {
        this._x = e,
        this._y = t,
        this._z = r,
        this._length = NaN
    }
    static sum(e, t)
    {
        return !e || !t ? null : new w(e.x + t.x, e.y + t.y, e.z + t.z)
    }
    static dif(e, t)
    {
        return !e || !t ? null : new w(e.x - t.x, e.y - t.y, e.z - t.z)
    }
    static product(e, t)
    {
        return e ? new w(e.x * t, e.y * t, e.z * t) : null
    }
    static dotProduct(e, t)
    {
        return !e || !t ? 0 : e.x * t.x + e.y * t.y + e.z * t.z
    }
    static crossProduct(e, t)
    {
        return !e || !t ? null : new w(e.y * t.z - e.z * t.y, e.z * t.x - e.x * t.z, e.x * t.y - e.y * t.x)
    }
    static scalarProjection(e, t)
    {
        if (!e || !t)
            return -1;
        const r = t.length;
        return r > 0 ? (e.x * t.x + e.y * t.y + e.z * t.z) / r : -1
    }
    static cosAngle(e, t)
    {
        if (!e || !t)
            return 0;
        const r = e.length * t.length;
        return r ? w.dotProduct(e, t) / r : 0
    }
    static isEqual(e, t)
    {
        return !(!e || !t || e.x !== t.x || e.y !== t.y || e.z !== t.z)
    }
    negate()
    {
        this._x = -this._x,
        this._y = -this._y,
        this._z = -this._z
    }
    add(e)
    {
        e && (this._x += e.x, this._y += e.y, this._z += e.z, this._length = NaN)
    }
    subtract(e)
    {
        e && (this._x -= e.x, this._y -= e.y, this._z -= e.z, this._length = NaN)
    }
    multiply(e)
    {
        this._x *= e,
        this._y *= e,
        this._z *= e,
        this._length = NaN
    }
    divide(e)
    {
        e && (this._x /= e, this._y /= e, this._z /= e, this._length = NaN)
    }
    assign(e)
    {
        e && (this._x = e.x, this._y = e.y, this._z = e.z, this._length = NaN)
    }
    get x()
    {
        return this._x
    }
    set x(e)
    {
        this._x = e,
        this._length = NaN
    }
    get y()
    {
        return this._y
    }
    set y(e)
    {
        this._y = e,
        this._length = NaN
    }
    get z()
    {
        return this._z
    }
    set z(e)
    {
        this._z = e,
        this._length = NaN
    }
    get length()
    {
        return isNaN(this._length) && (this._length = Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z)), this._length
    }
    toString()
    {
        return `[Vector3d: ${this._x}, ${this._y}, ${this._z}]`
    }
}
class le {}
le.MOUSE_CLICK = "click";
le.DOUBLE_CLICK = "double_click";
le.MOUSE_MOVE = "mousemove";
le.MOUSE_DOWN = "mousedown";
le.MOUSE_DOWN_LONG = "mousedown_long";
le.MOUSE_UP = "mouseup";
le.ROLL_OVER = "mouseover";
le.ROLL_OUT = "mouseout";
le.RIGHT_CLICK = "contextmenu";
class tr {}
tr.TOUCH_START = "touchstart";
tr.TOUCH_MOVE = "touchmove";
tr.TOUCH_CANCEL = "touchcancel";
tr.TOUCH_END = "touchend";
tr.TOUCH_LONG = "touchlong";
const la = class {
    constructor(s)
    {
        this._ordinal = s
    }
    get ordinal()
    {
        return this._ordinal
    }
    equals(s)
    {
        return s && s._ordinal == this._ordinal
    }
}
;
let rr = la;
rr.NONE = new la(0);
rr.WAVE = new la(1);
rr.BLOW = new la(2);
rr.LAUGH = new la(3);
rr.CRY = new la(4);
rr.IDLE = new la(5);
rr.JUMP = new la(6);
rr.RESPECT = new la(7);
class xt {}
xt.DUMMY = "DUMMY";
xt.FRIEND_FURNITURE = "FRIEND_FURNITURE";
xt.MONSTERPLANT_SEED = "MONSTERPLANT_SEED";
xt.MYSTERY_BOX = "MYSTERY_BOX";
xt.EFFECT_BOX = "EFFECT_BOX";
xt.MYSTERY_TROPHY = "MYSTERY_TROPHY";
xt.RANDOM_TELEPORT = "RANDOM_TELEPORT";
xt.PURCHASABLE_CLOTHING = "PURCHASABLE_CLOTHING";
xt.GENERIC_USABLE = "GENERIC_USABLE";
class ve {}
ve.CHAT_WIDGET = "RWE_CHAT_WIDGET";
ve.INFOSTAND = "RWE_INFOSTAND";
ve.ME_MENU = "RWE_ME_MENU";
ve.CHAT_INPUT_WIDGET = "RWE_CHAT_INPUT_WIDGET";
ve.FURNI_PLACEHOLDER = "RWE_FURNI_PLACEHOLDER";
ve.FURNI_CREDIT_WIDGET = "RWE_FURNI_CREDIT_WIDGET";
ve.FURNI_STICKIE_WIDGET = "RWE_FURNI_STICKIE_WIDGET";
ve.FURNI_TROPHY_WIDGET = "RWE_FURNI_TROPHY_WIDGET";
ve.FURNI_LOVELOCK_WIDGET = "RWE_FURNI_LOVELOCK_WIDGET";
ve.FURNI_PRESENT_WIDGET = "RWE_FURNI_PRESENT_WIDGET";
ve.FURNI_ECOTRONBOX_WIDGET = "RWE_FURNI_ECOTRONBOX_WIDGET";
ve.FURNI_PET_PACKAGE_WIDGET = "RWE_FURNI_PET_PACKAGE_WIDGET";
ve.PLAYLIST_EDITOR_WIDGET = "RWE_PLAYLIST_EDITOR_WIDGET";
ve.DOORBELL = "RWE_DOORBELL";
ve.LOADINGBAR = "RWE_LOADINGBAR";
ve.ROOM_QUEUE = "RWE_ROOM_QUEUE";
ve.ROOM_POLL = "RWE_ROOM_POLL";
ve.ROOM_VOTE = "RWE_ROOM_VOTE";
ve.USER_CHOOSER = "RWE_USER_CHOOSER";
ve.FURNI_CHOOSER = "RWE_FURNI_CHOOSER";
ve.ROOM_DIMMER = "RWE_ROOM_DIMMER";
ve.FRIEND_REQUEST = "RWE_FRIEND_REQUEST";
ve.CLOTHING_CHANGE = "RWE_CLOTHING_CHANGE";
ve.CONVERSION_TRACKING = "RWE_CONVERSION_TRACKING";
ve.USER_NOTIFICATION = "RWE_USER_NOTIFICATION";
ve.FRIENDS_BAR = "RWE_FRIENDS_BAR";
ve.PURSE_WIDGET = "RWE_PURSE_WIDGET";
ve.AVATAR_INFO = "RWE_AVATAR_INFO";
ve.WELCOME_GIFT = "RWE_WELCOME_GIFT";
ve.SPAMWALL_POSTIT_WIDGET = "RWE_SPAMWALL_POSTIT_WIDGET";
ve.EFFECTS = "RWE_EFFECTS";
ve.MANNEQUIN = "RWE_MANNEQUIN";
ve.FURNITURE_CONTEXT_MENU = "RWE_FURNITURE_CONTEXT_MENU";
ve.LOCATION_WIDGET = "RWE_LOCATION_WIDGET";
ve.CAMERA = "RWE_CAMERA";
ve.ROOM_THUMBNAIL_CAMERA = "RWE_ROOM_THUMBNAIL_CAMERA";
ve.ROOM_BACKGROUND_COLOR = "RWE_ROOM_BACKGROUND_COLOR";
ve.CUSTOM_USER_NOTIFICATION = "RWE_CUSTOM_USER_NOTIFICATION";
ve.FURNI_ACHIEVEMENT_RESOLUTION_ENGRAVING = "RWE_FURNI_ACHIEVEMENT_RESOLUTION_ENGRAVING";
ve.FRIEND_FURNI_CONFIRM = "RWE_FRIEND_FURNI_CONFIRM";
ve.FRIEND_FURNI_ENGRAVING = "RWE_FRIEND_FURNI_ENGRAVING";
ve.HIGH_SCORE_DISPLAY = "RWE_HIGH_SCORE_DISPLAY";
ve.INTERNAL_LINK = "RWE_INTERNAL_LINK";
ve.CUSTOM_STACK_HEIGHT = "RWE_CUSTOM_STACK_HEIGHT";
ve.YOUTUBE = "RWE_YOUTUBE";
ve.RENTABLESPACE = "RWE_RENTABLESPACE";
ve.VIMEO = "RWE_VIMEO";
ve.ROOM_TOOLS = "RWE_ROOM_TOOLS";
ve.EXTERNAL_IMAGE = "RWE_EXTERNAL_IMAGE";
ve.WORD_QUIZZ = "RWE_WORD_QUIZZ";
ve.UI_HELP_BUBBLE = "RWE_UI_HELP_BUBBLE";
ve.ROOM_LINK = "RWE_ROOM_LINK";
ve.CRAFTING = "RWE_CRAFTING";
ve.ROOMGAME_CHECKERS = "RWE_GAME_CHECKERS";
class Zt {}
Zt.INFOSTAND_EXTRA_PARAM = "RWEIEP_INFOSTAND_EXTRA_PARAM";
Zt.JUKEBOX = "RWEIEP_JUKEBOX";
Zt.USABLE_PRODUCT = "RWEIEP_USABLE_PRODUCT";
Zt.SONGDISK = "RWEIEP_SONGDISK";
Zt.CRACKABLE_FURNI = "RWEIEP_CRACKABLE_FURNI";
Zt.BRANDING_OPTIONS = "RWEIEP_BRANDING_OPTIONS";
Zt.USABLE = "RWEIEP_USABLE";
class Vc {}
Vc.NOBODY = 0;
Vc.CONTROLLER = 1;
Vc.EVERYBODY = 2;
class qn {}
qn.NORMAL = 0;
qn.GENERIC = 1;
qn.BOT = 2;
class ei {
    constructor()
    {
        this._isDisposed = !1,
        this._isDisposing = !1
    }
    dispose()
    {
        this._isDisposed || this._isDisposing || (this._isDisposing = !0, this.onDispose(), this._isDisposed = !0, this._isDisposing = !1)
    }
    onDispose() {}
    get disposed()
    {
        return this._isDisposed
    }
    get isDisposing()
    {
        return this._isDisposing
    }
}
class ti extends ei {
    constructor()
    {
        super(),
        this._listeners = new Map
    }
    onDispose()
    {
        this.removeAllListeners(),
        super.onDispose()
    }
    addEventListener(e, t)
    {
        if (!e || !t)
            return;
        const r = this._listeners.get(e);
        if (!r) {
            this._listeners.set(e, [t]);
            return
        }
        r.push(t)
    }
    removeEventListener(e, t)
    {
        if (!e || !t)
            return;
        const r = this._listeners.get(e);
        if (!(!r || !r.length)) {
            for (const [i, n] of r.entries())
                if (!(!n || n !== t)) {
                    r.splice(i, 1),
                    r.length || this._listeners.delete(e);
                    return
                }
        }
    }
    dispatchEvent(e)
    {
        return e ? (pe.events("Dispatched Event", e.type), this.processEvent(e), !0) : !1
    }
    processEvent(e)
    {
        const t = this._listeners.get(e.type);
        if (!t || !t.length)
            return;
        const r = [];
        for (const i of t)
            i && r.push(i);
        for (; r.length;) {
            const i = r.shift();
            try {
                i(e)
            } catch (n) {
                pe.error(n.stack);
                return
            }
        }
    }
    removeAllListeners()
    {
        this._listeners.clear()
    }
}
class bn extends ei {
    constructor()
    {
        super(),
        this._events = new ti,
        this._isLoaded = !1,
        this._isLoading = !1
    }
    init()
    {
        this._isLoaded || this._isLoading || this.isDisposing || (this._isLoading = !0, this.onInit(), this._isLoaded = !0, this._isLoading = !1)
    }
    onInit() {}
    onDispose()
    {
        this._events && this._events.dispose(),
        super.onDispose()
    }
    reload()
    {
        this.dispose(),
        this.init()
    }
    get events()
    {
        return this._events
    }
    get isLoaded()
    {
        return this._isLoaded
    }
    get isLoading()
    {
        return this._isLoading
    }
}
class HL {
    constructor(e)
    {
        this._value = e
    }
    get value()
    {
        return this._value
    }
}
class jL {
    constructor(e, t)
    {
        this._header = e,
        this._buffer = t
    }
    readBytes(e)
    {
        return this._buffer ? this._buffer.readBytes(e) : null
    }
    readByte()
    {
        return this._buffer ? this._buffer.readByte() : -1
    }
    readBoolean()
    {
        return this.readByte() === 1
    }
    readShort()
    {
        return this._buffer ? this._buffer.readShort() : -1
    }
    readInt()
    {
        return this._buffer ? this._buffer.readInt() : -1
    }
    readFloat()
    {
        return this._buffer ? this._buffer.readFloat() : -1
    }
    readDouble()
    {
        return this._buffer ? this._buffer.readDouble() : -1
    }
    readString()
    {
        const e = this.readShort();
        return this._buffer.readBytes(e).toString("utf8")
    }
    get header()
    {
        return this._header
    }
    get bytesAvailable()
    {
        return this._buffer && this._buffer.remaining() > 0
    }
}
class WL {
    constructor(e)
    {
        this._value = e
    }
    get value()
    {
        return this._value
    }
}
class YL {
    encode(e, t)
    {
        const r = new lp;
        r.writeShort(e);
        for (const n of t) {
            let o = typeof n;
            switch (o === "object" && (n === null ? o = "null" : n instanceof HL ? o = "byte" : n instanceof WL ? o = "short" : n instanceof ArrayBuffer && (o = "arraybuffer")), o) {
            case "undefined":
            case "null":
                r.writeShort(0);
                break;
            case "byte":
                r.writeByte(n.value);
                break;
            case "short":
                r.writeShort(n.value);
                break;
            case "number":
                r.writeInt(n);
                break;
            case "boolean":
                r.writeByte(n ? 1 : 0);
                break;
            case "string":
                n ? r.writeString(n, !0) : r.writeShort(0);
                break;
            case "arraybuffer":
                r.writeBytes(n);
                break
            }
        }
        const i = r.getBuffer();
        return i ? new lp().writeInt(i.byteLength).writeBytes(i) : null
    }
    decode(e)
    {
        if (!e || !e.dataBuffer || !e.dataBuffer.byteLength)
            return null;
        const t = [];
        for (; e.dataBuffer.byteLength && !(e.dataBuffer.byteLength < 4);) {
            const r = new Rd(e.dataBuffer),
                i = r.readInt();
            if (i > e.dataBuffer.byteLength - 4)
                break;
            const n = r.readBytes(i);
            t.push(new jL(n.readShort(), n)),
            e.dataBuffer = e.dataBuffer.slice(i + 4)
        }
        return t
    }
}
class L {
    constructor(e, t)
    {
        this._callBack = e,
        this._parserClass = t,
        this._parser = null,
        this._connection = null
    }
    dispose()
    {
        this._callBack = null,
        this._parserClass = null,
        this._parser = null,
        this._connection = null
    }
    get callBack()
    {
        return this._callBack
    }
    get parserClass()
    {
        return this._parserClass
    }
    get parser()
    {
        return this._parser
    }
    set parser(e)
    {
        this._parser = e
    }
    get connection()
    {
        return this._connection
    }
    set connection(e)
    {
        this._connection = e
    }
}
class Ye {
    constructor(e)
    {
        this._type = e
    }
    get type()
    {
        return this._type
    }
}
class zs extends Ye {
    constructor(e, t, r)
    {
        super(e),
        this._connection = t,
        this._originalEvent = event
    }
    get connection()
    {
        return this._connection
    }
    get originalEvent()
    {
        return this._originalEvent
    }
}
zs.CONNECTION_OPENED = "SCE_OPEN";
zs.CONNECTION_CLOSED = "SCE_CLOSED";
zs.CONNECTION_ERROR = "SCE_ERROR";
zs.CONNECTION_MESSAGE = "SCE_MESSAGE";
class El extends Ye {
    constructor(e, t)
    {
        super(e),
        this._library = t
    }
    get library()
    {
        return this._library
    }
}
El.DOWNLOAD_COMPLETE = "ARELE_DOWNLOAD_COMPLETE";
class Cd {}
Cd.AVATAR_RENDER_READY = "AVATAR_RENDER_READY";
class pl extends Ye {
    constructor(e, t)
    {
        super(e),
        this._library = t
    }
    get library()
    {
        return this._library
    }
}
pl.DOWNLOAD_COMPLETE = "ARLE_DOWNLOAD_COMPLETE";
class Nh extends Ye {
    constructor(e)
    {
        super(e)
    }
}
Nh.INITIALIZED = "RCWM_INITIALIZED";
class ss extends Ye {
    constructor(e, t)
    {
        super(e),
        this._connection = t
    }
    get connection()
    {
        return this._connection
    }
}
ss.CONNECTION_ESTABLISHED = "NCE_ESTABLISHED";
ss.CONNECTION_CLOSED = "NCE_CLOSED";
ss.CONNECTION_ERROR = "NCE_ERROR";
ss.CONNECTION_HANDSHAKING = "NCE_HANDSHAKING";
ss.CONNECTION_HANDSHAKED = "NCE_HANDSHAKED";
ss.CONNECTION_HANDSHAKE_FAILED = "NCE_HANDSHAKE_FAILED";
ss.CONNECTION_AUTHENTICATED = "NCE_AUTHENTICATED";
class va extends Ye {
    constructor(e)
    {
        super(e)
    }
}
va.LOADED = "NLE_LOADED";
va.FAILED = "NLE_FAILED";
const ng = class  extends Ye{
    constructor()
    {
        super(ng.SETTINGS_UPDATED)
    }
    clone()
    {
        const s = new ng;
        return s._volumeSystem = this._volumeSystem, s._volumeFurni = this._volumeFurni, s._volumeTrax = this._volumeTrax, s._oldChat = this._oldChat, s._roomInvites = this._roomInvites, s._cameraFollow = this._cameraFollow, s._flags = this._flags, s._chatType = this._chatType, s
    }
    get volumeSystem()
    {
        return this._volumeSystem
    }
    set volumeSystem(s)
    {
        this._volumeSystem = s
    }
    get volumeFurni()
    {
        return this._volumeFurni
    }
    set volumeFurni(s)
    {
        this._volumeFurni = s
    }
    get volumeTrax()
    {
        return this._volumeTrax
    }
    set volumeTrax(s)
    {
        this._volumeTrax = s
    }
    get oldChat()
    {
        return this._oldChat
    }
    set oldChat(s)
    {
        this._oldChat = s
    }
    get roomInvites()
    {
        return this._roomInvites
    }
    set roomInvites(s)
    {
        this._roomInvites = s
    }
    get cameraFollow()
    {
        return this._cameraFollow
    }
    set cameraFollow(s)
    {
        this._cameraFollow = s
    }
    get flags()
    {
        return this._flags
    }
    set flags(s)
    {
        this._flags = s
    }
    get chatType()
    {
        return this._chatType
    }
    set chatType(s)
    {
        this._chatType = s
    }
}
;
let Lo = ng;
Lo.SETTINGS_UPDATED = "NSE_SETTINGS_UPDATED";
class Ml extends Ye {
    constructor(e, t)
    {
        super(e),
        this._sampleCode = t
    }
    get sampleCode()
    {
        return this._sampleCode
    }
}
Ml.PLAY_SOUND = "NSOE_PLAY_SOUND";
class Kf extends Ye {
    constructor(e)
    {
        super(e)
    }
    get iconId()
    {
        return this._iconId
    }
    set iconId(e)
    {
        this._iconId = e
    }
    get iconName()
    {
        return this._iconName
    }
    set iconName(e)
    {
        this._iconName = e
    }
}
Kf.TOOLBAR_CLICK = "NTE_TOOLBAR_CLICK";
Kf.SELECT_OWN_AVATAR = "NTE_SELECT_OWN_AVATAR";
const yT = class  extends Kf{
    constructor(s, e, t)
    {
        super(yT.ANIMATE_ICON),
        this._image = s,
        this._x = e,
        this._y = t
    }
    get image()
    {
        return this._image
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
}
;
let yh = yT;
yh.ANIMATE_ICON = "NTAIE_ANIMATE_ICON";
class ze extends Ye {
    constructor(e, t)
    {
        super(e),
        this._roomId = t
    }
    get roomId()
    {
        return this._roomId
    }
}
ze.INITIALIZED = "REE_INITIALIZED";
ze.ENGINE_INITIALIZED = "REE_ENGINE_INITIALIZED";
ze.OBJECTS_INITIALIZED = "REE_OBJECTS_INITIALIZED";
ze.NORMAL_MODE = "REE_NORMAL_MODE";
ze.GAME_MODE = "REE_GAME_MODE";
ze.ROOM_ZOOMED = "REE_ROOM_ZOOMED";
ze.DISPOSED = "REE_DISPOSED";
const MT = class  extends ze{
    constructor(s, e, t, r)
    {
        super(MT.ROOM_COLOR, s),
        this._color = e,
        this._brightness = t,
        this._bgOnly = r
    }
    get color()
    {
        return this._color
    }
    get brightness()
    {
        return this._brightness
    }
    get bgOnly()
    {
        return this._bgOnly
    }
}
;
let qf = MT;
qf.ROOM_COLOR = "REE_ROOM_COLOR";
class Rn extends Ye {
    constructor(e, t)
    {
        super(e),
        this._contentType = t
    }
    get contentType()
    {
        return this._contentType
    }
}
Rn.RCLE_SUCCESS = "RCLE_SUCCESS";
Rn.RCLE_FAILURE = "RCLE_FAILURE";
Rn.RCLE_CANCEL = "RCLE_CANCEL";
const bT = class  extends ze{
    constructor(s, e, t)
    {
        super(bT.ROOM_DRAG, s),
        this._offsetX = e,
        this._offsetY = t
    }
    get offsetX()
    {
        return this._offsetX
    }
    get offsetY()
    {
        return this._offsetY
    }
}
;
let Xf = bT;
Xf.ROOM_DRAG = "RDE_ROOM_DRAG";
const DT = class  extends ze{
    constructor(s, e, t, r, i, n)
    {
        super(DT.ROOM_COLOR, s),
        this._state = e,
        this._presetId = t,
        this._effectId = r,
        this._color = i,
        this._brightness = n
    }
    get state()
    {
        return this._state
    }
    get presetId()
    {
        return this._presetId
    }
    get effectId()
    {
        return this._effectId
    }
    get color()
    {
        return this._color
    }
    get brightness()
    {
        return this._brightness
    }
}
;
let Qf = DT;
Qf.ROOM_COLOR = "REDSE_ROOM_COLOR";
class de extends ze {
    constructor(e, t, r, i)
    {
        super(e, t),
        this._objectId = r,
        this._category = i
    }
    get objectId()
    {
        return this._objectId
    }
    get category()
    {
        return this._category
    }
}
de.SELECTED = "REOE_SELECTED";
de.DESELECTED = "REOE_DESELECTED";
de.ADDED = "REOE_ADDED";
de.REMOVED = "REOE_REMOVED";
de.PLACED = "REOE_PLACED";
de.PLACED_ON_USER = "REOE_PLACED_ON_USER";
de.CONTENT_UPDATED = "REOE_CONTENT_UPDATED";
de.REQUEST_MOVE = "REOE_REQUEST_MOVE";
de.REQUEST_ROTATE = "REOE_REQUEST_ROTATE";
de.REQUEST_MANIPULATION = "REOE_REQUEST_MANIPULATION";
de.MOUSE_ENTER = "REOE_MOUSE_ENTER";
de.MOUSE_LEAVE = "REOE_MOUSE_LEAVE";
de.DOUBLE_CLICK = "REOE_DOUBLE_CLICK";
class ag extends de {
    constructor(e, t, r, i, n, o, l, c, u, h, d, m, p)
    {
        super(e, t, r, i),
        this._wallLocation = "",
        this._x = 0,
        this._y = 0,
        this._z = 0,
        this._direction = 0,
        this._placedInRoom = !1,
        this._placedOnFloor = !1,
        this._placedOnWall = !1,
        this._instanceData = null,
        this._wallLocation = n,
        this._x = o,
        this._y = l,
        this._z = c,
        this._direction = u,
        this._placedInRoom = h,
        this._placedOnFloor = d,
        this._placedOnWall = m,
        this._instanceData = p
    }
    get wallLocation()
    {
        return this._wallLocation
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get z()
    {
        return this._z
    }
    get direction()
    {
        return this._direction
    }
    get placedInRoom()
    {
        return this._placedInRoom
    }
    get placedOnFloor()
    {
        return this._placedOnFloor
    }
    get placedOnWall()
    {
        return this._placedOnWall
    }
    get instanceData()
    {
        return this._instanceData
    }
}
class zL extends de {
    constructor(e, t, r, i, n, o)
    {
        super(e, t, r, i),
        this._droppedObjectId = n,
        this._droppedObjectCategory = o
    }
    get droppedObjectId()
    {
        return this._droppedObjectId
    }
    get droppedObjectCategory()
    {
        return this._droppedObjectCategory
    }
}
class Il extends de {
    constructor(e, t, r, i, n, o=1)
    {
        super(e, t, r, i),
        this._soundId = n,
        this._pitch = o
    }
    get soundId()
    {
        return this._soundId
    }
    get pitch()
    {
        return this._pitch
    }
}
Il.PLAY_SOUND = "REOPSE_PLAY_SOUND";
Il.PLAY_SOUND_AT_PITCH = "REOPSE_PLAY_SOUND_AT_PITCH";
class Di extends de {}
Di.FURNI_CLICK = "RERAE_FURNI_CLICK";
Di.FURNI_DOUBLE_CLICK = "RERAE_FURNI_DOUBLE_CLICK";
Di.TOOLTIP_SHOW = "RERAE_TOOLTIP_SHOW";
Di.TOOLTIP_HIDE = "RERAE_TOOLTIP_HIDE";
class Mr extends de {
    constructor(e, t, r, i, n, o=1)
    {
        super(e, t, r, i),
        this._sampleId = n,
        this._pitch = o
    }
    get sampleId()
    {
        return this._sampleId
    }
    get pitch()
    {
        return this._pitch
    }
}
Mr.ROOM_OBJECT_INITIALIZED = "ROPSPE_ROOM_OBJECT_INITIALIZED";
Mr.ROOM_OBJECT_DISPOSED = "ROPSPE_ROOM_OBJECT_DISPOSED";
Mr.PLAY_SAMPLE = "ROPSPE_PLAY_SAMPLE";
Mr.CHANGE_PITCH = "ROPSPE_CHANGE_PITCH";
class ee extends de {
    constructor(e, t, r, i, n=null)
    {
        super(e, t, r, i),
        this._widget = n
    }
    get widget()
    {
        return this._widget
    }
    get contextMenu()
    {
        return this._widget
    }
}
ee.OPEN_WIDGET = "RETWE_OPEN_WIDGET";
ee.CLOSE_WIDGET = "RETWE_CLOSE_WIDGET";
ee.OPEN_FURNI_CONTEXT_MENU = "RETWE_OPEN_FURNI_CONTEXT_MENU";
ee.CLOSE_FURNI_CONTEXT_MENU = "RETWE_CLOSE_FURNI_CONTEXT_MENU";
ee.REQUEST_PLACEHOLDER = "RETWE_REQUEST_PLACEHOLDER";
ee.REQUEST_CREDITFURNI = "RETWE_REQUEST_CREDITFURNI";
ee.REQUEST_STACK_HEIGHT = "RETWE_REQUEST_STACK_HEIGHT";
ee.REQUEST_EXTERNAL_IMAGE = "RETWE_REQUEST_EXTERNAL_IMAGE";
ee.REQUEST_STICKIE = "RETWE_REQUEST_STICKIE";
ee.REQUEST_PRESENT = "RETWE_REQUEST_PRESENT";
ee.REQUEST_TROPHY = "RETWE_REQUEST_TROPHY";
ee.REQUEST_TEASER = "RETWE_REQUEST_TEASER";
ee.REQUEST_ECOTRONBOX = "RETWE_REQUEST_ECOTRONBOX";
ee.REQUEST_DIMMER = "RETWE_REQUEST_DIMMER";
ee.REMOVE_DIMMER = "RETWE_REMOVE_DIMMER";
ee.REQUEST_CLOTHING_CHANGE = "RETWE_REQUEST_CLOTHING_CHANGE";
ee.REQUEST_PLAYLIST_EDITOR = "RETWE_REQUEST_PLAYLIST_EDITOR";
ee.REQUEST_MANNEQUIN = "RETWE_REQUEST_MANNEQUIN";
ee.REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG = "ROWRE_REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG";
ee.REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG = "ROWRE_REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG";
ee.REQUEST_BACKGROUND_COLOR = "RETWE_REQUEST_BACKGROUND_COLOR";
ee.REQUEST_MYSTERYBOX_OPEN_DIALOG = "RETWE_REQUEST_MYSTERYBOX_OPEN_DIALOG";
ee.REQUEST_EFFECTBOX_OPEN_DIALOG = "RETWE_REQUEST_EFFECTBOX_OPEN_DIALOG";
ee.REQUEST_MYSTERYTROPHY_OPEN_DIALOG = "RETWE_REQUEST_MYSTERYTROPHY_OPEN_DIALOG";
ee.REQUEST_ACHIEVEMENT_RESOLUTION_ENGRAVING = "RETWE_REQUEST_ACHIEVEMENT_RESOLUTION_ENGRAVING";
ee.REQUEST_ACHIEVEMENT_RESOLUTION_FAILED = "RETWE_REQUEST_ACHIEVEMENT_RESOLUTION_FAILED";
ee.REQUEST_FRIEND_FURNITURE_CONFIRM = "RETWE_REQUEST_FRIEND_FURNITURE_CONFIRM";
ee.REQUEST_FRIEND_FURNITURE_ENGRAVING = "RETWE_REQUEST_FRIEND_FURNITURE_ENGRAVING";
ee.REQUEST_BADGE_DISPLAY_ENGRAVING = "RETWE_REQUEST_BADGE_DISPLAY_ENGRAVING";
ee.REQUEST_HIGH_SCORE_DISPLAY = "RETWE_REQUEST_HIGH_SCORE_DISPLAY";
ee.REQUEST_HIDE_HIGH_SCORE_DISPLAY = "RETWE_REQUEST_HIDE_HIGH_SCORE_DISPLAY";
ee.REQUEST_INTERNAL_LINK = "RETWE_REQUEST_INTERNAL_LINK";
ee.REQUEST_ROOM_LINK = "RETWE_REQUEST_ROOM_LINK";
ee.REQUEST_YOUTUBE = "RETWE_REQUEST_YOUTUBE";
class Ul extends de {
    constructor(e, t, r, i, n=-1, o=-1)
    {
        super(e, t, r, i),
        this._inventoryStripId = n,
        this._furnitureTypeId = o
    }
    get inventoryStripId()
    {
        return this._inventoryStripId
    }
    get furnitureTypeId()
    {
        return this._furnitureTypeId
    }
}
Ul.USE_PRODUCT_FROM_ROOM = "REUPE_USE_PRODUCT_FROM_ROOM";
Ul.USE_PRODUCT_FROM_INVENTORY = "REUPE_USE_PRODUCT_FROM_INVENTORY";
class Bi extends Ye {
    constructor(e, t)
    {
        super(e),
        this._object = t
    }
    get object()
    {
        return this._object
    }
    get objectId()
    {
        return this._object ? this._object.id : -1
    }
    get objectType()
    {
        return this._object ? this._object.type : null
    }
}
class Sn extends Bi {
    constructor(e, t, r, i=!0)
    {
        super(e, t),
        this._badgeId = r,
        this._groupBadge = i
    }
    get badgeId()
    {
        return this._badgeId
    }
    get groupBadge()
    {
        return this._groupBadge
    }
}
Sn.LOAD_BADGE = "ROBAE_LOAD_BADGE";
class vi extends Bi {
    constructor(e, t)
    {
        super(e, t)
    }
}
vi.RODRE_CURRENT_USER_ID = "RODRE_CURRENT_USER_ID";
vi.RODRE_URL_PREFIX = "RODRE_URL_PREFIX";
const vT = class  extends Bi{
    constructor(s, e, t, r, i, n)
    {
        super(vT.DIMMER_STATE, s),
        this._state = e,
        this._presetId = t,
        this._effectId = r,
        this._color = i,
        this._brightness = n
    }
    get state()
    {
        return this._state
    }
    get presetId()
    {
        return this._presetId
    }
    get effectId()
    {
        return this._effectId
    }
    get color()
    {
        return this._color
    }
    get brightness()
    {
        return this._brightness
    }
}
;
let bl = vT;
bl.DIMMER_STATE = "RODSUE_DIMMER_STATE";
class fr extends Bi {
    constructor(e, t)
    {
        super(e, t)
    }
}
fr.ADD_HOLE = "ROFHO_ADD_HOLE";
fr.REMOVE_HOLE = "ROFHO_REMOVE_HOLE";
class ce extends Bi {}
ce.DICE_OFF = "ROFCAE_DICE_OFF";
ce.DICE_ACTIVATE = "ROFCAE_DICE_ACTIVATE";
ce.USE_HABBOWHEEL = "ROFCAE_USE_HABBOWHEEL";
ce.STICKIE = "ROFCAE_STICKIE";
ce.ENTER_ONEWAYDOOR = "ROFCAE_ENTER_ONEWAYDOOR";
ce.SOUND_MACHINE_INIT = "ROFCAE_SOUND_MACHINE_INIT";
ce.SOUND_MACHINE_START = "ROFCAE_SOUND_MACHINE_START";
ce.SOUND_MACHINE_STOP = "ROFCAE_SOUND_MACHINE_STOP";
ce.SOUND_MACHINE_DISPOSE = "ROFCAE_SOUND_MACHINE_DISPOSE";
ce.JUKEBOX_INIT = "ROFCAE_JUKEBOX_INIT";
ce.JUKEBOX_START = "ROFCAE_JUKEBOX_START";
ce.JUKEBOX_MACHINE_STOP = "ROFCAE_JUKEBOX_MACHINE_STOP";
ce.JUKEBOX_DISPOSE = "ROFCAE_JUKEBOX_DISPOSE";
ce.MOUSE_BUTTON = "ROFCAE_MOUSE_BUTTON";
ce.MOUSE_ARROW = "ROFCAE_MOUSE_ARROW";
class Mh extends ze {
    constructor(e, t, r, i, n, o)
    {
        super(e, t),
        this._enable = r,
        this._hue = i,
        this._saturation = n,
        this._lightness = o
    }
    get enable()
    {
        return this._enable
    }
    get hue()
    {
        return this._hue
    }
    get saturation()
    {
        return this._saturation
    }
    get lightness()
    {
        return this._lightness
    }
}
Mh.ROOM_BACKGROUND_COLOR = "ROHSLCEE_ROOM_BACKGROUND_COLOR";
class Ma extends Bi {
    constructor(e, t, r, i, n, o)
    {
        super(e, t),
        this._enable = r,
        this._hue = i,
        this._saturation = n,
        this._lightness = o
    }
    get enable()
    {
        return this._enable
    }
    get hue()
    {
        return this._hue
    }
    get saturation()
    {
        return this._saturation
    }
    get lightness()
    {
        return this._lightness
    }
}
Ma.ROOM_BACKGROUND_COLOR = "ROHSLCEE_ROOM_BACKGROUND_COLOR";
class De extends Bi {
    constructor(e, t, r, i=!1, n=!1, o=!1, l=!1)
    {
        super(e, t),
        this._eventId = "",
        this._eventId = r,
        this._altKey = i,
        this._ctrlKey = n,
        this._shiftKey = o,
        this._buttonDown = l
    }
    get eventId()
    {
        return this._eventId
    }
    get altKey()
    {
        return this._altKey
    }
    get ctrlKey()
    {
        return this._ctrlKey
    }
    get shiftKey()
    {
        return this._shiftKey
    }
    get buttonDown()
    {
        return this._buttonDown
    }
    get localX()
    {
        return this._localX
    }
    set localX(e)
    {
        this._localX = e
    }
    get localY()
    {
        return this._localY
    }
    set localY(e)
    {
        this._localY = e
    }
    get spriteOffsetX()
    {
        return this._spriteOffsetX
    }
    set spriteOffsetX(e)
    {
        this._spriteOffsetX = e
    }
    get spriteOffsetY()
    {
        return this._spriteOffsetY
    }
    set spriteOffsetY(e)
    {
        this._spriteOffsetY = e
    }
}
De.CLICK = "ROE_MOUSE_CLICK";
De.DOUBLE_CLICK = "ROE_MOUSE_DOUBLE_CLICK";
De.MOUSE_MOVE = "ROE_MOUSE_MOVE";
De.MOUSE_DOWN = "ROE_MOUSE_DOWN";
De.MOUSE_DOWN_LONG = "ROE_MOUSE_DOWN_LONG";
De.MOUSE_UP = "ROE_MOUSE_UP";
De.MOUSE_ENTER = "ROE_MOUSE_ENTER";
De.MOUSE_LEAVE = "ROE_MOUSE_LEAVE";
class pr extends Bi {
    constructor(e, t)
    {
        super(e, t)
    }
}
pr.POSITION_CHANGED = "ROME_POSITION_CHANGED";
pr.OBJECT_REMOVED = "ROME_OBJECT_REMOVED";
class Jn extends ce {
    constructor(e, t, r, i=1)
    {
        super(e, t),
        this._soundId = r,
        this._pitch = i
    }
    get soundId()
    {
        return this._soundId
    }
    get pitch()
    {
        return this._pitch
    }
}
Jn.PLAY_SOUND = "ROPSIE_PLAY_SOUND";
Jn.PLAY_SOUND_AT_PITCH = "ROPSIE_PLAY_SOUND_AT_PITCH";
class kt extends Bi {
    constructor(e, t, r="", i="")
    {
        super(e, t),
        this._imageUrl = "",
        this._clickUrl = "",
        this._imageUrl = r,
        this._clickUrl = i
    }
    get imageUrl()
    {
        return this._imageUrl
    }
    get clickUrl()
    {
        return this._clickUrl
    }
}
kt.ROOM_AD_LOAD_IMAGE = "RORAE_ROOM_AD_LOAD_IMAGE";
kt.ROOM_AD_FURNI_CLICK = "RORAE_ROOM_AD_FURNI_CLICK";
kt.ROOM_AD_FURNI_DOUBLE_CLICK = "RORAE_ROOM_AD_FURNI_DOUBLE_CLICK";
kt.ROOM_AD_TOOLTIP_SHOW = "RORAE_ROOM_AD_TOOLTIP_SHOW";
kt.ROOM_AD_TOOLTIP_HIDE = "RORAE_ROOM_AD_TOOLTIP_HIDE";
class Es extends Bi {
    constructor(e, t, r, i=1)
    {
        super(e, t),
        this._sampleId = r,
        this._pitch = i
    }
    get sampleId()
    {
        return this._sampleId
    }
    get pitch()
    {
        return this._pitch
    }
}
Es.ROOM_OBJECT_INITIALIZED = "ROPSPE_ROOM_OBJECT_INITIALIZED";
Es.ROOM_OBJECT_DISPOSED = "ROPSPE_ROOM_OBJECT_DISPOSED";
Es.PLAY_SAMPLE = "ROPSPE_PLAY_SAMPLE";
Es.CHANGE_PITCH = "ROPSPE_CHANGE_PITCH";
class wt extends de {}
wt.SOUND_MACHINE_INIT = "ROSM_SOUND_MACHINE_INIT";
wt.SOUND_MACHINE_SWITCHED_ON = "ROSM_SOUND_MACHINE_SWITCHED_ON";
wt.SOUND_MACHINE_SWITCHED_OFF = "ROSM_SOUND_MACHINE_SWITCHED_OFF";
wt.SOUND_MACHINE_DISPOSE = "ROSM_SOUND_MACHINE_DISPOSE";
wt.JUKEBOX_INIT = "ROSM_JUKEBOX_INIT";
wt.JUKEBOX_SWITCHED_ON = "ROSM_JUKEBOX_SWITCHED_ON";
wt.JUKEBOX_SWITCHED_OFF = "ROSM_JUKEBOX_SWITCHED_OFF";
wt.JUKEBOX_DISPOSE = "ROSM_JUKEBOX_DISPOSE";
class ht extends Bi {
    constructor(e, t, r=0)
    {
        super(e, t),
        this._state = r
    }
    get state()
    {
        return this._state
    }
}
ht.STATE_CHANGE = "ROSCE_STATE_CHANGE";
ht.STATE_RANDOM = "ROSCE_STATE_RANDOM";
class wn extends De {
    constructor(e, t, r, i, n, o, l=!1, c=!1, u=!1, h=!1)
    {
        super(e, t, r, l, c, u, h),
        this._tileX = i,
        this._tileY = n,
        this._tileZ = o
    }
    get tileX()
    {
        return this._tileX
    }
    get tileY()
    {
        return this._tileY
    }
    get tileZ()
    {
        return this._tileZ
    }
    get tileXAsInt()
    {
        return Math.trunc(this._tileX + .499)
    }
    get tileYAsInt()
    {
        return Math.trunc(this._tileY + .499)
    }
    get tileZAsInt()
    {
        return Math.trunc(this._tileZ + .499)
    }
}
class nl extends De {
    constructor(e, t, r, i, n, o, l, c, u, h=!1, d=!1, m=!1, p=!1)
    {
        super(e, t, r, h, d, m, p),
        this._wallLocation = new w,
        this._wallWd = new w,
        this._wallHt = new w,
        this._wallLocation.assign(i),
        this._wallWd.assign(n),
        this._wallHt.assign(o),
        this._x = l,
        this._y = c,
        this._direction = u
    }
    get wallLocation()
    {
        return this._wallLocation
    }
    get wallWidth()
    {
        return this._wallWd
    }
    get wallHeight()
    {
        return this._wallHt
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get direction()
    {
        return this._direction
    }
}
class Y extends Bi {
    constructor(e, t)
    {
        super(e, t)
    }
}
Y.OPEN_WIDGET = "ROWRE_OPEN_WIDGET";
Y.CLOSE_WIDGET = "ROWRE_CLOSE_WIDGET";
Y.OPEN_FURNI_CONTEXT_MENU = "ROWRE_OPEN_FURNI_CONTEXT_MENU";
Y.CLOSE_FURNI_CONTEXT_MENU = "ROWRE_CLOSE_FURNI_CONTEXT_MENU";
Y.PLACEHOLDER = "ROWRE_PLACEHOLDER";
Y.CREDITFURNI = "ROWRE_CREDITFURNI";
Y.STACK_HEIGHT = "ROWRE_STACK_HEIGHT";
Y.EXTERNAL_IMAGE = "ROWRE_EXTERNAL_IMAGE";
Y.STICKIE = "ROWRE_STICKIE";
Y.PRESENT = "ROWRE_PRESENT";
Y.TROPHY = "ROWRE_TROPHY";
Y.TEASER = "ROWRE_TEASER";
Y.ECOTRONBOX = "ROWRE_ECOTRONBOX";
Y.DIMMER = "ROWRE_DIMMER";
Y.WIDGET_REMOVE_DIMMER = "ROWRE_WIDGET_REMOVE_DIMMER";
Y.CLOTHING_CHANGE = "ROWRE_CLOTHING_CHANGE";
Y.JUKEBOX_PLAYLIST_EDITOR = "ROWRE_JUKEBOX_PLAYLIST_EDITOR";
Y.MANNEQUIN = "ROWRE_MANNEQUIN";
Y.PET_PRODUCT_MENU = "ROWRE_PET_PRODUCT_MENU";
Y.GUILD_FURNI_CONTEXT_MENU = "ROWRE_GUILD_FURNI_CONTEXT_MENU";
Y.MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG = "ROWRE_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG";
Y.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG = "ROWRE_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG";
Y.BACKGROUND_COLOR = "ROWRE_BACKGROUND_COLOR";
Y.MYSTERYBOX_OPEN_DIALOG = "ROWRE_MYSTERYBOX_OPEN_DIALOG";
Y.EFFECTBOX_OPEN_DIALOG = "ROWRE_EFFECTBOX_OPEN_DIALOG";
Y.MYSTERYTROPHY_OPEN_DIALOG = "ROWRE_MYSTERYTROPHY_OPEN_DIALOG";
Y.ACHIEVEMENT_RESOLUTION_OPEN = "ROWRE_ACHIEVEMENT_RESOLUTION_OPEN";
Y.ACHIEVEMENT_RESOLUTION_ENGRAVING = "ROWRE_ACHIEVEMENT_RESOLUTION_ENGRAVING";
Y.ACHIEVEMENT_RESOLUTION_FAILED = "ROWRE_ACHIEVEMENT_RESOLUTION_FAILED";
Y.FRIEND_FURNITURE_CONFIRM = "ROWRE_FRIEND_FURNITURE_CONFIRM";
Y.FRIEND_FURNITURE_ENGRAVING = "ROWRE_FRIEND_FURNITURE_ENGRAVING";
Y.BADGE_DISPLAY_ENGRAVING = "ROWRE_BADGE_DISPLAY_ENGRAVING";
Y.HIGH_SCORE_DISPLAY = "ROWRE_HIGH_SCORE_DISPLAY";
Y.HIDE_HIGH_SCORE_DISPLAY = "ROWRE_HIDE_HIGH_SCORE_DISPLAY";
Y.INERNAL_LINK = "ROWRE_INTERNAL_LINK";
Y.ROOM_LINK = "ROWRE_ROOM_LINK";
Y.YOUTUBE = "ROWRE_YOUTUBE";
class KL {
    constructor(e, t, r, i, n, o, l=0, c=0, u=!1, h=!1, d=!1, m=!1)
    {
        this._type = e,
        this._eventId = t,
        this._canvasId = r,
        this._spriteTag = i,
        this._screenX = n,
        this._screenY = o,
        this._localX = l,
        this._localY = c,
        this._ctrlKey = u,
        this._altKey = h,
        this._shiftKey = d,
        this._buttonDown = m,
        this._spriteOffsetX = 0,
        this._spriteOffsetY = 0
    }
    get type()
    {
        return this._type
    }
    get eventId()
    {
        return this._eventId
    }
    get canvasId()
    {
        return this._canvasId
    }
    get spriteTag()
    {
        return this._spriteTag
    }
    get screenX()
    {
        return this._screenX
    }
    get screenY()
    {
        return this._screenY
    }
    get localX()
    {
        return this._localX
    }
    get localY()
    {
        return this._localY
    }
    get ctrlKey()
    {
        return this._ctrlKey
    }
    get altKey()
    {
        return this._altKey
    }
    get shiftKey()
    {
        return this._shiftKey
    }
    get buttonDown()
    {
        return this._buttonDown
    }
    get spriteOffsetX()
    {
        return this._spriteOffsetX
    }
    set spriteOffsetX(e)
    {
        this._spriteOffsetX = e
    }
    get spriteOffsetY()
    {
        return this._spriteOffsetY
    }
    set spriteOffsetY(e)
    {
        this._spriteOffsetY = e
    }
}
class qL extends Ye {
    constructor(e)
    {
        super(e)
    }
}
class Hc extends qL {
    constructor(e, t)
    {
        super(e),
        this._targetLocation = t
    }
    get targetLocation()
    {
        return this._targetLocation
    }
}
Hc.ROAME_MOVE_TO = "ROAME_MOVE_TO";
const PT = class  extends ze{
    constructor(s, e, t=!1, r=!1)
    {
        super(PT.ROOM_ZOOM, s),
        this._level = e,
        this._forceFlip = t,
        this._asDelta = r
    }
    get level()
    {
        return this._level
    }
    get forceFlip()
    {
        return this._forceFlip
    }
    get asDelta()
    {
        return this._asDelta
    }
}
;
let bh = PT;
bh.ROOM_ZOOM = "REE_ROOM_ZOOM";
const LT = class  extends Ye{
    constructor(s, e)
    {
        super(LT.IMAGE_READY),
        this._badgeId = s,
        this._image = e
    }
    get badgeId()
    {
        return this._badgeId
    }
    get image()
    {
        return this._image
    }
}
;
let wa = LT;
wa.IMAGE_READY = "BIME_BADGE_IMAGE_READY";
const UT = class  extends Ye{
    constructor(s, e)
    {
        super(UT.MYSTERY_BOX_KEYS_UPDATE),
        this._boxColor = s,
        this._keyColor = e
    }
    get boxColor()
    {
        return this._boxColor
    }
    get keyColor()
    {
        return this._keyColor
    }
}
;
let Jf = UT;
Jf.MYSTERY_BOX_KEYS_UPDATE = "mbke_update";
const wT = class  extends Ye{
    constructor()
    {
        super(wT.PERKS_UPDATED)
    }
}
;
let XL = wT;
XL.PERKS_UPDATED = "PUE_perks_updated";
class Ce extends Ye {
    constructor(e, t, r=!0)
    {
        super(e),
        this._session = t,
        this._openLandingView = r
    }
    get session()
    {
        return this._session
    }
    get openLandingView()
    {
        return this._openLandingView
    }
}
Ce.CREATED = "RSE_CREATED";
Ce.STARTED = "RSE_STARTED";
Ce.ENDED = "RSE_ENDED";
Ce.ROOM_DATA = "RSE_ROOM_DATA";
class He extends Ce {
    constructor(e, t, r, i, n, o=0, l=null, c=-1)
    {
        super(e, t),
        this._objectId = r,
        this._message = i,
        this._chatType = n,
        this._links = l,
        this._extraParam = c,
        this._style = o
    }
    get objectId()
    {
        return this._objectId
    }
    get message()
    {
        return this._message
    }
    get chatType()
    {
        return this._chatType
    }
    get links()
    {
        return this._links
    }
    get extraParam()
    {
        return this._extraParam
    }
    get style()
    {
        return this._style
    }
}
He.CHAT_EVENT = "RSCE_CHAT_EVENT";
He.FLOOD_EVENT = "RSCE_FLOOD_EVENT";
He.CHAT_TYPE_SPEAK = 0;
He.CHAT_TYPE_WHISPER = 1;
He.CHAT_TYPE_SHOUT = 2;
He.CHAT_TYPE_RESPECT = 3;
He.CHAT_TYPE_PETRESPECT = 4;
He.CHAT_TYPE_HAND_ITEM_RECEIVED = 5;
He.CHAT_TYPE_PETTREAT = 6;
He.CHAT_TYPE_PETREVIVE = 7;
He.CHAT_TYPE_PET_REBREED_FERTILIZE = 8;
He.CHAT_TYPE_PET_SPEED_FERTILIZE = 9;
He.CHAT_TYPE_MUTE_REMAINING = 10;
const FT = class  extends Ce{
    constructor(s, e, t, r, i, n)
    {
        super(FT.CONFIRM_PET_BREEDING, s),
        this._nestId = e,
        this._pet1 = t,
        this._pet2 = r,
        this._rarityCategories = i,
        this._resultPetTypeId = n
    }
    get nestId()
    {
        return this._nestId
    }
    get pet1()
    {
        return this._pet1
    }
    get pet2()
    {
        return this._pet2
    }
    get rarityCategories()
    {
        return this._rarityCategories
    }
    get resultPetTypeId()
    {
        return this._resultPetTypeId
    }
}
;
let xT = FT;
xT.CONFIRM_PET_BREEDING = "RSPFUE_CONFIRM_PET_BREEDING";
const GT = class  extends Ce{
    constructor(s, e, t)
    {
        super(GT.RSPFUE_CONFIRM_PET_BREEDING_RESULT, s),
        this._breedingNestStuffId = e,
        this._result = t
    }
    get breedingNestStuffId()
    {
        return this._breedingNestStuffId
    }
    get result()
    {
        return this._result
    }
}
;
let BT = GT;
BT.RSPFUE_CONFIRM_PET_BREEDING_RESULT = "RSPFUE_CONFIRM_PET_BREEDING_RESULT";
const kT = class  extends Ce{
    constructor(s, e, t)
    {
        super(kT.RSDE_DANCE, s),
        this._roomIndex = e,
        this._danceId = t
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get danceId()
    {
        return this._danceId
    }
}
;
let Zf = kT;
Zf.RSDE_DANCE = "RSDE_DANCE";
class QL {
    constructor(e, t, r, i)
    {
        this._id = e,
        this._type = t,
        this._color = r,
        this._brightness = i
    }
    get id()
    {
        return this._id
    }
    get type()
    {
        return this._type
    }
    get color()
    {
        return this._color
    }
    get brightness()
    {
        return this._brightness
    }
}
class Dh extends Ce {
    constructor(e, t)
    {
        super(e, t),
        this._selectedPresetId = 0,
        this._presets = []
    }
    storePreset(e, t, r, i)
    {
        this._presets[e - 1] = new QL(e, t, r, i)
    }
    getPreset(e)
    {
        return e < 0 || e >= this._presets.length ? null : this._presets[e]
    }
    get presetCount()
    {
        return this._presets.length
    }
    get selectedPresetId()
    {
        return this._selectedPresetId
    }
    set selectedPresetId(e)
    {
        this._selectedPresetId = e
    }
}
Dh.ROOM_DIMMER_PRESETS = "RSDPE_PRESETS";
class Pi extends Ce {
    constructor(e, t, r)
    {
        super(e, t),
        this._userName = "",
        this._userName = r
    }
    get userName()
    {
        return this._userName
    }
}
Pi.DOORBELL = "RSDE_DOORBELL";
Pi.RSDE_REJECTED = "RSDE_REJECTED";
Pi.RSDE_ACCEPTED = "RSDE_ACCEPTED";
class We extends Ce {
    constructor(e, t, r=null)
    {
        super(e, t),
        this._message = r
    }
    get message()
    {
        return this._message
    }
}
We.RSEME_KICKED = "RSEME_KICKED";
We.RSEME_PETS_FORBIDDEN_IN_HOTEL = "RSEME_PETS_FORBIDDEN_IN_HOTEL";
We.RSEME_PETS_FORBIDDEN_IN_FLAT = "RSEME_PETS_FORBIDDEN_IN_FLAT";
We.RSEME_MAX_PETS = "RSEME_MAX_PETS";
We.RSEME_MAX_NUMBER_OF_OWN_PETS = "RSEME_MAX_NUMBER_OF_OWN_PETS";
We.RSEME_NO_FREE_TILES_FOR_PET = "RSEME_NO_FREE_TILES_FOR_PET";
We.RSEME_SELECTED_TILE_NOT_FREE_FOR_PET = "RSEME_SELECTED_TILE_NOT_FREE_FOR_PET";
We.RSEME_BOTS_FORBIDDEN_IN_HOTEL = "RSEME_BOTS_FORBIDDEN_IN_HOTEL";
We.RSEME_BOTS_FORBIDDEN_IN_FLAT = "RSEME_BOTS_FORBIDDEN_IN_FLAT";
We.RSEME_BOT_LIMIT_REACHED = "RSEME_BOT_LIMIT_REACHED";
We.RSEME_SELECTED_TILE_NOT_FREE_FOR_BOT = "RSEME_SELECTED_TILE_NOT_FREE_FOR_BOT";
We.RSEME_BOT_NAME_NOT_ACCEPTED = "RSEME_BOT_NAME_NOT_ACCEPTED";
const VT = class  extends Ce{
    constructor(s, e, t, r, i)
    {
        super(VT.FAVOURITE_GROUP_UPDATE, s),
        this._roomIndex = e,
        this._habboGroupId = t,
        this._habboGroupName = i,
        this._status = r
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get habboGroupId()
    {
        return this._habboGroupId
    }
    get habboGroupName()
    {
        return this._habboGroupName
    }
    get status()
    {
        return this._status
    }
}
;
let $f = VT;
$f.FAVOURITE_GROUP_UPDATE = "RSFGUE_FAVOURITE_GROUP_UPDATE";
const HT = class  extends Ce{
    constructor(s, e, t, r)
    {
        super(HT.RSFRE_FRIEND_REQUEST, s),
        this._requestId = 0,
        this._userId = 0,
        this._requestId = e,
        this._userId = t,
        this._userName = r
    }
    get requestId()
    {
        return this._requestId
    }
    get userId()
    {
        return this._userId
    }
    get userName()
    {
        return this._userName
    }
}
;
let jT = HT;
jT.RSFRE_FRIEND_REQUEST = "RSFRE_FRIEND_REQUEST";
const WT = class  extends Ce{
    constructor(s, e, t)
    {
        super(WT.NEST_BREEDING_SUCCESS, s),
        this._petId = e,
        this._rarityCategory = t
    }
    get rarityCategory()
    {
        return this._rarityCategory
    }
    get petId()
    {
        return this._petId
    }
}
;
let YT = WT;
YT.NEST_BREEDING_SUCCESS = "RSPFUE_NEST_BREEDING_SUCCESS";
const zT = class  extends Ce{
    constructor(s, e, t, r)
    {
        super(zT.PET_BREEDING, s),
        this._state = e,
        this._ownPetId = t,
        this._otherPetId = r
    }
    get state()
    {
        return this._state
    }
    get ownPetId()
    {
        return this._ownPetId
    }
    get otherPetId()
    {
        return this._otherPetId
    }
}
;
let KT = zT;
KT.PET_BREEDING = "RSPFUE_PET_BREEDING";
const qT = class  extends Ce{
    constructor(s, e, t)
    {
        super(qT.PET_BREEDING_RESULT, s),
        this._resultData = e,
        this._otherResultData = t
    }
    get resultData()
    {
        return this._resultData
    }
    get otherResultData()
    {
        return this._otherResultData
    }
}
;
let XT = qT;
XT.PET_BREEDING_RESULT = "RSPFUE_PET_BREEDING_RESULT";
const QT = class  extends Ce{
    constructor(s, e, t, r)
    {
        super(QT.PET_COMMANDS, s),
        this._petId = e,
        this._allCommandIds = t,
        this._enabledCommandIds = r
    }
    get id()
    {
        return this._petId
    }
    get commands()
    {
        return this._allCommandIds
    }
    get enabledCommands()
    {
        return this._enabledCommandIds
    }
}
;
let JL = QT;
JL.PET_COMMANDS = "RSPIUE_ENABLED_PET_COMMANDS";
const JT = class  extends Ce{
    constructor(s, e, t)
    {
        super(JT.PET_FIGURE_UPDATE, s),
        this._petId = e,
        this._figure = t
    }
    get id()
    {
        return this._petId
    }
    get figure()
    {
        return this._figure
    }
}
;
let ZT = JT;
ZT.PET_FIGURE_UPDATE = "RSPFUE_PET_FIGURE_UPDATE";
const $T = class  extends Ce{
    constructor(s, e)
    {
        super($T.PET_INFO, s),
        this._petInfo = e
    }
    get petInfo()
    {
        return this._petInfo
    }
}
;
let em = $T;
em.PET_INFO = "RSPIUE_PET_INFO";
const eR = class  extends Ce{
    constructor(s, e, t)
    {
        super(eR.PET_LEVEL_UPDATE, s),
        this._petId = e,
        this._level = t
    }
    get petId()
    {
        return this._petId
    }
    get level()
    {
        return this._level
    }
}
;
let tR = eR;
tR.PET_LEVEL_UPDATE = "RSPLUE_PET_LEVEL_UPDATE";
class Pa extends Ce {
    constructor(e, t, r, i, n, o)
    {
        super(e, t),
        this._objectId = -1,
        this._nameValidationStatus = 0,
        this._nameValidationInfo = null,
        this._objectId = r,
        this._figureData = i,
        this._nameValidationStatus = n,
        this._nameValidationInfo = o
    }
    get objectId()
    {
        return this._objectId
    }
    get figureData()
    {
        return this._figureData
    }
    get nameValidationStatus()
    {
        return this._nameValidationStatus
    }
    get nameValidationInfo()
    {
        return this._nameValidationInfo
    }
}
Pa.RSOPPE_OPEN_PET_PACKAGE_REQUESTED = "RSOPPE_OPEN_PET_PACKAGE_REQUESTED";
Pa.RSOPPE_OPEN_PET_PACKAGE_RESULT = "RSOPPE_OPEN_PET_PACKAGE_RESULT";
const sR = class  extends Ce{
    constructor(s, e, t, r, i, n)
    {
        super(sR.PET_STATUS_UPDATE, s),
        this._petId = e,
        this._canBreed = t,
        this._canHarvest = r,
        this._canRevive = i,
        this._hasBreedingPermission = n
    }
    get petId()
    {
        return this._petId
    }
    get canBreed()
    {
        return this._canBreed
    }
    get canHarvest()
    {
        return this._canHarvest
    }
    get canRevive()
    {
        return this._canRevive
    }
    get hasBreedingPermission()
    {
        return this._hasBreedingPermission
    }
}
;
let tm = sR;
tm.PET_STATUS_UPDATE = "RSPFUE_PET_STATUS_UPDATE";
class Ni extends Ce {
    constructor(e, t, r)
    {
        super(e, t),
        this._id = -1,
        this._numQuestions = 0,
        this._startMessage = "",
        this._endMessage = "",
        this._questionArray = null,
        this._npsPoll = !1,
        this._id = r
    }
    get id()
    {
        return this._id
    }
    get headline()
    {
        return this._headline
    }
    set headline(e)
    {
        this._headline = e
    }
    get summary()
    {
        return this._summary
    }
    set summary(e)
    {
        this._summary = e
    }
    get numQuestions()
    {
        return this._numQuestions
    }
    set numQuestions(e)
    {
        this._numQuestions = e
    }
    get startMessage()
    {
        return this._startMessage
    }
    set startMessage(e)
    {
        this._startMessage = e
    }
    get endMessage()
    {
        return this._endMessage
    }
    set endMessage(e)
    {
        this._endMessage = e
    }
    get questionArray()
    {
        return this._questionArray
    }
    set questionArray(e)
    {
        this._questionArray = e
    }
    get npsPoll()
    {
        return this._npsPoll
    }
    set npsPoll(e)
    {
        this._npsPoll = e
    }
}
Ni.OFFER = "RSPE_POLL_OFFER";
Ni.ERROR = "RSPE_POLL_ERROR";
Ni.CONTENT = "RSPE_POLL_CONTENT";
class vh extends Ce {
    constructor(e, t, r, i, n, o, l, c, u)
    {
        super(e, t),
        this._classId = 0,
        this._itemType = "",
        this._placedItemId = 0,
        this._placedItemType = "",
        this._classId = r,
        this._itemType = i,
        this._productCode = n,
        this._placedItemId = o,
        this._placedItemType = l,
        this._placedInRoom = c,
        this._petFigureString = u
    }
    get classId()
    {
        return this._classId
    }
    get itemType()
    {
        return this._itemType
    }
    get productCode()
    {
        return this._productCode
    }
    get placedItemId()
    {
        return this._placedItemId
    }
    get placedInRoom()
    {
        return this._placedInRoom
    }
    get placedItemType()
    {
        return this._placedItemType
    }
    get petFigureString()
    {
        return this._petFigureString
    }
}
vh.RSPE_PRESENT_OPENED = "RSPE_PRESENT_OPENED";
class og extends Ce {
    constructor(e, t)
    {
        super(e, t)
    }
}
og.RSDUE_ALLOW_PETS = "RSDUE_ALLOW_PETS";
const rR = class  extends Ce{
    constructor(s, e, t, r=!1)
    {
        super(rR.QUEUE_STATUS, s),
        this._name = e,
        this._target = t,
        this._queues = new Map,
        this._isActive = r
    }
    get isActive()
    {
        return this._isActive
    }
    get queueSetName()
    {
        return this._name
    }
    get queueSetTarget()
    {
        return this._target
    }
    get queueTypes()
    {
        return Array.from(this._queues.keys())
    }
    getQueueSize(s)
    {
        return this._queues.get(s)
    }
    addQueue(s, e)
    {
        this._queues.set(s, e)
    }
}
;
let su = rR;
su.QUEUE_STATUS = "RSQE_QUEUE_STATUS";
su.QUEUE_TYPE_CLUB = "c";
su.QUEUE_TYPE_NORMAL = "d";
su.QUEUE_TARGET_VISITOR = 2;
su.QUEUE_TARGET_SPECTATOR = 1;
class lg extends Ce {
    constructor(e, t)
    {
        super(e, t)
    }
}
lg.SPECTATOR_MODE = "RSSME_SPECTATOR_MODE";
const iR = class  extends Ce{
    constructor(s, e, t)
    {
        super(iR.RSUBE_BADGES, s),
        this._userId = 0,
        this._badges = [],
        this._userId = e,
        this._badges = t
    }
    get userId()
    {
        return this._userId
    }
    get badges()
    {
        return this._badges
    }
}
;
let sm = iR;
sm.RSUBE_BADGES = "RSUBE_BADGES";
const nR = class  extends Ce{
    constructor(s, e)
    {
        super(nR.USER_DATA_UPDATED, s),
        this._addedUsers = e
    }
    get addedUsers()
    {
        return this._addedUsers
    }
}
;
let rm = nR;
rm.USER_DATA_UPDATED = "RMUDUE_USER_DATA_UPDATED";
const aR = class  extends Ce{
    constructor(s, e, t, r, i, n)
    {
        super(aR.USER_FIGURE, s),
        this._roomIndex = 0,
        this._figure = "",
        this._gender = "",
        this._customInfo = "",
        this._roomIndex = e,
        this._figure = t,
        this._gender = r,
        this._customInfo = i,
        this._achievementScore = n
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get figure()
    {
        return this._figure
    }
    get gender()
    {
        return this._gender
    }
    get customInfo()
    {
        return this._customInfo
    }
    get activityPoints()
    {
        return this._achievementScore
    }
}
;
let im = aR;
im.USER_FIGURE = "RSUBE_FIGURE";
const oR = class  extends Ye{
    constructor(s, e)
    {
        super(oR.UTRE_USER_TAGS_RECEIVED),
        this._userId = s,
        this._tags = e
    }
    get userId()
    {
        return this._userId
    }
    get tags()
    {
        return this._tags
    }
}
;
let ZL = oR;
ZL.UTRE_USER_TAGS_RECEIVED = "UTRE_USER_TAGS_RECEIVED";
class Tl extends Ce {
    constructor(e, t, r, i, n=null, o=0)
    {
        super(e, t),
        this._question = "",
        this._SafeStr_7654 = 0,
        this._choices = [],
        this._SafeStr_7651 = [],
        this._question = r,
        this._choices = i,
        this._SafeStr_7651 = n,
        this._SafeStr_7651 == null && (this._SafeStr_7651 = []),
        this._SafeStr_7654 = o
    }
    get question()
    {
        return this._question
    }
    get choices()
    {
        return this._choices.slice()
    }
    get _SafeStr_4173()
    {
        return this._SafeStr_7651.slice()
    }
    get _SafeStr_4174()
    {
        return this._SafeStr_7654
    }
}
Tl.VOTE_QUESTION = "RSPE_VOTE_QUESTION";
Tl.VOTE_RESULT = "RSPE_VOTE_RESULT";
class yi extends Ce {
    constructor(e, t, r=-1)
    {
        super(e, t),
        this._id = -1,
        this._pollType = null,
        this._pollId = -1,
        this._questionId = -1,
        this._duration = -1,
        this._question = null,
        this._userId = -1,
        this._id = r
    }
    get id()
    {
        return this._id
    }
    get pollType()
    {
        return this._pollType
    }
    set pollType(e)
    {
        this._pollType = e
    }
    get pollId()
    {
        return this._pollId
    }
    set pollId(e)
    {
        this._pollId = e
    }
    get questionId()
    {
        return this._questionId
    }
    set questionId(e)
    {
        this._questionId = e
    }
    get duration()
    {
        return this._duration
    }
    set duration(e)
    {
        this._duration = e
    }
    get question()
    {
        return this._question
    }
    set question(e)
    {
        this._question = e
    }
    get userId()
    {
        return this._userId
    }
    set userId(e)
    {
        this._userId = e
    }
    get value()
    {
        return this._value
    }
    set value(e)
    {
        this._value = e
    }
    get answerCounts()
    {
        return this._answerCounts
    }
    set answerCounts(e)
    {
        this._answerCounts = e
    }
}
yi.QUESTION = "RWPUW_NEW_QUESTION";
yi.FINISHED = "RWPUW_QUESION_FINSIHED";
yi.ANSWERED = "RWPUW_QUESTION_ANSWERED";
const lR = class  extends Ye{
    constructor(s)
    {
        super(lR.UPDATED),
        this._uiFlags = s
    }
    get uiFlags()
    {
        return this._uiFlags
    }
}
;
let cR = lR;
cR.UPDATED = "APUE_UPDATED";
const uR = class  extends Ye{
    constructor(s)
    {
        super(uR.UNUE_NAME_UPDATED),
        this._name = s
    }
    get name()
    {
        return this._name
    }
}
;
let cg = uR;
cg.UNUE_NAME_UPDATED = "unue_name_updated";
class $L {
    constructor()
    {
        this._messageIdByEvent = new Map,
        this._messageIdByComposer = new Map,
        this._messageInstancesById = new Map
    }
    dispose()
    {
        this._messageIdByEvent.clear(),
        this._messageIdByComposer.clear(),
        this._messageInstancesById.clear()
    }
    registerMessages(e)
    {
        for (const [t, r] of e.events)
            this.registerMessageEventClass(t, r);
        for (const [t, r] of e.composers)
            this.registerMessageComposerClass(t, r)
    }
    registerMessageEventClass(e, t)
    {
        !e || !t || this._messageIdByEvent.set(t, e)
    }
    registerMessageComposerClass(e, t)
    {
        !e || !t || this._messageIdByComposer.set(t, e)
    }
    registerMessageEvent(e)
    {
        if (!e)
            return;
        const t = this.getEventId(e);
        if (!t)
            return;
        let r = this._messageInstancesById.get(t);
        (!r || !r.length) && (r = [], this._messageInstancesById.set(t, r)),
        r.push(e)
    }
    removeMessageEvent(e)
    {
        if (!e)
            return;
        const t = this.getEventId(e);
        if (!t)
            return;
        const r = this._messageInstancesById.get(t);
        if (r) {
            for (const [i, n] of r.entries())
                if (n && n === e) {
                    r.splice(i, 1),
                    r.length === 0 && this._messageInstancesById.delete(t),
                    n.dispose();
                    return
                }
        }
    }
    getEvents(e)
    {
        if (!e)
            return;
        const t = this._messageInstancesById.get(e);
        if (t)
            return t
    }
    getEventId(e)
    {
        if (!e)
            return -1;
        const t = e instanceof L ? e.constructor : e,
            r = this._messageIdByEvent.get(t);
        return r || -1
    }
    getComposerId(e)
    {
        if (!e)
            return -1;
        const t = this._messageIdByComposer.get(e.constructor);
        return t || -1
    }
}
class eU extends ti {
    constructor(e, t)
    {
        super(),
        this._communicationManager = e,
        this._stateListener = t,
        this._socket = null,
        this._messages = new $L,
        this._codec = new YL,
        this._dataBuffer = null,
        this._isReady = !1,
        this._pendingClientMessages = [],
        this._pendingServerMessages = [],
        this._isAuthenticated = !1,
        this.onOpen = this.onOpen.bind(this),
        this.onClose = this.onClose.bind(this),
        this.onError = this.onError.bind(this),
        this.onMessage = this.onMessage.bind(this)
    }
    init(e)
    {
        this._stateListener && this._stateListener.connectionInit(e),
        this.createSocket(e)
    }
    onDispose()
    {
        super.onDispose(),
        this.destroySocket(),
        this._communicationManager = null,
        this._stateListener = null,
        this._messages = null,
        this._codec = null,
        this._dataBuffer = null
    }
    onReady()
    {
        this._isReady || (this._isReady = !0, this._pendingServerMessages && this._pendingServerMessages.length && this.processWrappers(...this._pendingServerMessages), this._pendingClientMessages && this._pendingClientMessages.length && this.send(...this._pendingClientMessages), this._pendingServerMessages = [], this._pendingClientMessages = [])
    }
    createSocket(e)
    {
        e && (this.destroySocket(), this._dataBuffer = new ArrayBuffer(0), this._socket = new WebSocket(e), this._socket.addEventListener(Si.CONNECTION_OPENED, this.onOpen), this._socket.addEventListener(Si.CONNECTION_CLOSED, this.onClose), this._socket.addEventListener(Si.CONNECTION_ERROR, this.onError), this._socket.addEventListener(Si.CONNECTION_MESSAGE, this.onMessage))
    }
    destroySocket()
    {
        this._socket && (this._socket.removeEventListener(Si.CONNECTION_OPENED, this.onOpen), this._socket.removeEventListener(Si.CONNECTION_CLOSED, this.onClose), this._socket.removeEventListener(Si.CONNECTION_ERROR, this.onError), this._socket.removeEventListener(Si.CONNECTION_MESSAGE, this.onMessage), this._socket.readyState === WebSocket.OPEN && this._socket.close(), this._socket = null)
    }
    onOpen(e)
    {
        this.dispatchConnectionEvent(zs.CONNECTION_OPENED, e)
    }
    onClose(e)
    {
        this.dispatchConnectionEvent(zs.CONNECTION_CLOSED, e)
    }
    onError(e)
    {
        this.dispatchConnectionEvent(zs.CONNECTION_ERROR, e)
    }
    onMessage(e)
    {
        if (!e)
            return;
        const t = new FileReader;
        t.readAsArrayBuffer(e.data),
        t.onloadend = () => {
            this._dataBuffer = this.concatArrayBuffers(this._dataBuffer, t.result),
            this.processReceivedData()
        }
    }
    dispatchConnectionEvent(e, t)
    {
        this.dispatchEvent(new zs(e, this, t))
    }
    authenticated()
    {
        this._isAuthenticated = !0
    }
    send(...e)
    {
        if (this.disposed || !e)
            return !1;
        if (e = [...e], this._isAuthenticated && !this._isReady)
            return this._pendingClientMessages || (this._pendingClientMessages = []), this._pendingClientMessages.push(...e), !1;
        for (const t of e) {
            if (!t)
                continue;
            const r = this._messages.getComposerId(t);
            if (r === -1) {
                pe.packets("Unknown Composer", t.constructor.name);
                continue
            }
            const i = t.getMessageArray(),
                n = this._codec.encode(r, i);
            if (!n) {
                pe.packets("Encoding Failed", t.constructor.name);
                continue
            }
            pe.packets("OutgoingComposer", r, t.constructor.name, i),
            this.write(n.getBuffer())
        }
        return !0
    }
    write(e)
    {
        this._socket.readyState === WebSocket.OPEN && this._socket.send(e)
    }
    processReceivedData()
    {
        try {
            this.processData()
        } catch (e) {
            pe.error(e)
        }
    }
    processData()
    {
        const e = this.splitReceivedMessages();
        if (!(!e || !e.length)) {
            if (this._isAuthenticated && !this._isReady) {
                this._pendingServerMessages || (this._pendingServerMessages = []),
                this._pendingServerMessages.push(...e);
                return
            }
            this.processWrappers(...e)
        }
    }
    processWrappers(...e)
    {
        if (!(!e || !e.length))
            for (const t of e) {
                if (!t)
                    continue;
                const r = this.getMessagesForWrapper(t);
                !r || !r.length || (pe.packets("IncomingMessage", t.header, r[0].constructor.name, r[0].parser), this.handleMessages(...r))
            }
    }
    splitReceivedMessages()
    {
        return !this._dataBuffer || !this._dataBuffer.byteLength ? null : this._codec.decode(this)
    }
    concatArrayBuffers(e, t)
    {
        const r = new Uint8Array(e.byteLength + t.byteLength);
        return r.set(new Uint8Array(e), 0), r.set(new Uint8Array(t), e.byteLength), r.buffer
    }
    getMessagesForWrapper(e)
    {
        if (!e)
            return null;
        const t = this._messages.getEvents(e.header);
        if (!t || !t.length) {
            pe.packets("IncomingMessage", e.header, "UNREGISTERED", e);
            return
        }
        try {
            const r = new t[0].parserClass;
            if (!r || !r.flush() || !r.parse(e))
                return null;
            for (const i of t)
                i.parser = r
        } catch (r) {
            return pe.error("Error parsing message", r, t[0].constructor.name), null
        }
        return t
    }
    handleMessages(...e)
    {
        e = [...e];
        for (const t of e)
            t && (t.connection = this, t.callBack && t.callBack(t))
    }
    registerMessages(e)
    {
        e && this._messages.registerMessages(e)
    }
    addMessageEvent(e)
    {
        !e || !this._messages || this._messages.registerMessageEvent(e)
    }
    removeMessageEvent(e)
    {
        !e || !this._messages || this._messages.removeMessageEvent(e)
    }
    get isAuthenticated()
    {
        return this._isAuthenticated
    }
    get dataBuffer()
    {
        return this._dataBuffer
    }
    set dataBuffer(e)
    {
        this._dataBuffer = e
    }
}
class tU extends ei {
    constructor()
    {
        super(),
        this._connections = []
    }
    onDispose()
    {
        if (!(!this._connections || !this._connections.length))
            for (const e of this._connections.values())
                e && e.dispose()
    }
    createConnection(e=null)
    {
        const t = new eU(this, e);
        if (t)
            return this._connections.push(t), t
    }
    update(e)
    {
        let t = 0;
        for (; t < this._connections.length;) {
            const r = this._connections[t];
            if (r.processReceivedData(), this.disposed)
                return;
            r.disposed ? this._connections.splice(t, 1) : t++
        }
    }
}
class bi extends Ye {
    constructor(e)
    {
        super(e)
    }
}
bi.LOADED = "NCE_LOADED";
bi.FAILED = "NCE_FAILED";
class sU extends bn {
    constructor()
    {
        super(),
        this._definitions = new Map,
        this._config = [],
        this._pendingUrls = [],
        this._missingKeys = [],
        this.onConfigurationLoaded = this.onConfigurationLoaded.bind(this)
    }
    onInit()
    {
        ye.parseConfiguration(this.getDefaultConfig(), !0),
        this._pendingUrls = ye.getValue("config.urls").slice(),
        this.loadNextConfiguration()
    }
    loadNextConfiguration()
    {
        if (!this._pendingUrls.length) {
            this.dispatchConfigurationEvent(bi.LOADED);
            return
        }
        this.loadConfigurationFromUrl(this._pendingUrls[0])
    }
    loadConfigurationFromUrl(e)
    {
        if (!e || e === "") {
            this.dispatchConfigurationEvent(bi.FAILED);
            return
        }
        fetch(e).then(t => t.json()).then(t => this.onConfigurationLoaded(t, e)).catch(t => this.onConfigurationFailed(t))
    }
    onConfigurationLoaded(e, t)
    {
        if (e) {
            if (ye.parseConfiguration(e)) {
                const r = this._pendingUrls.indexOf(t);
                r >= 0 && this._pendingUrls.splice(r, 1),
                this.loadNextConfiguration();
                return
            }
            this.dispatchConfigurationEvent(bi.FAILED)
        }
    }
    onConfigurationFailed(e)
    {
        this.dispatchConfigurationEvent(bi.FAILED)
    }
    dispatchConfigurationEvent(e)
    {
        this.events && this.events.dispatchEvent(new bi(e))
    }
    getDefaultConfig()
    {
        return NitroConfig
    }
}
const pc = class {
    static sayHello()
    {
        if (navigator.userAgent.toLowerCase().indexOf("chrome") > -1) {
            const s = [`
 %c %c %c Nitro ${pc.UI_VERSION} - Renderer ${pc.RENDERER_VERSION} %c %c %c https://discord.nitrodev.co %c %c 

`

            , "background: #ffffff; padding:5px 0;", "background: #ffffff; padding:5px 0;", "color: #ffffff; background: #000000; padding:5px 0;", "background: #ffffff; padding:5px 0;", "background: #ffffff; padding:5px 0;", "background: #000000; padding:5px 0;", "background: #ffffff; padding:5px 0;", "background: #ffffff; padding:5px 0;"];
            self.console.log(...s)
        } else
            self.console && self.console.log(`Nitro ${pc.UI_VERSION} - Renderer ${pc.RENDERER_VERSION} `)
    }
}
;
let Ql = pc;
Ql.RENDERER_VERSION = "1.6.6";
Ql.UI_VERSION = "";
class rU extends ei {
    constructor()
    {
        super(),
        Ql.sayHello(),
        this._configuration = new sU,
        this._communication = new tU
    }
    onDispose()
    {
        this._communication && (this._communication.dispose(), this._communication = null)
    }
    get configuration()
    {
        return this._configuration
    }
    get communication()
    {
        return this._communication
    }
}
class iU {
    constructor(e)
    {
        this._id = parseInt(e.id),
        this._value = parseInt(e.id),
        this._prevents = e.prevents || [],
        this._preventHeadTurn = e.preventHeadTurn || !1,
        this._isAnimated = !0,
        e.animated !== void 0 && e.animated === !1 && (this._isAnimated = !1)
    }
    get id()
    {
        return this._id
    }
    get value()
    {
        return this._value
    }
    get prevents()
    {
        return this._prevents
    }
    get preventHeadTurn()
    {
        return this._preventHeadTurn
    }
    get isAnimated()
    {
        return this._isAnimated
    }
}
class nU {
    constructor(e)
    {
        if (this._id = e.id, this._state = e.state, this._precedence = e.precedence, this._activePartSet = e.activePartSet, this._assetPartDefinition = e.assetPartDefinition, this._lay = e.lay, this._geometryType = e.geometryType, this._isMain = e.main || !1, this._isDefault = e.isDefault || !1, this._isAnimation = e.animation || !1, this._startFromFrameZero = e.startFromFrameZero || !1, this._prevents = e.prevents || [], this._preventHeadTurn = e.preventHeadTurn || !1, this._types = new Map, this._params = new Map, this._defaultParameterValue = "", this._canvasOffsets = null, e.params && e.params.length > 0)
            for (const t of e.params)
                t && (t.id === "default" ? this._defaultParameterValue = t.value : this._params.set(t.id, t.value));
        if (e.types && e.types.length > 0)
            for (const t of e.types) {
                if (!t)
                    continue;
                const r = new iU(t);
                this._types.set(r.id, r)
            }
    }
    setOffsets(e, t, r)
    {
        this._canvasOffsets || (this._canvasOffsets = new Map);
        let i = this._canvasOffsets.get(e);
        i || (i = new Map, this._canvasOffsets.set(e, i)),
        i.set(t, r)
    }
    getOffsets(e, t)
    {
        if (!this._canvasOffsets)
            return null;
        const r = this._canvasOffsets.get(e);
        return r ? r.get(t) : null
    }
    getType(e)
    {
        if (!e)
            return null;
        const t = this._types.get(parseInt(e));
        return t || null
    }
    getParameterValue(e)
    {
        if (!e)
            return "";
        const t = this._params.get(e);
        return t || this._defaultParameterValue
    }
    getPrevents(e)
    {
        return this._prevents.concat(this.getTypePrevents(e))
    }
    getTypePrevents(e)
    {
        if (!e)
            return [];
        const t = this._types.get(parseInt(e));
        return t ? t.prevents : []
    }
    getPreventHeadTurn(e)
    {
        if (!e)
            return this._preventHeadTurn;
        const t = this.getType(e);
        return t ? t.preventHeadTurn : this._preventHeadTurn
    }
    isAnimated(e)
    {
        if (!e)
            return !0;
        const t = this.getType(e);
        return t ? t.isAnimated : !0
    }
    get id()
    {
        return this._id
    }
    get state()
    {
        return this._state
    }
    get precedence()
    {
        return this._precedence
    }
    get activePartSet()
    {
        return this._activePartSet
    }
    get assetPartDefinition()
    {
        return this._assetPartDefinition
    }
    get lay()
    {
        return this._lay
    }
    get geometryType()
    {
        return this._geometryType
    }
    get isMain()
    {
        return this._isMain
    }
    get isDefault()
    {
        return this._isDefault
    }
    get isAnimation()
    {
        return this._isAnimation
    }
    get startFromFrameZero()
    {
        return this._startFromFrameZero
    }
    get prevents()
    {
        return this._prevents
    }
    get preventHeadTurn()
    {
        return this._preventHeadTurn
    }
    get params()
    {
        return this._params
    }
}
class ug {
    constructor(e, t="", r=0)
    {
        this._actionType = e || "",
        this._actionParameter = t || "",
        this._definition = null,
        this._startFrame = r || 0,
        this._overridingAction = null
    }
    dispose()
    {
        this._actionType = null,
        this._actionParameter = null,
        this._definition = null
    }
    get id()
    {
        return this._definition ? this._definition.id + "_" + this._actionParameter : ""
    }
    get actionType()
    {
        return this._actionType
    }
    get actionParameter()
    {
        return this._actionParameter
    }
    set actionParameter(e)
    {
        this._actionParameter = e
    }
    get definition()
    {
        return this._definition
    }
    set definition(e)
    {
        this._definition = e
    }
    get startFrame()
    {
        return this._startFrame
    }
    get overridingAction()
    {
        return this._overridingAction
    }
    set overridingAction(e)
    {
        this._overridingAction = e
    }
}
class aU {
    constructor(e, t)
    {
        this._assets = e,
        this._actions = new Map,
        this._defaultAction = null,
        this.updateActions(t)
    }
    updateActions(e)
    {
        if (e) {
            for (const t of e.actions) {
                if (!t || !t.state)
                    continue;
                const r = new nU(t);
                this._actions.set(r.state, r)
            }
            e.actionOffsets && this.parseActionOffsets(e.actionOffsets)
        }
    }
    parseActionOffsets(e)
    {
        if (!(!e || !e.length))
            for (const t of e) {
                const r = this._actions.get(t.action);
                if (r)
                    for (const i of t.offsets) {
                        const n = i.size || "",
                            o = i.direction;
                        if (n === "" || o === void 0)
                            continue;
                        const l = i.x || 0,
                            c = i.y || 0,
                            u = i.z || 0;
                        r.setOffsets(n, o, [l, c, u])
                    }
            }
    }
    getActionDefinition(e)
    {
        if (!e)
            return null;
        for (const t of this._actions.values())
            if (!(!t || t.id !== e))
                return t;
        return null
    }
    getActionDefinitionWithState(e)
    {
        const t = this._actions.get(e);
        return t || null
    }
    getDefaultAction()
    {
        if (this._defaultAction)
            return this._defaultAction;
        for (const e of this._actions.values())
            if (!(!e || !e.isDefault))
                return this._defaultAction = e, e;
        return null
    }
    getCanvasOffsets(e, t, r)
    {
        let i = [];
        for (const n of e) {
            if (!n)
                continue;
            const o = this._actions.get(n.actionType),
                l = o && o.getOffsets(t, r);
            l && (i = l)
        }
        return i
    }
    sortActions(e)
    {
        if (!e)
            return null;
        e = this.filterActions(e);
        const t = [];
        for (const r of e) {
            if (!r)
                continue;
            const i = this._actions.get(r.actionType);
            i && (r.definition = i, t.push(r))
        }
        return t.sort(this.sortByPrecedence), t
    }
    filterActions(e)
    {
        let t = [];
        const r = [];
        for (const i of e) {
            if (!i)
                continue;
            const n = this._actions.get(i.actionType);
            n && (t = t.concat(n.getPrevents(i.actionParameter)))
        }
        for (const i of e) {
            if (!i)
                continue;
            let n = i.actionType;
            i.actionType === "fx" && (n = n + ("." + i.actionParameter)),
            !(t.indexOf(n) >= 0) && r.push(i)
        }
        return r
    }
    sortByPrecedence(e, t)
    {
        if (!e || !t)
            return 0;
        const r = e.definition.precedence,
            i = t.definition.precedence;
        return r < i ? 1 : r > i ? -1 : 0
    }
}
class oU {
    constructor(e, t)
    {
        this._name = e,
        this._link = t.link,
        this._flipH = t.flipH,
        this._flipV = t.flipV
    }
    get name()
    {
        return this._name
    }
    get link()
    {
        return this._link
    }
    get flipH()
    {
        return this._flipH
    }
    get flipV()
    {
        return this._flipV
    }
}
class lU {
    constructor(e, t)
    {
        this._avatarRenderManager = e,
        this._aliases = new Map,
        this._assets = t,
        this._missingAssetNames = []
    }
    dispose()
    {
        this._assets = null,
        this._aliases = null
    }
    reset()
    {
        this.init()
    }
    init()
    {
        for (const e of this._assets.collections.values()) {
            if (!e)
                continue;
            const t = e.data && e.data.aliases;
            if (t)
                for (const r in t) {
                    const i = t[r];
                    i && this._aliases.set(r, new oU(r, i))
                }
        }
    }
    hasAlias(e)
    {
        return !!this._aliases.get(e)
    }
    getAssetName(e)
    {
        let t = e,
            r = 5;
        for (; this.hasAlias(t) && r >= 0;)
            t = this._aliases.get(t).link,
            r--;
        return t
    }
    getAsset(e)
    {
        if (!this._assets)
            return null;
        e = this.getAssetName(e);
        const t = this._assets.getAsset(e);
        return t || null
    }
}
class cU {
    constructor(e)
    {
        this._id = e.id || "",
        this._align = e.align || "",
        this._base = e.base || "",
        this._ink = e.ink || 0,
        this._blend = 0;
        const t = e.blend;
        t && t.length > 0 && (this._blend = parseInt(t), this._blend > 1 && (this._blend = this._blend / 100))
    }
    get id()
    {
        return this._id
    }
    get align()
    {
        return this._align
    }
    get base()
    {
        return this._base
    }
    get ink()
    {
        return this._ink
    }
    get blend()
    {
        return this._blend
    }
    get isBlended()
    {
        return this._blend !== 1
    }
}
class Yi {
    constructor(e, t, r)
    {
        if (this._id = e.id, this._animationFrame = e.frame || 0, this._dx = e.dx || 0, this._dy = e.dy || 0, this._dz = e.dz || 0, this._directionOffset = e.dd || 0, this._type = t, this._base = e.base || "", this._items = new Map, e.items)
            for (const i of e.items)
                this._items.set(i.id, i.base);
        this._base !== "" && this.baseAsInt().toString(),
        r && (this._action = new ug(r.state, this.base), this._action.definition = r)
    }
    get items()
    {
        return this._items
    }
    baseAsInt()
    {
        let e = 0,
            t = 0;
        for (; t < this._base.length;)
            e = e + this._base.charCodeAt(t),
            t++;
        return e
    }
    get id()
    {
        return this._id
    }
    get animationFrame()
    {
        return this._animationFrame
    }
    get dx()
    {
        return this._dx
    }
    get dy()
    {
        return this._dy
    }
    get dz()
    {
        return this._dz
    }
    get dd()
    {
        return this._directionOffset
    }
    get type()
    {
        return this._type
    }
    get base()
    {
        return this._base
    }
    get action()
    {
        return this._action
    }
}
Yi.BODYPART = "bodypart";
Yi.FX = "fx";
class uU {
    constructor(e)
    {
        this._ink = e.ink;
        let t = e.foreground,
            r = e.background;
        t = t.replace("#", ""),
        r = r.replace("#", ""),
        this._foreGround = parseInt(t, 16),
        this._backGround = parseInt(r, 16),
        this._colorTransform = null,
        this._rgb = parseInt(t, 16),
        this._r = this._rgb >> 16 & 255,
        this._g = this._rgb >> 8 & 255,
        this._b = this._rgb >> 0 & 255,
        this._redMultiplier = this._r / 255 * 1,
        this._greenMultiplier = this._g / 255 * 1,
        this._blueMultiplier = this._b / 255 * 1,
        this._alphaMultiplier = 1,
        this._paletteIsGrayscale = !0,
        this._ink === 37 && (this._alphaMultiplier = .5, this._paletteIsGrayscale = !1),
        this._colorTransform = new dT({
            red: this._r / 255,
            green: this._g / 255,
            blue: this._b / 255,
            alpha: this._alphaMultiplier
        }),
        this._colorMap = this.generatePaletteMapForGrayscale(this._backGround, this._foreGround)
    }
    get ink()
    {
        return this._ink
    }
    get colorTransform()
    {
        return this._colorTransform
    }
    get reds()
    {
        return this._colorMap.get("reds")
    }
    get greens()
    {
        return this._colorMap.get("greens")
    }
    get blues()
    {
        return this._colorMap.get("blues")
    }
    get alphas()
    {
        return this._colorMap.get("alphas")
    }
    get paletteIsGrayscale()
    {
        return this._paletteIsGrayscale
    }
    generatePaletteMapForGrayscale(e, t)
    {
        const r = e >> 24 & 255,
            i = e >> 16 & 255,
            n = e >> 8 & 255,
            o = e >> 0 & 255,
            l = t >> 24 & 255,
            c = t >> 16 & 255,
            u = t >> 8 & 255,
            h = t >> 0 & 255,
            d = (l - r) / 255,
            m = (c - i) / 255,
            p = (u - n) / 255,
            E = (h - o) / 255,
            T = new Map,
            I = [],
            S = [],
            A = [];
        let N = r,
            b = i,
            v = n,
            D = o;
        for (let G = 0; G < 256; G++)
            b == i && v == n && D == o && (N = 0),
            N = N + d,
            b = b + m,
            v = v + p,
            D = D + E,
            I.push(N << 24 | b << 16 | v << 8 | D),
            S.push(N << 24 | b << 16 | v << 8 | D),
            A.push(N << 24 | b << 16 | v << 8 | D);
        return T.set("alphas", I), T.set("reds", I), T.set("greens", S), T.set("blues", A), T
    }
}
class hU {
    constructor(e)
    {
        this._offset = e.offset
    }
    get offset()
    {
        return this._offset
    }
}
class dU {
    constructor(e, t)
    {
        this._animation = e,
        this._id = t.id,
        this._ink = t.ink,
        this._member = t.member,
        this._hasStaticY = !!t.staticY,
        this._hasDirections = !!t.directions,
        this._dx = [],
        this._dy = [],
        this._dz = [];
        const r = t.directionList;
        if (r && r.length)
            for (const i of r) {
                const n = i.id;
                n !== void 0 && (this._dx[n] = i.dx || 0, this._dy[n] = i.dy || 0, this._dz[n] = i.dz || 0)
            }
    }
    getDirectionOffsetX(e)
    {
        return e < this._dx.length ? this._dx[e] : 0
    }
    getDirectionOffsetY(e)
    {
        return e < this._dy.length ? this._dy[e] : 0
    }
    getDirectionOffsetZ(e)
    {
        return e < this._dz.length ? this._dz[e] : 0
    }
    get animation()
    {
        return this._animation
    }
    get id()
    {
        return this._id
    }
    get ink()
    {
        return this._ink
    }
    get member()
    {
        return this._member
    }
    get hasDirections()
    {
        return this._hasDirections
    }
    get hasStaticY()
    {
        return this._hasStaticY
    }
}
const lh = class {
    constructor(s, e)
    {
        if (this._id = e.name, this._description = this._id, this._frames = [], this._spriteData = null, this._avatarData = null, this._directionData = null, this._removeData = null, this._addData = null, this._overriddenActions = null, this._overrideFrames = null, this._resetOnToggle = e.resetOnToggle || !1, e.sprites && e.sprites.length) {
            this._spriteData = [];
            for (const t of e.sprites)
                this._spriteData.push(new dU(this, t))
        }
        if (e.avatars && e.avatars.length && (this._avatarData = new uU(e.avatars[0])), e.directions && e.directions.length && (this._directionData = new hU(e.directions[0])), e.removes && e.removes.length) {
            this._removeData = [];
            for (const t of e.removes)
                this._removeData.push(t.id)
        }
        if (e.adds && e.adds.length) {
            this._addData = [];
            for (const t of e.adds)
                this._addData.push(new cU(t))
        }
        if (e.overrides && e.overrides.length) {
            this._overrideFrames = new Map,
            this._overriddenActions = new Map;
            for (const t of e.overrides) {
                const r = t.name,
                    i = t.override;
                this._overriddenActions.set(i, r);
                const n = [];
                this.parseFrames(n, t.frames, s),
                this._overrideFrames.set(r, n)
            }
        }
        this.parseFrames(this._frames, e.frames, s)
    }
    parseFrames(s, e, t)
    {
        if (!(!e || !e.length))
            for (const r of e) {
                let i = 1;
                r.repeats && r.repeats > 1 && (i = r.repeats);
                let n = 0;
                for (; n < i;) {
                    const o = [];
                    if (r.bodyparts && r.bodyparts.length)
                        for (const l of r.bodyparts) {
                            const c = t.getActionDefinition(l.action),
                                u = new Yi(l, Yi.BODYPART, c);
                            o.push(u)
                        }
                    if (r.fxs && r.fxs.length)
                        for (const l of r.fxs) {
                            const c = t.getActionDefinition(l.action),
                                u = new Yi(l, Yi.FX, c);
                            o.push(u)
                        }
                    s.push(o),
                    n++
                }
            }
    }
    frameCount(s=null)
    {
        if (!s)
            return this._frames.length;
        if (this._overrideFrames) {
            const e = this._overrideFrames.get(s);
            if (e)
                return e.length
        }
        return 0
    }
    hasOverriddenActions()
    {
        return this._overriddenActions ? this._overriddenActions.size > 0 : !1
    }
    overriddenActionNames()
    {
        if (!this._overriddenActions)
            return null;
        const s = [];
        for (const e of this._overriddenActions.keys())
            s.push(e);
        return s
    }
    overridingAction(s)
    {
        return this._overriddenActions ? this._overriddenActions.get(s) : null
    }
    getFrame(s, e=null)
    {
        s < 0 && (s = 0);
        let t = [];
        if (!e)
            this._frames.length > 0 && (t = this._frames[s % this._frames.length]);
        else {
            const r = this._overrideFrames.get(e);
            r && r.length > 0 && (t = r[s % r.length])
        }
        return t
    }
    getAnimatedBodyPartIds(s, e=null)
    {
        const t = [];
        for (const r of this.getFrame(s, e))
            if (r.type === Yi.BODYPART)
                t.push(r.id);
            else if (r.type === Yi.FX && this._addData && this._addData.length)
                for (const i of this._addData)
                    i.id === r.id && t.push(i.align);
        return t
    }
    getLayerData(s, e, t=null)
    {
        for (const r of this.getFrame(s, t)) {
            if (r.id === e)
                return r;
            if (r.type === Yi.FX && this._addData && this._addData.length) {
                for (const i of this._addData)
                    if (i.align === e && i.id === r.id)
                        return r
            }
        }
        return null
    }
    hasAvatarData()
    {
        return this._avatarData !== null
    }
    hasDirectionData()
    {
        return this._directionData !== null
    }
    hasAddData()
    {
        return this._addData !== null
    }
    getAddData(s)
    {
        if (this._addData) {
            for (const e of this._addData)
                if (e.id === s)
                    return e
        }
        return null
    }
    get id()
    {
        return this._id
    }
    get spriteData()
    {
        return this._spriteData || lh.EMPTY_ARRAY
    }
    get avatarData()
    {
        return this._avatarData
    }
    get directionData()
    {
        return this._directionData
    }
    get removeData()
    {
        return this._removeData || lh.EMPTY_ARRAY
    }
    get addData()
    {
        return this._addData || lh.EMPTY_ARRAY
    }
    toString()
    {
        return this._description
    }
    get resetOnToggle()
    {
        return this._resetOnToggle
    }
}
;
let hR = lh;
hR.EMPTY_ARRAY = [];
class _U {
    constructor()
    {
        this._animations = new Map
    }
    registerAnimation(e, t)
    {
        if (!t)
            return !1;
        const r = t[Object.keys(t)[0]],
            i = new hR(e, r);
        return this._animations.set(r.name, i), !0
    }
    getAnimation(e)
    {
        const t = this._animations.get(e);
        return t || null
    }
    getLayerData(e, t, r)
    {
        const i = this.getAnimation(e);
        return i ? i.getLayerData(t, r) : null
    }
    get animations()
    {
        return this._animations
    }
}
const Fn = class  extends ti{
    constructor(s, e, t, r)
    {
        super(),
        this._state = Fn.NOT_LOADED,
        this._libraryName = s,
        this._revision = e,
        this._downloadUrl = r,
        this._assets = t,
        this._downloadUrl = this._downloadUrl.replace(/%libname%/gi, this._libraryName),
        this._downloadUrl = this._downloadUrl.replace(/%revision%/gi, this._revision),
        this._assets.getCollection(this._libraryName) && (this._state = Fn.LOADED)
    }
    async downloadAsset()
    {
        if (!this._assets || this._state === Fn.LOADING || this._state === Fn.LOADED)
            return;
        if (this._assets.getCollection(this._libraryName)) {
            this._state = Fn.LOADED,
            this.dispatchEvent(new pl(pl.DOWNLOAD_COMPLETE, this));
            return
        }
        this._state = Fn.LOADING,
        await this._assets.downloadAsset(this._downloadUrl) && (this._state = Fn.LOADED, this.dispatchEvent(new pl(pl.DOWNLOAD_COMPLETE, this)))
    }
    get libraryName()
    {
        return this._libraryName
    }
    get isLoaded()
    {
        return this._state === Fn.LOADED
    }
}
;
let ru = Fn;
ru.DOWNLOAD_COMPLETE = "AADL_DOWNLOAD_COMPLETE";
ru.NOT_LOADED = 0;
ru.LOADING = 1;
ru.LOADED = 2;
const hg = class  extends ti{
    constructor(s, e)
    {
        super(),
        this._assets = s,
        this._structure = e,
        this._missingMandatoryLibs = ye.getValue("avatar.mandatory.libraries"),
        this._figureMap = new Map,
        this._pendingContainers = [],
        this._figureListeners = new Map,
        this._incompleteFigures = new Map,
        this._pendingDownloadQueue = [],
        this._currentDownloads = [],
        this._libraryNames = [],
        this._isReady = !1,
        this.onLibraryLoaded = this.onLibraryLoaded.bind(this),
        this.onAvatarRenderReady = this.onAvatarRenderReady.bind(this),
        this.loadFigureMap(),
        this._structure.renderManager.events.addEventListener(Cd.AVATAR_RENDER_READY, this.onAvatarRenderReady)
    }
    loadFigureMap()
    {
        const s = new XMLHttpRequest;
        try {
            s.open("GET", ye.getValue("avatar.figuremap.url")),
            s.send(),
            s.onloadend = e => {
                if (s.responseText) {
                    const t = JSON.parse(s.responseText);
                    this.processFigureMap(t.libraries),
                    this.processMissingLibraries(),
                    this._isReady = !0,
                    this.dispatchEvent(new Ye(hg.DOWNLOADER_READY))
                }
            },
            s.onerror = e => {
                throw new Error("invalid_avatar_figure_map")
            }
        } catch (e) {
            pe.error(e)
        }
    }
    processFigureMap(s)
    {
        if (s)
            for (const e of s) {
                if (!e)
                    continue;
                const t = e.id,
                    r = e.revision || "";
                if (this._libraryNames.indexOf(t) >= 0)
                    continue;
                this._libraryNames.push(t);
                const i = new ru(t, r, this._assets, ye.getValue("avatar.asset.url"));
                i.addEventListener(pl.DOWNLOAD_COMPLETE, this.onLibraryLoaded);
                for (const n of e.parts) {
                    const o = n.id,
                        c = n.type + ":" + o;
                    let u = this._figureMap.get(c);
                    u || (u = []),
                    u.push(i),
                    this._figureMap.set(c, u)
                }
            }
    }
    onAvatarRenderReady(s)
    {
        if (s) {
            for (const [e, t] of this._pendingContainers)
                this.downloadAvatarFigure(e, t);
            this._pendingContainers = []
        }
    }
    onLibraryLoaded(s)
    {
        if (!s || !s.library)
            return;
        const e = [];
        for (const [r, i] of this._incompleteFigures.entries()) {
            let n = !0;
            for (const o of i)
                if (!(!o || o.isLoaded)) {
                    n = !1;
                    break
                }
            if (n) {
                e.push(r);
                const o = this._figureListeners.get(r);
                if (o)
                    for (const l of o)
                        !l || l.disposed || l.resetFigure(r);
                this._figureListeners.delete(r),
                this.dispatchEvent(new Ye(hg.LIBRARY_LOADED))
            }
        }
        for (const r of e)
            r && this._incompleteFigures.delete(r);
        let t = 0;
        for (; t < this._currentDownloads.length;) {
            const r = this._currentDownloads[t];
            r && r.libraryName === s.library.libraryName && this._currentDownloads.splice(t, 1),
            t++
        }
    }
    processMissingLibraries()
    {
        const s = this._missingMandatoryLibs.slice();
        for (const e of s) {
            if (!e)
                continue;
            const t = this._figureMap.get(e);
            if (t)
                for (const r of t)
                    r && this.downloadLibrary(r)
        }
    }
    isAvatarFigureContainerReady(s)
    {
        return !this._isReady || !this._structure.renderManager.isReady ? !1 : !this.getAvatarFigurePendingLibraries(s).length
    }
    getAvatarFigurePendingLibraries(s)
    {
        const e = [];
        if (!s || !this._structure)
            return e;
        const t = this._structure.figureData;
        if (!t)
            return e;
        const r = s.getPartTypeIds();
        for (const i of r) {
            const n = t.getSetType(i);
            if (!n)
                continue;
            const o = n.getPartSet(s.getPartSetId(i));
            if (o)
                for (const l of o.parts) {
                    if (!l)
                        continue;
                    const c = l.type + ":" + l.id,
                        u = this._figureMap.get(c);
                    if (u !== void 0)
                        for (const h of u)
                            !h || h.isLoaded || e.indexOf(h) >= 0 || e.push(h)
                }
        }
        return e
    }
    downloadAvatarFigure(s, e)
    {
        if (!this._isReady || !this._structure.renderManager.isReady) {
            this._pendingContainers.push([s, e]);
            return
        }
        const t = s.getFigureString(),
            r = this.getAvatarFigurePendingLibraries(s);
        if (r && r.length) {
            if (e && !e.disposed) {
                let i = this._figureListeners.get(t);
                i || (i = [], this._figureListeners.set(t, i)),
                i.push(e)
            }
            this._incompleteFigures.set(t, r);
            for (const i of r)
                i && this.downloadLibrary(i)
        } else
            e && !e.disposed && e.resetFigure(t)
    }
    downloadLibrary(s)
    {
        !s || s.isLoaded || this._pendingDownloadQueue.indexOf(s) >= 0 || this._currentDownloads.indexOf(s) >= 0 || (this._pendingDownloadQueue.push(s), this.processDownloadQueue())
    }
    processDownloadQueue()
    {
        for (; this._pendingDownloadQueue.length;)
            this._pendingDownloadQueue[0].downloadAsset(),
            this._currentDownloads.push(this._pendingDownloadQueue.shift())
    }
}
;
let ba = hg;
ba.DOWNLOADER_READY = "AADM_DOWNLOADER_READY";
ba.LIBRARY_LOADED = "AADM_LIBRARY_LOADED";
ba.MAX_DOWNLOADS = 2;
class Lc {
    constructor(e)
    {
        this._parts = new Map,
        this.parseFigure(e)
    }
    getPartTypeIds()
    {
        return this.partSets().keys()
    }
    hasPartType(e)
    {
        return !!this.partSets().get(e)
    }
    getPartSetId(e)
    {
        const t = this.partSets().get(e);
        return t ? t.get("setid") : 0
    }
    getPartColorIds(e)
    {
        const t = this.partSets().get(e);
        return t ? t.get("colorids") : null
    }
    updatePart(e, t, r)
    {
        const i = new Map;
        i.set("type", e),
        i.set("setid", t),
        i.set("colorids", r);
        const n = this.partSets();
        n.delete(e),
        n.set(e, i)
    }
    removePart(e)
    {
        this.partSets().delete(e)
    }
    getFigureString()
    {
        const e = [];
        for (const t of this.partSets().keys()) {
            if (!t)
                continue;
            let r = [];
            r.push(t),
            r.push(this.getPartSetId(t)),
            r = r.concat(this.getPartColorIds(t)),
            e.push(r.join("-"))
        }
        return e.join(".")
    }
    partSets()
    {
        return this._parts || (this._parts = new Map), this._parts
    }
    parseFigure(e)
    {
        e || (e = "");
        for (const t of e.split(".")) {
            const r = t.split("-");
            if (r.length >= 2) {
                const i = r[0],
                    n = parseInt(r[1]),
                    o = [];
                let l = 2;
                for (; l < r.length;)
                    o.push(parseInt(r[l])),
                    l++;
                this.updatePart(i, n, o)
            }
        }
    }
}
class gU {
    constructor()
    {
        this._cache = new Map,
        this.setLastAccessTime(Pe())
    }
    dispose()
    {
        if (this.debugInfo("[dispose]"), !!this._cache) {
            for (const e of this._cache.values())
                e && e.dispose();
            this._cache.clear()
        }
    }
    getDirectionCache(e)
    {
        const t = this._cache.get(e.toString());
        return t || null
    }
    updateDirectionCache(e, t)
    {
        this._cache.set(e.toString(), t)
    }
    setLastAccessTime(e)
    {
        this._lastAccessTime = e
    }
    getLastAccessTime()
    {
        return this._lastAccessTime
    }
    debugInfo(e) {}
}
class up {
    constructor()
    {
        this._cache = new Map
    }
    setAction(e, t)
    {
        this._currentAction || (this._currentAction = e);
        const r = this.getActionCache(this._currentAction);
        r && r.setLastAccessTime(t),
        this._currentAction = e
    }
    dispose()
    {
        if (!this._disposed) {
            if (!this._cache)
                return;
            this.disposeActions(0, 2147483647),
            this._cache.clear(),
            this._cache = null,
            this._disposed = !0
        }
    }
    disposeActions(e, t)
    {
        if (!(!this._cache || this._disposed))
            for (const [r, i] of this._cache.entries()) {
                if (!i)
                    continue;
                const n = i.getLastAccessTime();
                t - n >= e && (i.dispose(), this._cache.delete(r))
            }
    }
    getAction()
    {
        return this._currentAction
    }
    setDirection(e)
    {
        this._currentDirection = e
    }
    getDirection()
    {
        return this._currentDirection
    }
    getActionCache(e=null)
    {
        return this._currentAction ? (e || (e = this._currentAction), e.overridingAction ? this._cache.get(e.overridingAction) : this._cache.get(e.id)) : null
    }
    updateActionCache(e, t)
    {
        e.overridingAction ? this._cache.set(e.overridingAction, t) : this._cache.set(e.id, t)
    }
    debugInfo(e) {}
}
class fU {
    constructor(e, t, r)
    {
        this._image = e,
        this._regPoint = t,
        this._offset = new Ge(0, 0),
        this._regPoint = t,
        this._isCacheable = r,
        this.cleanPoints()
    }
    dispose()
    {
        this._image && this._image.destroy({
            children: !0
        }),
        this._image = null,
        this._regPoint = null,
        this._offset = null
    }
    cleanPoints() {}
    setRegPoint(e)
    {
        this._regPoint = e,
        this.cleanPoints()
    }
    get image()
    {
        return this._image
    }
    set image(e)
    {
        this._image && this._image !== e && this._image.destroy({
            children: !0
        }),
        this._image = e
    }
    get regPoint()
    {
        const e = this._regPoint.clone();
        return e.x += this._offset.x, e.y += this._offset.y, e
    }
    set offset(e)
    {
        this._offset = e,
        this.cleanPoints()
    }
    get isCacheable()
    {
        return this._isCacheable
    }
}
class mU {
    constructor(e)
    {
        this._partList = e,
        this._images = new Map
    }
    dispose()
    {
        for (const e of this._images.values())
            e && e.dispose();
        this._images = null
    }
    getPartList()
    {
        return this._partList
    }
    getImageContainer(e)
    {
        const t = this._images.get(this.getCacheKey(e));
        return t || null
    }
    updateImageContainer(e, t)
    {
        const r = this.getCacheKey(t),
            i = this._images.get(r);
        i && i.dispose(),
        this._images.set(r, e)
    }
    getCacheKey(e)
    {
        let t = "";
        for (const r of this._partList)
            t += r.getCacheableKey(e) + "/";
        return t
    }
    debugInfo(e) {}
}
class hp {
    constructor(e, t, r, i, n, o=null)
    {
        this._texture = e,
        this._container = o,
        this._rect = t,
        this._regPoint = r,
        this._flipH = i,
        this._colorTransform = n,
        i && (this._regPoint.x = -this._regPoint.x + t.width)
    }
    dispose()
    {
        this._texture = null,
        this._regPoint = null,
        this._colorTransform = null
    }
    get texture()
    {
        return this._texture
    }
    get container()
    {
        return this._container
    }
    get rect()
    {
        return this._rect
    }
    get regPoint()
    {
        return this._regPoint
    }
    get flipH()
    {
        return this._flipH
    }
    get colorTransform()
    {
        return this._colorTransform
    }
    get offsetRect()
    {
        return new Qr(-this._regPoint.x, -this._regPoint.y, this._rect.width, this._rect.height)
    }
}
class dR {
    constructor(e, t, r, i)
    {
        this._structure = e,
        this._avatar = t,
        this._assets = r,
        this._scale = i,
        this._cache = new Map,
        this._canvas = null,
        this._disposed = !1,
        this._unionImages = [],
        this._matrix = new Pr,
        this._serverRenderData = []
    }
    dispose()
    {
        if (!this._disposed) {
            if (this._structure = null, this._avatar = null, this._assets = null, this._canvas = null, this._disposed = !0, this._cache) {
                for (const e of this._cache.values())
                    e && e.dispose();
                this._cache = null
            }
            if (this._unionImages) {
                for (const e of this._unionImages)
                    e && e.dispose();
                this._unionImages = []
            }
        }
    }
    disposeInactiveActions(e=6e4)
    {
        const t = Pe();
        if (this._cache)
            for (const r of this._cache.values())
                r && r.disposeActions(e, t)
    }
    resetBodyPartCache(e)
    {
        if (this._cache)
            for (const t of this._cache.values())
                t && t.setAction(e, 0)
    }
    setDirection(e, t)
    {
        const r = this._structure.getBodyPartsUnordered(e);
        if (r)
            for (const i of r) {
                const n = this.getBodyPartCache(i);
                n && n.setDirection(t)
            }
    }
    setAction(e, t)
    {
        const r = this._structure.getActiveBodyPartIds(e, this._avatar);
        for (const i of r) {
            const n = this.getBodyPartCache(i);
            n && n.setAction(e, t)
        }
    }
    setGeometryType(e)
    {
        if (this._geometryType !== e) {
            if (this._geometryType === Ki.SITTING && e === Ki.VERTICAL || this._geometryType === Ki.VERTICAL && e === Ki.SITTING || this._geometryType === Ki.SNOWWARS_HORIZONTAL && (e = Ki.SNOWWARS_HORIZONTAL)) {
                this._geometryType = e,
                this._canvas = null;
                return
            }
            this.disposeInactiveActions(0),
            this._geometryType = e,
            this._canvas = null
        }
    }
    getImageContainer(e, t, r=!1)
    {
        let i = this.getBodyPartCache(e);
        i || (i = new up, this._cache.set(e, i));
        let n = i.getDirection(),
            o = i.getAction(),
            l = t;
        o.definition.startFromFrameZero && (l -= o.startFrame);
        let c = o,
            u = [],
            h = new Map;
        const d = new Ge;
        if (!(!o || !o.definition) && o.definition.isAnimation) {
            let I = n;
            const S = this._structure.getAnimation(o.definition.state + "." + o.actionParameter),
                A = t - o.startFrame;
            if (S) {
                const N = S.getLayerData(A, e, o.overridingAction);
                N && (I = n + N.dd, N.dd < 0 ? I < 0 ? I = 8 + I : I > 7 && (I = 8 - I) : I < 0 ? I = I + 8 : I > 7 && (I = I - 8), this._scale === li.LARGE ? (d.x = N.dx, d.y = N.dy) : (d.x = N.dx / 2, d.y = N.dy / 2), l = N.animationFrame, N.action && (o = N.action), N.type === Yi.BODYPART ? (N.action != null && (c = N.action), n = I) : N.type === Yi.FX && (n = I), h = N.items),
                u = S.removeData
            }
        }
        let m = i.getActionCache(c);
        (!m || r) && (m = new gU, i.updateActionCache(c, m));
        let p = m.getDirectionCache(n);
        if (!p || r) {
            const I = this._structure.getParts(e, this._avatar.getFigure(), c, this._geometryType, n, u, this._avatar, h);
            p = new mU(I),
            m.updateDirectionCache(n, p)
        }
        let E = p.getImageContainer(l);
        if (!E || r) {
            const I = p.getPartList();
            if (E = this.renderBodyPart(n, I, l, o, r), E && !r)
                E.isCacheable && p.updateImageContainer(E, l);
            else
                return null
        }
        const T = this._structure.getFrameBodyPartOffset(c, n, l, e);
        return d.x += T.x, d.y += T.y, E.offset = d, E
    }
    getServerRenderData()
    {
        return this._serverRenderData = [], this._serverRenderData
    }
    getBodyPartCache(e)
    {
        let t = this._cache.get(e);
        return t || (t = new up, this._cache.set(e, t)), t
    }
    renderBodyPart(e, t, r, i, n=!1)
    {
        if (!t || !t.length || !this._canvas && (this._canvas = this._structure.getCanvas(this._scale, this._geometryType), !this._canvas))
            return null;
        const o = Kr.DIRECTION_IS_FLIPPED[e] || !1;
        let l = i.definition.assetPartDefinition,
            c = !0,
            u = t.length - 1;
        for (; u >= 0;) {
            const E = t[u];
            let T = 16777215;
            if (!(e == 7 && (E.partType === "fc" || E.partType === "ey")) && !(E.partType === "ri" && !E.partId)) {
                const I = E.partId,
                    S = E.getFrameDefinition(r);
                let A = E.partType,
                    N = 0;
                S ? (N = S.number, S.assetPartDefinition && S.assetPartDefinition !== "" && (l = S.assetPartDefinition)) : N = E.getFrameIndex(r);
                let b = e,
                    v = !1;
                o && (l === "wav" && (A === Te.LEFT_HAND || A === Te.LEFT_SLEEVE || A === Te.LEFT_COAT_SLEEVE) || l === "drk" && (A === Te.RIGHT_HAND || A === Te.RIGHT_SLEEVE || A === Te.RIGHT_COAT_SLEEVE) || l === "blw" && A === Te.RIGHT_HAND || l === "sig" && A === Te.LEFT_HAND || l === "respect" && A === Te.LEFT_HAND || A === Te.RIGHT_HAND_ITEM || A === Te.LEFT_HAND_ITEM || A === Te.CHEST_PRINT ? v = !0 : (e === 4 ? b = 2 : e === 5 ? b = 1 : e === 6 && (b = 0), E.flippedPartType !== A && (A = E.flippedPartType)));
                let D = this._scale + "_" + l + "_" + A + "_" + I + "_" + b + "_" + N,
                    G = this._assets.getAsset(D);
                if (G || (D = this._scale + "_std_" + A + "_" + I + "_" + b + "_0", G = this._assets.getAsset(D)), G) {
                    const x = G.texture;
                    if (!x || !x.valid || !x.baseTexture)
                        c = !1;
                    else {
                        E.isColorable && E.color && (T = E.color.rgb);
                        const F = new Ge(-G.x, -G.y);
                        if (v && (F.x = F.x + (this._scale === li.LARGE ? 65 : 31)), n) {
                            const U = new NT;
                            U.name = this._assets.getAssetName(D),
                            U.x = -F.x - 33,
                            U.y = -F.y,
                            U.z = this._serverRenderData.length * -1e-4,
                            U.width = G.rectangle.width,
                            U.height = G.rectangle.height,
                            U.flipH = v,
                            l === "lay" && (U.x = U.x + 53),
                            o && (U.flipH = !U.flipH, U.flipH ? U.x = -U.x - x.width : U.x = U.x + 65),
                            E.isColorable && (U.color = `${T}`),
                            this._serverRenderData.push(U)
                        }
                        this._unionImages.push(new hp(x, G.rectangle, F, v, T))
                    }
                }
            }
            u--
        }
        if (!this._unionImages.length)
            return null;
        const h = this.createUnionImage(this._unionImages, o),
            d = this._scale === li.LARGE ? this._canvas.height - 16 : this._canvas.height - 8,
            m = new Ge(-h.regPoint.x, d - h.regPoint.y);
        o && l !== "lay" && (m.x = m.x + (this._scale === li.LARGE ? 67 : 31));
        let p = this._unionImages.length - 1;
        for (; p >= 0;) {
            const E = this._unionImages.pop();
            E && E.dispose(),
            p--
        }
        return new fU(h.container, m, c)
    }
    convertColorToHex(e)
    {
        let t = (e * 255).toString(16);
        return t.length < 2 && (t = "0" + t), t
    }
    createUnionImage(e, t)
    {
        const r = new Qr;
        for (const l of e)
            l && r.enlarge(l.offsetRect);
        const i = new Ge(-r.x, -r.y),
            n = new Mi,
            o = new qt(cs.EMPTY);
        o.width = r.width,
        o.height = r.height,
        n.addChild(o);
        for (const l of e) {
            if (!l)
                continue;
            const c = l.texture,
                u = l.colorTransform,
                h = !(t && l.flipH) && (t || l.flipH),
                d = i.clone();
            d.x -= l.regPoint.x,
            d.y -= l.regPoint.y,
            t && (d.x = n.width - (d.x + l.rect.width)),
            h ? (this._matrix.a = -1, this._matrix.tx = l.rect.x + l.rect.width + d.x, this._matrix.ty = d.y - l.rect.y) : (this._matrix.a = 1, this._matrix.tx = d.x - l.rect.x, this._matrix.ty = d.y - l.rect.y);
            const m = new qt(c);
            m.tint = u,
            m.transform.setFromMatrix(this._matrix),
            n.addChild(m)
        }
        return new hp(null, n.getLocalBounds(), i, t, null, n)
    }
}
dR.DEFAULT_MAX_CACHE_STORAGE_TIME_MS = 6e4;
const xn = class {
    constructor(s, e, t, r, i, n=null)
    {
        this._frameCounter = 0,
        this._directionOffset = 0,
        this._isAnimating = !1,
        this._animationHasResetOnToggle = !1,
        this._actionsSorted = !1,
        this._fullImageCacheSize = 5,
        this._isCachedImage = !1,
        this._useFullImageCache = !1,
        this._effectIdInUse = -1,
        this._cachedBodyPartsDirection = -1,
        this._cachedBodyPartsGeometryType = null,
        this._cachedBodyPartsAvatarSet = null,
        this._canvasOffsets = [],
        this._actions = [],
        this._cachedBodyParts = [],
        this._changes = !0,
        this._disposed = !1,
        this._effectManager = i,
        this._structure = s,
        this._assets = e,
        this._scale = r,
        this._effectListener = n,
        this._scale == null && (this._scale = li.LARGE),
        t == null && (t = new Lc("hr-893-45.hd-180-2.ch-210-66.lg-270-82.sh-300-91.wa-2007-.ri-1-")),
        this._figure = t,
        this._cache = new dR(this._structure, this, this._assets, this._scale),
        this.setDirection(xn.DEFAULT_AVATAR_SET, xn.DEFAULT_DIRECTION),
        this._actions = [],
        this._defaultAction = new ug(ie.POSTURE_STAND),
        this._defaultAction.definition = this._structure.getActionDefinition(xn.DEFAULT_ACTION),
        this.resetActions(),
        this._fullImageCache = new as,
        this._animationFrameCount = 0
    }
    getServerRenderData()
    {
        return this.getAvatarPartsForCamera(Ys.FULL), this._cache.getServerRenderData()
    }
    dispose()
    {
        if (!this._disposed) {
            if (this._structure = null, this._assets = null, this._mainAction = null, this._figure = null, this._avatarSpriteData = null, this._actions = null, this._image && (this._image.destroy(), this._image = null), this._cache && (this._cache.dispose(), this._cache = null), this._fullImageCache) {
                for (const s of this._fullImageCache.getValues())
                    s && s.destroy();
                this._fullImageCache = null
            }
            this._image = null,
            this._canvasOffsets = null,
            this._disposed = !0
        }
    }
    get disposed()
    {
        return this._disposed
    }
    getFigure()
    {
        return this._figure
    }
    getScale()
    {
        return this._scale
    }
    getPartColor(s)
    {
        return this._structure.getPartColor(this._figure, s)
    }
    setDirection(s, e)
    {
        e = e + this._directionOffset,
        e < Kr.MIN_DIRECTION && (e = Kr.MAX_DIRECTION + (e + 1)),
        e > Kr.MAX_DIRECTION && (e = e - (Kr.MAX_DIRECTION + 1)),
        this._structure.isMainAvatarSet(s) && (this._mainDirection = e),
        (s === Ys.HEAD || s === Ys.FULL) && (s === Ys.HEAD && this.isHeadTurnPreventedByAction() && (e = this._mainDirection), this._headDirection = e),
        this._cache.setDirection(s, e),
        this._changes = !0
    }
    setDirectionAngle(s, e)
    {
        this.setDirection(s, Math.floor(e / 45))
    }
    getSprites()
    {
        return this._sprites
    }
    getCanvasOffsets()
    {
        return this._canvasOffsets
    }
    getLayerData(s)
    {
        return this._structure.getBodyPartData(s.animation.id, this._frameCounter, s.id)
    }
    updateAnimationByFrames(s=1)
    {
        this._frameCounter += s,
        this._changes = !0
    }
    resetAnimationFrameCounter()
    {
        this._frameCounter = 0,
        this._changes = !0
    }
    getFullImageCacheKey()
    {
        if (!this._useFullImageCache)
            return null;
        if (this._sortedActions.length == 1 && this._mainDirection == this._headDirection)
            return this._mainDirection + this._currentActionsString + this._frameCounter % 4;
        if (this._sortedActions.length == 2)
            for (const s of this._sortedActions) {
                if (s.actionType == "fx" && (s.actionParameter == "33" || s.actionParameter == "34" || s.actionParameter == "35" || s.actionParameter == "36"))
                    return this._mainDirection + this._currentActionsString + 0;
                if (s.actionType == "fx" && (s.actionParameter == "38" || s.actionParameter == "39"))
                    return this._mainDirection + "_" + this._headDirection + this._currentActionsString + this._frameCounter % 11;
                if (s.actionType === "dance" && (s.actionParameter === "1" || s.actionParameter === "2" || s.actionParameter === "3" || s.actionParameter === "4")) {
                    let e = this._frameCounter % 8;
                    return s.actionParameter === "3" && (e = this._frameCounter % 10), s.actionParameter === "4" && (e = this._frameCounter % 16), this._mainDirection + s.actionType + s.actionParameter + e
                }
            }
        return null
    }
    getBodyParts(s, e, t)
    {
        return (t != this._cachedBodyPartsDirection || e != this._cachedBodyPartsGeometryType || s != this._cachedBodyPartsAvatarSet) && (this._cachedBodyPartsDirection = t, this._cachedBodyPartsGeometryType = e, this._cachedBodyPartsAvatarSet = s, this._cachedBodyParts = this._structure.getBodyParts(s, e, t)), this._cachedBodyParts
    }
    getAvatarPartsForCamera(s)
    {
        let e;
        if (this._mainAction == null || this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType) == null)
            return;
        const r = this.getBodyParts(s, this._mainAction.definition.geometryType, this._mainDirection);
        let i = r.length - 1;
        for (; i >= 0;)
            e = r[i],
            this._cache.getImageContainer(e, this._frameCounter, !0),
            i--
    }
    getImage(s, e, t=1, r=!0)
    {
        if (!this._changes)
            return this._image;
        if (!this._mainAction)
            return null;
        this._actionsSorted || this.endActionAppends();
        const i = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);
        if (!i)
            return null;
        this._image && (this._image.width !== i.width || this._image.height !== i.height) && (this._reusableTexture && (this._reusableTexture.destroy(!0), this._reusableTexture = null), this._image = null, this._isCachedImage = !1);
        const n = this.getBodyParts(s, this._mainAction.definition.geometryType, this._mainDirection);
        this._image = null;
        const o = new Mi;
        let l = !0,
            c = n.length - 1;
        for (; c >= 0;) {
            const u = n[c],
                h = this._cache.getImageContainer(u, this._frameCounter);
            if (h) {
                const d = h.image;
                if (!d)
                    return o.destroy({
                        children: !0
                    }), null;
                l = l && h.isCacheable;
                const m = h.regPoint.clone();
                if (m) {
                    m.x += i.offset.x,
                    m.y += i.offset.y,
                    m.x += i.regPoint.x,
                    m.y += i.regPoint.y;
                    const p = new Mi;
                    p.addChild(d),
                    p && (p.position.set(m.x, m.y), o.addChild(p))
                }
            }
            c--
        }
        return this._avatarSpriteData && (o.filters || (o.filters = []), this._avatarSpriteData.colorTransform && o.filters.push(this._avatarSpriteData.colorTransform), this._avatarSpriteData.paletteIsGrayscale && (this.convertToGrayscale(o), o.filters.push(new Ll(this._avatarSpriteData.reds, Ll.CHANNEL_RED)))), r ? (this._reusableTexture ? (Gs.instance.renderer.render(o, {
            renderTexture: this._reusableTexture,
            clear: !0
        }), this._reusableTexture.baseTexture.hitMap = null) : this._reusableTexture = pt.generateTexture(o, new Qr(0, 0, i.width, i.height)), this._reusableTexture ? (this._image = this._reusableTexture, this._changes = !1, this._image) : null) : pt.generateTexture(o, new Qr(0, 0, i.width, i.height))
    }
    applyPalette(s, e=[], t=[], r=[])
    {
        const i = pt.generateCanvas(s),
            n = i.getContext("2d"),
            o = n.getImageData(0, 0, i.width, i.height),
            l = o.data;
        for (let u = 0; u < l.length; u += 4) {
            if (e.length == 256) {
                let h = e[l[u]];
                h === void 0 && (h = 0),
                l[u] = h >> 16 & 255,
                l[u + 1] = h >> 8 & 255,
                l[u + 2] = h & 255
            }
            if (t.length == 256) {
                let h = t[l[u + 1]];
                h === void 0 && (h = 0),
                l[u] = h >> 16 & 255,
                l[u + 1] = h >> 8 & 255,
                l[u + 2] = h & 255
            }
            if (r.length == 256) {
                let h = t[l[u + 2]];
                h === void 0 && (h = 0),
                l[u] = h >> 16 & 255,
                l[u + 1] = h >> 8 & 255,
                l[u + 2] = h & 255
            }
        }
        n.putImageData(o, 0, 0);
        const c = new ls(cs.from(i));
        return Gs.instance.renderer.render(c, {
            renderTexture: s,
            clear: !0
        }), s
    }
    getImageAsSprite(s, e=1)
    {
        if (!this._mainAction)
            return null;
        this._actionsSorted || this.endActionAppends();
        const t = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);
        if (!t)
            return null;
        const r = this.getBodyParts(s, this._mainAction.definition.geometryType, this._mainDirection),
            i = new qt,
            n = new qt(cs.EMPTY);
        n.width = t.width,
        n.height = t.height,
        i.addChild(n);
        let o = r.length - 1;
        for (; o >= 0;) {
            const l = r[o],
                c = this._cache.getImageContainer(l, this._frameCounter);
            if (c) {
                const u = c.image;
                if (!u)
                    return i.destroy({
                        children: !0
                    }), null;
                const h = c.regPoint.clone();
                if (h) {
                    h.x += t.offset.x,
                    h.y += t.offset.y,
                    h.x += t.regPoint.x,
                    h.y += t.regPoint.y;
                    const d = new Mi;
                    d.addChild(u),
                    d.position.set(h.x, h.y),
                    i.addChild(d)
                }
            }
            o--
        }
        return i
    }
    getCroppedImage(s, e=1)
    {
        if (!this._mainAction)
            return null;
        this._actionsSorted || this.endActionAppends();
        const t = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);
        if (!t)
            return null;
        const r = this.getBodyParts(s, this._mainAction.definition.geometryType, this._mainDirection),
            i = new Mi;
        let n = r.length - 1;
        for (; n >= 0;) {
            const c = r[n],
                u = this._cache.getImageContainer(c, this._frameCounter);
            if (u) {
                const h = u.image;
                if (!h)
                    return i.destroy({
                        children: !0
                    }), null;
                const d = u.regPoint.clone();
                if (d) {
                    d.x += t.offset.x,
                    d.y += t.offset.y,
                    d.x += t.regPoint.x,
                    d.y += t.regPoint.y;
                    const m = new Mi;
                    m.addChild(h),
                    m && (m.position.set(d.x, d.y), i.addChild(m))
                }
            }
            n--
        }
        const o = pt.generateTexture(i, new Qr(0, 0, t.width, t.height)),
            l = pt.generateImage(o);
        return l || null
    }
    getFullImage(s)
    {
        const e = this._fullImageCache.getValue(s);
        return e ? (e.valid || (this._fullImageCache.remove(s), e.destroy(!0)), e) : null
    }
    cacheFullImage(s, e)
    {
        const t = this._fullImageCache.getValue(s);
        if (t && (this._fullImageCache.remove(s), t.destroy(!0)), this._fullImageCache.length === this._fullImageCacheSize) {
            const r = this._fullImageCache.getKey(0);
            r && this._fullImageCache.remove(r).destroy(!0)
        }
        this._fullImageCache.add(s, e)
    }
    getAsset(s)
    {
        return this._assets.getAsset(s)
    }
    getDirection()
    {
        return this._mainDirection
    }
    initActionAppends()
    {
        this._actions = [],
        this._actionsSorted = !1,
        this._currentActionsString = "",
        this._useFullImageCache = !1
    }
    endActionAppends()
    {
        if (this.sortActions()) {
            for (const s of this._sortedActions)
                s.actionType === ie.EFFECT && (this._effectManager.isAvatarEffectReady(parseInt(s.actionParameter)) || this._effectManager.downloadAvatarEffect(parseInt(s.actionParameter), this));
            this.resetActions(),
            this.setActionsToParts()
        }
    }
    appendAction(s, ...e)
    {
        let t = "";
        switch (this._actionsSorted = !1, e && e.length > 0 && (t = e[0]), t != null && (t = t.toString()), s) {
        case ie.POSTURE:
            switch (t) {
            case ie.POSTURE_LAY:
            case ie.POSTURE_WALK:
            case ie.POSTURE_STAND:
            case ie.POSTURE_SWIM:
            case ie.POSTURE_FLOAT:
            case ie.POSTURE_SIT:
            case ie.SNOWWAR_RUN:
            case ie.SNOWWAR_DIE_FRONT:
            case ie.SNOWWAR_DIE_BACK:
            case ie.SNOWWAR_PICK:
            case ie.SNOWWAR_THROW:
                (t === ie.POSTURE_LAY || t === ie.POSTURE_LAY || t === ie.POSTURE_LAY) && (t === ie.POSTURE_LAY && (this._mainDirection == 0 ? this.setDirection(Ys.FULL, 4) : this.setDirection(Ys.FULL, 2)), this._useFullImageCache = !0, this._useFullImageCache = !0),
                this.addActionData(t);
                break
            }
            break;
        case ie.GESTURE:
            switch (t) {
            case ie.GESTURE_AGGRAVATED:
            case ie.GESTURE_SAD:
            case ie.GESTURE_SMILE:
            case ie.GESTURE_SURPRISED:
                this.addActionData(t);
                break
            }
            break;
        case ie.EFFECT:
        case ie.DANCE:
        case ie.TALK:
        case ie.EXPRESSION_WAVE:
        case ie.SLEEP:
        case ie.SIGN:
        case ie.EXPRESSION_RESPECT:
        case ie.EXPRESSION_BLOW_A_KISS:
        case ie.EXPRESSION_LAUGH:
        case ie.EXPRESSION_CRY:
        case ie.EXPRESSION_IDLE:
        case ie.EXPRESSION_SNOWBOARD_OLLIE:
        case ie.EXPRESSION_SNOWBORD_360:
        case ie.EXPRESSION_RIDE_JUMP:
            t === ie.EFFECT && (t === "33" || t === "34" || t === "35" || t === "36" || t === "38" || t === "39") && (this._useFullImageCache = !0),
            this.addActionData(s, t);
            break;
        case ie.CARRY_OBJECT:
        case ie.USE_OBJECT:
            {
                const r = this._structure.getActionDefinitionWithState(s);
                r && (t = r.getParameterValue(t)),
                this.addActionData(s, t);
                break
            }
        }
        return !0
    }
    addActionData(s, e="")
    {
        let t;
        this._actions || (this._actions = []);
        let r = 0;
        for (; r < this._actions.length;) {
            if (t = this._actions[r], t.actionType == s && t.actionParameter == e)
                return;
            r++
        }
        this._actions.push(new ug(s, e, this._frameCounter))
    }
    isAnimating()
    {
        return this._isAnimating || this._animationFrameCount > 1
    }
    resetActions()
    {
        return this._animationHasResetOnToggle = !1, this._isAnimating = !1, this._sprites = [], this._avatarSpriteData = null, this._directionOffset = 0, this._structure.removeDynamicItems(this), this._mainAction = this._defaultAction, this._mainAction.definition = this._defaultAction.definition, this.resetBodyPartCache(this._defaultAction), !0
    }
    isHeadTurnPreventedByAction()
    {
        let s,
            e;
        if (this._sortedActions == null)
            return !1;
        for (const t of this._sortedActions)
            s = this._structure.getActionDefinitionWithState(t.actionType),
            s != null && s.getPreventHeadTurn(t.actionParameter) && (e = !0);
        return e
    }
    sortActions()
    {
        let s,
            e,
            t;
        if (this._currentActionsString = "", this._sortedActions = this._structure.sortActions(this._actions), this._animationFrameCount = this._structure.maxFrames(this._sortedActions), !this._sortedActions)
            this._canvasOffsets = [0, 0, 0],
            this._lastActionsString !== "" && (t = !0, this._lastActionsString = "");
        else {
            this._canvasOffsets = this._structure.getCanvasOffsets(this._sortedActions, this._scale, this._mainDirection);
            for (const r of this._sortedActions)
                if (this._currentActionsString = this._currentActionsString + (r.actionType + r.actionParameter), r.actionType === ie.EFFECT) {
                    const i = parseInt(r.actionParameter);
                    this._effectIdInUse !== i && (s = !0),
                    this._effectIdInUse = i,
                    e = !0
                }
            e || (this._effectIdInUse > -1 && (s = !0), this._effectIdInUse = -1),
            s && this._cache.disposeInactiveActions(0),
            this._lastActionsString != this._currentActionsString && (t = !0, this._lastActionsString = this._currentActionsString)
        }
        return this._actionsSorted = !0, t
    }
    setActionsToParts()
    {
        if (!this._sortedActions == null)
            return;
        const s = Pe(),
            e = [];
        for (const t of this._sortedActions)
            e.push(t.actionType);
        for (const t of this._sortedActions)
            if (t && t.definition && t.definition.isAnimation) {
                const r = this._structure.getAnimation(t.definition.state + "." + t.actionParameter);
                if (r && r.hasOverriddenActions()) {
                    const i = r.overriddenActionNames();
                    if (i)
                        for (const n of i)
                            e.indexOf(n) >= 0 && (t.overridingAction = r.overridingAction(n))
                }
                r && r.resetOnToggle && (this._animationHasResetOnToggle = !0)
            }
        for (const t of this._sortedActions)
            if (!(!t || !t.definition) && (t.definition.isAnimation && t.actionParameter === "" && (t.actionParameter = "1"), this.setActionToParts(t, s), t.definition.isAnimation)) {
                this._isAnimating = t.definition.isAnimated(t.actionParameter);
                const r = this._structure.getAnimation(t.definition.state + "." + t.actionParameter);
                r && (this._sprites = this._sprites.concat(r.spriteData), r.hasDirectionData() && (this._directionOffset = r.directionData.offset), r.hasAvatarData() && (this._avatarSpriteData = r.avatarData))
            }
    }
    setActionToParts(s, e)
    {
        s == null || s.definition == null || s.definition.assetPartDefinition != "" && (s.definition.isMain && (this._mainAction = s, this._cache.setGeometryType(s.definition.geometryType)), this._cache.setAction(s, e), this._changes = !0)
    }
    resetBodyPartCache(s)
    {
        s && s.definition.assetPartDefinition !== "" && (s.definition.isMain && (this._mainAction = s, this._cache.setGeometryType(s.definition.geometryType)), this._cache.resetBodyPartCache(s), this._changes = !0)
    }
    get avatarSpriteData()
    {
        return this._avatarSpriteData
    }
    convertToGrayscale(s, e="CHANNELS_EQUAL")
    {
        let t = .33,
            r = .33,
            i = .33;
        switch (e) {
        case xn.CHANNELS_UNIQUE:
            t = .3,
            r = .59,
            i = .11;
            break;
        case xn.CHANNELS_RED:
            t = 1,
            r = 0,
            i = 0;
            break;
        case xn.CHANNELS_GREEN:
            t = 0,
            r = 1,
            i = 0;
            break;
        case xn.CHANNELS_BLUE:
            t = 0,
            r = 0,
            i = 1;
            break;
        case xn.CHANNELS_DESATURATED:
            t = .3086,
            r = .6094,
            i = .082;
            break
        }
        const n = new tT;
        return n.matrix = [t, r, i, 0, 0, t, r, i, 0, 0, t, r, i, 0, 0, 0, 0, 0, 1, 0], s.filters.push(n), s
    }
    errorThis(s) {}
    logThis(s) {}
    isPlaceholder()
    {
        return !1
    }
    forceActionUpdate()
    {
        this._lastActionsString = ""
    }
    get animationHasResetOnToggle()
    {
        return this._animationHasResetOnToggle
    }
    get mainAction()
    {
        return this._mainAction.actionType
    }
    resetEffect(s)
    {
        s === this._effectIdInUse && (this.resetActions(), this.setActionsToParts(), this._animationHasResetOnToggle = !0, this._changes = !0, this._effectListener && this._effectListener.resetEffect(s))
    }
}
;
let rn = xn;
rn.CHANNELS_EQUAL = "CHANNELS_EQUAL";
rn.CHANNELS_UNIQUE = "CHANNELS_UNIQUE";
rn.CHANNELS_RED = "CHANNELS_RED";
rn.CHANNELS_GREEN = "CHANNELS_GREEN";
rn.CHANNELS_BLUE = "CHANNELS_BLUE";
rn.CHANNELS_DESATURATED = "CHANNELS_DESATURATED";
rn.DEFAULT_ACTION = "Default";
rn.DEFAULT_DIRECTION = 2;
rn.DEFAULT_AVATAR_SET = Ys.FULL;
class ch {
    constructor(e)
    {
        this._number = e.number,
        this._assetPartDefinition = e.assetPartDefinition || null
    }
    get number()
    {
        return this._number
    }
    get assetPartDefinition()
    {
        return this._assetPartDefinition
    }
}
class EU {
    constructor(e)
    {
        if (this._frames = [], e.frames && e.frames.length > 0)
            for (const t of e.frames) {
                if (!t)
                    continue;
                this._frames.push(new ch(t));
                let r = t.repeats || 0;
                if (r > 1)
                    for (; --r > 0;)
                        this._frames.push(this._frames[this._frames.length - 1])
            }
    }
    get frames()
    {
        return this._frames
    }
}
const uh = class {
    constructor(s)
    {
        if (this._id = s.id, this._actionParts = new Map, this._bodyPartOffsets = new Map, this._frameCount = 0, this._frameIndexes = [], s.parts && s.parts.length > 0)
            for (const e of s.parts) {
                if (!e)
                    continue;
                const t = new EU(e);
                this._actionParts.set(e.setType, t),
                this._frameCount = Math.max(this._frameCount, t.frames.length)
            }
        if (s.offsets && s.offsets.frames && s.offsets.frames.length > 0)
            for (const e of s.offsets.frames) {
                if (!e)
                    continue;
                const t = e.id;
                this._frameCount = Math.max(this._frameCount, t);
                const r = new Map;
                if (this._bodyPartOffsets.set(t, r), e.directions && e.directions.length > 0)
                    for (const i of e.directions) {
                        if (!i)
                            continue;
                        const n = i.id,
                            o = new Map;
                        if (r.set(n, o), i.bodyParts && i.bodyParts.length > 0)
                            for (const l of i.bodyParts) {
                                if (!l)
                                    continue;
                                const c = l.id;
                                let u = 0,
                                    h = 0;
                                l.dx !== void 0 && (u = l.dx),
                                l.dy !== void 0 && (h = l.dy),
                                o.set(c, new Ge(u, h))
                            }
                    }
                if (this._frameIndexes.push(t), e.repeats !== void 0) {
                    let i = e.repeats || 0;
                    if (i > 1)
                        for (; --i > 0;)
                            this._frameIndexes.push(t)
                }
            }
    }
    getPart(s)
    {
        if (!s)
            return null;
        const e = this._actionParts.get(s);
        return e || null
    }
    getFrameBodyPartOffset(s, e, t)
    {
        const r = e % this._frameIndexes.length,
            i = this._frameIndexes[r],
            n = this._bodyPartOffsets.get(i);
        if (!n)
            return uh.DEFAULT_OFFSET;
        const o = n.get(s);
        if (!o)
            return uh.DEFAULT_OFFSET;
        const l = o.get(t);
        return l || uh.DEFAULT_OFFSET
    }
    get id()
    {
        return this._id
    }
    get parts()
    {
        return this._actionParts
    }
    get frameCount()
    {
        return this._frameCount
    }
}
;
let Ph = uh;
Ph.DEFAULT_OFFSET = new Ge(0, 0);
class pU {
    constructor()
    {
        this._actions = new Map
    }
    parse(e)
    {
        if (e && e.length > 0)
            for (const t of e) {
                if (!t)
                    continue;
                const r = new Ph(t);
                this._actions.set(r.id, r)
            }
        return !0
    }
    appendJSON(e)
    {
        for (const t of e.action)
            this._actions.set(t.id, new Ph(t));
        return !0
    }
    getAction(e)
    {
        const t = this._actions.get(e.id);
        return t || null
    }
    getFrameCount(e)
    {
        const t = this.getAction(e);
        return t ? t.frameCount : 0
    }
}
class IU {
    constructor(e, t)
    {
        this._id = e.id,
        this._width = e.width,
        this._height = e.height,
        this._offset = new Ge(e.dx, e.dy),
        t == li.LARGE ? this._regPoint = new Ge((this._width - 64) / 2, 0) : this._regPoint = new Ge((this._width - 32) / 2, 0)
    }
    get width()
    {
        return this._width
    }
    get height()
    {
        return this._height
    }
    get offset()
    {
        return this._offset
    }
    get id()
    {
        return this._id
    }
    get regPoint()
    {
        return this._regPoint
    }
}
const _R = class  extends ti{
    constructor(s, e)
    {
        super(),
        this._dataReceiver = e,
        this.download(s)
    }
    download(s)
    {
        const e = new XMLHttpRequest;
        try {
            e.open("GET", s),
            e.send(),
            e.onloadend = t => {
                const r = e.responseText;
                if (!r || !r.length)
                    throw new Error("invalid_figure_data");
                this._dataReceiver && this._dataReceiver.appendJSON(JSON.parse(r)),
                this.dispatchEvent(new Ye(_R.AVATAR_STRUCTURE_DONE))
            },
            e.onerror = t => {
                throw new Error("invalid_avatar_figure_data")
            }
        } catch (t) {
            pe.error(t)
        }
    }
}
;
let dg = _R;
dg.AVATAR_STRUCTURE_DONE = "AVATAR_STRUCTURE_DONE";
class TU {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_data");
        this._id = e.id,
        this._type = e.type,
        this._index = e.index,
        this._colorLayerIndex = e.colorindex,
        this._paletteMapId = -1,
        this._breed = -1
    }
    dispose() {}
    get id()
    {
        return this._id
    }
    get type()
    {
        return this._type
    }
    get breed()
    {
        return this._breed
    }
    get index()
    {
        return this._index
    }
    get colorLayerIndex()
    {
        return this._colorLayerIndex
    }
    get paletteMap()
    {
        return this._paletteMapId
    }
}
class RU {
    constructor(e, t)
    {
        if (!e || !t)
            throw new Error("invalid_data");
        this._id = t.id,
        this._type = e,
        this._gender = t.gender,
        this._clubLevel = t.club,
        this._isColorable = t.colorable,
        this._isSelectable = t.selectable,
        this._parts = [],
        this._hiddenLayers = [],
        this._isPreSelectable = t.preselectable,
        this._isSellable = t.sellable;
        for (const r of t.parts) {
            const i = new TU(r),
                n = this.getPartIndex(i);
            n !== -1 ? this._parts.splice(n, 0, i) : this._parts.push(i)
        }
        if (t.hiddenLayers)
            for (const r of t.hiddenLayers)
                this._hiddenLayers.push(r.partType)
    }
    dispose()
    {
        for (const e of this._parts)
            e.dispose();
        this._parts = null,
        this._hiddenLayers = null
    }
    getPartIndex(e)
    {
        const t = this._parts.length;
        if (!t)
            return -1;
        for (let r = 0; r < t; r++) {
            const i = this._parts[r];
            if (i && !(i.type !== e.type || i.index > e.index))
                return r
        }
        return -1
    }
    getPart(e, t)
    {
        for (const r of this._parts)
            if (!(r.type !== e || r.id !== t))
                return r;
        return null
    }
    get id()
    {
        return this._id
    }
    get type()
    {
        return this._type
    }
    get gender()
    {
        return this._gender
    }
    get clubLevel()
    {
        return this._clubLevel
    }
    get isColorable()
    {
        return this._isColorable
    }
    get isSelectable()
    {
        return this._isSelectable
    }
    get parts()
    {
        return this._parts
    }
    get hiddenLayers()
    {
        return this._hiddenLayers
    }
    get isPreSelectable()
    {
        return this._isPreSelectable
    }
    get isSellable()
    {
        return this._isSellable
    }
}
class OU {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_data");
        this._id = e.id,
        this._index = e.index,
        this._clubLevel = e.club || 0,
        this._isSelectable = e.selectable,
        this._rgb = parseInt("0x" + e.hexCode, 16)
    }
    get id()
    {
        return this._id
    }
    get index()
    {
        return this._index
    }
    get clubLevel()
    {
        return this._clubLevel
    }
    get isSelectable()
    {
        return this._isSelectable
    }
    get rgb()
    {
        return this._rgb
    }
}
class dp {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_data");
        this._id = e.id,
        this._colors = new as,
        this.append(e)
    }
    append(e)
    {
        for (const t of e.colors) {
            const r = new OU(t);
            this._colors.add(t.id.toString(), r)
        }
    }
    getColor(e)
    {
        return e === void 0 || e < 0 ? null : this._colors.getValue(e.toString()) || null
    }
    get id()
    {
        return this._id
    }
    get colors()
    {
        return this._colors
    }
}
class R_ {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_data");
        this._type = e.type,
        this._paletteId = e.paletteId,
        this._isMandatory = {},
        this._isMandatory.F = [e.mandatory_f_0, e.mandatory_f_1],
        this._isMandatory.M = [e.mandatory_m_0, e.mandatory_m_1],
        this._partSets = new as,
        this.append(e)
    }
    dispose()
    {
        for (const e of this._partSets.getValues())
            e.dispose();
        this._partSets = null
    }
    cleanUp(e)
    {
        for (const t of e.sets) {
            const r = t.id.toString(),
                i = this._partSets.getValue(r);
            i && (i.dispose(), this._partSets.remove(r))
        }
    }
    append(e)
    {
        if (!(!e || !e.sets))
            for (const t of e.sets)
                this._partSets.add(t.id.toString(), new RU(this._type, t))
    }
    getDefaultPartSet(e)
    {
        for (const t of this._partSets.getValues())
            if (t && t.clubLevel === 0 && (t.gender === e || t.gender === "U"))
                return t;
        return null
    }
    getPartSet(e)
    {
        return this._partSets.getValue(e.toString())
    }
    get type()
    {
        return this._type
    }
    get paletteID()
    {
        return this._paletteId
    }
    isMandatory(e, t)
    {
        return this._isMandatory[e.toUpperCase()][Math.min(t, 1)]
    }
    optionalFromClubLevel(e)
    {
        return this._isMandatory[e.toUpperCase()].indexOf(!1)
    }
    get partSets()
    {
        return this._partSets
    }
}
class SU {
    constructor()
    {
        this._palettes = new Map,
        this._setTypes = new Map
    }
    dispose() {}
    parse(e)
    {
        if (!e)
            return !1;
        for (const t of e.palettes) {
            const r = new dp(t);
            r && this._palettes.set(r.id.toString(), r)
        }
        for (const t of e.setTypes) {
            const r = new R_(t);
            r && this._setTypes.set(r.type, r)
        }
        return !0
    }
    injectJSON(e)
    {
        for (const t of e.setTypes) {
            const r = this._setTypes.get(t.type);
            r ? r.cleanUp(t) : this._setTypes.set(t.type, new R_(t))
        }
        this.appendJSON(e)
    }
    appendJSON(e)
    {
        if (!e)
            return !1;
        for (const t of e.palettes) {
            const r = t.id.toString(),
                i = this._palettes.get(r);
            i ? i.append(t) : this._palettes.set(r, new dp(t))
        }
        for (const t of e.setTypes) {
            const r = t.type,
                i = this._setTypes.get(r);
            i ? i.append(t) : this._setTypes.set(r, new R_(t))
        }
        return !1
    }
    getMandatorySetTypeIds(e, t)
    {
        const r = [];
        for (const i of this._setTypes.values())
            !i || !i.isMandatory(e, t) || r.push(i.type);
        return r
    }
    getDefaultPartSet(e, t)
    {
        const r = this._setTypes.get(e);
        return r ? r.getDefaultPartSet(t) : null
    }
    getSetType(e)
    {
        return this._setTypes.get(e) || null
    }
    getPalette(e)
    {
        return this._palettes.get(e.toString()) || null
    }
    getFigurePartSet(e)
    {
        for (const t of this._setTypes.values()) {
            const r = t.getPartSet(e);
            if (r)
                return r
        }
        return null
    }
}
class _p {
    constructor(e)
    {
        if (this._id = e.id, this._parts = [], e.activeParts && e.activeParts.length > 0)
            for (const t of e.activeParts)
                t && this._parts.push(t.setType)
    }
    get parts()
    {
        return this._parts
    }
}
class O_ {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_data");
        this._setType = e.setType,
        this._flippedSetType = e.flippedSetType || null,
        this._removeSetType = e.removeSetType || null,
        this._appendToFigure = !1,
        this._staticId = -1
    }
    hasStaticId()
    {
        return this._staticId >= 0
    }
    get staticId()
    {
        return this._staticId
    }
    set staticId(e)
    {
        this._staticId = e
    }
    get setType()
    {
        return this._setType
    }
    get flippedSetType()
    {
        return this._flippedSetType
    }
    set flippedSetType(e)
    {
        this._flippedSetType = e
    }
    get removeSetType()
    {
        return this._removeSetType
    }
    get appendToFigure()
    {
        return this._appendToFigure
    }
    set appendToFigure(e)
    {
        this._appendToFigure = e
    }
}
class CU {
    constructor()
    {
        this._parts = new Map,
        this._activePartSets = new Map
    }
    parse(e)
    {
        if (e.partSet && e.partSet.length > 0)
            for (const t of e.partSet)
                t && this._parts.set(t.setType, new O_(t));
        if (e.activePartSets && e.activePartSets.length > 0)
            for (const t of e.activePartSets)
                t && this._activePartSets.set(t.id, new _p(t));
        return !0
    }
    appendJSON(e)
    {
        if (e.partSet && e.partSet.length > 0)
            for (const t of e.partSet)
                t && this._parts.set(t.setType, new O_(t));
        if (e.activePartSets && e.activePartSets.length > 0)
            for (const t of e.activePartSets)
                t && this._activePartSets.set(t.id, new _p(t));
        return !1
    }
    getActiveParts(e)
    {
        const t = this._activePartSets.get(e.activePartSet);
        return t ? t.parts : []
    }
    getPartDefinition(e)
    {
        const t = this._parts.get(e);
        return t || null
    }
    addPartDefinition(e)
    {
        const t = e.setType;
        let r = this._parts.get(t);
        return r || (r = new O_(e), this._parts.set(t, r)), r
    }
    getActivePartSet(e)
    {
        const t = this._activePartSets.get(e.activePartSet);
        return t || null
    }
    get parts()
    {
        return this._parts
    }
    get activePartSets()
    {
        return this._activePartSets
    }
}
class S_ {
    constructor(e, t, r, i, n, o, l, c, u="", h=!1, d=1)
    {
        this._bodyPartId = e,
        this._partType = t,
        this._partId = r,
        this._color = i,
        this._frames = n,
        this._action = o,
        this._isColorable = l,
        this._paletteMapId = c,
        this._flippedPartType = u,
        this._isBlendable = h,
        this._blendTransform = null,
        this._partType === "ey" && (this._isColorable = !1)
    }
    getFrameIndex(e)
    {
        if (!this._frames || !this._frames.length)
            return 0;
        const t = e % this._frames.length;
        return this._frames[t] instanceof ch ? this._frames[t].number : t
    }
    getFrameDefinition(e)
    {
        const t = e % this._frames.length;
        return this._frames && this._frames.length > t && this._frames[t] instanceof ch ? this._frames[t] : null
    }
    getCacheableKey(e)
    {
        const t = e % this._frames.length;
        if (this._frames && this._frames.length > t && this._frames[t] instanceof ch) {
            const r = this._frames[t];
            return this.partId + ":" + r.assetPartDefinition + ":" + r.number
        }
        return this.partId + ":" + t
    }
    get bodyPartId()
    {
        return this._bodyPartId
    }
    get partType()
    {
        return this._partType
    }
    get partId()
    {
        return this._partId
    }
    get color()
    {
        return this._color
    }
    get action()
    {
        return this._action
    }
    get isColorable()
    {
        return this._isColorable
    }
    set isColorable(e)
    {
        this._isColorable = e
    }
    get paletteMapId()
    {
        return this._paletteMapId
    }
    get flippedPartType()
    {
        return this._flippedPartType
    }
    get isBlendable()
    {
        return this._isBlendable
    }
    toString()
    {
        return [this._bodyPartId, this._partType, this._partId].join(":")
    }
}
const Kt = class {
    constructor()
    {
        this._gender = "M",
        this._avatarEffectType = -1
    }
    loadAvatarData(s, e)
    {
        this._data = new Map,
        this._colors = new Map,
        this._gender = e,
        this.parseFigureString(s)
    }
    dispose()
    {
        this._data = null,
        this._colors = null,
        this._isDisposed = !0
    }
    get disposed()
    {
        return this._isDisposed
    }
    parseFigureString(s)
    {
        if (s)
            for (const e of s.split(".")) {
                const t = e.split("-");
                if (t.length > 0) {
                    const r = t[0],
                        i = parseInt(t[1]),
                        n = [];
                    let o = 2;
                    for (; o < t.length;)
                        n.push(parseInt(t[o])),
                        o++;
                    n.length || n.push(0),
                    this.savePartSetId(r, i, !1),
                    this.savePartSetColourId(r, n, !1)
                }
            }
    }
    hasSetType(s)
    {
        return !!this._data.get(s)
    }
    getPartSetId(s)
    {
        return this.hasSetType(s) ? this._data.get(s) : -1
    }
    getColourIds(s)
    {
        return this._colors.get(s) ? this._colors.get(s) : []
    }
    getFigureString()
    {
        let s = "";
        const e = [];
        for (const [r, i] of this._data.entries()) {
            let n = r + "-" + i;
            const o = this._colors.get(r);
            if (o)
                for (const l of o)
                    n = n + ("-" + l);
            e.push(n)
        }
        let t = 0;
        for (; t < e.length;)
            s = s + e[t],
            t < e.length - 1 && (s = s + "."),
            t++;
        return s
    }
    savePartData(s, e, t, r=!1)
    {
        this.savePartSetId(s, e, r),
        this.savePartSetColourId(s, t, r)
    }
    savePartSetId(s, e, t=!0)
    {
        switch (s) {
        case Kt.HD:
        case Kt.HAIR:
        case Kt.HAT:
        case Kt.HEAD_ACCESSORIES:
        case Kt.EYE_ACCESSORIES:
        case Kt.FACE_ACCESSORIES:
        case Kt.SHIRT:
        case Kt.JACKET:
        case Kt.CHEST_ACCESSORIES:
        case Kt.CHEST_PRINTS:
        case Kt.TROUSERS:
        case Kt.SHOES:
        case Kt.TROUSER_ACCESSORIES:
            e >= 0 ? this._data.set(s, e) : this._data.delete(s)
        }
    }
    savePartSetColourId(s, e, t=!0)
    {
        switch (s) {
        case Kt.HD:
        case Kt.HAIR:
        case Kt.HAT:
        case Kt.HEAD_ACCESSORIES:
        case Kt.EYE_ACCESSORIES:
        case Kt.FACE_ACCESSORIES:
        case Kt.SHIRT:
        case Kt.JACKET:
        case Kt.CHEST_ACCESSORIES:
        case Kt.CHEST_PRINTS:
        case Kt.TROUSERS:
        case Kt.SHOES:
        case Kt.TROUSER_ACCESSORIES:
            this._colors.set(s, e);
            return
        }
    }
    getFigureStringWithFace(s)
    {
        const e = [Kt.HD];
        let t = "";
        const r = [];
        for (const n of e) {
            const o = this._colors.get(n);
            if (o) {
                let l = this._data.get(n);
                n === Kt.HD && (l = s);
                let c = n + "-" + l;
                if (l >= 0) {
                    let u = 0;
                    for (; u < o.length;)
                        c = c + ("-" + o[u]),
                        u++
                }
                r.push(c)
            }
        }
        let i = 0;
        for (; i < r.length;)
            t = t + r[i],
            i < r.length - 1 && (t = t + "."),
            i++;
        return t
    }
    get gender()
    {
        return this._gender
    }
}
;
let ks = Kt;
ks.MALE = "M";
ks.FEMALE = "F";
ks.UNISEX = "U";
ks.SCALE = "h";
ks.STD = "std";
ks.DEFAULT_FRAME = "0";
ks.HD = "hd";
ks.HAIR = "hr";
ks.HAT = "ha";
ks.HEAD_ACCESSORIES = "he";
ks.EYE_ACCESSORIES = "ea";
ks.FACE_ACCESSORIES = "fa";
ks.JACKET = "cc";
ks.SHIRT = "ch";
ks.CHEST_ACCESSORIES = "ca";
ks.CHEST_PRINTS = "cp";
ks.TROUSERS = "lg";
ks.SHOES = "sh";
ks.TROUSER_ACCESSORIES = "wa";
ks.BLOCKED_FX_TYPES = [28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 68];
class AU {
    constructor(e)
    {
        this._data = [],
        this._maxSize = e,
        this._index = 0
    }
    reset()
    {
        this._data = [],
        this._index = 0
    }
    addValue(e)
    {
        this._data.length < this._maxSize ? this._data.push(e) : this._data[this._index] = e,
        this._index = (this._index + 1) % this._maxSize
    }
    getMax()
    {
        let e = Number.MIN_VALUE,
            t = 0;
        for (; t < this._maxSize;)
            this._data[t] > e && (e = this._data[t]),
            t++;
        return e
    }
    getMin()
    {
        let e = Number.MAX_VALUE,
            t = 0;
        for (; t < this._maxSize;)
            this._data[t] < e && (e = this._data[t]),
            t++;
        return e
    }
}
class Bs {
    constructor(e, t)
    {
        this._location = e,
        this._direction = t
    }
    get location()
    {
        return this._location
    }
    get direction()
    {
        return this._direction
    }
}
class Ad extends ei {
    constructor()
    {
        super(),
        this._object = null,
        this._events = null,
        this._time = 0
    }
    initialize(e) {}
    onDispose()
    {
        this._object = null
    }
    update(e)
    {
        this._time = e
    }
    processUpdateMessage(e)
    {
        !e || !this._object || (this._object.setLocation(e.location), this._object.setDirection(e.direction))
    }
    getEventTypes()
    {
        return []
    }
    mergeTypes(e, t)
    {
        const r = e.concat();
        for (const i of t)
            !i || r.indexOf(i) >= 0 || r.push(i);
        return r
    }
    mouseEvent(e, t) {}
    useObject() {}
    setObject(e)
    {
        if (this._object !== e) {
            if (this._object && this._object.setLogic(null), !e) {
                this.dispose(),
                this._object = null;
                return
            }
            this._object = e,
            this._object.setLogic(this)
        }
    }
    tearDown() {}
    get object()
    {
        return this._object
    }
    get eventDispatcher()
    {
        return this._events
    }
    set eventDispatcher(e)
    {
        this._events = e
    }
    get widget()
    {
        return null
    }
    get contextMenu()
    {
        return null
    }
    get time()
    {
        return this._time
    }
}
class gR {
    constructor()
    {
        this._map = new Map,
        this._updateCounter = 0
    }
    dispose()
    {
        this._map.clear(),
        this._updateCounter = 0
    }
    getValue(e)
    {
        return this._map.get(e)
    }
    setValue(e, t)
    {
        this._map.has(e) && this._map.get(e) === t || (this._map.set(e, t), this._updateCounter++)
    }
    removeKey(e)
    {
        e && (this._map.delete(e), this._updateCounter++)
    }
    get updateCounter()
    {
        return this._updateCounter
    }
}
const fR = class  extends ei{
    constructor(s, e, t)
    {
        super(),
        this._id = s,
        this._instanceId = fR.OBJECT_COUNTER++,
        this._type = t,
        this._model = new gR,
        this._location = new w,
        this._direction = new w,
        this._states = [],
        this._visualization = null,
        this._logic = null,
        this._pendingLogicMessages = [],
        this._updateCounter = 0,
        this._isReady = !1;
        let r = e - 1;
        for (; r >= 0;)
            this._states[r] = 0,
            r--
    }
    onDispose()
    {
        this._pendingLogicMessages = [],
        this.setVisualization(null),
        this.setLogic(null),
        this._model && this._model.dispose(),
        super.onDispose()
    }
    getLocation()
    {
        return this._location
    }
    setLocation(s)
    {
        s && (s.x === this._location.x && s.y === this._location.y && s.z === this._location.z || (this._location.x = s.x, this._location.y = s.y, this._location.z = s.z, this._updateCounter++))
    }
    getDirection()
    {
        return this._direction
    }
    setDirection(s)
    {
        s && (s.x === this._direction.x && s.y === this._direction.y && s.z === this._direction.z || (this._direction.x = (s.x % 360 + 360) % 360, this._direction.y = (s.y % 360 + 360) % 360, this._direction.z = (s.z % 360 + 360) % 360, this._updateCounter++))
    }
    getState(s=0)
    {
        return s >= 0 && s < this._states.length ? this._states[s] : -1
    }
    setState(s, e=0)
    {
        return e >= 0 && e < this._states.length ? (this._states[e] !== s && (this._states[e] = s, this._updateCounter++), !0) : !1
    }
    setVisualization(s)
    {
        this._visualization !== s && (this._visualization && this._visualization.dispose(), this._visualization = s, this._visualization && (this._visualization.object = this))
    }
    setLogic(s)
    {
        if (this._logic === s)
            return;
        const e = this._logic;
        if (e && (this._logic = null, e.setObject(null)), this._logic = s, this._logic)
            for (this._logic.setObject(this); this._pendingLogicMessages.length;) {
                const t = this._pendingLogicMessages.shift();
                this._logic.processUpdateMessage(t)
            }
    }
    processUpdateMessage(s)
    {
        if (this._logic)
            return this._logic.processUpdateMessage(s);
        this._pendingLogicMessages.push(s)
    }
    tearDown()
    {
        this._logic && this._logic.tearDown()
    }
    get id()
    {
        return this._id
    }
    get instanceId()
    {
        return this._instanceId
    }
    get type()
    {
        return this._type
    }
    get model()
    {
        return this._model
    }
    get visualization()
    {
        return this._visualization
    }
    get mouseHandler()
    {
        return this._logic
    }
    get logic()
    {
        return this._logic
    }
    get location()
    {
        return this._location
    }
    get direction()
    {
        return this._direction
    }
    get updateCounter()
    {
        return this._updateCounter
    }
    set updateCounter(s)
    {
        this._updateCounter = s
    }
    get isReady()
    {
        return this._isReady
    }
    set isReady(s)
    {
        this._isReady = s
    }
}
;
let mR = fR;
mR.OBJECT_COUNTER = 0;
const ER = class {
    constructor()
    {
        this._id = ER.SPRITE_COUNTER++,
        this._name = "",
        this._type = "",
        this._spriteType = Dr.DEFAULT,
        this._texture = null,
        this._container = null,
        this._width = 0,
        this._height = 0,
        this._offsetX = 0,
        this._offsetY = 0,
        this._flipH = !1,
        this._flipV = !1,
        this._direction = 0,
        this._alpha = 255,
        this._blendMode = Qn.NORMAL,
        this._color = 16777215,
        this._relativeDepth = 0,
        this._varyingDepth = !1,
        this._libraryAssetName = "",
        this._clickHandling = !1,
        this._visible = !0,
        this._tag = "",
        this._posture = null,
        this._alphaTolerance = Fi.MATCH_OPAQUE_PIXELS,
        this._filters = [],
        this._updateCounter = 0,
        this._updateContainer = !1
    }
    dispose()
    {
        this._texture = null,
        this._width = 0,
        this._height = 0
    }
    get id()
    {
        return this._id
    }
    set id(s)
    {
        this._id = s
    }
    get name()
    {
        return this._name
    }
    set name(s)
    {
        this._name !== s && (this._name = s, this._updateCounter++)
    }
    get type()
    {
        return this._type
    }
    set type(s)
    {
        this._type = s
    }
    get spriteType()
    {
        return this._spriteType
    }
    set spriteType(s)
    {
        this._spriteType = s
    }
    get texture()
    {
        return this._texture
    }
    set texture(s)
    {
        this._texture !== s && (s && (this._width = s.width, this._height = s.height), this._texture = s, this._updateCounter++)
    }
    get container()
    {
        return this._container
    }
    set container(s)
    {
        this._container !== s && (this.texture = cs.EMPTY, s && (this._width = s.width, this._height = s.height), this._container = s, this._updateCounter++, this._updateContainer = !0)
    }
    get width()
    {
        return this._width
    }
    get height()
    {
        return this._height
    }
    get offsetX()
    {
        return this._offsetX
    }
    set offsetX(s)
    {
        this._offsetX !== s && (this._offsetX = s, this._updateCounter++)
    }
    get offsetY()
    {
        return this._offsetY
    }
    set offsetY(s)
    {
        this._offsetY !== s && (this._offsetY = s, this._updateCounter++)
    }
    get flipH()
    {
        return this._flipH
    }
    set flipH(s)
    {
        this._flipH !== s && (this._flipH = s, this._updateCounter++)
    }
    get flipV()
    {
        return this._flipV
    }
    set flipV(s)
    {
        this._flipV !== s && (this._flipV = s, this._updateCounter++)
    }
    get direction()
    {
        return this._direction
    }
    set direction(s)
    {
        this._direction = s
    }
    get alpha()
    {
        return this._alpha
    }
    set alpha(s)
    {
        s = s & 255,
        this._alpha !== s && (this._alpha = s, this._updateCounter++)
    }
    get blendMode()
    {
        return this._blendMode
    }
    set blendMode(s)
    {
        this._blendMode !== s && (this._blendMode = s, this._updateCounter++)
    }
    get color()
    {
        return this._color
    }
    set color(s)
    {
        s = s & 16777215,
        this._color !== s && (this._color = s, this._updateCounter++)
    }
    get relativeDepth()
    {
        return this._relativeDepth
    }
    set relativeDepth(s)
    {
        this._relativeDepth !== s && (this._relativeDepth = s, this._updateCounter++)
    }
    get varyingDepth()
    {
        return this._varyingDepth
    }
    set varyingDepth(s)
    {
        s !== this._varyingDepth && (this._varyingDepth = s, this._updateCounter++)
    }
    get libraryAssetName()
    {
        return this._libraryAssetName
    }
    set libraryAssetName(s)
    {
        this._libraryAssetName = s
    }
    get clickHandling()
    {
        return this._clickHandling
    }
    set clickHandling(s)
    {
        this._clickHandling = s
    }
    get visible()
    {
        return this._visible
    }
    set visible(s)
    {
        this._visible !== s && (this._visible = s, this._updateCounter++)
    }
    get tag()
    {
        return this._tag
    }
    set tag(s)
    {
        this._tag !== s && (this._tag = s, this._updateCounter++)
    }
    get posture()
    {
        return this._posture
    }
    set posture(s)
    {
        this._posture !== s && (this._posture = s, this._updateCounter++)
    }
    get alphaTolerance()
    {
        return this._alphaTolerance
    }
    set alphaTolerance(s)
    {
        this._alphaTolerance !== s && (this._alphaTolerance = s, this._updateCounter++)
    }
    get filters()
    {
        return this._filters
    }
    set filters(s)
    {
        this._filters = s,
        this._updateCounter++
    }
    get updateCounter()
    {
        return this._updateCounter
    }
    get updateContainer()
    {
        return this._updateContainer
    }
    set updateContainer(s)
    {
        this._updateContainer = s
    }
}
;
let _g = ER;
_g.SPRITE_COUNTER = 0;
const pR = class {
    constructor()
    {
        this._id = pR.VISUALIZATION_COUNTER++,
        this._object = null,
        this._asset = null,
        this._sprites = [],
        this._scale = -1,
        this._updateObjectCounter = -1,
        this._updateModelCounter = -1,
        this._updateSpriteCounter = -1
    }
    initialize(s)
    {
        return !1
    }
    update(s, e, t, r) {}
    reset()
    {
        this._scale = -1
    }
    dispose()
    {
        if (this._sprites) {
            for (; this._sprites.length;) {
                const s = this._sprites[0];
                s && s.dispose(),
                this._sprites.pop()
            }
            this._sprites = null
        }
        this._object = null,
        this._asset = null
    }
    getSprite(s)
    {
        return s >= 0 && s < this._sprites.length ? this._sprites[s] : null
    }
    getSpriteList()
    {
        return null
    }
    createSprite()
    {
        return this.createSpriteAtIndex(this._sprites.length)
    }
    createSpriteAtIndex(s)
    {
        const e = new _g;
        return s >= this._sprites.length ? this._sprites.push(e) : this._sprites.splice(s, 0, e), e
    }
    createSprites(s)
    {
        for (; this._sprites.length > s;) {
            const e = this._sprites[this._sprites.length - 1];
            e && e.dispose(),
            this._sprites.pop()
        }
        for (; this._sprites.length < s;)
            this._sprites.push(new _g)
    }
    get image()
    {
        return this.getImage(0, -1)
    }
    getImage(s, e)
    {
        const t = this.getBoundingRectangle();
        if (t.width * t.height === 0)
            return null;
        const r = this.totalSprites,
            i = [];
        let n = 0;
        for (; n < r;) {
            const c = this.getSprite(n);
            c && c.visible && c.texture && i.push(c),
            n++
        }
        i.sort((c, u) => u.relativeDepth - c.relativeDepth);
        const o = new Mi;
        for (n = 0; n < i.length;) {
            const c = i[n],
                u = c.texture;
            if (u) {
                const h = new qt(u);
                h.alpha = c.alpha / 255,
                h.tint = c.color,
                h.x = c.offsetX,
                h.y = c.offsetY,
                h.blendMode = c.blendMode,
                h.filters = c.filters,
                c.flipH && (h.scale.x = -1),
                c.flipV && (h.scale.y = -1),
                o.addChild(h)
            }
            n++
        }
        const l = pt.generateTexture(o);
        return l || null
    }
    getBoundingRectangle()
    {
        const s = this.totalSprites,
            e = new Qr;
        let t = 0;
        for (; t < s;) {
            const r = this.getSprite(t);
            if (r && r.texture && r.visible) {
                const i = r.flipH ? -r.width + r.offsetX : r.offsetX,
                    n = r.flipV ? -r.height + r.offsetY : r.offsetY,
                    o = new Ge(i, n);
                t === 0 ? (e.x = o.x, e.y = o.y, e.width = r.width, e.height = r.height) : (o.x < e.x && (e.x = o.x), o.y < e.y && (e.y = o.y), o.x + r.width > e.right && (e.width = o.x + r.width - e.x), o.y + r.height > e.bottom && (e.height = o.y + r.height - e.y))
            }
            t++
        }
        return e
    }
    get instanceId()
    {
        return this._id
    }
    get object()
    {
        return this._object
    }
    set object(s)
    {
        this._object = s
    }
    get asset()
    {
        return this._asset
    }
    set asset(s)
    {
        this._asset && this._asset.removeReference(),
        this._asset = s,
        this._asset && this._asset.addReference()
    }
    get sprites()
    {
        return this._sprites
    }
    get totalSprites()
    {
        return this._sprites.length
    }
    get updateObjectCounter()
    {
        return this._updateObjectCounter
    }
    set updateObjectCounter(s)
    {
        this._updateObjectCounter = s
    }
    get updateModelCounter()
    {
        return this._updateModelCounter
    }
    set updateModelCounter(s)
    {
        this._updateModelCounter = s
    }
    get updateSpriteCounter()
    {
        return this._updateSpriteCounter
    }
    set updateSpriteCounter(s)
    {
        this._updateSpriteCounter = s
    }
    get spriteCount()
    {
        return this._sprites.length
    }
}
;
let iu = pR;
iu.VISUALIZATION_COUNTER = 0;
class NU {
    constructor(e)
    {
        this._roomObjectVariableAccurateZ = e || "",
        this._location = new w,
        this._screenLocation = new w,
        this._locationChanged = !1,
        this._geometryUpdateId = -1,
        this._objectUpdateId = -1
    }
    dispose()
    {
        this._screenLocation = null
    }
    updateLocation(e, t)
    {
        if (!e || !t)
            return null;
        let r = !1;
        const i = e.getLocation();
        if ((t.updateId !== this._geometryUpdateId || e.updateCounter !== this._objectUpdateId) && (this._objectUpdateId = e.updateCounter, (t.updateId !== this._geometryUpdateId || i.x !== this._location.x || i.y !== this._location.y || i.z !== this._location.z) && (this._geometryUpdateId = t.updateId, this._location.assign(i), r = !0)), this._locationChanged = r, this._locationChanged) {
            const n = t.getScreenPosition(i);
            if (!n)
                return null;
            const o = e.model.getValue(this._roomObjectVariableAccurateZ);
            if (isNaN(o) || o === 0) {
                const l = new w(Math.round(i.x), Math.round(i.y), i.z);
                if (l.x !== i.x || l.y !== i.y) {
                    const c = t.getScreenPosition(l);
                    this._screenLocation.assign(n),
                    c && (this._screenLocation.z = c.z)
                } else
                    this._screenLocation.assign(n)
            } else
                this._screenLocation.assign(n);
            this._screenLocation.x = Math.round(this._screenLocation.x),
            this._screenLocation.y = Math.round(this._screenLocation.y)
        }
        return this._screenLocation
    }
    get locationChanged()
    {
        return this._locationChanged
    }
}
class yU {
    constructor()
    {
        this._sprites = [],
        this._updateId1 = -1,
        this._updateId2 = -1,
        this._isEmpty = !1
    }
    get spriteCount()
    {
        return this._sprites.length
    }
    get isEmpty()
    {
        return this._isEmpty
    }
    dispose()
    {
        this.setSpriteCount(0)
    }
    addSprite(e)
    {
        this._sprites.push(e)
    }
    getSprite(e)
    {
        return this._sprites[e]
    }
    get sprites()
    {
        return this._sprites
    }
    needsUpdate(e, t)
    {
        return e === this._updateId1 && t === this._updateId2 ? !1 : (this._updateId1 = e, this._updateId2 = t, !0)
    }
    setSpriteCount(e)
    {
        if (e < this._sprites.length) {
            let t = e;
            for (; t < this._sprites.length;) {
                const r = this._sprites[t];
                r && r.dispose(),
                t++
            }
            this._sprites.splice(e, this._sprites.length - e)
        }
        this._isEmpty = !this._sprites.length
    }
}
class MU {
    constructor(e)
    {
        this._location = new NU(e),
        this._sprites = new yU
    }
    get location()
    {
        return this._location
    }
    get sprites()
    {
        return this._sprites
    }
    dispose()
    {
        this._location && (this._location.dispose(), this._location = null),
        this._sprites && (this._sprites.dispose(), this._sprites = null)
    }
    get objectId()
    {
        return this._objectId
    }
    set objectId(e)
    {
        this._objectId = e
    }
}
const gg = class {
    constructor(s)
    {
        this._data = new Map,
        this._roomObjectVariableAccurateZ = s
    }
    dispose()
    {
        if (this._data) {
            for (const [s, e] of this._data.entries())
                e && (this._data.delete(s), e.dispose());
            this._data = null
        }
    }
    getObjectCache(s)
    {
        let e = this._data.get(s);
        return e || (e = new MU(this._roomObjectVariableAccurateZ), this._data.set(s, e)), e
    }
    removeObjectCache(s)
    {
        const e = this._data.get(s);
        e && (this._data.delete(s), e.dispose())
    }
    getSortableSpriteList()
    {
        const s = [];
        for (const e of this._data.values()) {
            if (!e)
                continue;
            const t = e.sprites && e.sprites.sprites;
            if (!(!t || !t.length)) {
                for (const r of t)
                    if (r && r.sprite.spriteType !== Dr.ROOM_PLANE && r.sprite.name !== "") {
                        const i = new NT;
                        i.objectId = e.objectId,
                        i.x = r.x,
                        i.y = r.y,
                        i.z = r.z,
                        i.name = r.sprite.name || "",
                        i.flipH = r.sprite.flipH,
                        i.alpha = r.sprite.alpha,
                        i.color = r.sprite.color.toString(),
                        i.blendMode = r.sprite.blendMode.toString(),
                        i.width = r.sprite.width,
                        i.height = r.sprite.height,
                        i.type = r.sprite.type,
                        i.posture = r.sprite.posture;
                        const n = this.isSkewedSprite(r.sprite);
                        n && (i.skew = r.sprite.direction % 4 === 0 ? -.5 : .5),
                        (n || r.name.indexOf("%image.library.url%") >= 0 || r.name.indexOf("%group.badge.url%") >= 0) && i.width <= gg.MAX_SIZE_FOR_AVG_COLOR && i.height <= gg.MAX_SIZE_FOR_AVG_COLOR && r.sprite.name.indexOf("external_image_wallitem") === 0 && (i.frame = !0),
                        s.push(i)
                    }
            }
        }
        return !s || !s.length ? null : s
    }
    isSkewedSprite(s)
    {
        return s.type ? s.type.indexOf("external_image_wallitem") === 0 && s.tag === "THUMBNAIL" || s.type.indexOf("guild_forum") === 0 && s.tag === "THUMBNAIL" : !1
    }
    getPlaneSortableSprites()
    {
        const s = [];
        for (const e of this._data.values())
            for (const t of e.sprites.sprites)
                t.sprite.spriteType === Dr.ROOM_PLANE && s.push(t);
        return s
    }
}
;
let IR = gg;
IR.MAX_SIZE_FOR_AVG_COLOR = 200;
const Ta = class {
    static hex2rgb(s, e=[])
    {
        return e[0] = (s >> 16 & 255) / 255, e[1] = (s >> 8 & 255) / 255, e[2] = (s & 255) / 255, e
    }
    static hex2rgba(s, e=[])
    {
        return e[0] = (s >> 16 & 255) / 255, e[1] = (s >> 8 & 255) / 255, e[2] = (s & 255) / 255, e[3] = s & 255, e
    }
    static rgb2hex(s)
    {
        return (s[0] * 255 << 16) + (s[1] * 255 << 8) + (s[2] * 255 | 0)
    }
    static rgba2hex(s)
    {
        return (s[0] * 255 << 16) + (s[1] * 255 << 8) + (s[2] * 255 | 0) + (s[3] | 0)
    }
    static rgbStringToHex(s)
    {
        const e = s.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
        return "#" + Ta.getHex(e[1]) + Ta.getHex(e[2]) + Ta.getHex(e[3])
    }
    static getHex(s)
    {
        return isNaN(s) ? "00" : Ta.HEX_DIGITS[(s - s % 16) / 16] + Ta.HEX_DIGITS[s % 16]
    }
    static int2rgb(s)
    {
        s >>>= 0;
        const e = s & 255,
            t = (s & 65280) >>> 8;
        return "rgba(" + [(s & 16711680) >>> 16, t, e, 1].join(",") + ")"
    }
    static rgbToHSL(s)
    {
        const e = (s >> 16 & 255) / 255,
            t = (s >> 8 & 255) / 255,
            r = (s & 255) / 255,
            i = Math.max(e, t, r),
            n = Math.min(e, t, r),
            o = i - n;
        let l = 0,
            c = 0,
            u = 0;
        o == 0 ? l = 0 : i == e ? t > r ? l = 60 * (t - r) / o : l = 60 * (t - r) / o + 360 : i == t ? l = 60 * (r - e) / o + 120 : i == r && (l = 60 * (e - t) / o + 240),
        c = .5 * (i + n),
        o == 0 ? u = 0 : c <= .5 ? u = o / c * .5 : u = o / (1 - c) * .5;
        const h = Math.round(l / 360 * 255),
            d = Math.round(u * 255),
            m = Math.round(c * 255);
        return (h << 16) + (d << 8) + m
    }
    static hslToRGB(s)
    {
        let e,
            t,
            r,
            i,
            n;
        const o = (s >> 16 & 255) / 255,
            l = (s >> 8 & 255) / 255,
            c = (s & 255) / 255;
        let u = 0,
            h = 0,
            d = 0;
        l > 0 ? (e = 0, t = 0, c < .5 ? e = c * (1 + l) : e = c + l - c * l, t = 2 * c - e, r = o + 1 / 3, i = o, n = o - 1 / 3, r < 0 ? r = r + 1 : r > 1 && r--, i < 0 ? i = i + 1 : i > 1 && i--, n < 0 ? n = n + 1 : n > 1 && n--, r * 6 < 1 ? u = t + (e - t) * 6 * r : r * 2 < 1 ? u = e : r * 3 < 2 ? u = t + (e - t) * 6 * (2 / 3 - r) : u = t, i * 6 < 1 ? h = t + (e - t) * 6 * i : i * 2 < 1 ? h = e : i * 3 < 2 ? h = t + (e - t) * 6 * (2 / 3 - i) : h = t, n * 6 < 1 ? d = t + (e - t) * 6 * n : n * 2 < 1 ? d = e : n * 3 < 2 ? d = t + (e - t) * 6 * (2 / 3 - n) : d = t) : (u = c, h = c, d = c);
        const m = Math.round(u * 255),
            p = Math.round(h * 255),
            E = Math.round(d * 255);
        return (m << 16) + (p << 8) + E
    }
    static rgb2xyz(s)
    {
        let e = (s >> 16 & 255) / 255,
            t = (s >> 8 & 255) / 255,
            r = (s >> 0 & 255) / 255;
        return e > .04045 ? e = Math.pow((e + .055) / 1.055, 2.4) : e = e / 12.92, t > .04045 ? t = Math.pow((t + .055) / 1.055, 2.4) : t = t / 12.92, r > .04045 ? r = Math.pow((r + .055) / 1.055, 2.4) : r = r / 12.92, e = e * 100, t = t * 100, r = r * 100, new w(e * .4124 + t * .3576 + r * .1805, e * .2126 + t * .7152 + r * .0722, e * .0193 + t * .1192 + r * .9505)
    }
    static xyz2CieLab(s)
    {
        let e = s.x / 95.047,
            t = s.y / 100,
            r = s.z / 108.883;
        return e > .008856 ? e = Math.pow(e, 1 / 3) : e = 7.787 * e + 16 / 116, t > .008856 ? t = Math.pow(t, 1 / 3) : t = 7.787 * t + 16 / 116, r > .008856 ? r = Math.pow(r, 1 / 3) : r = 7.787 * r + 16 / 116, new w(116 * t - 16, 500 * (e - t), 200 * (t - r))
    }
    static rgb2CieLab(s)
    {
        return Ta.xyz2CieLab(Ta.rgb2xyz(s))
    }
    static colorize(s, e)
    {
        if (e === 4294967295)
            return s;
        let t = e >> 16 & 255,
            r = e >> 8 & 255,
            i = e & 255;
        return t = (s >> 16 & 255) * t / 255, r = (s >> 8 & 255) * r / 255, i = (s & 255) * i / 255, (s && 4278190080) | t << 16 | r << 8 | i
    }
}
;
let nr = Ta;
nr.HEX_DIGITS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
class gp {
    constructor(e)
    {
        e < 0 && (e = 0),
        this._reservedNumbers = [],
        this._freeNumbers = [];
        let t = 0;
        for (; t < e;)
            this._freeNumbers.push(t),
            t++
    }
    dispose()
    {
        this._reservedNumbers = null,
        this._freeNumbers = null
    }
    reserveNumber()
    {
        if (this._freeNumbers.length > 0) {
            const e = this._freeNumbers.pop();
            return this._reservedNumbers.push(e), e
        }
        return -1
    }
    freeNumber(e)
    {
        const t = this._reservedNumbers.indexOf(e);
        t >= 0 && (this._reservedNumbers.splice(t, 1), this._freeNumbers.push(e))
    }
}
class bU {
    static getFlipHBitmapData(e)
    {
        if (!e)
            return null;
        const t = pt.createRenderTexture(e.width, e.height),
            r = new Pr;
        return r.scale(-1, 1), r.translate(e.width, 0), Gs.instance.renderer.render(new ls(e), {
            renderTexture: t,
            clear: !0,
            transform: r
        }), t
    }
    static getFlipVBitmapData(e)
    {
        if (!e)
            return null;
        const t = new Pr;
        t.scale(1, -1),
        t.translate(0, e.height);
        const r = new J_;
        return r.beginTextureFill({
            texture: e,
            matrix: t
        }).drawRect(0, 0, e.width, e.height).endFill(), pt.generateTexture(r)
    }
    static getFlipHVBitmapData(e)
    {
        if (!e)
            return null;
        const t = new Pr;
        t.scale(-1, -1),
        t.translate(e.width, e.height);
        const r = new J_;
        return r.beginTextureFill({
            texture: e,
            matrix: t
        }).drawRect(0, 0, e.width, e.height).endFill(), pt.generateTexture(r)
    }
}
const St = class {
    static init(s, e)
    {
        St._currentDelta = 0,
        St._startDelayMs = s,
        St._effectDurationMs = e,
        St._initializationTimeMs = Pe(),
        St._state = St.STATE_START_DELAY
    }
    static turnVisualizationOn()
    {
        if (St._state === St.STATE_NOT_INITIALIZED || St._state === St.STATE_OVER)
            return;
        const s = Pe() - St._initializationTimeMs;
        if (s > St._startDelayMs + St._effectDurationMs) {
            St._state = St.STATE_OVER;
            return
        }
        if (St._visualizationOn = !0, s < St._startDelayMs) {
            St._state = St.STATE_START_DELAY;
            return
        }
        St._state = St.STATE_RUNNING,
        St._currentDelta = (s - St._startDelayMs) / St._effectDurationMs
    }
    static turnVisualizationOff()
    {
        St._visualizationOn = !1
    }
    static isVisualizationOn()
    {
        return St._visualizationOn && St.isRunning()
    }
    static isRunning()
    {
        return St._state === St.STATE_START_DELAY || St._state === St.STATE_RUNNING
    }
    static getDelta(s=0, e=1)
    {
        return Math.min(Math.max(St._currentDelta, s), e)
    }
    static get totalRunningTime()
    {
        return St._startDelayMs + St._effectDurationMs
    }
}
;
let xs = St;
xs.STATE_NOT_INITIALIZED = 0;
xs.STATE_START_DELAY = 1;
xs.STATE_RUNNING = 2;
xs.STATE_OVER = 3;
xs._state = St.STATE_NOT_INITIALIZED;
xs._visualizationOn = !1;
xs._currentDelta = 0;
xs._initializationTimeMs = 0;
xs._startDelayMs = 20 * 1e3;
xs._effectDurationMs = 2e3;
const mo = class {
    constructor(s, e, t, r=null)
    {
        this._updateId = 0,
        this._scale = 1,
        this._x_scale = 1,
        this._y_scale = 1,
        this._z_scale = 1,
        this._x_scale_internal = 1,
        this._y_scale_internal = 1,
        this._z_scale_internal = 1,
        this._clipNear = -500,
        this._clipFar = 500,
        this._displacements = null,
        this.scale = s,
        this._x = new w,
        this._y = new w,
        this._z = new w,
        this._directionAxis = new w,
        this._location = new w,
        this._direction = new w,
        this._depth = new w,
        this._x_scale_internal = 1,
        this._y_scale_internal = 1,
        this.x_scale = 1,
        this.y_scale = 1,
        this._z_scale_internal = Math.sqrt(1 / 2) / Math.sqrt(3 / 4),
        this.z_scale = 1,
        this.location = new w(t.x, t.y, t.z),
        this.direction = new w(e.x, e.y, e.z),
        r != null ? this.setDepthVector(r) : this.setDepthVector(e),
        this._displacements = new Map
    }
    static getIntersectionVector(s, e, t, r)
    {
        const i = w.dotProduct(e, r);
        if (Math.abs(i) < 1e-5)
            return null;
        const n = w.dif(s, t),
            o = -w.dotProduct(r, n) / i;
        return w.sum(s, w.product(e, o))
    }
    get updateId()
    {
        return this._updateId
    }
    get scale()
    {
        return this._scale / Math.sqrt(.5)
    }
    set scale(s)
    {
        s <= 1 && (s = 1),
        s = s * Math.sqrt(.5),
        s != this._scale && (this._scale = s, this._updateId++)
    }
    get directionAxis()
    {
        return this._directionAxis
    }
    get location()
    {
        return this._location.assign(this._loc), this._location.x = this._location.x * this._x_scale, this._location.y = this._location.y * this._y_scale, this._location.z = this._location.z * this._z_scale, this._location
    }
    set location(s)
    {
        if (s == null)
            return;
        this._loc == null && (this._loc = new w);
        const e = this._loc.x,
            t = this._loc.y,
            r = this._loc.z;
        this._loc.assign(s),
        this._loc.x = this._loc.x / this._x_scale,
        this._loc.y = this._loc.y / this._y_scale,
        this._loc.z = this._loc.z / this._z_scale,
        (this._loc.x != e || this._loc.y != t || this._loc.z != r) && this._updateId++
    }
    get direction()
    {
        return this._direction
    }
    set direction(s)
    {
        let e,
            t,
            r,
            i,
            n;
        if (s == null)
            return;
        this._dir == null && (this._dir = new w);
        const o = this._dir.x,
            l = this._dir.y,
            c = this._dir.z;
        this._dir.assign(s),
        this._direction.assign(s),
        (this._dir.x != o || this._dir.y != l || this._dir.z != c) && this._updateId++;
        const u = new w(0, 1, 0),
            h = new w(0, 0, 1),
            d = new w(1, 0, 0),
            m = s.x / 180 * Math.PI,
            p = s.y / 180 * Math.PI,
            E = s.z / 180 * Math.PI,
            T = Math.cos(m),
            I = Math.sin(m),
            S = w.sum(w.product(u, T), w.product(d, -I)),
            A = new w(h.x, h.y, h.z),
            N = w.sum(w.product(u, I), w.product(d, T)),
            b = Math.cos(p),
            v = Math.sin(p),
            D = new w(S.x, S.y, S.z),
            G = w.sum(w.product(A, b), w.product(N, v)),
            x = w.sum(w.product(A, -v), w.product(N, b));
        E != 0 ? (e = Math.cos(E), t = Math.sin(E), r = w.sum(w.product(D, e), w.product(G, t)), i = w.sum(w.product(D, -t), w.product(G, e)), n = new w(x.x, x.y, x.z), this._x.assign(r), this._y.assign(i), this._z.assign(n), this._directionAxis.assign(this._z)) : (this._x.assign(D), this._y.assign(G), this._z.assign(x), this._directionAxis.assign(this._z))
    }
    set x_scale(s)
    {
        this._x_scale != s * this._x_scale_internal && (this._x_scale = s * this._x_scale_internal, this._updateId++)
    }
    set y_scale(s)
    {
        this._y_scale != s * this._y_scale_internal && (this._y_scale = s * this._y_scale_internal, this._updateId++)
    }
    set z_scale(s)
    {
        this._z_scale != s * this._z_scale_internal && (this._z_scale = s * this._z_scale_internal, this._updateId++)
    }
    dispose()
    {
        this._x = null,
        this._y = null,
        this._z = null,
        this._loc = null,
        this._dir = null,
        this._directionAxis = null,
        this._location = null,
        this._displacements != null && (this._displacements.clear(), this._displacements = null)
    }
    setDisplacement(s, e)
    {
        let t,
            r;
        s == null || e == null || this._displacements != null && (t = Math.trunc(Math.round(s.x)) + "_" + Math.trunc(Math.round(s.y)) + "_" + Math.trunc(Math.round(s.z)), this._displacements.delete(t), r = new w, r.assign(e), this._displacements.set(t, r), this._updateId++)
    }
    getDisplacenent(s)
    {
        let e;
        return this._displacements != null ? (e = Math.trunc(Math.round(s.x)) + "_" + Math.trunc(Math.round(s.y)) + "_" + Math.trunc(Math.round(s.z)), this._displacements.get(e)) : null
    }
    setDepthVector(s)
    {
        let e,
            t,
            r;
        const i = new w(0, 1, 0),
            n = new w(0, 0, 1),
            o = new w(1, 0, 0),
            l = s.x / 180 * Math.PI,
            c = s.y / 180 * Math.PI,
            u = s.z / 180 * Math.PI,
            h = Math.cos(l),
            d = Math.sin(l),
            m = w.sum(w.product(i, h), w.product(o, -d)),
            p = new w(n.x, n.y, n.z),
            E = w.sum(w.product(i, d), w.product(o, h)),
            T = Math.cos(c),
            I = Math.sin(c),
            S = new w(m.x, m.y, m.z),
            A = w.sum(w.product(p, T), w.product(E, I)),
            N = w.sum(w.product(p, -I), w.product(E, T));
        u != 0 ? (e = Math.cos(u), t = Math.sin(u), w.sum(w.product(S, e), w.product(A, t)), w.sum(w.product(S, -t), w.product(A, e)), r = new w(N.x, N.y, N.z), this._depth.assign(r)) : this._depth.assign(N),
        this._updateId++
    }
    adjustLocation(s, e)
    {
        if (s == null || this._z == null)
            return;
        const t = w.product(this._z, -e),
            r = new w(s.x + t.x, s.y + t.y, s.z + t.z);
        this.location = r
    }
    getCoordinatePosition(s)
    {
        if (s == null)
            return null;
        const e = w.scalarProjection(s, this._x),
            t = w.scalarProjection(s, this._y),
            r = w.scalarProjection(s, this._z);
        return new w(e, t, r)
    }
    getScreenPosition(s)
    {
        let e = w.dif(s, this._loc);
        e.x = e.x * this._x_scale,
        e.y = e.y * this._y_scale,
        e.z = e.z * this._z_scale;
        let t = w.scalarProjection(e, this._depth);
        if (t < this._clipNear || t > this._clipFar)
            return null;
        let r = w.scalarProjection(e, this._x),
            i = -w.scalarProjection(e, this._y);
        r = r * this._scale,
        i = i * this._scale;
        const n = this.getDisplacenent(s);
        return n != null && (e = w.dif(s, this._loc), e.add(n), e.x = e.x * this._x_scale, e.y = e.y * this._y_scale, e.z = e.z * this._z_scale, t = w.scalarProjection(e, this._depth)), e.x = r, e.y = i, e.z = t, e
    }
    getScreenPoint(s)
    {
        const e = this.getScreenPosition(s);
        return e == null ? null : new Ge(e.x, e.y)
    }
    getPlanePosition(s, e, t, r)
    {
        let i,
            n;
        const o = s.x / this._scale,
            l = -s.y / this._scale,
            c = w.product(this._x, o);
        c.add(w.product(this._y, l));
        const u = new w(this._loc.x * this._x_scale, this._loc.y * this._y_scale, this._loc.z * this._z_scale);
        u.add(c);
        const h = this._z,
            d = new w(e.x * this._x_scale, e.y * this._y_scale, e.z * this._z_scale),
            m = new w(t.x * this._x_scale, t.y * this._y_scale, t.z * this._z_scale),
            p = new w(r.x * this._x_scale, r.y * this._y_scale, r.z * this._z_scale),
            E = w.crossProduct(m, p),
            T = new w;
        return T.assign(mo.getIntersectionVector(u, h, d, E)), T != null ? (T.subtract(d), i = w.scalarProjection(T, t) / m.length * t.length, n = w.scalarProjection(T, r) / p.length * r.length, new Ge(i, n)) : null
    }
    performZoom()
    {
        this.isZoomedIn() ? this.scale = mo.SCALE_ZOOMED_OUT : this.scale = mo.SCALE_ZOOMED_IN
    }
    isZoomedIn()
    {
        return this.scale == mo.SCALE_ZOOMED_IN
    }
    performZoomOut()
    {
        this.scale = mo.SCALE_ZOOMED_OUT
    }
    performZoomIn()
    {
        this.scale = mo.SCALE_ZOOMED_IN
    }
}
;
let qa = mo;
qa.SCALE_ZOOMED_IN = 64;
qa.SCALE_ZOOMED_OUT = 32;
const fg = class {
    static makeRoomPreviewerId(s)
    {
        return (s & 65535) + fg.PREVIEW_ROOM_ID_BASE
    }
    static isRoomPreviewerId(s)
    {
        return s >= fg.PREVIEW_ROOM_ID_BASE
    }
}
;
let On = fg;
On.PREVIEW_ROOM_ID_BASE = 2147418112;
class nn {
    static init(e, t)
    {
        this._SafeStr_4513 = 0,
        this._SafeStr_4515 = e,
        this._SafeStr_4516 = t,
        this._SafeStr_4514 = Pe(),
        this._SafeStr_448 = 1
    }
    static turnVisualizationOn()
    {
        if (this._SafeStr_448 === 0 || this._SafeStr_448 === 3)
            return;
        this._SafeStr_4524 || (this._SafeStr_4524 = setTimeout(() => this.turnVisualizationOff(), this._SafeStr_4516));
        const e = Pe() - this._SafeStr_4514;
        if (e > this._SafeStr_4515 + this._SafeStr_4516) {
            this._SafeStr_448 = 3;
            return
        }
        if (this._SafeStr_4512 = !0, e < this._SafeStr_4515) {
            this._SafeStr_448 = 1;
            return
        }
        this._SafeStr_448 = 2,
        this._SafeStr_4513 = (e - this._SafeStr_4515) / this._SafeStr_4516
    }
    static turnVisualizationOff()
    {
        this._SafeStr_4512 = !1,
        clearTimeout(this._SafeStr_4524),
        this._SafeStr_4524 = null
    }
    static isVisualizationOn()
    {
        return this._SafeStr_4512 && this.isRunning()
    }
    static isRunning()
    {
        return this._SafeStr_448 === 1 || this._SafeStr_448 === 2
    }
}
nn.STATE_NOT_INITIALIZED = 0;
nn.STATE_START_DELAY = 1;
nn.STATE_RUNNING = 2;
nn.STATE_OVER = 3;
nn._SafeStr_448 = 0;
nn._SafeStr_4512 = !1;
nn._SafeStr_4513 = 0;
nn._SafeStr_4514 = 0;
nn._SafeStr_4515 = 2e4;
nn._SafeStr_4516 = 5e3;
class di {
    static init(e, t)
    {
        this._SafeStr_4513 = 0,
        this._SafeStr_4515 = e,
        this._SafeStr_4516 = t,
        this._SafeStr_4514 = Pe(),
        this._SafeStr_448 = 1
    }
    static turnVisualizationOn()
    {
        if (this._SafeStr_448 === 0 || this._SafeStr_448 === 3)
            return;
        this._SafeStr_4524 || (this._SafeStr_4524 = setTimeout(() => this.turnVisualizationOff(), this._SafeStr_4516));
        const e = Pe() - this._SafeStr_4514;
        if (e > this._SafeStr_4515 + this._SafeStr_4516) {
            this._SafeStr_448 = 3;
            return
        }
        if (this._SafeStr_4512 = !0, e < this._SafeStr_4515) {
            this._SafeStr_448 = 1;
            return
        }
        this._SafeStr_448 = 2,
        this._SafeStr_4513 = (e - this._SafeStr_4515) / this._SafeStr_4516
    }
    static turnVisualizationOff()
    {
        this._SafeStr_4512 = !1,
        clearTimeout(this._SafeStr_4524),
        this._SafeStr_4524 = null
    }
    static isVisualizationOn()
    {
        return this._SafeStr_4512 && this.isRunning()
    }
    static isRunning()
    {
        return this._SafeStr_448 === 1 || this._SafeStr_448 === 2
    }
}
di.STATE_NOT_INITIALIZED = 0;
di.STATE_START_DELAY = 1;
di.STATE_RUNNING = 2;
di.STATE_OVER = 3;
di._SafeStr_448 = 0;
di._SafeStr_4512 = !1;
di._SafeStr_4514 = 0;
di._SafeStr_4515 = 2e4;
di._SafeStr_4516 = 5e3;
class DU {
    static hex2int(e)
    {
        return parseInt(e, 16)
    }
    static inkToBlendMode(e)
    {
        return e == "ADD" || e == 33 ? Qn.ADD : e == "SUBTRACT" ? Qn.SUBTRACT : e == "DARKEN" ? Qn.DARKEN : Qn.NORMAL
    }
}
class Lh extends ls {
    constructor(e=null)
    {
        super(e),
        this._offsetX = 0,
        this._offsetY = 0,
        this._tag = "",
        this._alphaTolerance = 128,
        this._varyingDepth = !1,
        this._clickHandling = !1,
        this._pairedSpriteId = -1,
        this._pairedSpriteUpdateCounter = -1
    }
    needsUpdate(e, t)
    {
        return this._pairedSpriteId === e && this._pairedSpriteUpdateCounter === t ? !1 : (this._pairedSpriteId = e, this._pairedSpriteUpdateCounter = t, !0)
    }
    calculateVertices()
    {
        this.texture.orig && super.calculateVertices()
    }
    setTexture(e)
    {
        e || (e = cs.EMPTY),
        e !== this.texture && (e === cs.EMPTY && (this._pairedSpriteId = -1, this._pairedSpriteUpdateCounter = -1), this.texture = e)
    }
    containsPoint(e)
    {
        return Lh.containsPoint(this, e)
    }
    static containsPoint(e, t)
    {
        if (!e || !t || e.alphaTolerance > 255 || !(e instanceof ls))
            return !1;
        if (e.texture === cs.EMPTY || e.blendMode !== Qn.NORMAL)
            return;
        const r = e.texture,
            i = r.baseTexture;
        if (!r || !i || !i.valid)
            return !1;
        const n = t.x * e.scale.x,
            o = t.y * e.scale.y;
        if (!e.getLocalBounds().contains(n, o) || !i.hitMap && !Lh.generateHitMap(i))
            return !1;
        const l = i.hitMap;
        let c = n + r.frame.x,
            u = o + r.frame.y;
        r.trim && (c -= r.trim.x, u -= r.trim.y),
        c = Math.round(c) * i.resolution,
        u = Math.round(u) * i.resolution;
        const h = c + u * i.realWidth,
            d = h % 32,
            m = h / 32 | 0;
        return (l[m] & 1 << d) !== 0
    }
    static generateHitMap(e)
    {
        if (!e)
            return !1;
        const t = new cs(e),
            r = new ls(t),
            i = pt.getPixels(r),
            n = e.width,
            o = e.height,
            l = new Uint32Array(Math.ceil(n * o / 32)),
            c = Fi.MATCH_OPAQUE_PIXELS;
        for (let u = 0; u < n * o; u++) {
            const h = u % 32,
                d = u / 32 | 0;
            i[u * 4 + 3] >= c && (l[d] = l[d] | 1 << h)
        }
        return e.hitMap = l, r.destroy(), t.destroy(), !0
    }
    get offsetX()
    {
        return this._offsetX
    }
    set offsetX(e)
    {
        this._offsetX = e
    }
    get offsetY()
    {
        return this._offsetY
    }
    set offsetY(e)
    {
        this._offsetY = e
    }
    get tag()
    {
        return this._tag
    }
    set tag(e)
    {
        this._tag = e
    }
    get alphaTolerance()
    {
        return this._alphaTolerance
    }
    set alphaTolerance(e)
    {
        this._alphaTolerance = e
    }
    get varyingDepth()
    {
        return this._varyingDepth
    }
    set varyingDepth(e)
    {
        this._varyingDepth = e
    }
    get clickHandling()
    {
        return this._clickHandling
    }
    set clickHandling(e)
    {
        this._clickHandling = e
    }
}
class vU {
    constructor()
    {
        this._objectId = "",
        this._spriteTag = ""
    }
    get objectId()
    {
        return this._objectId
    }
    set objectId(e)
    {
        this._objectId = e
    }
    get spriteTag()
    {
        return this._spriteTag
    }
    set spriteTag(e)
    {
        this._spriteTag = e
    }
}
const TR = class {
    constructor()
    {
        this._name = "",
        this._sprite = null,
        this._x = 0,
        this._y = 0,
        this._z = 0
    }
    dispose()
    {
        this._z = -TR.Z_INFINITY,
        this._sprite = null
    }
    get name()
    {
        return this._name
    }
    set name(s)
    {
        this._name = s
    }
    get sprite()
    {
        return this._sprite
    }
    set sprite(s)
    {
        this._sprite = s
    }
    get x()
    {
        return this._x
    }
    set x(s)
    {
        this._x = s
    }
    get y()
    {
        return this._y
    }
    set y(s)
    {
        this._y = s
    }
    get z()
    {
        return this._z
    }
    set z(s)
    {
        this._z = s
    }
}
;
let RR = TR;
RR.Z_INFINITY = 1e8;
class PU {
    constructor(e, t, r, i, n)
    {
        this._SafeStr_4507 = !1,
        this._rotation = 0,
        this._rotationOrigin = null,
        this._rotationRodLength = 0,
        this._SafeStr_795 = 0,
        this._id = t,
        this._container = e,
        this._geometry = new qa(n, new w(-135, 30, 0), new w(11, 11, 5), new w(-135, .5, 0)),
        this._animationFPS = Ee.instance.getConfiguration("system.fps.animation", 24),
        this._renderTimestamp = 0,
        this._totalTimeRunning = 0,
        this._lastFrame = 0,
        this._master = null,
        this._display = null,
        this._mask = null,
        this._sortableSprites = [],
        this._spriteCount = 0,
        this._activeSpriteCount = 0,
        this._spritePool = [],
        this._skipObjectUpdate = !1,
        this._runningSlow = !1,
        this._width = 0,
        this._height = 0,
        this._renderedWidth = 0,
        this._renderedHeight = 0,
        this._screenOffsetX = 0,
        this._screenOffsetY = 0,
        this._mouseLocation = new Ge,
        this._mouseOldX = 0,
        this._mouseOldY = 0,
        this._mouseCheckCount = 0,
        this._mouseSpriteWasHit = !1,
        this._mouseActiveObjects = new Map,
        this._eventCache = new Map,
        this._eventId = 0,
        this._scale = 1,
        this._restrictsScaling = !1,
        this._noSpriteVisibilityChecking = !1,
        this._usesExclusionRectangles = !1,
        this._usesMask = !0,
        this._canvasUpdated = !1,
        this._objectCache = new IR(this._container.roomObjectVariableAccurateZ),
        this._mouseListener = null,
        this.setupCanvas(),
        this.initialize(r, i)
    }
    setupCanvas()
    {
        if (this._master || (this._master = new qt, this._master.interactiveChildren = !1), !this._display) {
            const e = new Mi;
            this._master.addChild(e),
            this._display = e
        }
    }
    dispose()
    {
        if (this.cleanSprites(0, !0), this._geometry && (this._geometry.dispose(), this._geometry = null), this._mask && (this._mask = null), this._objectCache && (this._objectCache.dispose(), this._objectCache = null), this._master) {
            for (; this._master.children.length;)
                this._master.removeChildAt(0).destroy();
            this._master.parent && this._master.parent.removeChild(this._master),
            this._master.destroy(),
            this._master = null
        }
        if (this._display = null, this._sortableSprites = [], this._mouseActiveObjects && (this._mouseActiveObjects.clear(), this._mouseActiveObjects = null), this._spritePool) {
            for (const e of this._spritePool)
                this.cleanSprite(e, !0);
            this._spritePool = []
        }
        this._eventCache && (this._eventCache.clear(), this._eventCache = null),
        this._mouseListener = null
    }
    initialize(e, t)
    {
        if (e = e < 1 ? 1 : e, t = t < 1 ? 1 : t, this._usesMask && (this._mask ? this._mask.clear().beginFill(16711680).drawRect(0, 0, e, t).endFill() : (this._mask = new J_().beginFill(16711680).drawRect(0, 0, e, t).endFill(), this._master && (this._master.addChild(this._mask), this._display && (this._display.mask = this._mask)))), this._master) {
            if (this._master.hitArea) {
                const r = this._master.hitArea;
                r.width = e,
                r.height = t
            } else
                this._master.hitArea = new Qr(0, 0, e, t);
            if (this._master.filterArea) {
                const r = this._master.filterArea;
                r.width = e,
                r.height = t
            } else
                this._master.filterArea = new Qr(0, 0, e, t)
        }
        this._width = e,
        this._height = t
    }
    setMask(e)
    {
        e && !this._usesMask ? (this._usesMask = !0, this._mask && this._mask.parent !== this._master && (this._master.addChild(this._mask), this._display.mask = this._mask)) : !e && this._usesMask && (this._usesMask = !1, this._mask && this._mask.parent === this._master && (this._master.removeChild(this._mask), this._display.mask = null))
    }
    setScale(e, t=null, r=null, i=!1, n=!1)
    {
        !this._master || !this._display || this._restrictsScaling && !i || (t || (t = new Ge(this._width / 2, this._height / 2)), r || (r = t), t = this._display.toLocal(t), n ? this._scale *= e : this._scale = e, this.screenOffsetX = r.x - t.x * this._scale, this.screenOffsetY = r.y - t.y * this._scale)
    }
    render(e, t=!1)
    {
        if (this._canvasUpdated = !1, this._totalTimeRunning += ir().deltaTime, this._totalTimeRunning === this._renderTimestamp || (e === -1 && (e = this._renderTimestamp + 1), !this._container || !this._geometry))
            return;
        (this._width !== this._renderedWidth || this._height !== this._renderedHeight) && (t = !0),
        (this._display.x !== this._screenOffsetX || this._display.y !== this._screenOffsetY) && (this._display.position.set(this._screenOffsetX, this._screenOffsetY), t = !0),
        this._display.scale.x !== this._scale && (this._display.scale.set(this._scale), t = !0),
        this.doMagic();
        const r = Math.round(this._totalTimeRunning / (60 / this._animationFPS));
        let i = !1;
        r !== this._lastFrame && (this._lastFrame = r, i = !0);
        let n = 0;
        const o = this._container.objects;
        if (o.size)
            for (const c of o.values())
                c && (n = n + this.renderObject(c, c.instanceId.toString(), e, t, i, n));
        this._sortableSprites.sort((c, u) => u.z - c.z),
        n < this._sortableSprites.length && this._sortableSprites.splice(n);
        let l = 0;
        for (; l < n;) {
            const c = this._sortableSprites[l];
            c && c.sprite && this.renderSprite(l, c),
            l++
        }
        this.cleanSprites(n),
        (t || i) && (this._canvasUpdated = !0),
        this._renderTimestamp = this._totalTimeRunning,
        this._renderedWidth = this._width,
        this._renderedHeight = this._height
    }
    skipSpriteVisibilityChecking()
    {
        this._noSpriteVisibilityChecking = !0,
        this.render(-1, !0)
    }
    resumeSpriteVisibilityChecking()
    {
        this._noSpriteVisibilityChecking = !1
    }
    getSortableSpriteList()
    {
        return this._objectCache.getSortableSpriteList()
    }
    getPlaneSortableSprites()
    {
        return this._objectCache.getPlaneSortableSprites()
    }
    removeFromCache(e)
    {
        this._objectCache.removeObjectCache(e)
    }
    renderObject(e, t, r, i, n, o)
    {
        if (!e)
            return 0;
        const l = e.visualization;
        if (!l)
            return this.removeFromCache(t), 0;
        const c = this.getCacheItem(t);
        c.objectId = e.instanceId;
        const u = c.location,
            h = c.sprites,
            d = u.updateLocation(e, this._geometry);
        if (!d)
            return this.removeFromCache(t), 0;
        if (n && l.update(this._geometry, r, !h.isEmpty || i, this._skipObjectUpdate && this._runningSlow), u.locationChanged && (i = !0), !h.needsUpdate(l.instanceId, l.updateSpriteCounter) && !i)
            return h.spriteCount;
        let m = d.x,
            p = d.y,
            E = d.z;
        m > 0 ? E = E + m * 12e-8 : E = E + -m * 12e-8,
        m = m + Math.trunc(this._width / 2),
        p = p + Math.trunc(this._height / 2);
        let T = 0;
        for (const I of l.sprites.values()) {
            if (!I || !I.visible)
                continue;
            const S = I.texture,
                A = S && S.baseTexture;
            if (!S || !A)
                continue;
            const N = m + I.offsetX + this._screenOffsetX,
                b = p + I.offsetY + this._screenOffsetY;
            if (I.flipH) {
                const D = m + -(S.width + -I.offsetX) + this._screenOffsetX;
                if (!this.isSpriteVisible(D, b, S.width, S.height))
                    continue
            } else if (I.flipV) {
                const D = p + -(S.height + -I.offsetY) + this._screenOffsetY;
                if (!this.isSpriteVisible(N, D, S.width, S.height))
                    continue
            } else if (!this.isSpriteVisible(N, b, S.width, S.height))
                continue;
            let v = h.getSprite(T);
            v || (v = new RR, h.addSprite(v), this._sortableSprites.push(v), v.name = t),
            v.sprite = I,
            (I.spriteType === Dr.AVATAR || I.spriteType === Dr.AVATAR_OWN) && (v.sprite.libraryAssetName = "avatar_" + e.id),
            v.x = N - this._screenOffsetX,
            v.y = b - this._screenOffsetY,
            v.z = E + I.relativeDepth + 37e-12 * o,
            T++,
            o++
        }
        return h.setSpriteCount(T), this._canvasUpdated = !0, T
    }
    getExtendedSprite(e)
    {
        if (e < 0 || e >= this._spriteCount)
            return null;
        const t = this._display.getChildAt(e);
        return t || null
    }
    getExtendedSpriteIdentifier(e)
    {
        return e ? e.name : ""
    }
    renderSprite(e, t)
    {
        if (e >= this._spriteCount)
            return this.createAndAddSprite(t), !0;
        if (!t)
            return !1;
        const r = t.sprite,
            i = this.getExtendedSprite(e);
        if (!r || !i)
            return !1;
        if (i.varyingDepth !== r.varyingDepth)
            return i.varyingDepth && !r.varyingDepth ? (this._display.removeChildAt(e), this._spritePool.push(i), this.renderSprite(e, t)) : (this.createAndAddSprite(t, e), !0);
        if (i.needsUpdate(r.id, r.updateCounter) || xs.isVisualizationOn()) {
            i.tag = r.tag,
            i.alphaTolerance = r.alphaTolerance,
            i.name = t.name,
            i.varyingDepth = r.varyingDepth,
            i.clickHandling = r.clickHandling,
            i.filters = r.filters;
            const n = r.alpha / 255;
            i.alpha !== n && (i.alpha = n),
            i.tint !== r.color && (i.tint = r.color),
            i.blendMode !== r.blendMode && (i.blendMode = r.blendMode),
            i.texture !== r.texture && i.setTexture(r.texture),
            r.updateContainer && (i.children.length === 1 && i.removeChildAt(0), i.addChild(r.container), r.updateContainer = !1),
            r.flipH ? i.scale.x !== -1 && (i.scale.x = -1) : i.scale.x !== 1 && (i.scale.x = 1),
            r.flipV ? i.scale.y !== -1 && (i.scale.y = -1) : i.scale.y !== 1 && (i.scale.y = 1),
            this.updateEnterRoomEffect(i, r)
        }
        return i.x !== t.x && (i.x = t.x), i.y !== t.y && (i.y = t.y), i.offsetX = r.offsetX, i.offsetY = r.offsetY, !0
    }
    createAndAddSprite(e, t=-1)
    {
        const r = e.sprite;
        if (!r)
            return;
        let i = null;
        this._spritePool.length > 0 && (i = this._spritePool.pop()),
        i || (i = new Lh),
        i.children.length && i.removeChildren(),
        i.tag = r.tag,
        i.alphaTolerance = r.alphaTolerance,
        i.alpha = r.alpha / 255,
        i.tint = r.color,
        i.x = e.x,
        i.y = e.y,
        i.offsetX = r.offsetX,
        i.offsetY = r.offsetY,
        i.name = r.name,
        i.varyingDepth = r.varyingDepth,
        i.clickHandling = r.clickHandling,
        i.blendMode = r.blendMode,
        i.filters = r.filters,
        i.setTexture(r.texture),
        r.updateContainer && (i.addChild(r.container), r.updateContainer = !1),
        r.flipH && (i.scale.x = -1),
        r.flipV && (i.scale.y = -1),
        this.updateEnterRoomEffect(i, r),
        t < 0 || t >= this._spriteCount ? (this._display.addChild(i), this._spriteCount++) : this._display.addChildAt(i, t),
        this._activeSpriteCount++
    }
    cleanSprites(e, t=!1)
    {
        if (this._display) {
            if (e < 0 && (e = 0), e < this._activeSpriteCount || !this._activeSpriteCount) {
                let r = this._spriteCount - 1;
                for (; r >= e;)
                    this.cleanSprite(this.getExtendedSprite(r), t),
                    r--
            }
            this._activeSpriteCount = e
        }
    }
    updateEnterRoomEffect(e, t)
    {
        if (!(!xs.isVisualizationOn() || !t))
            switch (t.spriteType) {
            case Dr.AVATAR_OWN:
                return;
            case Dr.ROOM_PLANE:
                e.alpha = xs.getDelta(.9);
                return;
            case Dr.AVATAR:
                e.alpha = xs.getDelta(.5);
                return;
            default:
                e.alpha = xs.getDelta(.1)
            }
    }
    cleanSprite(e, t)
    {
        e && (t ? (e.parent && e.parent.removeChild(e), e.destroy({
            children: !0
        })) : e.setTexture(null))
    }
    update()
    {
        this._mouseCheckCount,
        this._mouseCheckCount = 0,
        this._eventId++
    }
    setMouseListener(e)
    {
        this._mouseListener = e
    }
    getCacheItem(e)
    {
        return this._objectCache.getObjectCache(e)
    }
    isSpriteVisible(e, t, r, i)
    {
        return !!(this._noSpriteVisibilityChecking || (e = (e - this._screenOffsetX) * this._scale + this._screenOffsetX, t = (t - this._screenOffsetY) * this._scale + this._screenOffsetY, r = r * this._scale, i = i * this._scale, e < this._width && e + r >= 0 && t < this._height && t + i >= 0 && !this._usesExclusionRectangles))
    }
    handleMouseEvent(e, t, r, i, n, o, l)
    {
        return e = e - this._screenOffsetX, t = t - this._screenOffsetY, this._mouseLocation.x = e / this._scale, this._mouseLocation.y = t / this._scale, this._mouseCheckCount > 0 && r == le.MOUSE_MOVE ? this._mouseSpriteWasHit : (this._mouseSpriteWasHit = this.checkMouseHits(Math.trunc(e / this._scale), Math.trunc(t / this._scale), r, i, n, o, l), this._mouseCheckCount++, this._mouseSpriteWasHit)
    }
    checkMouseHits(e, t, r, i=!1, n=!1, o=!1, l=!1)
    {
        const c = [];
        let u = !1,
            h = null,
            d = this._activeSpriteCount - 1;
        for (; d >= 0;) {
            const E = this.getExtendedSprite(d);
            if (E && E.containsPoint(new Ge(e - E.x, t - E.y)) && !(E.clickHandling && (r === le.MOUSE_CLICK || r === le.DOUBLE_CLICK))) {
                const T = this.getExtendedSpriteIdentifier(E);
                if (c.indexOf(T) === -1) {
                    const I = E.tag;
                    let S = this._mouseActiveObjects.get(T);
                    S && S.spriteTag !== I && (h = this.createMouseEvent(0, 0, 0, 0, le.ROLL_OUT, S.spriteTag, i, n, o, l), this.bufferMouseEvent(h, T)),
                    r === le.MOUSE_MOVE && (!S || S.spriteTag !== I) ? h = this.createMouseEvent(e, t, e - E.x, t - E.y, le.ROLL_OVER, I, i, n, o, l) : (h = this.createMouseEvent(e, t, e - E.x, t - E.y, r, I, i, n, o, l), h.spriteOffsetX = E.offsetX, h.spriteOffsetY = E.offsetY),
                    S || (S = new vU, S.objectId = T, this._mouseActiveObjects.set(T, S)),
                    S.spriteTag = I,
                    (r !== le.MOUSE_MOVE || e !== this._mouseOldX || t !== this._mouseOldY) && this.bufferMouseEvent(h, T),
                    c.push(T)
                }
                u = !0
            }
            d--
        }
        const m = [];
        for (const E of this._mouseActiveObjects.keys())
            E && m.push(E);
        let p = 0;
        for (; p < m.length;) {
            const E = m[p];
            c.indexOf(E) >= 0 && (m[p] = null),
            p++
        }
        for (p = 0; p < m.length;) {
            const E = m[p];
            if (E !== null) {
                const T = this._mouseActiveObjects.get(E);
                T && this._mouseActiveObjects.delete(E);
                const I = this.createMouseEvent(0, 0, 0, 0, le.ROLL_OUT, T.spriteTag, i, n, o, l);
                this.bufferMouseEvent(I, E)
            }
            p++
        }
        return this.processMouseEvents(), this._mouseOldX = e, this._mouseOldY = t, u
    }
    createMouseEvent(e, t, r, i, n, o, l, c, u, h)
    {
        const d = e - this._width / 2,
            m = t - this._height / 2,
            p = `canvas_${this._id}`;
        return new KL(n, p + "_" + this._eventId, p, o, d, m, r, i, c, l, u, h)
    }
    bufferMouseEvent(e, t)
    {
        !e || !this._eventCache || (this._eventCache.delete(t), this._eventCache.set(t, e))
    }
    processMouseEvents()
    {
        if (!(!this._container || !this._eventCache)) {
            for (const [e, t] of this._eventCache.entries()) {
                if (!this._eventCache)
                    return;
                if (!t)
                    continue;
                const r = this._container.getRoomObject(parseInt(e));
                if (r)
                    if (this._mouseListener)
                        this._mouseListener.processRoomCanvasMouseEvent(t, r, this._geometry);
                    else {
                        const i = r.mouseHandler;
                        i && i.mouseEvent(t, this._geometry)
                    }
            }
            this._eventCache && this._eventCache.clear()
        }
    }
    getDisplayAsTexture()
    {
        this._noSpriteVisibilityChecking = !0;
        const e = this._scale,
            t = this._screenOffsetX,
            r = this._screenOffsetY;
        this.setScale(1, null, null, !0),
        this._screenOffsetX = 0,
        this._screenOffsetY = 0,
        this.render(-1, !0),
        this._display.mask = null;
        const i = this._display.getBounds(),
            n = $i.create({
                width: this._display.width,
                height: this._display.height
            });
        return Gs.instance.renderer.render(this._display, {
            renderTexture: n,
            clear: !0,
            transform: new Pr(1, 0, 0, 1, -i.x, -i.y)
        }), this._display.mask = this._mask, this._noSpriteVisibilityChecking = !1, this.setScale(e, null, null, !0), this._screenOffsetX = t, this._screenOffsetY = r, n
    }
    doMagic()
    {
        const e = this.geometry;
        if (this._rotation !== 0) {
            let t = this._effectDirection;
            e.direction = new w(t.x + this._rotation, t.y, t.z),
            t = e.direction,
            e.setDepthVector(new w(t.x, t.y, 5));
            const r = new w;
            r.assign(this._rotationOrigin),
            r.x = r.x + this._rotationRodLength * Math.cos((t.x + 180) / 180 * 3.14159265358979) * Math.cos(t.y / 180 * 3.14159265358979),
            r.y = r.y + this._rotationRodLength * Math.sin((t.x + 180) / 180 * 3.14159265358979) * Math.cos(t.y / 180 * 3.14159265358979),
            r.z = r.z + this._rotationRodLength * Math.sin(t.y / 180 * 3.14159265358979),
            e.location = r,
            this._effectLocation = new w,
            this._effectLocation.assign(r),
            this._effectDirection = new w,
            this._effectDirection.assign(e.direction)
        }
        if (di.isVisualizationOn() && !this._SafeStr_4507 ? this.changeShaking() : !di.isVisualizationOn() && this._SafeStr_4507 && this.changeShaking(), nn.isVisualizationOn() && this.changeRotation(), this._SafeStr_4507) {
            this._SafeStr_795++;
            const t = this._effectDirection,
                r = w.sum(t, new w(Math.sin(this._SafeStr_795 * 5 / 180 * 3.14159265358979) * 2, Math.sin(this._SafeStr_795 / 180 * 3.14159265358979) * 5, Math.sin(this._SafeStr_795 * 10 / 180 * 3.14159265358979) * 2));
            e.direction = r
        } else
            this._SafeStr_795 = 0,
            e.direction = this._effectDirection
    }
    changeShaking()
    {
        if (this._SafeStr_4507 = !this._SafeStr_4507, this._SafeStr_4507) {
            const e = this.geometry.direction;
            this._effectDirection = new w(e.x, e.y, e.z)
        }
    }
    changeRotation()
    {
        if (this._SafeStr_4507)
            return;
        const e = this.geometry;
        if (e) {
            if (this._rotation === 0) {
                const t = e.location,
                    r = e.directionAxis;
                this._effectLocation = new w,
                this._effectLocation.assign(t),
                this._effectDirection = new w,
                this._effectDirection.assign(e.direction);
                const i = qa.getIntersectionVector(t, r, new w(0, 0, 0), new w(0, 0, 1));
                i !== null && (this._rotationOrigin = new w(i.x, i.y, i.z), this._rotationRodLength = w.dif(i, t).length, this._rotation = 1);
                return
            }
            this._rotation = 0,
            e.location = this._effectLocation,
            e.direction = this._effectDirection,
            e.setDepthVector(new w(this._effectDirection.x, this._effectDirection.y, 5))
        }
    }
    moveLeft()
    {
        if (this._rotation !== 0) {
            this._rotation === 1 ? this._rotation = -1 : this._rotation = this._rotation - 1;
            return
        }
        const e = this.geometry,
            t = (e.direction.x - 90) / 180 * 3.14159265358979;
        e.location = w.sum(e.location, new w(Math.cos(t) * Math.sqrt(2), Math.sin(t) * Math.sqrt(2)))
    }
    moveRight()
    {
        if (this._rotation !== 0) {
            this._rotation === -1 ? this._rotation = 1 : this._rotation = this._rotation + 1;
            return
        }
        const e = this.geometry,
            t = (e.direction.x + 90) / 180 * 3.14159265358979;
        e.location = w.sum(e.location, new w(Math.cos(t) * Math.sqrt(2), Math.sin(t) * Math.sqrt(2)))
    }
    moveUp()
    {
        if (this._rotation !== 0)
            return;
        const e = this.geometry,
            t = e.direction.x / 180 * 3.14159265358979;
        e.location = w.sum(e.location, new w(Math.cos(t) * Math.sqrt(2), Math.sin(t) * Math.sqrt(2)))
    }
    moveDown()
    {
        if (this._rotation !== 0)
            return;
        const e = this.geometry,
            t = (e.direction.x + 180) / 180 * 3.14159265358979;
        e.location = w.sum(e.location, new w(Math.cos(t) * Math.sqrt(2), Math.sin(t) * Math.sqrt(2)))
    }
    get id()
    {
        return this._id
    }
    get geometry()
    {
        return this._geometry
    }
    get master()
    {
        return this._master
    }
    get display()
    {
        return this._display
    }
    get screenOffsetX()
    {
        return this._screenOffsetX
    }
    set screenOffsetX(e)
    {
        e = Math.trunc(e),
        this._mouseLocation.x = this._mouseLocation.x - (e - this._screenOffsetX),
        this._screenOffsetX = e
    }
    get screenOffsetY()
    {
        return this._screenOffsetY
    }
    set screenOffsetY(e)
    {
        e = Math.trunc(e),
        this._mouseLocation.y = this._mouseLocation.y - (e - this._screenOffsetY),
        this._screenOffsetY = e
    }
    get scale()
    {
        return this._scale
    }
    get width()
    {
        return this._width * this._scale
    }
    get height()
    {
        return this._height * this._scale
    }
    get restrictsScaling()
    {
        return this._restrictsScaling
    }
    set restrictsScaling(e)
    {
        this._restrictsScaling = e
    }
    get canvasUpdated()
    {
        return this._canvasUpdated
    }
    set canvasUpdated(e)
    {
        this._canvasUpdated = e
    }
}
class LU {
    constructor()
    {
        this._objects = new Map,
        this._canvases = new Map,
        this._disposed = !1,
        this._roomObjectVariableAccurateZ = null
    }
    dispose()
    {
        if (!this._disposed) {
            if (this._canvases) {
                for (const [e, t] of this._canvases.entries())
                    this._canvases.delete(e),
                    t && t.dispose();
                this._canvases = null
            }
            this._objects && (this._objects = null),
            this._disposed = !0
        }
    }
    reset()
    {
        this._objects.clear()
    }
    getInstanceId(e)
    {
        return e ? e.instanceId : -1
    }
    getRoomObject(e)
    {
        return this._objects.get(e)
    }
    addObject(e)
    {
        e && this._objects.set(this.getInstanceId(e), e)
    }
    removeObject(e)
    {
        const t = this.getInstanceId(e);
        this._objects.delete(t);
        for (const r of this._canvases.values()) {
            if (!r)
                continue;
            r.removeFromCache(t.toString())
        }
    }
    render(e, t=!1)
    {
        if (!(!this._canvases || !this._canvases.size))
            for (const r of this._canvases.values())
                r && r.render(e, t)
    }
    update(e, t=!1)
    {
        if (!(!this._canvases || !this._canvases.size)) {
            this.render(e, t);
            for (const r of this._canvases.values())
                r && r.update()
        }
    }
    getCanvas(e)
    {
        const t = this._canvases.get(e);
        return t || null
    }
    createCanvas(e, t, r, i)
    {
        const n = this._canvases.get(e);
        if (n)
            return n.initialize(t, r), n.geometry && (n.geometry.scale = i), n;
        const o = this.createSpriteCanvas(e, t, r, i);
        if (o)
            return this._canvases.set(e, o), o
    }
    createSpriteCanvas(e, t, r, i)
    {
        return new PU(this, e, t, r, i)
    }
    removeCanvas(e)
    {
        const t = this._canvases.get(e);
        t && (this._canvases.delete(e), t.dispose())
    }
    get objects()
    {
        return this._objects
    }
    get disposed()
    {
        return this._disposed
    }
    get roomObjectVariableAccurateZ()
    {
        return this._roomObjectVariableAccurateZ
    }
    set roomObjectVariableAccurateZ(e)
    {
        this._roomObjectVariableAccurateZ = e
    }
}
class UU {
    createRenderer()
    {
        return new LU
    }
}
class wU extends ei {
    constructor(e, t)
    {
        super(),
        this._id = e,
        this._container = t,
        this._renderer = null,
        this._managers = new Map,
        this._updateCategories = [],
        this._model = new gR
    }
    onDispose()
    {
        this.removeAllManagers(),
        this.destroyRenderer(),
        this._container = null,
        this._model.dispose()
    }
    setRenderer(e)
    {
        if (e !== this._renderer && (this._renderer && this.destroyRenderer(), this._renderer = e, !!this._renderer && (this._renderer.reset(), this._managers.size)))
            for (const t of this._managers.values()) {
                if (!t)
                    continue;
                const r = t.objects;
                if (r.length)
                    for (const i of r.getValues())
                        i && this._renderer.addObject(i)
            }
    }
    destroyRenderer()
    {
        this._renderer && (this._renderer.dispose(), this._renderer = null)
    }
    getManager(e)
    {
        const t = this._managers.get(e);
        return t || null
    }
    getManagerOrCreate(e)
    {
        let t = this.getManager(e);
        return t || (t = this._container.createRoomObjectManager(e), t ? (this._managers.set(e, t), t) : null)
    }
    getTotalObjectsForManager(e)
    {
        const t = this.getManager(e);
        return t ? t.totalObjects : 0
    }
    getRoomObject(e, t)
    {
        const r = this.getManager(t);
        if (!r)
            return null;
        const i = r.getObject(e);
        return i || null
    }
    getRoomObjectsForCategory(e)
    {
        const t = this.getManager(e);
        return t ? t.objects.getValues() : []
    }
    getRoomObjectByIndex(e, t)
    {
        const r = this.getManager(t);
        if (!r)
            return null;
        const i = r.getObjectByIndex(e);
        return i || null
    }
    createRoomObject(e, t, r, i)
    {
        const n = this.getManagerOrCreate(i);
        if (!n)
            return null;
        const o = n.createObject(e, t, r);
        return o ? (this._renderer && this._renderer.addObject(o), o) : null
    }
    createRoomObjectAndInitalize(e, t, r)
    {
        return this._container ? this._container.createRoomObjectAndInitalize(this._id, e, t, r) : null
    }
    removeRoomObject(e, t)
    {
        const r = this.getManager(t);
        if (!r)
            return;
        const i = r.getObject(e);
        i && (i.tearDown(), this._renderer && this._renderer.removeObject(i), r.removeObject(e))
    }
    removeAllManagers()
    {
        for (const e of this._managers.values())
            if (e) {
                if (this._renderer) {
                    const t = e.objects;
                    if (t.length)
                        for (const r of t.getValues())
                            r && this._renderer.removeObject(r)
                }
                e.dispose()
            }
        this._managers.clear()
    }
    addUpdateCategory(e)
    {
        this._updateCategories.indexOf(e) >= 0 || this._updateCategories.push(e)
    }
    removeUpdateCategory(e)
    {
        const t = this._updateCategories.indexOf(e);
        t !== -1 && this._updateCategories.splice(t, 1)
    }
    update(e, t=!1)
    {
        for (const r of this._updateCategories) {
            const i = this.getManager(r);
            if (!i)
                continue;
            const n = i.objects;
            if (n.length)
                for (const o of n.getValues()) {
                    if (!o)
                        continue;
                    const l = o.logic;
                    l && l.update(e)
                }
        }
        this._renderer && this._renderer.update(e, t)
    }
    hasUninitializedObjects()
    {
        for (const e of this._managers.values())
            if (e) {
                for (const t of e.objects.getValues())
                    if (t && !t.isReady)
                        return !0
            }
        return !1
    }
    get id()
    {
        return this._id
    }
    get container()
    {
        return this._container
    }
    get renderer()
    {
        return this._renderer
    }
    get managers()
    {
        return this._managers
    }
    get model()
    {
        return this._model
    }
}
const mg = class {
    constructor(s, e, t, r, i, n, o)
    {
        this._layerTags = [],
        this._primaryColor = s & 16777215,
        this._secondaryColor = e & 16777215,
        this._breed = t,
        this._tag = r > -1 && r < mg.COLOR_TAGS.length ? mg.COLOR_TAGS[r] : "",
        this._id = i,
        this._isMaster = n,
        this._layerTags = o
    }
    get primaryColor()
    {
        return this._primaryColor
    }
    get secondaryColor()
    {
        return this._secondaryColor
    }
    get breed()
    {
        return this._breed
    }
    get tag()
    {
        return this._tag
    }
    get id()
    {
        return this._id
    }
    get isMaster()
    {
        return this._isMaster
    }
    get layerTags()
    {
        return this._layerTags
    }
}
;
let OR = mg;
OR.COLOR_TAGS = ["Null", "Black", "White", "Grey", "Red", "Orange", "Pink", "Green", "Lime", "Blue", "Light-Blue", "Dark-Blue", "Yellow", "Brown", "Dark-Brown", "Beige", "Cyan", "Purple", "Gold"];
const ns = class {
    constructor()
    {
        this._stateEvents = null,
        this._sessionDataManager = null,
        this._waitingForSessionDataManager = !1,
        this._iconListener = null,
        this._collections = new Map,
        this._gifCollections = new Map,
        this._images = new Map,
        this._events = new Map,
        this._activeObjects = {},
        this._activeObjectTypes = new Map,
        this._activeObjectTypeIds = new Map,
        this._objectTypeAdUrls = new Map,
        this._wallItems = {},
        this._wallItemTypes = new Map,
        this._wallItemTypeIds = new Map,
        this._furniRevisions = new Map,
        this._pets = {},
        this._petColors = new Map,
        this._objectAliases = new Map,
        this._objectOriginalNames = new Map,
        this._pendingContentTypes = [],
        this._dataInitialized = !1
    }
    initialize(s)
    {
        this._stateEvents = s,
        this.setFurnitureData();
        for (const [e, t] of ye.getValue("pet.types").entries())
            this._pets[t] = e
    }
    dispose() {}
    setSessionDataManager(s)
    {
        this._sessionDataManager = s,
        this._waitingForSessionDataManager && (this._waitingForSessionDataManager = !1, this.setFurnitureData())
    }
    loadFurnitureData()
    {
        this.setFurnitureData()
    }
    setFurnitureData()
    {
        if (!this._sessionDataManager) {
            this._waitingForSessionDataManager = !0;
            return
        }
        const s = this._sessionDataManager.getAllFurnitureData(this);
        s && (this._sessionDataManager.removePendingFurniDataListener(this), this.processFurnitureData(s), this._stateEvents.dispatchEvent(new Ye(ns.LOADER_READY)))
    }
    processFurnitureData(s)
    {
        if (s)
            for (const e of s) {
                if (!e)
                    continue;
                const t = e.id;
                let r = e.className;
                e.hasIndexedColor && (r = r + "*" + e.colorIndex);
                const i = e.revision,
                    n = e.adUrl;
                n && n.length > 0 && this._objectTypeAdUrls.set(r, n);
                let o = e.className;
                e.type === Ao.FLOOR ? (this._activeObjectTypes.set(t, r), this._activeObjectTypeIds.set(r, t), this._activeObjects[o] || (this._activeObjects[o] = 1)) : e.type === Ao.WALL && (o === "post.it" && (r = "post_it", o = "post_it"), o === "post.it.vd" && (r = "post_it_vd", o = "post_id_vd"), this._wallItemTypes.set(t, r), this._wallItemTypeIds.set(r, t), this._wallItems[o] || (this._wallItems[o] = 1));
                const l = this._furniRevisions.get(o);
                i > l && (this._furniRevisions.delete(o), this._furniRevisions.set(o, i))
            }
    }
    getFurnitureFloorNameForTypeId(s)
    {
        const e = this._activeObjectTypes.get(s);
        return this.removeColorIndex(e)
    }
    getFurnitureWallNameForTypeId(s, e=null)
    {
        let t = this._wallItemTypes.get(s);
        return t === "poster" && e !== null && (t = t + e), this.removeColorIndex(t)
    }
    getFurnitureFloorColorIndex(s)
    {
        const e = this._activeObjectTypes.get(s);
        return e ? this.getColorIndexFromName(e) : -1
    }
    getFurnitureWallColorIndex(s)
    {
        const e = this._wallItemTypes.get(s);
        return e ? this.getColorIndexFromName(e) : -1
    }
    getColorIndexFromName(s)
    {
        if (!s)
            return -1;
        const e = s.indexOf("*");
        return e === -1 ? 0 : parseInt(s.substr(e + 1))
    }
    removeColorIndex(s)
    {
        if (!s)
            return null;
        const e = s.indexOf("*");
        return e === -1 ? s : s.substr(0, e)
    }
    getRoomObjectAdUrl(s)
    {
        const e = this._objectTypeAdUrls.get(s);
        return e || ""
    }
    getPetColorResult(s, e)
    {
        const t = this._petColors.get(s);
        return t ? t.get(e) : null
    }
    getPetColorResultsForTag(s, e)
    {
        const t = this._petColors.get(s),
            r = [];
        if (t)
            for (const i of t.values())
                i.tag === e && r.push(i);
        return r
    }
    getCollection(s)
    {
        if (!s)
            return null;
        const e = this._collections.get(s);
        if (!e) {
            const t = zr().getCollection(s);
            return t ? (this._collections.set(s, t), t) : null
        }
        return e
    }
    getGifCollection(s)
    {
        return s && this._gifCollections.get(s) || null
    }
    getImage(s)
    {
        if (!s)
            return null;
        const e = this._images.get(s);
        if (!e)
            return null;
        const t = new Image;
        return t.src = e.src, t
    }
    addAssetToCollection(s, e, t, r=!0)
    {
        const i = this.getCollection(s);
        return i ? i.addAsset(e, t, r, 0, 0, !1, !1) : !1
    }
    createGifCollection(s, e, t)
    {
        if (!s || !e || !t)
            return null;
        const r = new VL(s, e, t);
        return this._gifCollections.set(s, r), r
    }
    createCollection(s, e)
    {
        if (!s || !e)
            return null;
        const t = new Wf(s, e);
        this._collections.set(t.name, t);
        const r = this._pets[t.name];
        if (r !== void 0) {
            const i = t.getPaletteNames(),
                n = new Map;
            for (const o of i) {
                const l = t.getPalette(o),
                    c = s.palettes[o],
                    u = l.primaryColor,
                    h = l.secondaryColor,
                    d = c.breed !== void 0 ? c.breed : 0,
                    m = c.colorTag !== void 0 ? c.colorTag : -1,
                    p = c.master !== void 0 ? c.master : !1,
                    E = c.tags !== void 0 ? c.tags : [];
                n.set(parseInt(o), new OR(u, h, d, m, o, p, E))
            }
            this._petColors.set(r, n)
        }
    }
    getPlaceholderName(s)
    {
        switch (this.getCategoryForType(s)) {
        case V.FLOOR:
            return ns.PLACE_HOLDER;
        case V.WALL:
            return ns.PLACE_HOLDER_WALL;
        default:
            return this._pets[s] !== void 0 ? ns.PLACE_HOLDER_PET : ns.PLACE_HOLDER_DEFAULT
        }
    }
    getCategoryForType(s)
    {
        return s ? this._activeObjects[s] !== void 0 ? V.FLOOR : this._wallItems[s] !== void 0 ? V.WALL : this._pets[s] !== void 0 ? V.UNIT : s.indexOf("poster") === 0 ? V.WALL : s === "room" ? V.ROOM : s === it.USER || s === it.PET || s === it.BOT || s === it.RENTABLE_BOT ? V.UNIT : s === ns.TILE_CURSOR || s === ns.SELECTION_ARROW ? V.CURSOR : V.MINIMUM : V.MINIMUM
    }
    getPetNameForType(s)
    {
        return ye.getValue("pet.types")[s] || null
    }
    isLoaderType(s)
    {
        return s = it.getRealType(s), s !== ae.USER
    }
    downloadImage(s, e, t, r=null)
    {
        let i = null,
            n = [];
        if (e && e.indexOf(",") >= 0 && (i = e, e = i.split(",")[0]), i ? n = this.getAssetUrls(i, t, !0) : n = this.getAssetUrls(e, t, !0), n && n.length) {
            const o = n[0],
                l = new Image;
            return l.src = o, l.onload = () => {
                l.onerror = null,
                this._images.set([e, t].join("_"), l),
                this._iconListener.onRoomContentLoaded(s, [e, t].join("_"), !0)
            }, l.onerror = () => {
                l.onload = null,
                pe.error("Failed to download asset", o),
                this._iconListener.onRoomContentLoaded(s, [e, t].join("_"), !1)
            }, !0
        }
        return !1
    }
    async downloadAsset(s, e)
    {
        var r;
        const t = (r = this.getAssetUrls(s)) == null ? void 0 : r[0];
        if (!(!t || !t.length) && !(this._pendingContentTypes.indexOf(s) >= 0 || this.getOrRemoveEventDispatcher(s))) {
            this._pendingContentTypes.push(s),
            this._events.set(s, e);
            try {
                const i = await fetch(t);
                let n = "application/octet-stream";
                switch (i.headers.has("Content-Type") && (n = i.headers.get("Content-Type")), n) {
                case "application/octet-stream":
                    {
                        const o = new Hf(await i.arrayBuffer());
                        await this.processAsset(o.baseTexture, o.jsonFile);
                        const l = this._events.get(s);
                        if (!l)
                            return;
                        l.dispatchEvent(new Rn(Rn.RCLE_SUCCESS, s));
                        break
                    }default:
                    throw new Error
                }
            } catch {
                e.dispatchEvent(new Rn(Rn.RCLE_FAILURE, s))
            }
        }
    }
    async processAsset(s, e)
    {
        const t = e.spritesheet;
        if (!s || !t || !Object.keys(t).length) {
            this.createCollection(e, null);
            return
        }
        const r = async () => {
            const i = new eT(s, t);
            await i.parse(),
            this.createCollection(e, i)
        };
        s.valid ? await r() : await new Promise((i, n) => {
            s.once("update", async () => (await r(), i()))
        })
    }
    setAssetAliasName(s, e)
    {
        this._objectAliases.set(s, e),
        this._objectOriginalNames.set(e, s)
    }
    getAssetAliasName(s)
    {
        const e = this._objectAliases.get(s);
        return e || s
    }
    getAssetOriginalName(s)
    {
        const e = this._objectOriginalNames.get(s);
        return e || s
    }
    getAssetUrls(s, e=null, t=!1)
    {
        switch (s) {
        case ns.PLACE_HOLDER:
            return [this.getAssetUrlWithGenericBase(ns.PLACE_HOLDER)];
        case ns.PLACE_HOLDER_WALL:
            return [this.getAssetUrlWithGenericBase(ns.PLACE_HOLDER_WALL)];
        case ns.PLACE_HOLDER_PET:
            return [this.getAssetUrlWithGenericBase(ns.PLACE_HOLDER_PET)];
        case ns.ROOM:
            return [this.getAssetUrlWithGenericBase("room")];
        case ns.TILE_CURSOR:
            return [this.getAssetUrlWithGenericBase(ns.TILE_CURSOR)];
        case ns.SELECTION_ARROW:
            return [this.getAssetUrlWithGenericBase(ns.SELECTION_ARROW)];
        default:
            {
                const r = this.getCategoryForType(s);
                if (r === V.FLOOR || r === V.WALL) {
                    const i = this.getAssetAliasName(s);
                    let n = t ? this.getAssetUrlWithFurniIconBase(i) : this.getAssetUrlWithFurniBase(s);
                    if (t) {
                        const o = e && e !== "" && this._activeObjectTypeIds.has(i + "*" + e);
                        n = n.replace(/%param%/gi, o ? "_" + e : "")
                    }
                    return [n]
                }
                return r === V.UNIT ? [this.getAssetUrlWithPetBase(s)] : null
            }
        }
    }
    getAssetIconUrl(s, e)
    {
        let t = null,
            r = [];
        return s && s.indexOf(",") >= 0 && (t = s, s = t.split(",")[0]), t ? r = this.getAssetUrls(t, e, !0) : r = this.getAssetUrls(s, e, !0), r && r.length ? r[0] : null
    }
    getAssetUrlWithGenericBase(s)
    {
        return ye.getValue("generic.asset.url").replace(/%libname%/gi, s)
    }
    getAssetUrlWithFurniBase(s)
    {
        return ye.getValue("furni.asset.url").replace(/%libname%/gi, s)
    }
    getAssetUrlWithFurniIconBase(s)
    {
        return ye.getValue("furni.asset.icon.url").replace(/%libname%/gi, s)
    }
    getAssetUrlWithPetBase(s)
    {
        return ye.getValue("pet.asset.url").replace(/%libname%/gi, s)
    }
    setRoomObjectRoomId(s, e)
    {
        const t = s && s.model;
        t && t.setValue(C.OBJECT_ROOM_ID, e)
    }
    getOrRemoveEventDispatcher(s, e=!1)
    {
        const t = this._events.get(s);
        return e && this._events.delete(s), t
    }
    setIconListener(s)
    {
        this._iconListener = s
    }
}
;
let ci = ns;
ci.PLACE_HOLDER = "place_holder";
ci.PLACE_HOLDER_WALL = "place_holder_wall";
ci.PLACE_HOLDER_PET = "place_holder_pet";
ci.PLACE_HOLDER_DEFAULT = ns.PLACE_HOLDER;
ci.ROOM = "room";
ci.TILE_CURSOR = "tile_cursor";
ci.SELECTION_ARROW = "selection_arrow";
ci.LOADER_READY = "RCL_LOADER_READY";
ci.MANDATORY_LIBRARIES = [ns.PLACE_HOLDER, ns.PLACE_HOLDER_WALL, ns.PLACE_HOLDER_PET, ns.ROOM, ns.TILE_CURSOR, ns.SELECTION_ARROW];
class FU {
    constructor()
    {
        this._objects = new as,
        this._objectsPerType = new as
    }
    dispose()
    {
        this.removeAllObjects()
    }
    getObject(e)
    {
        const t = this._objects.getValue(e);
        return t || null
    }
    getObjectByIndex(e)
    {
        const t = this._objects.getWithIndex(e);
        return t || null
    }
    createObject(e, t, r)
    {
        const i = new mR(e, t, r);
        return this.addObject(e, r, i)
    }
    addObject(e, t, r)
    {
        if (this._objects.getValue(e))
            return r.dispose(), null;
        this._objects.add(e, r);
        const i = this.getTypeMap(t);
        return i && i.add(e, r), r
    }
    removeObject(e)
    {
        const t = this._objects.remove(e);
        if (t) {
            const r = this.getTypeMap(t.type);
            r && r.remove(t.id),
            t.dispose()
        }
    }
    removeAllObjects()
    {
        let e = 0;
        for (; e < this._objects.length;) {
            const t = this._objects.getWithIndex(e);
            t && t.dispose(),
            e++
        }
        for (this._objects.reset(), e = 0; e < this._objectsPerType.length;) {
            const t = this._objectsPerType.getWithIndex(e);
            t && t.dispose(),
            e++
        }
        this._objectsPerType.reset()
    }
    getTypeMap(e, t=!0)
    {
        let r = this._objectsPerType.getValue(e);
        return !r && t && (r = new as, this._objectsPerType.add(e, r)), r
    }
    get objects()
    {
        return this._objects
    }
    get totalObjects()
    {
        return this._objects.length
    }
}
const Ra = class  extends bn{
    constructor(s, e, t)
    {
        super(),
        this._state = Ra.ROOM_MANAGER_LOADED,
        this._rooms = new Map,
        this._contentLoader = null,
        this._updateCategories = [],
        this._listener = s,
        this._visualizationFactory = e,
        this._logicFactory = t,
        this._initialLoadList = [],
        this._pendingContentTypes = [],
        this._skipContentProcessing = !1,
        this._disposed = !1,
        this.onRoomContentLoadedEvent = this.onRoomContentLoadedEvent.bind(this),
        this.events.addEventListener(Rn.RCLE_SUCCESS, this.onRoomContentLoadedEvent),
        this.events.addEventListener(Rn.RCLE_FAILURE, this.onRoomContentLoadedEvent),
        this.events.addEventListener(Rn.RCLE_CANCEL, this.onRoomContentLoadedEvent)
    }
    onInit()
    {
        if (this._state >= Ra.ROOM_MANAGER_INITIALIZING || !this._contentLoader)
            return;
        const s = ci.MANDATORY_LIBRARIES;
        for (const e of s)
            e && this._initialLoadList.indexOf(e) === -1 && (this._contentLoader.downloadAsset(e, this.events), this._initialLoadList.push(e));
        this._state = Ra.ROOM_MANAGER_INITIALIZING
    }
    getRoomInstance(s)
    {
        const e = this._rooms.get(s);
        return e || null
    }
    createRoomInstance(s)
    {
        if (this._rooms.get(s))
            return null;
        const e = new wU(s, this);
        if (this._rooms.set(e.id, e), this._updateCategories.length)
            for (const t of this._updateCategories)
                e.addUpdateCategory(t);
        return e
    }
    removeRoomInstance(s)
    {
        const e = this._rooms.get(s);
        return e ? (this._rooms.delete(s), e.dispose(), !0) : !1
    }
    createRoomObjectAndInitalize(s, e, t, r)
    {
        const i = this.getRoomInstance(s);
        if (!i)
            return null;
        let n = t,
            o = t,
            l = t,
            c = null,
            u = !1;
        if (this._contentLoader.isLoaderType(t)) {
            if (c = this._contentLoader.getCollection(t), !c && (u = !0, this._contentLoader.downloadAsset(t, this.events), l = this._contentLoader.getPlaceholderName(t), c = this._contentLoader.getCollection(l), !c))
                return null;
            n = c.data.visualizationType,
            o = c.data.logicType
        }
        const h = i.createRoomObject(e, 1, t, r);
        if (!h)
            return null;
        if (this._visualizationFactory) {
            const d = this._visualizationFactory.getVisualization(n);
            if (!d)
                return i.removeRoomObject(e, r), null;
            d.asset = c;
            const m = this._visualizationFactory.getVisualizationData(l, n, c && c.data || null);
            if (!m || !d.initialize(m))
                return i.removeRoomObject(e, r), null;
            h.setVisualization(d)
        }
        if (this._logicFactory) {
            const d = this._logicFactory.getLogic(o);
            h.setLogic(d),
            d && d.initialize(c && c.data || null)
        }
        return u || (h.isReady = !0), this._contentLoader.setRoomObjectRoomId(h, s), h
    }
    reinitializeRoomObjectsByType(s)
    {
        if (!s || !this._contentLoader || !this._visualizationFactory || !this._logicFactory)
            return;
        const e = this._contentLoader.getCollection(s);
        if (!e)
            return;
        const t = e.data.visualizationType,
            r = e.data.logicType,
            i = this._visualizationFactory.getVisualizationData(s, t, e.data);
        for (const n of this._rooms.values())
            if (n) {
                for (const [o, l] of n.managers.entries())
                    if (l)
                        for (const c of l.objects.getValues()) {
                            if (!c || c.type !== s)
                                continue;
                            const u = this._visualizationFactory.getVisualization(t);
                            if (u)
                                if (u.asset = e, !i || !u.initialize(i))
                                    l.removeObject(c.id);
                                else {
                                    c.setVisualization(u);
                                    const h = this._logicFactory.getLogic(r);
                                    c.setLogic(h),
                                    h && h.initialize(e.data),
                                    c.isReady = !0,
                                    this._listener && this._listener.objectInitialized(n.id, c.id, o)
                                }
                            else
                                l.removeObject(c.id)
                        }
            }
    }
    addUpdateCategory(s)
    {
        if (!(this._updateCategories.indexOf(s) >= 0) && (this._updateCategories.push(s), !!this._rooms.size))
            for (const t of this._rooms.values())
                t && t.addUpdateCategory(s)
    }
    removeUpdateCategory(s)
    {
        const e = this._updateCategories.indexOf(s);
        if (e !== -1 && (this._updateCategories.splice(e, 1), !!this._rooms.size))
            for (const t of this._rooms.values())
                t && t.removeUpdateCategory(s)
    }
    setContentLoader(s)
    {
        this._contentLoader && this._contentLoader.dispose(),
        this._contentLoader = s
    }
    processPendingContentTypes(s)
    {
        if (this._skipContentProcessing) {
            this._skipContentProcessing = !1;
            return
        }
        for (; this._pendingContentTypes.length;) {
            const e = this._pendingContentTypes.shift();
            if (!this._contentLoader.getCollection(e)) {
                this._listener && this._listener.initalizeTemporaryObjectsByType(e, !1),
                pe.log("Invalid Collection", e);
                continue
            }
            this.reinitializeRoomObjectsByType(e),
            this._listener && this._listener.initalizeTemporaryObjectsByType(e, !0),
            this._initialLoadList.length > 0 && this.removeFromInitialLoad(e)
        }
    }
    removeFromInitialLoad(s)
    {
        if (!(!s || this._state === Ra.ROOM_MANAGER_ERROR))
            if (this._contentLoader || (this._state = Ra.ROOM_MANAGER_ERROR), this._contentLoader.getCollection(s)) {
                const e = this._initialLoadList.indexOf(s);
                e >= 0 && this._initialLoadList.splice(e, 1),
                this._initialLoadList.length || (this._state = Ra.ROOM_MANAGER_INITIALIZED, this._listener && this._listener.onRoomEngineInitalized(!0))
            } else
                this._state = Ra.ROOM_MANAGER_ERROR,
                this._listener && this._listener.onRoomEngineInitalized(!1)
    }
    onRoomContentLoadedEvent(s)
    {
        if (!this._contentLoader)
            return;
        const e = s.contentType;
        this._pendingContentTypes.indexOf(e) >= 0 || this._pendingContentTypes.push(e)
    }
    update(s, e=!1)
    {
        if (this.processPendingContentTypes(s), !!this._rooms.size)
            for (const t of this._rooms.values())
                t && t.update(s, e)
    }
    createRoomObjectManager(s)
    {
        return new FU
    }
    get rooms()
    {
        return this._rooms
    }
    get disposed()
    {
        return this._disposed
    }
}
;
let Ho = Ra;
Ho.ROOM_MANAGER_ERROR = -1;
Ho.ROOM_MANAGER_LOADING = 0;
Ho.ROOM_MANAGER_LOADED = 1;
Ho.ROOM_MANAGER_INITIALIZING = 2;
Ho.ROOM_MANAGER_INITIALIZED = 3;
Ho.CONTENT_PROCESSING_TIME_LIMIT_MILLISECONDS = 40;
class xU {
    constructor(e, t=-1, r=null, i=null, n=null)
    {
        this._minLevel = -1,
        this._texture = null,
        this._colorMatrix = null,
        this._blendMode = null,
        this._name = e,
        this._minLevel = t,
        this._texture = r,
        this._colorMatrix = i,
        this._blendMode = n
    }
    get name()
    {
        return this._name
    }
    get texture()
    {
        return this._texture
    }
    set texture(e)
    {
        this._texture = e
    }
    get colorMatrix()
    {
        return this._colorMatrix
    }
    set colorMatrix(e)
    {
        this._colorMatrix = e
    }
    get blendMode()
    {
        return this._blendMode
    }
    set blendMode(e)
    {
        this._blendMode = e
    }
    get minLevel()
    {
        return this._minLevel
    }
}
class GU {
    constructor()
    {
        this._effects = new Map,
        this._events = new ti,
        this._isLoaded = !1
    }
    init()
    {
        if (this._isLoaded)
            return;
        this._isLoaded = !0;
        const e = ye.getValue("image.library.url") + "Habbo-Stories/",
            t = ye.getValue("camera.available.effects");
        for (const r of t) {
            if (!r.enabled)
                continue;
            const i = new xU(r.name, r.minLevel);
            r.colorMatrix.length ? i.colorMatrix = r.colorMatrix : (i.texture = cs.from(e + r.name + ".png"), i.blendMode = r.blendMode),
            this._effects.set(i.name, i)
        }
        this.events.dispatchEvent(new Nh(Nh.INITIALIZED))
    }
    applyEffects(e, t, r)
    {
        const i = new Mi,
            n = new qt(e);
        i.addChild(n),
        r && n.scale.set(2);
        for (const o of t) {
            const l = o.effect;
            if (l)
                if (l.colorMatrix) {
                    const c = new tT;
                    c.matrix = l.colorMatrix,
                    c.alpha = o.alpha,
                    n.filters || (n.filters = []),
                    n.filters.push(c)
                } else {
                    const c = new qt(l.texture);
                    c.alpha = o.alpha,
                    c.blendMode = l.blendMode,
                    i.addChild(c)
                }
        }
        return pt.generateImage(i)
    }
    get effects()
    {
        return this._effects
    }
    get events()
    {
        return this._events
    }
    get isLoaded()
    {
        return this._isLoaded
    }
}
class C_ {
    constructor(e, t)
    {
        this._effect = e,
        this._alpha = t
    }
    get effect()
    {
        return this._effect
    }
    get alpha()
    {
        return this._alpha
    }
}
class BU {
    flush()
    {
        return this._canShowInterstitial = !1, !0
    }
    parse(e)
    {
        return e ? (this._canShowInterstitial = e.readBoolean(), !0) : !1
    }
    get canShowInterstitial()
    {
        return this._canShowInterstitial
    }
}
class kU {
    flush()
    {
        return this._errorCode = 0, this._filteredText = null, !0
    }
    parse(e)
    {
        return e ? (this._errorCode = e.readInt(), this._filteredText = e.readString(), !0) : !1
    }
    get errorCode()
    {
        return this._errorCode
    }
    get filteredText()
    {
        return this._filteredText
    }
}
class VU {
    flush()
    {
        return this._isOpen = !1, this._onShutdown = !1, this._isAuthenticUser = !1, !0
    }
    parse(e)
    {
        return e ? (this._isOpen = e.readBoolean(), this._onShutdown = e.readBoolean(), e.bytesAvailable && (this._isAuthenticUser = e.readBoolean()), !0) : !1
    }
    get isOpen()
    {
        return this._isOpen
    }
    get onShutdown()
    {
        return this._onShutdown
    }
    get isAuthenticUser()
    {
        return this._isAuthenticUser
    }
}
class HU {
    flush()
    {
        return this._isOpen = !1, this._minutesUntilChange = 0, !0
    }
    parse(e)
    {
        return e ? (this._isOpen = e.readInt() > 0, this._minutesUntilChange = e.readInt(), !0) : !1
    }
    get isOpen()
    {
        return this._isOpen
    }
    get minutesUntilChange()
    {
        return this._minutesUntilChange
    }
}
class jU {
    flush()
    {
        return this._openHour = 0, this._openMinute = 0, !0
    }
    parse(e)
    {
        return e ? (this._openHour = e.readInt(), this._openMinute = e.readInt(), !0) : !1
    }
    get openHour()
    {
        return this._openHour
    }
    get openMinute()
    {
        return this._openMinute
    }
}
class WU {
    flush()
    {
        return this._openHour = 0, this._openMinute = 0, this._userThrownOutAtClose = !1, !0
    }
    parse(e)
    {
        return e ? (this._openHour = e.readInt(), this._openMinute = e.readInt(), this._userThrownOutAtClose = e.readBoolean(), !0) : !1
    }
    get openHour()
    {
        return this._openHour
    }
    get openMinute()
    {
        return this._openMinute
    }
    get userThrowOutAtClose()
    {
        return this._userThrownOutAtClose
    }
}
class YU {
    flush()
    {
        return this._minutes = 0, !0
    }
    parse(e)
    {
        return e ? (this._minutes = e.readInt(), !0) : !1
    }
    get openMinute()
    {
        return this._minutes
    }
}
class zU {
    flush()
    {
        return this._isInMaintenance = !1, this._minutesUntilMaintenance = 0, this._duration = 15, !0
    }
    parse(e)
    {
        return e ? (this._isInMaintenance = e.readBoolean(), this._minutesUntilMaintenance = e.readInt(), e.bytesAvailable && (this._duration = e.readInt()), !0) : !1
    }
    get isInMaintenance()
    {
        return this._isInMaintenance
    }
    get minutesUntilMaintenance()
    {
        return this._minutesUntilMaintenance
    }
    get duration()
    {
        return this._duration
    }
}
class KU {
    flush()
    {
        return this._resultCode = -1, this._name = "", this._nameSuggestions = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._resultCode = e.readInt(),
        this._name = e.readString();
        let t = e.readInt();
        for (; t > 0;)
            this._nameSuggestions.push(e.readString()),
            t--;
        return !0
    }
    get resultCode()
    {
        return this._resultCode
    }
    get name()
    {
        return this._name
    }
    get nameSuggestions()
    {
        return this._nameSuggestions
    }
}
class qU {
    flush()
    {
        return this._resultCode = -1, this._name = "", this._nameSuggestions = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._resultCode = e.readInt(),
        this._name = e.readString();
        let t = e.readInt();
        for (; t > 0;)
            this._nameSuggestions.push(e.readString()),
            t--;
        return !0
    }
    get resultCode()
    {
        return this._resultCode
    }
    get name()
    {
        return this._name
    }
    get nameSuggestions()
    {
        return this._nameSuggestions
    }
}
class XU {
    flush()
    {
        return this._figure = "", this._gender = "", !0
    }
    parse(e)
    {
        return e ? (this._figure = e.readString(), this._gender = e.readString(), this._gender && (this._gender = this._gender.toUpperCase()), !0) : !1
    }
    get figure()
    {
        return this._figure
    }
    get gender()
    {
        return this._gender
    }
}
class QU {
    constructor(e)
    {
        this._slotId = e.readInt(),
        this._figureString = e.readString(),
        this._gender = e.readString()
    }
    get slotId()
    {
        return this._slotId
    }
    get figureString()
    {
        return this._figureString
    }
    get gender()
    {
        return this._gender
    }
}
class JU {
    flush()
    {
        return this._state = 0, this._outfits = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._state = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._outfits.push(new QU(e)),
            t--;
        return !0
    }
    get state()
    {
        return this._state
    }
    get outfits()
    {
        return this._outfits
    }
}
class nm {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_parser");
        this._id = e.readInt(),
        this._name = e.readString(),
        this._motto = e.readString(),
        this._gender = e.readString(),
        this._figure = e.readString()
    }
    get id()
    {
        return this._id
    }
    get name()
    {
        return this._name
    }
    get motto()
    {
        return this._motto
    }
    get figure()
    {
        return this._figure
    }
    get gender()
    {
        return this._gender
    }
}
class ZU {
    flush()
    {
        return this._item = null, this._openInventory = !1, !0
    }
    parse(e)
    {
        return e ? (this._item = new nm(e), this._openInventory = e.readBoolean(), !0) : !1
    }
    get item()
    {
        return this._item
    }
    openInventory()
    {
        return this._openInventory
    }
}
class $U {
    flush()
    {
        return this._items = null, !0
    }
    parse(e)
    {
        this._items = new Map;
        let t = e.readInt();
        for (; t > 0;) {
            const r = new nm(e);
            this._items.set(r.id, r),
            t--
        }
        return !0
    }
    get items()
    {
        return this._items
    }
}
class e0 {
    flush()
    {
        return this._boughtAsGift = !1, this._item = null, !0
    }
    parse(e)
    {
        return e ? (this._boughtAsGift = e.readBoolean(), this._item = new nm(e), !0) : !1
    }
    get boughtAsGift()
    {
        return this._boughtAsGift
    }
    get item()
    {
        return this._item
    }
}
class t0 {
    flush()
    {
        return this._itemId = 0, !0
    }
    parse(e)
    {
        return e ? (this._itemId = e.readInt(), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
}
class s0 {
    constructor(e)
    {
        this._name = e.readString(),
        this._id = e.readInt(),
        this._consequence = e.readString()
    }
    get name()
    {
        return this._name
    }
    get id()
    {
        return this._id
    }
    get consequence()
    {
        return this._consequence
    }
}
class r0 {
    constructor(e)
    {
        this._topics = [],
        this._name = e.readString();
        let t = e.readInt();
        for (; t > 0;)
            this._topics.push(new s0(e)),
            t--
    }
    dispose()
    {
        this._disposed || (this._disposed = !0, this._topics = null)
    }
    get disposed()
    {
        return this._disposed
    }
    get name()
    {
        return this._name
    }
    get topics()
    {
        return this._topics
    }
}
class i0 {
    constructor(e)
    {
        this._tradeLockInfo = "",
        this._machineBanInfo = "",
        this._name = e.readString(),
        this._sanctionLengthInHours = e.readInt(),
        this._probationDays = e.readInt(),
        this._avatarOnly = e.readBoolean(),
        e.bytesAvailable && (this._tradeLockInfo = e.readString()),
        e.bytesAvailable && (this._machineBanInfo = e.readString())
    }
    get name()
    {
        return this._name
    }
    get sanctionLengthInHours()
    {
        return this._sanctionLengthInHours
    }
    get avatarOnly()
    {
        return this._avatarOnly
    }
    get tradeLockInfo()
    {
        return this._tradeLockInfo
    }
    get machineBanInfo()
    {
        return this._machineBanInfo
    }
}
class n0 {
    flush()
    {
        return this._issueId = -1, this._accountId = 1, this._sanctionType = null, !0
    }
    parse(e)
    {
        return e ? (this._issueId = e.readInt(), this._accountId = e.readInt(), this._sanctionType = new i0(e), !0) : !1
    }
    get issueId()
    {
        return this._issueId
    }
    get accountId()
    {
        return this._accountId
    }
    get sanctionType()
    {
        return this._sanctionType
    }
}
class a0 {
    flush()
    {
        return this._callForHelpCategories = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._callForHelpCategories = [];
        let t = e.readInt();
        for (; t > 0;)
            this._callForHelpCategories.push(new r0(e)),
            t--;
        return !0
    }
    get callForHelpCategories()
    {
        return this._callForHelpCategories
    }
}
class o0 {
    flush()
    {
        return this._isSanctionNew = !1, this._isSanctionActive = !1, this._sanctionName = null, this._sanctionLengthHours = 0, this._sanctionReason = null, this._sanctionCreationTime = null, this._probationHoursLeft = 0, this._nextSanctionName = null, this._nextSanctionLengthHours = 0, this._hasCustomMute = !1, this._tradeLockExpiryTime = null, !0
    }
    parse(e)
    {
        return e ? (this._isSanctionNew = e.readBoolean(), this._isSanctionActive = e.readBoolean(), this._sanctionName = e.readString(), this._sanctionLengthHours = e.readInt(), e.readInt(), this._sanctionReason = e.readString(), this._sanctionCreationTime = e.readString(), this._probationHoursLeft = e.readInt(), this._nextSanctionName = e.readString(), this._nextSanctionLengthHours = e.readInt(), e.readInt(), this._hasCustomMute = e.readBoolean(), e.bytesAvailable && (this._tradeLockExpiryTime = e.readString()), !0) : !1
    }
    get isSanctionNew()
    {
        return this._isSanctionNew
    }
    get isSanctionActive()
    {
        return this._isSanctionActive
    }
    get sanctionName()
    {
        return this._sanctionName
    }
    get sanctionLengthHours()
    {
        return this._sanctionLengthHours
    }
    get sanctionReason()
    {
        return this._sanctionReason
    }
    get sanctionCreationTime()
    {
        return this._sanctionCreationTime
    }
    get probationHoursLeft()
    {
        return this._probationHoursLeft
    }
    get nextSanctionName()
    {
        return this._nextSanctionName
    }
    get nextSanctionLengthHours()
    {
        return this._nextSanctionLengthHours
    }
    get hasCustomMute()
    {
        return this._hasCustomMute
    }
    get tradeLockExpiryTime()
    {
        return this._tradeLockExpiryTime
    }
}
class l0 {
    constructor()
    {
        this._ok = !1,
        this._secondsToWait = 0
    }
    flush()
    {
        return this._ok = !1, this._secondsToWait = 0, this._extraDataId = null, !0
    }
    parse(e)
    {
        return e ? (this._ok = e.readBoolean(), this._secondsToWait = e.readInt(), this._ok && e.bytesAvailable && (this._extraDataId = e.readString()), !0) : !1
    }
    get ok()
    {
        return this._ok
    }
    get secondsToWait()
    {
        return this._secondsToWait
    }
    get extraDataId()
    {
        return this._extraDataId
    }
}
class c0 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class u0 {
    flush()
    {
        return this._roomType = null, this._roomId = -1, !0
    }
    parse(e)
    {
        return e ? (this._roomType = e.readString(), this._roomId = e.readInt(), !0) : !1
    }
    get roomType()
    {
        return this._roomType
    }
    get roomId()
    {
        return this._roomId
    }
}
class h0 {
    flush()
    {
        return this._url = "", !0
    }
    parse(e)
    {
        return e ? (this._url = e.readString(), !0) : !1
    }
    get url()
    {
        return this._url
    }
}
class d0 {
    constructor()
    {
        this._ok = !1,
        this._errorReason = null
    }
    flush()
    {
        return this._ok = !1, this._errorReason = null, !0
    }
    parse(e)
    {
        return e ? (this._ok = e.readBoolean(), this._errorReason = e.readString(), !0) : !1
    }
    get ok()
    {
        return this._ok
    }
    get errorReason()
    {
        return this._errorReason
    }
}
class _0 {
    constructor()
    {
        this._creditPrice = 0,
        this._ducketPrice = 0,
        this._publishDucketPrice = 0
    }
    flush()
    {
        return this._creditPrice = 0, this._ducketPrice = 0, this._publishDucketPrice = 0, !0
    }
    parse(e)
    {
        return e ? (this._creditPrice = e.readInt(), this._ducketPrice = e.readInt(), e.bytesAvailable && (this._publishDucketPrice = e.readInt()), !0) : !1
    }
    get creditPrice()
    {
        return this._creditPrice
    }
    get ducketPrice()
    {
        return this._ducketPrice
    }
    get publishDucketPrice()
    {
        return this._publishDucketPrice
    }
}
class g0 {
    constructor()
    {
        this._ok = !0,
        this._renderLimitHit = !1
    }
    flush()
    {
        return this._ok = !0, this._renderLimitHit = !1, !0
    }
    parse(e)
    {
        return e ? (e.bytesAvailable && (this._ok = e.readBoolean(), this._renderLimitHit = e.readBoolean()), !0) : !1
    }
    get ok()
    {
        return this._ok
    }
    get isRenderLimitHit()
    {
        return this._renderLimitHit
    }
}
class am {
    parse(e)
    {
        if (!e)
            return !1;
        this._campaignName = e.readString(),
        this._campaignImage = e.readString(),
        this._currentDay = e.readInt(),
        this._campaignDays = e.readInt(),
        this._openedDays = [];
        let t = e.readInt();
        for (let r = 0; r < t; r++)
            this._openedDays.push(e.readInt());
        this._missedDays = [],
        t = e.readInt();
        for (let r = 0; r < t; r++)
            this._missedDays.push(e.readInt());
        return !0
    }
    clone()
    {
        const e = new am;
        return e.campaignDays = this._campaignDays, e.campaignImage = this._campaignImage, e.campaignName = this._campaignName, e.currentDay = this._currentDay, e.missedDays = this._missedDays, e.openedDays = this._openedDays, e
    }
    get campaignName()
    {
        return this._campaignName
    }
    set campaignName(e)
    {
        this._campaignName = e
    }
    get campaignImage()
    {
        return this._campaignImage
    }
    set campaignImage(e)
    {
        this._campaignImage = e
    }
    get currentDay()
    {
        return this._currentDay
    }
    set currentDay(e)
    {
        this._currentDay = e
    }
    get campaignDays()
    {
        return this._campaignDays
    }
    set campaignDays(e)
    {
        this._campaignDays = e
    }
    get openedDays()
    {
        return this._openedDays
    }
    set openedDays(e)
    {
        this._openedDays = e
    }
    get missedDays()
    {
        return this._missedDays
    }
    set missedDays(e)
    {
        this._missedDays = e
    }
}
class f0 {
    flush()
    {
        return this._calendarData = null, !0
    }
    parse(e)
    {
        return e ? (this._calendarData = new am, this._calendarData.parse(e), !0) : !1
    }
    get calendarData()
    {
        return this._calendarData
    }
}
class m0 {
    flush()
    {
        return this._doorOpened = !1, this._productName = null, this._customImage = null, this._furnitureClassName = null, !0
    }
    parse(e)
    {
        return e ? (this._doorOpened = e.readBoolean(), this._productName = e.readString(), this._customImage = e.readString(), this._furnitureClassName = e.readString(), !0) : !1
    }
    get doorOpened()
    {
        return this._doorOpened
    }
    get productName()
    {
        return this._productName
    }
    get customImage()
    {
        return this._customImage
    }
    get furnitureClassName()
    {
        return this._furnitureClassName
    }
}
class E0 {
    flush()
    {
        return this._totalCoinsForBonus = -1, this._coinsStillRequiredToBuy = -1, this._productType = "", this._productClassId = -1, !0
    }
    parse(e)
    {
        return e ? (this._productType = e.readString(), this._productClassId = e.readInt(), this._totalCoinsForBonus = e.readInt(), this._coinsStillRequiredToBuy = e.readInt(), !0) : !1
    }
    get totalCoinsForBonus()
    {
        return this._totalCoinsForBonus
    }
    get coinsStillRequiredToBuy()
    {
        return this._coinsStillRequiredToBuy
    }
    get productType()
    {
        return this._productType
    }
    get productClassId()
    {
        return this._productClassId
    }
}
class p0 {
    flush()
    {
        return this._furniCount = 0, !0
    }
    parse(e)
    {
        return e ? (this._furniCount = e.readInt(), !0) : !1
    }
    get furniCount()
    {
        return this._furniCount
    }
}
class I0 {
    flush()
    {
        return this._secondsLeft = 0, this._furniLimit = 0, this._maxFurniLimit = 0, this._secondsLeftWithGrace = 0, !0
    }
    parse(e)
    {
        return e ? (this._secondsLeft = e.readInt(), this._furniLimit = e.readInt(), this._maxFurniLimit = e.readInt(), e.bytesAvailable ? this._secondsLeftWithGrace = e.readInt() : this._secondsLeftWithGrace = this._secondsLeft, !0) : !1
    }
    get secondsLeft()
    {
        return this._secondsLeft
    }
    get furniLimit()
    {
        return this._furniLimit
    }
    get maxFurniLimit()
    {
        return this._maxFurniLimit
    }
    get secondsLeftWithGrace()
    {
        return this._secondsLeftWithGrace
    }
}
class T0 {
    constructor(e)
    {
        this._maxPurchaseSize = e.readInt(),
        this._bundleSize = e.readInt(),
        this._bundleDiscountSize = e.readInt(),
        this._bonusThreshold = e.readInt(),
        this._additionalBonusDiscountThresholdQuantities = [];
        let t = e.readInt();
        for (; t > 0;)
            this._additionalBonusDiscountThresholdQuantities.push(e.readInt()),
            t--
    }
    get maxPurchaseSize()
    {
        return this._maxPurchaseSize
    }
    get bundleSize()
    {
        return this._bundleSize
    }
    get bundleDiscountSize()
    {
        return this._bundleDiscountSize
    }
    get bonusThreshold()
    {
        return this._bonusThreshold
    }
    get additionalBonusDiscountThresholdQuantities()
    {
        return this._additionalBonusDiscountThresholdQuantities
    }
}
class R0 {
    flush()
    {
        return this._bundleDiscountRuleset = null, !0
    }
    parse(e)
    {
        return e ? (this._bundleDiscountRuleset = new T0(e), !0) : !1
    }
    get bundleDiscountRuleset()
    {
        return this._bundleDiscountRuleset
    }
}
class om {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._visible = !1, this._icon = 0, this._pageId = -1, this._pageName = null, this._localization = null, this._children = [], this._offerIds = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._visible = e.readBoolean(),
        this._icon = e.readInt(),
        this._pageId = e.readInt(),
        this._pageName = e.readString(),
        this._localization = e.readString();
        let t = e.readInt();
        for (; t > 0;)
            this._offerIds.push(e.readInt()),
            t--;
        let r = e.readInt();
        for (; r > 0;)
            this._children.push(new om(e)),
            r--;
        return !0
    }
    get visible()
    {
        return this._visible
    }
    get icon()
    {
        return this._icon
    }
    get pageId()
    {
        return this._pageId
    }
    get pageName()
    {
        return this._pageName
    }
    get localization()
    {
        return this._localization
    }
    get children()
    {
        return this._children
    }
    get offerIds()
    {
        return this._offerIds
    }
}
class O0 {
    flush()
    {
        return this._root = null, !0
    }
    parse(e)
    {
        return e ? (this._root = new om(e), this._newAdditionsAvailable = e.readBoolean(), this._catalogType = e.readString(), !0) : !1
    }
    get root()
    {
        return this._root
    }
    get newAdditionsAvailable()
    {
        return this._newAdditionsAvailable
    }
    get catalogType()
    {
        return this._catalogType
    }
}
class S0 {
    constructor(e)
    {
        this._images = [],
        this._texts = [];
        let t = e.readInt();
        for (; t > 0;)
            this._images.push(e.readString()),
            t--;
        let r = e.readInt();
        for (; r > 0;)
            this._texts.push(e.readString()),
            r--
    }
    get images()
    {
        return this._images
    }
    get texts()
    {
        return this._texts
    }
}
class C0 {
    flush()
    {
        return this._pageName = null, this._pageId = 0, this._secondsToExpiry = 0, this._image = null, !0
    }
    parse(e)
    {
        return e ? (this._pageId = e.readInt(), this._pageName = e.readString(), this._secondsToExpiry = e.readInt(), this._image = e.readString(), !0) : !1
    }
    get pageName()
    {
        return this._pageName
    }
    get pageId()
    {
        return this._pageId
    }
    get secondsToExpiry()
    {
        return this._secondsToExpiry
    }
    get image()
    {
        return this._image
    }
}
const SR = class {
    constructor(s)
    {
        if (!s)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(s)
    }
    flush()
    {
        return this._productType = null, this._furniClassId = -1, this._extraParam = null, this._productCount = 0, this._uniqueLimitedItem = !1, this._uniqueLimitedItemSeriesSize = 0, this._uniqueLimitedItemsLeft = 0, !0
    }
    parse(s)
    {
        switch (this._productType = s.readString(), this._productType) {
        case SR.B:
            return this._extraParam = s.readString(), this._productCount = 1, !0;
        default:
            return this._furniClassId = s.readInt(), this._extraParam = s.readString(), this._productCount = s.readInt(), this._uniqueLimitedItem = s.readBoolean(), this._uniqueLimitedItem && (this._uniqueLimitedItemSeriesSize = s.readInt(), this._uniqueLimitedItemsLeft = s.readInt()), !0
        }
    }
    get productType()
    {
        return this._productType
    }
    get furniClassId()
    {
        return this._furniClassId
    }
    get extraParam()
    {
        return this._extraParam
    }
    get productCount()
    {
        return this._productCount
    }
    get uniqueLimitedItem()
    {
        return this._uniqueLimitedItem
    }
    get uniqueLimitedSeriesSize()
    {
        return this._uniqueLimitedItemSeriesSize
    }
    get uniqueLimitedItemsLeft()
    {
        return this._uniqueLimitedItemsLeft
    }
}
;
let oi = SR;
oi.I = "i";
oi.S = "s";
oi.E = "e";
oi.B = "b";
class Nd {
    constructor(e)
    {
        this._offerId = e.readInt(),
        this._localizationId = e.readString(),
        this._rent = e.readBoolean(),
        this._priceCredits = e.readInt(),
        this._priceActivityPoints = e.readInt(),
        this._priceActivityPointsType = e.readInt(),
        this._giftable = e.readBoolean(),
        this._products = [];
        let t = e.readInt();
        for (; t > 0;)
            this._products.push(new oi(e)),
            t--;
        this._clubLevel = e.readInt(),
        this._bundlePurchaseAllowed = e.readBoolean(),
        this._isPet = e.readBoolean(),
        this._previewImage = e.readString()
    }
    get offerId()
    {
        return this._offerId
    }
    get localizationId()
    {
        return this._localizationId
    }
    get rent()
    {
        return this._rent
    }
    get priceCredits()
    {
        return this._priceCredits
    }
    get priceActivityPoints()
    {
        return this._priceActivityPoints
    }
    get priceActivityPointsType()
    {
        return this._priceActivityPointsType
    }
    get clubLevel()
    {
        return this._clubLevel
    }
    get giftable()
    {
        return this._giftable
    }
    get bundlePurchaseAllowed()
    {
        return this._bundlePurchaseAllowed
    }
    get isPet()
    {
        return this._isPet
    }
    get previewImage()
    {
        return this._previewImage
    }
    get products()
    {
        return this._products
    }
}
const hh = class {
    constructor(s)
    {
        if (!s)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(s)
    }
    flush()
    {
        return this._type = -1, this._position = null, this._itemName = null, this._itemPromoImage = null, this._catalogPageLocation = null, this._productCode = null, this._productOfferId = 0, this._expirationTime = 0, !0
    }
    parse(s)
    {
        if (!s)
            return !1;
        switch (this._position = s.readInt(), this._itemName = s.readString(), this._itemPromoImage = s.readString(), this._type = s.readInt(), this._type) {
        case hh.ITEM_CATALOGUE_PAGE:
            this._catalogPageLocation = s.readString();
            break;
        case hh.ITEM_PRODUCT_OFFER:
            this._productOfferId = s.readInt();
            break;
        case hh.ITEM_IAP:
            this._productCode = s.readString();
            break
        }
        const e = s.readInt();
        return this._expirationTime = e > 0 ? e * 1e3 + Pe() : 0, !0
    }
    get type()
    {
        return this._type
    }
    get position()
    {
        return this._position
    }
    get itemName()
    {
        return this._itemName
    }
    get itemPromoImage()
    {
        return this._itemPromoImage
    }
    get catalogPageLocation()
    {
        return this._catalogPageLocation
    }
    get productCode()
    {
        return this._productCode
    }
    get productOfferId()
    {
        return this._productOfferId
    }
    get expirationTime()
    {
        return this._expirationTime
    }
}
;
let wl = hh;
wl.ITEM_CATALOGUE_PAGE = 0;
wl.ITEM_PRODUCT_OFFER = 1;
wl.ITEM_IAP = 2;
class A0 {
    flush()
    {
        return this._pageId = -1, this._catalogType = null, this._layoutCode = null, this._localization = null, this._offers = [], this._offerId = -1, this._acceptSeasonCurrencyAsCredits = !1, this._frontPageItems = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._pageId = e.readInt(),
        this._catalogType = e.readString(),
        this._layoutCode = e.readString(),
        this._localization = new S0(e);
        let t = e.readInt();
        for (; t > 0;)
            this._offers.push(new Nd(e)),
            t--;
        if (this._offerId = e.readInt(), this._acceptSeasonCurrencyAsCredits = e.readBoolean(), e.bytesAvailable) {
            let r = e.readInt();
            for (; r > 0;)
                this._frontPageItems.push(new wl(e)),
                r--
        }
        return !0
    }
    get pageId()
    {
        return this._pageId
    }
    get catalogType()
    {
        return this._catalogType
    }
    get layoutCode()
    {
        return this._layoutCode
    }
    get localization()
    {
        return this._localization
    }
    get offers()
    {
        return this._offers
    }
    get offerId()
    {
        return this._offerId
    }
    get acceptSeasonCurrencyAsCredits()
    {
        return this._acceptSeasonCurrencyAsCredits
    }
    get frontPageItems()
    {
        return this._frontPageItems
    }
}
class N0 {
    flush()
    {
        return this._pageName = null, this._secondsToExpiry = 0, this._image = null, !0
    }
    parse(e)
    {
        return e ? (this._pageName = e.readString(), this._secondsToExpiry = e.readInt(), this._image = e.readString(), !0) : !1
    }
    get pageName()
    {
        return this._pageName
    }
    get secondsToExpiry()
    {
        return this._secondsToExpiry
    }
    get image()
    {
        return this._image
    }
}
class y0 {
    flush()
    {
        return this._instantlyRefreshCatalogue = !1, this._newFurniDataHash = null, !0
    }
    parse(e)
    {
        return e ? (this._instantlyRefreshCatalogue = e.readBoolean(), e.bytesAvailable && (this._newFurniDataHash = e.readString()), !0) : !1
    }
    get instantlyRefreshCatalogue()
    {
        return this._instantlyRefreshCatalogue
    }
    get newFurniDataHash()
    {
        return this._newFurniDataHash
    }
}
class M0 {
    constructor(e)
    {
        this._offerId = e.readInt(),
        this._isVip = e.readBoolean(),
        this._daysRequired = e.readInt(),
        this._isSelectable = e.readBoolean()
    }
    get offerId()
    {
        return this._offerId
    }
    get isVip()
    {
        return this._isVip
    }
    get isSelectable()
    {
        return this._isSelectable
    }
    get daysRequired()
    {
        return this._daysRequired
    }
}
class b0 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._offers = [],
        this._giftData = new Map,
        this._daysUntilNextGift = e.readInt(),
        this._giftsAvailable = e.readInt();
        const t = e.readInt();
        for (let i = 0; i < t; i++)
            this._offers.push(new Nd(e));
        const r = e.readInt();
        for (let i = 0; i < r; i++) {
            const n = new M0(e);
            this._giftData.set(n.offerId, n)
        }
        return !0
    }
    get offers()
    {
        return this._offers
    }
    get daysUntilNextGift()
    {
        return this._daysUntilNextGift
    }
    get giftsAvailable()
    {
        return this._giftsAvailable
    }
    set giftsAvailable(e)
    {
        this._giftsAvailable = e
    }
    getOfferExtraData(e)
    {
        return e ? this._giftData.get(e) : null
    }
    get giftData()
    {
        return this._giftData
    }
}
class D0 {
    flush()
    {
        return this._productCode = null, this._products = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._productCode = e.readString();
        let t = e.readInt();
        for (; t > 0;)
            this._products.push(new oi(e)),
            t--;
        return !0
    }
    get productCode()
    {
        return this._productCode
    }
    get products()
    {
        return this._products
    }
}
class CR {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._offerId = e.readInt(),
        this._productCode = e.readString(),
        e.readBoolean(),
        this._priceCredits = e.readInt(),
        this._priceActivityPoints = e.readInt(),
        this._priceActivityPointsType = e.readInt(),
        this._vip = e.readBoolean(),
        this._months = e.readInt(),
        this._extraDays = e.readInt(),
        this._giftable = e.readBoolean(),
        this._daysLeftAfterPurchase = e.readInt(),
        this._year = e.readInt(),
        this._month = e.readInt(),
        this._day = e.readInt()
    }
    get offerId()
    {
        return this._offerId
    }
    get productCode()
    {
        return this._productCode
    }
    get priceCredits()
    {
        return this._priceCredits
    }
    get priceActivityPoints()
    {
        return this._priceActivityPoints
    }
    get priceActivityPointsType()
    {
        return this._priceActivityPointsType
    }
    get vip()
    {
        return this._vip
    }
    get months()
    {
        return this._months
    }
    get extraDays()
    {
        return this._extraDays
    }
    get daysLeftAfterPurchase()
    {
        return this._daysLeftAfterPurchase
    }
    get year()
    {
        return this._year
    }
    get month()
    {
        return this._month
    }
    get day()
    {
        return this._day
    }
    get giftable()
    {
        return this._giftable
    }
}
class v0 extends CR {
    constructor(e)
    {
        super(e),
        this._originalPrice = e.readInt(),
        this._originalActivityPointPrice = e.readInt(),
        this._originalActivityPointType = e.readInt(),
        this._subscriptionDaysLeft = e.readInt()
    }
    get originalPrice()
    {
        return this._originalPrice * this.months
    }
    get originalActivityPointPrice()
    {
        return this._originalActivityPointPrice * this.months
    }
    get originalActivityPointType()
    {
        return this._originalActivityPointType
    }
    get discountCreditAmount()
    {
        return this._originalPrice * this.months - this.priceCredits
    }
    get discountActivityPointAmount()
    {
        return this.originalActivityPointPrice * this.months - this.priceActivityPoints
    }
    get subscriptionDaysLeft()
    {
        return this._subscriptionDaysLeft
    }
}
class P0 {
    flush()
    {
        return this._available = !1, this._pricePointUrl = null, this._market = null, this._lengthInDays = 0, !0
    }
    parse(e)
    {
        return e ? (this._pricePointUrl = e.readString(), this._pricePointUrl !== "" && (this._available = !0), this._market = e.readString(), this._lengthInDays = e.readInt(), !0) : !1
    }
    get available()
    {
        return this._available
    }
    get pricePointUrl()
    {
        return this._pricePointUrl
    }
    get market()
    {
        return this._market
    }
    get lengthInDays()
    {
        return this._lengthInDays
    }
}
class L0 {
    constructor(e)
    {
        this._stuffId = e.readInt(),
        this._charges = e.readInt(),
        this._SafeStr_6935 = e.readInt(),
        this._SafeStr_6936 = e.readInt(),
        this._SafeStr_6518 = e.readInt(),
        this._SafeStr_7875 = e.readInt()
    }
    get stuffId()
    {
        return this._stuffId
    }
    get charges()
    {
        return this._charges
    }
    get _SafeStr_5946()
    {
        return this._SafeStr_6935
    }
    get _SafeStr_5944()
    {
        return this._SafeStr_6936
    }
    get _SafeStr_7876()
    {
        return this._SafeStr_7875
    }
    get _SafeStr_5945()
    {
        return this._SafeStr_6518
    }
}
class U0 {
    flush()
    {
        return this._fireworkChargeData = null, !0
    }
    parse(e)
    {
        return e ? (this._fireworkChargeData = new L0(e), !0) : !1
    }
    get fireworkChargeData()
    {
        return this._fireworkChargeData
    }
}
class w0 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class F0 {
    constructor()
    {
        this._isEnabled = !1,
        this._price = null,
        this._giftWrappers = null,
        this._boxTypes = null,
        this._ribbonTypes = null,
        this._giftFurnis = null
    }
    flush()
    {
        return this._boxTypes = null, this._giftFurnis = null, this._giftWrappers = null, this._ribbonTypes = null, this._isEnabled = null, this._price = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = [],
            r = [],
            i = [],
            n = [];
        this._isEnabled = e.readBoolean(),
        this._price = e.readInt();
        let o = e.readInt(),
            l = 0;
        for (; l < o;)
            t.push(e.readInt()),
            l++;
        for (o = e.readInt(), l = 0; l < o;)
            r.push(e.readInt()),
            l++;
        for (o = e.readInt(), l = 0; l < o;)
            i.push(e.readInt()),
            l++;
        for (o = e.readInt(), l = 0; l < o;)
            n.push(e.readInt()),
            l++;
        return this._giftWrappers = t, this._ribbonTypes = i, this._giftFurnis = n, this._boxTypes = r, !0
    }
    get giftWrappers()
    {
        return this._giftWrappers
    }
    get ribbonTypes()
    {
        return this._ribbonTypes
    }
    get giftFurnis()
    {
        return this._giftFurnis
    }
    get boxTypes()
    {
        return this._boxTypes
    }
    get isEnabled()
    {
        return this._isEnabled
    }
    get price()
    {
        return this._price
    }
}
class x0 {
    flush()
    {
        return this._offer = null, !0
    }
    parse(e)
    {
        return e ? (this._offer = new v0(e), !0) : !1
    }
    get offer()
    {
        return this._offer
    }
}
class G0 {
    flush()
    {
        return this._offers = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._offers.push(new CR(e)),
            t--;
        return !0
    }
    get offers()
    {
        return this._offers
    }
}
class B0 {
    flush()
    {
        return this._offerId = 0, this._isGiftable = !1, !0
    }
    parse(e)
    {
        return e ? (this._offerId = e.readInt(), this._isGiftable = e.readBoolean(), !0) : !1
    }
    get offerId()
    {
        return this._offerId
    }
    get isGiftable()
    {
        return this._isGiftable
    }
}
class k0 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class V0 {
    flush()
    {
        return this._appearsInSeconds = -1, this._pageId = -1, this._offerId = -1, this._productType = "", !0
    }
    parse(e)
    {
        return e ? (this._appearsInSeconds = e.readInt(), this._pageId = e.readInt(), this._offerId = e.readInt(), this._productType = e.readString(), !0) : !1
    }
    get appearsInSeconds()
    {
        return this._appearsInSeconds
    }
    get pageId()
    {
        return this._pageId
    }
    get offerId()
    {
        return this._offerId
    }
    get productType()
    {
        return this._productType
    }
}
class H0 {
    constructor()
    {
        this._notEnoughCredits = !1,
        this._notEnoughActivityPoints = !1,
        this._activityPointType = 0
    }
    flush()
    {
        return this._notEnoughCredits = !1, this._notEnoughActivityPoints = !1, this._activityPointType = 0, !0
    }
    parse(e)
    {
        return e ? (this._notEnoughCredits = e.readBoolean(), this._notEnoughActivityPoints = e.readBoolean(), e.bytesAvailable && (this._activityPointType = e.readInt()), !0) : !1
    }
    get notEnoughCredits()
    {
        return this._notEnoughCredits
    }
    get notEnoughActivityPoints()
    {
        return this._notEnoughActivityPoints
    }
    get activityPointType()
    {
        return this._activityPointType
    }
}
class j0 {
    flush()
    {
        return this._offer = null, !0
    }
    parse(e)
    {
        return e ? (this._offer = new Nd(e), !0) : !1
    }
    get offer()
    {
        return this._offer
    }
}
class W0 {
    flush()
    {
        return this._code = 0, !0
    }
    parse(e)
    {
        return e ? (this._code = e.readInt(), !0) : !1
    }
    get code()
    {
        return this._code
    }
}
class Y0 {
    flush()
    {
        return this._code = 0, !0
    }
    parse(e)
    {
        return e ? (this._code = e.readInt(), !0) : !1
    }
    get code()
    {
        return this._code
    }
}
class z0 {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._offerId = -1, this._localizationId = null, this._rent = !1, this._priceCredits = 0, this._priceActivityPoints = 0, this._priceActivityPointsType = 0, this._clubLevel = 0, this._giftable = !1, this._bundlePurchaseAllowed = !1, this._products = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._offerId = e.readInt(),
        this._localizationId = e.readString(),
        this._rent = e.readBoolean(),
        this._priceCredits = e.readInt(),
        this._priceActivityPoints = e.readInt(),
        this._priceActivityPointsType = e.readInt(),
        this._giftable = e.readBoolean();
        let t = e.readInt();
        for (; t > 0;)
            this._products.push(new oi(e)),
            t--;
        return this._clubLevel = e.readInt(), this._bundlePurchaseAllowed = e.readBoolean(), !0
    }
    get offerId()
    {
        return this._offerId
    }
    get localizationId()
    {
        return this._localizationId
    }
    get rent()
    {
        return this._rent
    }
    get priceCredits()
    {
        return this._priceCredits
    }
    get priceActivityPoints()
    {
        return this._priceActivityPoints
    }
    get priceActivityPointsType()
    {
        return this._priceActivityPointsType
    }
    get clubLevel()
    {
        return this._clubLevel
    }
    get giftable()
    {
        return this._giftable
    }
    get bundlePurchaseAllowed()
    {
        return this._bundlePurchaseAllowed
    }
    get products()
    {
        return this._products
    }
}
class K0 {
    flush()
    {
        return this._offer = null, !0
    }
    parse(e)
    {
        return e ? (this._offer = new z0(e), !0) : !1
    }
    get offer()
    {
        return this._offer
    }
}
class q0 {
    flush()
    {
        return this._clubLevel = 0, this._securityLevel = 0, this._isAmbassador = !1, !0
    }
    parse(e)
    {
        return e ? (this._clubLevel = e.readInt(), this._securityLevel = e.readInt(), this._isAmbassador = e.readBoolean(), !0) : !1
    }
    get clubLevel()
    {
        return this._clubLevel
    }
    get securityLevel()
    {
        return this._securityLevel
    }
    get isAmbassador()
    {
        return this._isAmbassador
    }
}
class yd {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._status = e.readInt(), !0) : !1
    }
    get status()
    {
        return this._status
    }
}
yd.SAFETY_LOCK_STATUS_LOCKED = 0;
yd.SAFETY_LOCK_STATUS_UNLOCKED = 1;
class X0 {
    flush()
    {
        return this._result = -1, this._validationInfo = "", !0
    }
    parse(e)
    {
        return e ? (this._result = e.readInt(), this._validationInfo = e.readString(), !0) : !1
    }
    get result()
    {
        return this._result
    }
    get validationInfo()
    {
        return this._validationInfo
    }
}
class AR {
    flush()
    {
        return this._result = -1, !0
    }
    parse(e)
    {
        return e ? (this._result = e.readInt(), !0) : !1
    }
    get result()
    {
        return this._result
    }
}
AR.EMAIL_STATUS_OK = 0;
class Q0 {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._relationshipStatusType = sr.NONE, this._friendCount = 0, this._randomFriendId = 0, this._randomFriendFigure = null, this._randomFriendName = null, !0
    }
    parse(e)
    {
        return e ? (this._relationshipStatusType = e.readInt(), this._friendCount = e.readInt(), this._randomFriendId = e.readInt(), this._randomFriendName = e.readString(), this._randomFriendFigure = e.readString(), !0) : !1
    }
    get relationshipStatusType()
    {
        return this._relationshipStatusType
    }
    get friendCount()
    {
        return this._friendCount
    }
    get randomFriendId()
    {
        return this._randomFriendId
    }
    get randomFriendName()
    {
        return this._randomFriendName
    }
    get randomFriendFigure()
    {
        return this._randomFriendFigure
    }
}
class J0 {
    flush()
    {
        return this._userId = 0, this._relationshipStatusMap = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._userId = e.readInt(),
        this._relationshipStatusMap = new as;
        const t = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = new Q0(e);
            this._relationshipStatusMap.add(i.relationshipStatusType, i)
        }
        return !0
    }
    get userId()
    {
        return this._userId
    }
    get relationshipStatusMap()
    {
        return this._relationshipStatusMap
    }
}
class Z0 {
    flush()
    {
        return this._userId = null, this._badges = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._userId = e.readInt();
        let t = e.readInt();
        for (; t > 0;) {
            e.readInt();
            const r = e.readString();
            this._badges.push(r),
            t--
        }
        return !0
    }
    get userId()
    {
        return this._userId
    }
    get badges()
    {
        return this._badges
    }
}
class $0 {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._userId = 0, this._username = null, this._figure = null, this._gender = null, this._motto = null, this._realName = null, this._directMail = !1, this._respectsReceived = 0, this._respectsRemaining = 0, this._respectsPetRemaining = 0, this._streamPublishingAllowed = !1, this._lastAccessDate = null, this._canChangeName = !1, this._safetyLocked = !1, !0
    }
    parse(e)
    {
        return e ? (this._userId = e.readInt(), this._username = e.readString(), this._figure = e.readString(), this._gender = e.readString(), this._motto = e.readString(), this._realName = e.readString(), this._directMail = e.readBoolean(), this._respectsReceived = e.readInt(), this._respectsRemaining = e.readInt(), this._respectsPetRemaining = e.readInt(), this._streamPublishingAllowed = e.readBoolean(), this._lastAccessDate = e.readString(), this._canChangeName = e.readBoolean(), this._safetyLocked = e.readBoolean(), !0) : !1
    }
    get userId()
    {
        return this._userId
    }
    get username()
    {
        return this._username
    }
    get figure()
    {
        return this._figure
    }
    get gender()
    {
        return this._gender
    }
    get motto()
    {
        return this._motto
    }
    get realName()
    {
        return this._realName
    }
    get directMail()
    {
        return this._directMail
    }
    get respectsReceived()
    {
        return this._respectsReceived
    }
    get respectsRemaining()
    {
        return this._respectsRemaining
    }
    get respectsPetRemaining()
    {
        return this._respectsPetRemaining
    }
    get streamPublishingAllowed()
    {
        return this._streamPublishingAllowed
    }
    get lastAccessedDate()
    {
        return this._lastAccessDate
    }
    get canChangeName()
    {
        return this._canChangeName
    }
    get safetyLocked()
    {
        return this._safetyLocked
    }
}
class ew {
    flush()
    {
        return this._userInfo = null, !0
    }
    parse(e)
    {
        return !(!e || (this._userInfo = new $0(e), !this._userInfo))
    }
    get userInfo()
    {
        return this._userInfo
    }
}
class tw {
    flush()
    {
        return this._webId = -1, this._id = -1, this._newName = "", !0
    }
    parse(e)
    {
        return e ? (this._webId = e.readInt(), this._id = e.readInt(), this._newName = e.readString(), !0) : !1
    }
    get webId()
    {
        return this._webId
    }
    get id()
    {
        return this._id
    }
    get newName()
    {
        return this._newName
    }
}
class NR {
    constructor(e)
    {
        this._groupId = e.readInt(),
        this._groupName = e.readString(),
        this._badgeCode = e.readString(),
        this._colorA = e.readString(),
        this._colorB = e.readString(),
        this._favourite = e.readBoolean(),
        this._ownerId = e.readInt(),
        this._hasForum = e.readBoolean()
    }
    get groupId()
    {
        return this._groupId
    }
    get groupName()
    {
        return this._groupName
    }
    get badgeCode()
    {
        return this._badgeCode
    }
    get colorA()
    {
        return this._colorA
    }
    get colorB()
    {
        return this._colorB
    }
    get favourite()
    {
        return this._favourite
    }
    get ownerId()
    {
        return this._ownerId
    }
    get hasForum()
    {
        return this._hasForum
    }
}
class sw {
    flush()
    {
        return this._id = 0, this._username = null, this._figure = null, this._motto = null, this._registration = null, this._achievementPoints = 0, this._friendsCount = 0, this._isMyFriend = !1, this._requestSent = !1, this._isOnline = !1, this._groups = [], this._secondsSinceLastVisit = 0, this._openProfileWindow = !1, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._id = e.readInt(),
        this._username = e.readString(),
        this._figure = e.readString(),
        this._motto = e.readString(),
        this._registration = e.readString(),
        this._achievementPoints = e.readInt(),
        this._friendsCount = e.readInt(),
        this._isMyFriend = e.readBoolean(),
        this._requestSent = e.readBoolean(),
        this._isOnline = e.readBoolean();
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._groups.push(new NR(e));
        return this._secondsSinceLastVisit = e.readInt(), this._openProfileWindow = e.readBoolean(), !0
    }
    get id()
    {
        return this._id
    }
    get username()
    {
        return this._username
    }
    get figure()
    {
        return this._figure
    }
    get motto()
    {
        return this._motto
    }
    get registration()
    {
        return this._registration
    }
    get achievementPoints()
    {
        return this._achievementPoints
    }
    get friendsCount()
    {
        return this._friendsCount
    }
    get isMyFriend()
    {
        return this._isMyFriend
    }
    get requestSent()
    {
        return this._requestSent
    }
    get isOnline()
    {
        return this._isOnline
    }
    get groups()
    {
        return this._groups
    }
    get secondsSinceLastVisit()
    {
        return this._secondsSinceLastVisit
    }
    get openProfileWindow()
    {
        return this._openProfileWindow
    }
}
class rw {
    flush()
    {
        return this._volumeSystem = 0, this._volumeFurni = 0, this._volumeTrax = 0, this._oldChat = !1, this._roomInvites = !1, this._cameraFollow = !1, this._flags = 0, this._chatType = 0, !0
    }
    parse(e)
    {
        return e ? (this._volumeSystem = e.readInt(), this._volumeFurni = e.readInt(), this._volumeTrax = e.readInt(), this._oldChat = e.readBoolean(), this._roomInvites = e.readBoolean(), this._cameraFollow = e.readBoolean(), this._flags = e.readInt(), this._chatType = e.readInt(), !0) : !1
    }
    get volumeSystem()
    {
        return this._volumeSystem
    }
    get volumeFurni()
    {
        return this._volumeFurni
    }
    get volumeTrax()
    {
        return this._volumeTrax
    }
    get oldChat()
    {
        return this._oldChat
    }
    get roomInvites()
    {
        return this._roomInvites
    }
    get cameraFollow()
    {
        return this._cameraFollow
    }
    get flags()
    {
        return this._flags
    }
    get chatType()
    {
        return this._chatType
    }
}
class iw {
    flush()
    {
        return this._roomUnitId = -1, this._tags = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._roomUnitId = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._tags.push(e.readString()),
            t--;
        return !0
    }
    get roomUnitId()
    {
        return this._roomUnitId
    }
    get tags()
    {
        return this._tags
    }
}
class nw {
    flush()
    {
        return this._email = null, this._isVerified = !1, this._allowChange = !1, !0
    }
    parse(e)
    {
        return e ? (this._email = e.readString(), this._isVerified = e.readBoolean(), this._allowChange = e.readBoolean(), !0) : !1
    }
    get email()
    {
        return this._email
    }
    get isVerified()
    {
        return this._isVerified
    }
    get allowChange()
    {
        return this._allowChange
    }
}
class aw {
    flush()
    {
        return this._userId = -1, !0
    }
    parse(e)
    {
        return e ? (this._userId = e.readInt(), !0) : !1
    }
    get userId()
    {
        return this._userId
    }
}
class ow {
    flush()
    {
        return this._groupId = -1, !0
    }
    parse(e)
    {
        return e ? (this._groupId = e.readInt(), !0) : !1
    }
    get groupId()
    {
        return this._groupId
    }
}
class lw {
    flush()
    {
        return this._groupId = -1, this._requester = null, !0
    }
    parse(e)
    {
        return e ? (this._groupId = e.readInt(), this._requester = new tc(e), !0) : !1
    }
    get groupId()
    {
        return this._groupId
    }
    get requester()
    {
        return this._requester
    }
}
class yR {
    flush()
    {
        return this._reason = -1, !0
    }
    parse(e)
    {
        return e ? (this._reason = e.readInt(), !0) : !1
    }
    get reason()
    {
        return this._reason
    }
}
yR.INSUFFICIENT_SUBSCRIPTION_LEVEL = 2;
class cw {
    flush()
    {
        return this._guildId = -1, this._reason = -1, !0
    }
    parse(e)
    {
        return e ? (this._guildId = e.readInt(), this._reason = e.readInt(), !0) : !1
    }
    get guildId()
    {
        return this._guildId
    }
    get reason()
    {
        return this._reason
    }
}
class uw {
    flush()
    {
        return this._groups = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._groups.push(new NR(e)),
            t--;
        return !0
    }
    get groups()
    {
        return this._groups
    }
}
class hw {
    flush()
    {
        return this._badges = new Map, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const r = e.readInt(),
                i = e.readString();
            this._badges.set(r, i),
            t--
        }
        return !0
    }
    get badges()
    {
        return this._badges
    }
}
class MR {
    flush()
    {
        return this._reason = -1, !0
    }
    parse(e)
    {
        return e ? (this._reason = e.readInt(), !0) : !1
    }
    get reason()
    {
        return this._reason
    }
}
MR.INSUFFICIENT_SUBSCRIPTION_LEVEL = 4;
class dw {
    flush()
    {
        return this._ignoredUsers = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._ignoredUsers = [];
        let t = e.readInt();
        for (; t > 0;)
            this._ignoredUsers.push(e.readString()),
            t--;
        return !0
    }
    get ignoredUsers()
    {
        return this._ignoredUsers
    }
}
class _w {
    flush()
    {
        return this._result = -1, this._name = null, !0
    }
    parse(e)
    {
        return e ? (this._result = e.readInt(), this._name = e.readString(), !0) : !1
    }
    get result()
    {
        return this._result
    }
    get name()
    {
        return this._name
    }
}
class gw {
    flush()
    {
        return this._link = null, !0
    }
    parse(e)
    {
        return e ? (this._link = e.readString(), !0) : !1
    }
    get link()
    {
        return this._link
    }
}
class fw {
    flush()
    {
        return this._credits = null, !0
    }
    parse(e)
    {
        return e ? (this._credits = e.readString(), !0) : !1
    }
    get credits()
    {
        return this._credits
    }
}
class mw {
    flush()
    {
        return this._currencies = new Map, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._currencies.set(e.readInt(), e.readInt()),
            t--;
        return !0
    }
    get currencies()
    {
        return this._currencies
    }
}
class Jl {
    flush()
    {
        return this._productName = null, this._daysToPeriodEnd = 0, this._memberPeriods = 0, this._periodsSubscribedAhead = 0, this._responseType = 0, this._hasEverBeenMember = !1, this._isVip = !1, this._pastClubDays = 0, this._pastVipDays = 0, this._minutesUntilExpiration = 0, this._minutesSinceLastModified = 0, !0
    }
    parse(e)
    {
        return e ? (this._productName = e.readString(), this._daysToPeriodEnd = e.readInt(), this._memberPeriods = e.readInt(), this._periodsSubscribedAhead = e.readInt(), this._responseType = e.readInt(), this._hasEverBeenMember = e.readBoolean(), this._isVip = e.readBoolean(), this._pastClubDays = e.readInt(), this._pastVipDays = e.readInt(), this._minutesUntilExpiration = e.readInt(), e.bytesAvailable && (this._minutesSinceLastModified = e.readInt()), !0) : !1
    }
    get productName()
    {
        return this._productName
    }
    get daysToPeriodEnd()
    {
        return this._daysToPeriodEnd
    }
    get memberPeriods()
    {
        return this._memberPeriods
    }
    get periodsSubscribedAhead()
    {
        return this._periodsSubscribedAhead
    }
    get responseType()
    {
        return this._responseType
    }
    get hasEverBeenMember()
    {
        return this._hasEverBeenMember
    }
    get isVip()
    {
        return this._isVip
    }
    get pastClubDays()
    {
        return this._pastClubDays
    }
    get pastVipDays()
    {
        return this._pastVipDays
    }
    get minutesUntilExpiration()
    {
        return this._minutesUntilExpiration
    }
    get minutesSinceLastModified()
    {
        return this._minutesSinceLastModified
    }
}
Jl.RESPONSE_TYPE_LOGIN = 1;
Jl.RESPONSE_TYPE_PURCHASE = 2;
Jl.RESPONSE_TYPE_DISCOUNT_AVAILABLE = 3;
Jl.RESPONSE_TYPE_CITIZENSHIP_DISCOUNT = 4;
class Zl {
    constructor(e)
    {
        if (this._unseen = 0, !e)
            throw new Error("invalid_parser");
        this._achievementId = e.readInt(),
        this._level = e.readInt(),
        this._badgeId = e.readString(),
        this._scoreAtStartOfLevel = e.readInt(),
        this._scoreLimit = Math.max(1, e.readInt()),
        this._levelRewardPoints = e.readInt(),
        this._levelRewardPointType = e.readInt(),
        this._currentPoints = e.readInt(),
        this._finalLevel = e.readBoolean(),
        this._category = e.readString(),
        this._subCategory = e.readString(),
        this._levelCount = e.readInt(),
        this._displayMethod = e.readInt()
    }
    get achievementId()
    {
        return this._achievementId
    }
    get badgeId()
    {
        return this._badgeId
    }
    get level()
    {
        return this._level
    }
    get scoreAtStartOfLevel()
    {
        return this._scoreAtStartOfLevel
    }
    get scoreLimit()
    {
        return this._scoreLimit - this._scoreAtStartOfLevel
    }
    get levelRewardPoints()
    {
        return this._levelRewardPoints
    }
    get levelRewardPointType()
    {
        return this._levelRewardPointType
    }
    get currentPoints()
    {
        return this._currentPoints - this._scoreAtStartOfLevel
    }
    get finalLevel()
    {
        return this._finalLevel
    }
    get category()
    {
        return this._category
    }
    get subCategory()
    {
        return this._subCategory
    }
    get levelCount()
    {
        return this._levelCount
    }
    get firstLevelAchieved()
    {
        return this._level > 1 || this._finalLevel
    }
    setMaxProgress()
    {
        this._currentPoints = this._scoreLimit
    }
    get displayMethod()
    {
        return this._displayMethod
    }
    get progress()
    {
        return this._currentPoints
    }
    get toNextProgress()
    {
        return this._scoreLimit
    }
    set unseen(e)
    {
        this._unseen = e
    }
    get unseen()
    {
        return this._unseen
    }
    reset(e)
    {
        this._achievementId = e._achievementId,
        this._level = e._level,
        this._badgeId = e._badgeId,
        this._scoreAtStartOfLevel = e._scoreAtStartOfLevel,
        this._scoreLimit = e._scoreLimit,
        this._levelRewardPoints = e._levelRewardPoints,
        this._levelRewardPointType = e._levelRewardPointType,
        this._currentPoints = e._currentPoints,
        this._finalLevel = e._finalLevel,
        this._category = e.category,
        this._subCategory = e._subCategory,
        this._levelCount = e._levelCount,
        this._displayMethod = e._displayMethod
    }
}
Zl.DISPLAY_METHOD_OBSOLETE = -1;
Zl.DISPLAY_METHOD_SHOW_LEVEL_PROGRESS = 0;
Zl.DISPLAY_METHOD_NEVER_SHOW_PROGRESS = 1;
Zl.DISPLAY_METHOD_SHOW_TOTAL_PROGRESS = 2;
class Ew {
    flush()
    {
        return this._achievement = null, !0
    }
    parse(e)
    {
        return e ? (this._achievement = new Zl(e), !0) : !1
    }
    get achievement()
    {
        return this._achievement
    }
}
const bR = class {
    constructor(s)
    {
        this._achievementId = s.readInt(),
        this._level = s.readInt(),
        this._badgeId = s.readString(),
        this._requiredLevel = s.readInt(),
        this._state = s.readInt()
    }
    dispose()
    {
        this._achievementId = 0,
        this._level = 0,
        this._badgeId = "",
        this._requiredLevel = 0
    }
    get achievementId()
    {
        return this._achievementId
    }
    get level()
    {
        return this._level
    }
    get badgeId()
    {
        return this._badgeId
    }
    get requiredLevel()
    {
        return this._requiredLevel
    }
    get enabled()
    {
        return this._state === bR.STATE_SELECTABLE
    }
    get state()
    {
        return this._state
    }
}
;
let DR = bR;
DR.STATE_SELECTABLE = 0;
class pw {
    flush()
    {
        return this._achievements = [], this._defaultCategory = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._achievements = [];
        let t = e.readInt();
        for (; t > 0;)
            this._achievements.push(new Zl(e)),
            t--;
        return this._defaultCategory = e.readString(), !0
    }
    get achievements()
    {
        return this._achievements
    }
    get defaultCategory()
    {
        return this._defaultCategory
    }
}
class Iw {
    flush()
    {
        return this._score = 0, !0
    }
    parse(e)
    {
        return e ? (this._score = e.readInt(), !0) : !1
    }
    get score()
    {
        return this._score
    }
}
class Tw {
    get type()
    {
        return this._type
    }
    set type(e)
    {
        this._type = e
    }
    get subType()
    {
        return this._subType
    }
    set subType(e)
    {
        this._subType = e
    }
    get duration()
    {
        return this._duration
    }
    set duration(e)
    {
        this._duration = e
    }
    get inactiveEffectsInInventory()
    {
        return this._inactiveEffectsInInventory
    }
    set inactiveEffectsInInventory(e)
    {
        this._inactiveEffectsInInventory = e
    }
    get secondsLeftIfActive()
    {
        return this._secondsLeftIfActive
    }
    set secondsLeftIfActive(e)
    {
        this._secondsLeftIfActive = e
    }
    get isPermanent()
    {
        return this._permanent
    }
    set isPermanent(e)
    {
        this._permanent = e
    }
}
class Rw {
    flush()
    {
        return this._type = 0, this._duration = 0, this._isPermanent = !1, !0
    }
    parse(e)
    {
        return e ? (this._type = e.readInt(), this._duration = e.readInt(), this._isPermanent = e.readBoolean(), !0) : !1
    }
    get type()
    {
        return this._type
    }
    get duration()
    {
        return this._duration
    }
    get isPermanent()
    {
        return this._isPermanent
    }
}
class Ow {
    flush()
    {
        return this._type = 0, this._subType = 0, this._duration = 0, this._permanent = !1, !0
    }
    parse(e)
    {
        return e ? (this._type = e.readInt(), this._subType = e.readInt(), this._duration = e.readInt(), this._permanent = e.readBoolean(), !0) : !1
    }
    get type()
    {
        return this._type
    }
    get subType()
    {
        return this._subType
    }
    get duration()
    {
        return this._duration
    }
    get isPermanent()
    {
        return this._permanent
    }
}
class Sw {
    flush()
    {
        return this._type = 0, !0
    }
    parse(e)
    {
        return e ? (this._type = e.readInt(), !0) : !1
    }
    get type()
    {
        return this._type
    }
}
class Cw {
    flush()
    {
        return this._type = 0, !0
    }
    parse(e)
    {
        return e ? (this._type = e.readInt(), !0) : !1
    }
    get type()
    {
        return this._type
    }
}
class Aw {
    flush()
    {
        return this._effects = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const r = new Tw;
            r.type = e.readInt(),
            r.subType = e.readInt(),
            r.duration = e.readInt(),
            r.inactiveEffectsInInventory = e.readInt(),
            r.secondsLeftIfActive = e.readInt(),
            r.isPermanent = e.readBoolean(),
            this._effects.push(r),
            t--
        }
        return !0
    }
    get effects()
    {
        return this._effects
    }
}
class Nw {
    constructor(e, t)
    {
        if (!t)
            throw new Error("invalid_parser");
        this._badgeId = "ACH_" + e + t.readInt(),
        this._limit = t.readInt()
    }
    get badgeId()
    {
        return this._badgeId
    }
    get limit()
    {
        return this._limit
    }
}
class yw {
    flush()
    {
        return this._data = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const r = e.readString(),
                i = e.readInt();
            let n = 0;
            for (; n < i;)
                this._data.push(new Nw(r, e)),
                n++;
            t--
        }
        return !0
    }
    get data()
    {
        return this._data
    }
}
class Mw {
    flush()
    {
        return this._badgeId = 0, this._badgeCode = null, !0
    }
    parse(e)
    {
        return e ? (this._badgeId = e.readInt(), this._badgeCode = e.readString(), !0) : !1
    }
    get badgeId()
    {
        return this._badgeId
    }
    get badgeCode()
    {
        return this._badgeCode
    }
}
class bw {
    flush()
    {
        return this._allBadgeCodes = [], this._activeBadgeCodes = null, this._badgeIds = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._allBadgeCodes = [],
        this._activeBadgeCodes = [],
        this._badgeIds = new as;
        let t = e.readInt();
        for (; t > 0;) {
            const r = e.readInt(),
                i = e.readString();
            this._badgeIds.add(i, r),
            this._allBadgeCodes.push(i),
            t--
        }
        for (t = e.readInt(); t > 0;) {
            e.readInt();
            const r = e.readString();
            this._activeBadgeCodes.push(r),
            t--
        }
        return !0
    }
    getBadgeId(e)
    {
        return this._badgeIds.getValue(e)
    }
    getAllBadgeCodes()
    {
        return this._allBadgeCodes
    }
    getActiveBadgeCodes()
    {
        return this._activeBadgeCodes
    }
}
class Dw {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._requestCode = e.readString(), this._fulfilled = e.readBoolean(), !0) : !1
    }
    get requestCode()
    {
        return this._requestCode
    }
    get fulfilled()
    {
        return this._fulfilled
    }
}
class vw {
    flush()
    {
        return this._figureSetIds = [], this._boundFurnitureNames = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._figureSetIds.push(e.readInt()),
            t--;
        let r = e.readInt();
        for (; r > 0;)
            this._boundFurnitureNames.push(e.readString()),
            r--;
        return !0
    }
    get figureSetIds()
    {
        return this._figureSetIds
    }
    get boundsFurnitureNames()
    {
        return this._boundFurnitureNames
    }
}
class Fa {
    flush()
    {
        return this._reason = 0, this._parameter = "", !0
    }
    parse(e)
    {
        return e ? (this._reason = e.readInt(), this._parameter = e.readString(), !0) : !1
    }
    get reason()
    {
        return this._reason
    }
    get parameter()
    {
        return this._parameter
    }
}
Fa.REASON_FULL = 1;
Fa.REASON_CLOSED = 2;
Fa.REASON_QUEUE_ERROR = 3;
Fa.REASON_BANNED = 4;
class Pw {
    flush()
    {
        return this._userName = null, !0
    }
    parse(e)
    {
        return e ? (this._userName = e.readString(), !0) : !1
    }
    get userName()
    {
        return this._userName
    }
}
class Lw {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class Uw {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class ww {
    flush()
    {
        return this._controllerLevel = ct.NONE, !0
    }
    parse(e)
    {
        return e ? (this._controllerLevel = e.readInt(), !0) : !1
    }
    get controllerLevel()
    {
        return this._controllerLevel
    }
}
class Fw {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class xw {
    flush()
    {
        return this._roomId = 0, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
}
class Gw {
    flush()
    {
        return this._botId = -1, this._commandId = -1, this._data = "", !0
    }
    parse(e)
    {
        return e ? (this._botId = e.readInt(), this._commandId = e.readInt(), this._data = e.readString(), !0) : !1
    }
    get botId()
    {
        return this._botId
    }
    get commandId()
    {
        return this._commandId
    }
    get data()
    {
        return this._data
    }
}
class Bw {
    flush()
    {
        return this._botId = -1, !0
    }
    parse(e)
    {
        return e ? (this._botId = e.readInt(), !0) : !1
    }
    get botId()
    {
        return this._botId
    }
}
class kw {
    constructor(e)
    {
        this._id = e.readInt(),
        this._data = e.readString()
    }
    get id()
    {
        return this._id
    }
    get data()
    {
        return this._data
    }
}
class Vw {
    flush()
    {
        return this._botId = -1, this._skillList = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._botId = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._skillList.push(new kw(e)),
            t--;
        return !0
    }
    get botId()
    {
        return this._botId
    }
    get skillList()
    {
        return this._skillList
    }
}
class Hw {
    constructor(e)
    {
        this._userId = e.readInt(),
        this._userName = e.readString()
    }
    get userId()
    {
        return this._userId
    }
    get userName()
    {
        return this._userName
    }
}
class jw {
    flush()
    {
        return this._roomId = 0, this._bannedUsers = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._roomId = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._bannedUsers.push(new Hw(e)),
            t--;
        return !0
    }
    get roomId()
    {
        return this._roomId
    }
    get bannedUsers()
    {
        return this._bannedUsers
    }
}
class Ww {
    constructor(e)
    {
        this._userId = e.readInt(),
        this._userName = e.readString()
    }
    get userId()
    {
        return this._userId
    }
    get userName()
    {
        return this._userName
    }
    get selected()
    {
        return this._selected
    }
    set selected(e)
    {
        this._selected = e
    }
}
class Yw {
    flush()
    {
        return this._roomId = 0, this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._data = new Ww(e), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get data()
    {
        return this._data
    }
}
class zw {
    flush()
    {
        return this._roomId = 0, this._userId = 0, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._userId = e.readInt(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get userId()
    {
        return this._userId
    }
}
class Kw {
    flush()
    {
        return this._roomId = 0, this._users = new Map, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._roomId = e.readInt();
        let t = e.readInt();
        for (; t > 0;) {
            const r = e.readInt(),
                i = e.readString();
            this._users.set(r, i),
            t--
        }
        return !0
    }
    get roomId()
    {
        return this._roomId
    }
    get users()
    {
        return this._users
    }
}
class qw {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._isMuted = e.readBoolean(), !0) : !1
    }
    get isMuted()
    {
        return this._isMuted
    }
}
class Xw {
    flush()
    {
        return this._roomId = 0, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
}
class Tt {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._mode = e.readInt(),
        this._weight = e.readInt(),
        this._speed = e.readInt(),
        this._distance = e.readInt(),
        this._protection = e.readInt()
    }
    get mode()
    {
        return this._mode
    }
    get weight()
    {
        return this._weight
    }
    get speed()
    {
        return this._speed
    }
    get distance()
    {
        return this._distance
    }
    get protection()
    {
        return this._protection
    }
}
Tt.CHAT_MODE_FREE_FLOW = 0;
Tt.CHAT_MODE_LINE_BY_LINE = 1;
Tt.CHAT_BUBBLE_WIDTH_WIDE = 0;
Tt.CHAT_BUBBLE_WIDTH_NORMAL = 1;
Tt.CHAT_BUBBLE_WIDTH_THIN = 2;
Tt.CHAT_SCROLL_SPEED_FAST = 0;
Tt.CHAT_SCROLL_SPEED_NORMAL = 1;
Tt.CHAT_SCROLL_SPEED_SLOW = 2;
Tt.FLOOD_FILTER_STRICT = 0;
Tt.FLOOD_FILTER_NORMAL = 1;
Tt.FLOOD_FILTER_LOOSE = 2;
class Ns {
    constructor(e)
    {
        this._allowMute = e.readInt(),
        this._allowKick = e.readInt(),
        this._allowBan = e.readInt()
    }
    get allowMute()
    {
        return this._allowMute
    }
    get allowKick()
    {
        return this._allowKick
    }
    get allowBan()
    {
        return this._allowBan
    }
}
Ns.MODERATION_LEVEL_NONE = 0;
Ns.MODERATION_LEVEL_USER_WITH_RIGHTS = 1;
Ns.MODERATION_LEVEL_ALL = 2;
const Gn = class {
    constructor()
    {
        this._roomId = -1,
        this._name = null,
        this._description = null,
        this._doorMode = Gn.DOORMODE_OPEN,
        this._categoryId = -1,
        this._maximumVisitors = 0,
        this._maximumVisitorsLimit = 0,
        this._tags = [],
        this._tradeMode = Gn.TRADEMODE_NOT_ALLOWED,
        this._allowPets = !1,
        this._allowFoodConsume = !1,
        this._allowWalkThrough = !1,
        this._hideWalls = !1,
        this._wallThickness = 0,
        this._floorThickness = 0,
        this._controllersById = new Map,
        this._controllerList = null,
        this._highlightedUserId = -1,
        this._bannedUsersById = new Map,
        this._bannedUsersList = null,
        this._roomModerationSettings = null,
        this._chatSettings = null,
        this._allowNavigatorDynamicCats = !1
    }
    static from(s)
    {
        const e = new Gn;
        return e._roomId = s._roomId, e._name = s._name, e._description = s._description, e._doorMode = s._doorMode, e._categoryId = s._categoryId, e._maximumVisitors = s._maximumVisitors, e._maximumVisitorsLimit = s._maximumVisitorsLimit, e._tags = s._tags, e._tradeMode = s._tradeMode, e._allowPets = s._allowPets, e._allowFoodConsume = s._allowFoodConsume, e._allowWalkThrough = s._allowWalkThrough, e._hideWalls = s._hideWalls, e._wallThickness = s._wallThickness, e._floorThickness = s._floorThickness, e._controllersById = s._controllersById, e._controllerList = s._controllerList, e._highlightedUserId = s._highlightedUserId, e._bannedUsersById = s._bannedUsersById, e._bannedUsersList = s._bannedUsersList, e._roomModerationSettings = s._roomModerationSettings, e._chatSettings = s._chatSettings, e._allowNavigatorDynamicCats = s._allowNavigatorDynamicCats, e
    }
    static getDoorModeLocalizationKey(s)
    {
        switch (s) {
        case Gn.DOORMODE_OPEN:
            return "${navigator.door.mode.open}";
        case Gn.DOORMODE_CLOSED:
            return "${navigator.door.mode.closed}";
        case Gn.DOORMODE_PASSWORD:
            return "${navigator.door.mode.password}";
        case Gn.DOORMODE_INVISIBLE:
            return "${navigator.door.mode.invisible}";
        case Gn.DOORMODE_NOOBS_ONLY:
            return "${navigator.door.mode.noobs_only}"
        }
        return ""
    }
    get tradeMode()
    {
        return this._tradeMode
    }
    set tradeMode(s)
    {
        this._tradeMode = s
    }
    get allowPets()
    {
        return this._allowPets
    }
    set allowPets(s)
    {
        this._allowPets = s
    }
    get allowFoodConsume()
    {
        return this._allowFoodConsume
    }
    set allowFoodConsume(s)
    {
        this._allowFoodConsume = s
    }
    get allowWalkThrough()
    {
        return this._allowWalkThrough
    }
    set allowWalkThrough(s)
    {
        this._allowWalkThrough = s
    }
    get hideWalls()
    {
        return this._hideWalls
    }
    set hideWalls(s)
    {
        this._hideWalls = s
    }
    get wallThickness()
    {
        return this._wallThickness
    }
    set wallThickness(s)
    {
        this._wallThickness = s
    }
    get floorThickness()
    {
        return this._floorThickness
    }
    set floorThickness(s)
    {
        this._floorThickness = s
    }
    get roomId()
    {
        return this._roomId
    }
    set roomId(s)
    {
        this._roomId = s
    }
    get name()
    {
        return this._name
    }
    set name(s)
    {
        this._name = s
    }
    get description()
    {
        return this._description
    }
    set description(s)
    {
        this._description = s
    }
    get doorMode()
    {
        return this._doorMode
    }
    set doorMode(s)
    {
        this._doorMode = s
    }
    get categoryId()
    {
        return this._categoryId
    }
    set categoryId(s)
    {
        this._categoryId = s
    }
    get maximumVisitors()
    {
        return this._maximumVisitors
    }
    set maximumVisitors(s)
    {
        this._maximumVisitors = s
    }
    get maximumVisitorsLimit()
    {
        return this._maximumVisitorsLimit
    }
    set maximumVisitorsLimit(s)
    {
        this._maximumVisitorsLimit = s
    }
    get tags()
    {
        return this._tags
    }
    set tags(s)
    {
        this._tags = s
    }
    setFlatController(s, e)
    {
        this._controllersById.set(s, e),
        this._controllerList = null,
        this._highlightedUserId = s
    }
    get roomModerationSettings()
    {
        return this._roomModerationSettings
    }
    set roomModerationSettings(s)
    {
        this._roomModerationSettings = s
    }
    get controllersById()
    {
        return this._controllersById
    }
    set controllersById(s)
    {
        this._controllersById = s
    }
    get controllerList()
    {
        if (!this._controllerList) {
            this._controllerList = [];
            for (const s of this._controllersById.values())
                this._controllerList.push(s);
            this._controllerList.sort((s, e) => s.userName.localeCompare(e.userName))
        }
        return this._controllerList
    }
    get highlightedUserId()
    {
        return this._highlightedUserId
    }
    setBannedUser(s, e)
    {
        this._bannedUsersById.set(s, e),
        this._bannedUsersList = null
    }
    get bannedUsersById()
    {
        return this._bannedUsersById
    }
    get bannedUsersList()
    {
        if (!this._bannedUsersList) {
            this._bannedUsersList = [];
            for (const s of this._bannedUsersById.values())
                this._bannedUsersList.push(s);
            this._bannedUsersList.sort((s, e) => s.userName.localeCompare(e.userName))
        }
        return this._bannedUsersList
    }
    get chatSettings()
    {
        return this._chatSettings
    }
    set chatSettings(s)
    {
        this._chatSettings = s
    }
    get allowNavigatorDynamicCats()
    {
        return this._allowNavigatorDynamicCats
    }
    set allowNavigatorDynamicCats(s)
    {
        this._allowNavigatorDynamicCats = s
    }
}
;
let ca = Gn;
ca.DOORMODE_OPEN = 0;
ca.DOORMODE_CLOSED = 1;
ca.DOORMODE_PASSWORD = 2;
ca.DOORMODE_INVISIBLE = 3;
ca.DOORMODE_NOOBS_ONLY = 4;
ca.TRADEMODE_NOT_ALLOWED = 0;
ca.TRADEMODE_WITH_CONTROLLER = 1;
ca.TRADEMODE_ALLOWED = 2;
class Qw {
    flush()
    {
        return this._roomSettingsData = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._roomSettingsData = new ca,
        this._roomSettingsData.roomId = e.readInt(),
        this._roomSettingsData.name = e.readString(),
        this._roomSettingsData.description = e.readString(),
        this._roomSettingsData.doorMode = e.readInt(),
        this._roomSettingsData.categoryId = e.readInt(),
        this._roomSettingsData.maximumVisitors = e.readInt(),
        this._roomSettingsData.maximumVisitorsLimit = e.readInt(),
        this._roomSettingsData.tags = [];
        let t = e.readInt();
        for (; t > 0;)
            this._roomSettingsData.tags.push(e.readString()),
            t--;
        return this._roomSettingsData.tradeMode = e.readInt(), this._roomSettingsData.allowPets = e.readInt() === 1, this._roomSettingsData.allowFoodConsume = e.readInt() === 1, this._roomSettingsData.allowWalkThrough = e.readInt() === 1, this._roomSettingsData.hideWalls = e.readInt() === 1, this._roomSettingsData.wallThickness = e.readInt(), this._roomSettingsData.floorThickness = e.readInt(), this._roomSettingsData.chatSettings = new Tt(e), this._roomSettingsData.allowNavigatorDynamicCats = e.readBoolean(), this._roomSettingsData.roomModerationSettings = new Ns(e), !0
    }
    get data()
    {
        return this._roomSettingsData
    }
}
class Jw {
    flush()
    {
        return this._roomId = 0, this._code = 0, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._code = e.readInt(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get code()
    {
        return this._code
    }
}
class Zw {
    flush()
    {
        return this._roomId = 0, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
}
class Tr {
    flush()
    {
        return this._roomId = 0, this._code = 0, this._message = null, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._code = e.readInt(), this._message = e.readString(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get code()
    {
        return this._code
    }
    get message()
    {
        return this._message
    }
}
Tr.ERROR_ROOM_NOT_FOUND = 1;
Tr.ERROR_NOT_OWNER = 2;
Tr.ERROR_INVALID_DOOR_MODE = 3;
Tr.ERROR_INVALID_USER_LIMIT = 4;
Tr.ERROR_INVALID_PASSWORD = 5;
Tr.ERROR_INVALID_CATEGORY = 6;
Tr.ERROR_INVALID_NAME = 7;
Tr.ERROR_UNACCEPTABLE_NAME = 8;
Tr.ERROR_INVALID_DESCRIPTION = 9;
Tr.ERROR_UNACCEPTABLE_DESCRIPTION = 10;
Tr.ERROR_INVALID_TAG = 11;
Tr.ERROR_NON_USER_CHOOSABLE_TAG = 12;
Tr.ERROR_TOO_MANY_CHARACTERS_IN_TAG = 13;
class $w {
    flush()
    {
        return this._selectionType = 0, !0
    }
    parse(e)
    {
        return e ? (this._selectionType = e.readInt(), !0) : !1
    }
    get selectionType()
    {
        return this._selectionType
    }
}
class e1 {
    flush()
    {
        return this._roomId = 0, this._userId = 0, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._userId = e.readInt(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get userId()
    {
        return this._userId
    }
}
class t1 {
    flush()
    {
        return this._chat = null, !0
    }
    parse(e)
    {
        return e ? (this._chat = new Tt(e), !0) : !1
    }
    get chat()
    {
        return this._chat
    }
}
const Eo = class {
    constructor(s)
    {
        if (!s)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(s)
    }
    flush()
    {
        return this._roomId = 0, this._roomName = null, this._ownerId = 0, this._ownerName = null, this._doorMode = 0, this._userCount = 0, this._maxUserCount = 0, this._description = null, this._tradeMode = 2, this._score = 0, this._ranking = 0, this._categoryId = 0, this._totalStars = 0, this._groupId = 0, this._groupName = null, this._groupBadge = null, this._tags = [], this._bitMask = 0, this._thumbnail = null, this._allowPets = !1, this._showOwner = !0, this._displayAd = !1, this._adName = null, this._adDescription = null, this._adExpiresIn = 0, this._allInRoomMuted = !1, this._canMute = !1, this._officialRoomPicRef = null, !0
    }
    parse(s)
    {
        return s ? (this._roomId = s.readInt(), this._roomName = s.readString(), this._ownerId = s.readInt(), this._ownerName = s.readString(), this._doorMode = s.readInt(), this._userCount = s.readInt(), this._maxUserCount = s.readInt(), this._description = s.readString(), this._tradeMode = s.readInt(), this._score = s.readInt(), this._ranking = s.readInt(), this._categoryId = s.readInt(), this.parseTags(s), this.parseBitMask(s), !0) : !1
    }
    parseTags(s)
    {
        if (!s)
            return !1;
        this._tags = [];
        let e = s.readInt();
        for (; e > 0;)
            this._tags.push(s.readString()),
            e--;
        return !0
    }
    parseBitMask(s)
    {
        return s ? (this._bitMask = s.readInt(), this._bitMask & Eo.THUMBNAIL_BITMASK && (this._officialRoomPicRef = s.readString()), this._bitMask & Eo.GROUPDATA_BITMASK && (this._groupId = s.readInt(), this._groupName = s.readString(), this._groupBadge = s.readString()), this._bitMask & Eo.ROOMAD_BITMASK && (this._adName = s.readString(), this._adDescription = s.readString(), this._adExpiresIn = s.readInt()), this._showOwner = (this._bitMask & Eo.SHOWOWNER_BITMASK) > 0, this._allowPets = (this._bitMask & Eo.ALLOW_PETS_BITMASK) > 0, this._displayAd = (this._bitMask & Eo.DISPLAY_ROOMAD_BITMASK) > 0, this._thumbnail = null, !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get roomName()
    {
        return this._roomName
    }
    set roomName(s)
    {
        this._roomName = s
    }
    get ownerId()
    {
        return this._ownerId
    }
    get ownerName()
    {
        return this._ownerName
    }
    get doorMode()
    {
        return this._doorMode
    }
    get userCount()
    {
        return this._userCount
    }
    get maxUserCount()
    {
        return this._maxUserCount
    }
    get description()
    {
        return this._description
    }
    get tradeMode()
    {
        return this._tradeMode
    }
    get score()
    {
        return this._score
    }
    get ranking()
    {
        return this._ranking
    }
    get categoryId()
    {
        return this._categoryId
    }
    get tags()
    {
        return this._tags
    }
    get officialRoomPicRef()
    {
        return this._officialRoomPicRef
    }
    get habboGroupId()
    {
        return this._groupId
    }
    get groupName()
    {
        return this._groupName
    }
    get groupBadgeCode()
    {
        return this._groupBadge
    }
    get roomAdName()
    {
        return this._adName
    }
    get roomAdDescription()
    {
        return this._adDescription
    }
    get roomAdExpiresInMin()
    {
        return this._adExpiresIn
    }
    get showOwner()
    {
        return this._showOwner
    }
    get allowPets()
    {
        return this._allowPets
    }
    get displayRoomEntryAd()
    {
        return this._displayAd
    }
    get canMute()
    {
        return this._canMute
    }
    set canMute(s)
    {
        this._canMute = s
    }
    get allInRoomMuted()
    {
        return this._allInRoomMuted
    }
    set allInRoomMuted(s)
    {
        this._allInRoomMuted = s
    }
}
;
let nt = Eo;
nt.THUMBNAIL_BITMASK = 1;
nt.GROUPDATA_BITMASK = 2;
nt.ROOMAD_BITMASK = 4;
nt.SHOWOWNER_BITMASK = 8;
nt.ALLOW_PETS_BITMASK = 16;
nt.DISPLAY_ROOMAD_BITMASK = 32;
nt.OPEN_STATE = 0;
nt.DOORBELL_STATE = 1;
nt.PASSWORD_STATE = 2;
nt.INVISIBLE_STATE = 3;
nt.NOOB_STATE = 4;
class s1 {
    flush()
    {
        return this._roomId = 0, this._isOwner = !1, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._isOwner = e.readBoolean(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get isOwner()
    {
        return this._isOwner
    }
}
class r1 {
    flush()
    {
        return this._totalLikes = 0, this._canLike = !1, !0
    }
    parse(e)
    {
        return e ? (this._totalLikes = e.readInt(), this._canLike = e.readBoolean(), !0) : !1
    }
    get totalLikes()
    {
        return this._totalLikes
    }
    get canLike()
    {
        return this._canLike
    }
}
class i1 {
    flush()
    {
        return this._roomIndex = -1, this._groupId = -1, this._status = 0, this._groupName = null, !0
    }
    parse(e)
    {
        return e ? (this._roomIndex = e.readInt(), this._groupId = e.readInt(), this._status = e.readInt(), this._groupName = e.readString(), !0) : !1
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get groupId()
    {
        return this._groupId
    }
    get status()
    {
        return this._status
    }
    get groupName()
    {
        return this._groupName
    }
}
class n1 {
    constructor(e, t, r)
    {
        this._id = 0,
        this._state = 0,
        this._id = e,
        this._state = t,
        this._data = r
    }
    get id()
    {
        return this._id
    }
    get state()
    {
        return this._state
    }
    get data()
    {
        return this._data
    }
}
class a1 {
    flush()
    {
        return this._code = 0, !0
    }
    parse(e)
    {
        return e ? (this._code = e.readInt(), !0) : !1
    }
    get count()
    {
        return this._code
    }
}
class o1 {
    flush()
    {
        return this._itemId = 0, this._value = 0, !0
    }
    parse(e)
    {
        return e ? (this._itemId = e.readInt(), this._value = e.readInt(), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
    get value()
    {
        return this._value
    }
}
class Ja {
    flush()
    {
        return this._itemId = 0, this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._itemId = parseInt(e.readString()), this._data = Ja.parseObjectData(e), !0) : !1
    }
    static parseObjectData(e)
    {
        if (!e)
            return null;
        const t = Tn.getData(e.readInt());
        return t ? (t.parseWrapper(e), t) : null
    }
    get furnitureId()
    {
        return this._itemId
    }
    get objectData()
    {
        return this._data
    }
}
class lm {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._itemId = 0, this._spriteId = 0, this._spriteName = null, this._x = 0, this._y = 0, this._direction = 0, this._z = 0, this._stackHeight = 0, this._extra = 0, this._data = null, this._state = 0, this._expires = 0, this._usagePolicy = 0, this._userId = 0, this._username = null, !0
    }
    parse(e)
    {
        return e ? (this._itemId = e.readInt(), this._spriteId = e.readInt(), this._x = e.readInt(), this._y = e.readInt(), this._direction = e.readInt() % 8 * 45, this._z = parseFloat(e.readString()), this._stackHeight = parseFloat(e.readString()), this._extra = e.readInt(), this._data = Ja.parseObjectData(e), this._state = parseFloat(this._data && this._data.getLegacyString()) || 0, this._expires = e.readInt(), this._usagePolicy = e.readInt(), this._userId = e.readInt(), this._username = null, this._spriteId < 0 && (this._spriteName = e.readString()), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
    get spriteId()
    {
        return this._spriteId
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get direction()
    {
        return this._direction
    }
    get z()
    {
        return isNaN(this._z) ? 0 : this._z
    }
    get stackHeight()
    {
        return isNaN(this._stackHeight) ? 0 : this._stackHeight
    }
    get extra()
    {
        return this._extra
    }
    get data()
    {
        return this._data
    }
    get state()
    {
        return this._state
    }
    get expires()
    {
        return this._expires
    }
    get usagePolicy()
    {
        return this._usagePolicy
    }
    get userId()
    {
        return this._userId
    }
    get username()
    {
        return this._username
    }
    set username(e)
    {
        this._username = e
    }
    get spriteName()
    {
        return this._spriteName
    }
    set spriteName(e)
    {
        this._spriteName = e
    }
}
class l1 {
    flush()
    {
        return this._item = null, !0
    }
    parse(e)
    {
        return e ? (this._item = new lm(e), this._item.username = e.readString(), !0) : !1
    }
    get item()
    {
        return this._item
    }
}
class c1 {
    flush()
    {
        return this._owners = new Map, this._items = [], !0
    }
    parse(e)
    {
        if (!e || !this.parseOwners(e))
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const r = new lm(e);
            if (!r)
                continue;
            const i = this._owners.get(r.userId);
            i && (r.username = i),
            this._items.push(r),
            t--
        }
        return !0
    }
    parseOwners(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._owners.set(e.readInt(), e.readString()),
            t--;
        return !0
    }
    get owners()
    {
        return this._owners
    }
    get items()
    {
        return this._items
    }
}
class u1 {
    flush()
    {
        return this._itemId = 0, this._isExpired = !0, this._userId = 0, this._delay = 0, !0
    }
    parse(e)
    {
        return e ? (this._itemId = parseInt(e.readString()), this._isExpired = e.readBoolean(), this._userId = e.readInt(), this._delay = e.readInt(), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
    get isExpired()
    {
        return this._isExpired
    }
    get userId()
    {
        return this._userId
    }
    get delay()
    {
        return this._delay
    }
}
class h1 {
    flush()
    {
        return this._item = null, !0
    }
    parse(e)
    {
        return e ? (this._item = new lm(e), !0) : !1
    }
    get item()
    {
        return this._item
    }
}
class d1 {
    flush()
    {
        return this._isWallItem = !1, this._furniTypeName = null, this._buyout = !1, this._priceInCredits = -1, this._priceInActivityPoints = -1, this._activityPointType = -1, !0
    }
    parse(e)
    {
        return e ? (this._isWallItem = e.readBoolean(), this._furniTypeName = e.readString(), this._buyout = e.readBoolean(), this._priceInCredits = e.readInt(), this._priceInActivityPoints = e.readInt(), this._activityPointType = e.readInt(), !0) : !1
    }
    get isWallItem()
    {
        return this._isWallItem
    }
    get furniTypeName()
    {
        return this._furniTypeName
    }
    get buyout()
    {
        return this._buyout
    }
    get priceInCredits()
    {
        return this._priceInCredits
    }
    get priceInActivityPoints()
    {
        return this._priceInActivityPoints
    }
    get activityPointType()
    {
        return this._activityPointType
    }
}
class _1 {
    flush()
    {
        return this._aliases = new Map, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._aliases.set(e.readString(), e.readString()),
            t--;
        return !0
    }
    get aliases()
    {
        return this._aliases
    }
}
class g1 {
    flush()
    {
        return this._furniId = -1, this._height = 0, !0
    }
    parse(e)
    {
        return e ? (this._furniId = e.readInt(), this._height = e.readInt() / 100, !0) : !1
    }
    get furniId()
    {
        return this._furniId
    }
    get height()
    {
        return this._height
    }
}
class f1 {
    flush()
    {
        return this._objectId = 0, this._guildId = 0, this._guildName = null, this._guildHomeRoomId = 0, this._userIsMember = !1, this._guildHasReadableForum = !1, !0
    }
    parse(e)
    {
        return e ? (this._objectId = e.readInt(), this._guildId = e.readInt(), this._guildName = e.readString(), this._guildHomeRoomId = e.readInt(), this._userIsMember = e.readBoolean(), this._guildHasReadableForum = e.readBoolean(), !0) : !1
    }
    get objectId()
    {
        return this._objectId
    }
    get guildId()
    {
        return this._guildId
    }
    get guildName()
    {
        return this._guildName
    }
    get guildHomeRoomId()
    {
        return this._guildHomeRoomId
    }
    get userIsMember()
    {
        return this._userIsMember
    }
    get guildHasReadableForum()
    {
        return this._guildHasReadableForum
    }
}
class m1 {
    flush()
    {
        return this._itemId = 0, this._data = "", !0
    }
    parse(e)
    {
        return e ? (this._itemId = parseInt(e.readString()), this._data = e.readString(), !0) : !1
    }
    get furnitureId()
    {
        return this._itemId
    }
    get data()
    {
        return this._data
    }
}
class E1 {
    get furniId()
    {
        return this._furniId
    }
    flush()
    {
        return this._furniId = -1, !0
    }
    parse(e)
    {
        return this._furniId = e.readInt(), !0
    }
}
class p1 {
    get furniId()
    {
        return this._furniId
    }
    flush()
    {
        return this._furniId = -1, !0
    }
    parse(e)
    {
        return this._furniId = e.readInt(), !0
    }
}
class I1 {
    get furniId()
    {
        return this._furniId
    }
    get start()
    {
        return this._start
    }
    flush()
    {
        return this._furniId = -1, this._start = !1, !0
    }
    parse(e)
    {
        return this._furniId = e.readInt(), this._start = e.readBoolean(), !0
    }
}
class T1 {
    flush()
    {
        return this._itemId = 0, this._state = 0, !0
    }
    parse(e)
    {
        return e ? (this._itemId = e.readInt(), this._state = e.readInt(), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
    get state()
    {
        return this._state
    }
}
class R1 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._reason = e.readInt(), !0) : !1
    }
    get reason()
    {
        return this._reason
    }
}
class O1 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._expiryTime = e.readInt(), !0) : !1
    }
    get expiryTime()
    {
        return this._expiryTime
    }
}
class an {
    flush()
    {
        return this._rented = !1, this._renterId = -1, this._renterName = null, this._canRent = !1, this._canRentErrorCode = -1, this._timeRemaining = -1, this._price = -1, !0
    }
    parse(e)
    {
        return e ? (this._rented = e.readBoolean(), this._canRentErrorCode = e.readInt(), this._canRent = this._canRentErrorCode === 0, this._renterId = e.readInt(), this._renterName = e.readString(), this._timeRemaining = e.readInt(), this._price = e.readInt(), this._rented || (this._renterId = -1, this._renterName = ""), !0) : !1
    }
    get rented()
    {
        return this._rented
    }
    get renterId()
    {
        return this._renterId
    }
    get renterName()
    {
        return this._renterName
    }
    get canRent()
    {
        return this._canRent
    }
    get price()
    {
        return this._price
    }
    get timeRemaining()
    {
        return this._timeRemaining
    }
    get canRentErrorCode()
    {
        return this._canRentErrorCode
    }
}
an.SPACE_ALREADY_RENTED = 100;
an.SPACE_EXTEND_NOT_RENTED = 101;
an.SPACE_EXTEND_NOT_RENTED_BY_YOU = 102;
an.CAN_RENT_ONLY_ONE_SPACE = 103;
an.NOT_ENOUGH_CREDITS = 200;
an.NOT_ENOUGH_PIXELS = 201;
an.CANT_RENT_NO_PERMISSION = 202;
an.CANT_RENT_NO_HABBO_CLUB = 203;
an.CANT_RENT = 300;
an.CANT_RENT_GENERIC = 400;
class S1 {
    flush()
    {
        return this._itemId = -1, this._location = "", !0
    }
    parse(e)
    {
        return e ? (this._itemId = e.readInt(), this._location = e.readString(), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
    get location()
    {
        return this._location
    }
}
class C1 {
    constructor(e, t, r, i)
    {
        this.id = e,
        this.type = t,
        this.color = r,
        this.brightness = i
    }
}
class A1 {
    constructor()
    {
        this._selectedPresetId = 0,
        this._presets = []
    }
    flush()
    {
        return this._presets = [], !0
    }
    parse(e)
    {
        const t = e.readInt();
        this._selectedPresetId = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = e.readInt(),
                n = e.readInt(),
                o = parseInt(e.readString().substr(1), 16),
                l = e.readInt();
            this._presets.push(new C1(i, n, o, l))
        }
        return !0
    }
    getPreset(e)
    {
        return e < 0 || e >= this.presetCount ? null : this._presets[e]
    }
    get presetCount()
    {
        return this._presets.length
    }
    get selectedPresetId()
    {
        return this._selectedPresetId
    }
}
class N1 {
    flush()
    {
        return this._roomId = -1, this._roomName = null, this._messageCount = -1, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._roomName = e.readString(), this._messageCount = e.readInt(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get roomName()
    {
        return this._roomName
    }
    get messageCount()
    {
        return this._messageCount
    }
}
class cm {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._itemId = 0, this._spriteId = 0, this._location = null, this._stuffData = null, this._state = 0, this._secondsToExpiration = 0, this._usagePolicy = -1, this._userId = 0, this._username = null, this._width = 0, this._height = 0, this._localX = 0, this._localY = 0, this._y = 0, this._z = 0, this._direction = null, this._isOldFormat = !1, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._itemId = parseInt(e.readString()),
        this._spriteId = e.readInt(),
        this._location = e.readString(),
        this._stuffData = e.readString(),
        this._secondsToExpiration = e.readInt(),
        this._usagePolicy = e.readInt(),
        this._userId = e.readInt(),
        this._username = null;
        const t = parseFloat(this._stuffData);
        if (isNaN(t) || (this._state = Math.trunc(t)), this._location.indexOf(":") === 0) {
            this._isOldFormat = !1;
            let r = this._location.split(" ");
            if (r.length >= 3) {
                let i = r[0],
                    n = r[1];
                const o = r[2];
                if (i.length > 3 && n.length > 2 && (i = i.substr(3), n = n.substr(2), r = i.split(","), r.length >= 2)) {
                    const l = parseInt(r[0]),
                        c = parseInt(r[1]);
                    if (r = n.split(","), r.length >= 2) {
                        const u = parseInt(r[0]),
                            h = parseInt(r[1]);
                        this._width = l,
                        this._height = c,
                        this._localX = u,
                        this._localY = h,
                        this._direction = o
                    }
                }
            }
        } else
            this._isOldFormat = !0;
        return !0
    }
    get itemId()
    {
        return this._itemId
    }
    get spriteId()
    {
        return this._spriteId
    }
    get wallPosition()
    {
        return this._location
    }
    get stuffData()
    {
        return this._stuffData
    }
    get state()
    {
        return this._state
    }
    get secondsToExpiration()
    {
        return this._secondsToExpiration
    }
    get usagePolicy()
    {
        return this._usagePolicy
    }
    get userId()
    {
        return this._userId
    }
    get username()
    {
        return this._username
    }
    set username(e)
    {
        this._username = e
    }
    get width()
    {
        return this._width
    }
    get height()
    {
        return this._height
    }
    get localX()
    {
        return this._localX
    }
    get localY()
    {
        return this._localY
    }
    get direction()
    {
        return this._direction
    }
    get isOldFormat()
    {
        return this._isOldFormat
    }
}
class y1 {
    flush()
    {
        return this._item = null, !0
    }
    parse(e)
    {
        return e ? (this._item = new cm(e), this._item.username = e.readString(), !0) : !1
    }
    get item()
    {
        return this._item
    }
}
class M1 {
    flush()
    {
        return this._owners = new Map, this._items = [], !0
    }
    parse(e)
    {
        if (!e || !this.parseOwners(e))
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const r = new cm(e);
            if (!r)
                continue;
            const i = this._owners.get(r.userId);
            i && (r.username = i),
            this._items.push(r),
            t--
        }
        return !0
    }
    parseOwners(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._owners.set(e.readInt(), e.readString()),
            t--;
        return !0
    }
    get owners()
    {
        return this._owners
    }
    get items()
    {
        return this._items
    }
}
class b1 {
    flush()
    {
        return this._itemId = 0, this._userId = 0, !0
    }
    parse(e)
    {
        return e ? (this._itemId = parseInt(e.readString()), this._userId = e.readInt(), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
    get userId()
    {
        return this._userId
    }
}
class D1 {
    flush()
    {
        return this._item = null, !0
    }
    parse(e)
    {
        return e ? (this._item = new cm(e), !0) : !1
    }
    get item()
    {
        return this._item
    }
}
class v1 {
    flush()
    {
        return this._email = null, this._isVerified = !1, this._allowChange = !1, this._furniId = -1, this._requestedByUser = !1, !0
    }
    parse(e)
    {
        return e ? (this._email = e.readString(), this._isVerified = e.readBoolean(), this._allowChange = e.readBoolean(), this._furniId = e.readInt(), this._requestedByUser = e.readBoolean(), !0) : !1
    }
    get email()
    {
        return this._email
    }
    get isVerified()
    {
        return this._isVerified
    }
    get allowChange()
    {
        return this._allowChange
    }
    get furniId()
    {
        return this._furniId
    }
    get requestedByUser()
    {
        return this._requestedByUser
    }
}
class P1 {
    parse(e)
    {
        return this._furniId = e.readInt(), this._commandId = e.readInt(), !0
    }
    flush()
    {
        return this._furniId = -1, this._commandId = -1, !0
    }
    get furniId()
    {
        return this._furniId
    }
    get commandId()
    {
        return this._commandId
    }
}
class L1 {
    constructor(e, t, r)
    {
        this._video = e,
        this._title = t,
        this._description = r
    }
    get video()
    {
        return this._video
    }
    get title()
    {
        return this._title
    }
    get description()
    {
        return this._description
    }
}
class U1 {
    flush()
    {
        return this._furniId = -1, this._playlists = null, this._selectedPlaylistId = null, !0
    }
    parse(e)
    {
        this._furniId = e.readInt();
        const t = e.readInt();
        this._playlists = [];
        for (let r = 0; r < t; r++)
            this._playlists.push(new L1(e.readString(), e.readString(), e.readString()));
        return this._selectedPlaylistId = e.readString(), !0
    }
    get furniId()
    {
        return this._furniId
    }
    get playlists()
    {
        return this._playlists
    }
    get selectedPlaylistId()
    {
        return this._selectedPlaylistId
    }
}
class w1 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return this._furniId = e.readInt(), this._videoId = e.readString(), this._startAtSeconds = e.readInt(), this._endAtSeconds = e.readInt(), this._state = e.readInt(), !0
    }
    get furniId()
    {
        return this._furniId
    }
    get videoId()
    {
        return this._videoId
    }
    get state()
    {
        return this._state
    }
    get startAtSeconds()
    {
        return this._startAtSeconds
    }
    get endAtSeconds()
    {
        return this._endAtSeconds
    }
}
class F1 {
    flush()
    {
        return this._objects = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const r = e.readInt(),
                i = Ja.parseObjectData(e),
                n = parseFloat(i.getLegacyString());
            this._objects.push(new n1(r, n, i)),
            t--
        }
        return !0
    }
    get objects()
    {
        return this._objects
    }
}
class x1 {
    flush()
    {
        return this._rollerId = 0, this._itemsRolling = [], this._unitRolling = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = e.readInt(),
            r = e.readInt(),
            i = e.readInt(),
            n = e.readInt();
        let o = e.readInt();
        for (; o > 0;) {
            const d = e.readInt(),
                m = parseFloat(e.readString()),
                p = parseFloat(e.readString()),
                E = new Kn(d, new w(t, r, m), new w(i, n, p));
            this._itemsRolling.push(E),
            o--
        }
        if (this._rollerId = e.readInt(), !e.bytesAvailable)
            return !0;
        const l = e.readInt(),
            c = e.readInt(),
            u = parseFloat(e.readString()),
            h = parseFloat(e.readString());
        switch (l) {
        case 0:
            break;
        case 1:
            this._unitRolling = new Kn(c, new w(t, r, u), new w(i, n, h), Kn.MOVE);
            break;
        case 2:
            this._unitRolling = new Kn(c, new w(t, r, u), new w(i, n, h), Kn.SLIDE);
            break
        }
        return !0
    }
    get rollerId()
    {
        return this._rollerId
    }
    get itemsRolling()
    {
        return this._itemsRolling
    }
    get unitRolling()
    {
        return this._unitRolling
    }
}
const Eg = class {
    flush()
    {
        return this._model = null, this._width = 0, this._height = 0, this._wallHeight = -1, this._heightMap = [], this._scale = 64, this._model = null, !0
    }
    parse(s)
    {
        if (!s)
            return !1;
        const e = s.readBoolean(),
            t = s.readInt(),
            r = s.readString();
        return this.parseExplicitly(r, t, e)
    }
    parseModel(s, e, t=!0)
    {
        return this.parseExplicitly(s, e, t)
    }
    parseExplicitly(s, e, t=!0)
    {
        this._scale = t ? 32 : 64,
        this._wallHeight = e,
        this._model = s;
        const r = this._model.split("\r"),
            i = r.length;
        let n = 0,
            o = 0;
        for (; o < i;) {
            const l = r[o];
            l.length > n && (n = l.length),
            o++
        }
        for (this._heightMap = [], o = 0; o < i;) {
            const l = [];
            let c = 0;
            for (; c < n;)
                l.push(Eg.TILE_BLOCKED),
                c++;
            this._heightMap.push(l),
            o++
        }
        for (this._width = n, this._height = i, o = 0; o < i;) {
            const l = this._heightMap[o],
                c = r[o];
            if (c.length > 0) {
                let u = 0;
                for (; u < c.length;) {
                    const h = c.charAt(u);
                    let d = Eg.TILE_BLOCKED;
                    h !== "x" && h !== "X" && (d = parseInt(h, 36)),
                    l[u] = d,
                    u++
                }
            }
            o++
        }
        return !0
    }
    getHeight(s, e)
    {
        if (s < 0 || s >= this._width || e < 0 || e >= this._height)
            return -110;
        const t = this._heightMap[e];
        if (t === void 0)
            return -110;
        const r = t[s];
        return r === void 0 ? -110 : r
    }
    get model()
    {
        return this._model
    }
    get width()
    {
        return this._width
    }
    get height()
    {
        return this._height
    }
    get heightMap()
    {
        return this._heightMap
    }
    get wallHeight()
    {
        return this._wallHeight
    }
    get scale()
    {
        return this._scale
    }
}
;
let um = Eg;
um.TILE_BLOCKED = -110;
class G1 {
    flush()
    {
        return this._x = 0, this._y = 0, this._direction = 0, !0
    }
    parse(e)
    {
        return e ? (this._x = e.readInt(), this._y = e.readInt(), this._direction = e.readInt(), !0) : !1
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get direction()
    {
        return this._direction
    }
}
class xa {
    static decodeTileHeight(e)
    {
        return e < 0 ? -1 : (e & 16383) / 256
    }
    static decodeIsStackingBlocked(e)
    {
        return !!(e & 16384)
    }
    static decodeIsRoomTile(e)
    {
        return e >= 0
    }
    getTileHeight(e, t)
    {
        return e < 0 || e >= this._width || t < 0 || t >= this._height ? -1 : xa.decodeTileHeight(this._heights[t * this._width + e])
    }
    getStackingBlocked(e, t)
    {
        return e < 0 || e >= this._width || t < 0 || t >= this._height ? !0 : xa.decodeIsStackingBlocked(this._heights[t * this._width + e])
    }
    isRoomTile(e, t)
    {
        return e < 0 || e >= this._width || t < 0 || t >= this._height ? !1 : xa.decodeIsRoomTile(this._heights[t * this._width + e])
    }
    flush()
    {
        return this._width = 0, this._height = 0, this._heights = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._width = e.readInt();
        const t = e.readInt();
        this._height = t / this._width;
        let r = 0;
        for (; r < t;)
            this._heights[r] = e.readShort(),
            r++;
        return !0
    }
    get width()
    {
        return this._width
    }
    get height()
    {
        return this._height
    }
    get heights()
    {
        return this._heights
    }
}
class B1 {
    flush()
    {
        return this._wrapper = null, this._count = 0, this._x = 0, this._y = 0, this._value = 0, !0
    }
    tileHeight()
    {
        return xa.decodeTileHeight(this._value)
    }
    isStackingBlocked()
    {
        return xa.decodeIsStackingBlocked(this._value)
    }
    isRoomTile()
    {
        return xa.decodeIsRoomTile(this._value)
    }
    next()
    {
        return this._count ? (this._count--, this._x = this._wrapper.readByte(), this._y = this._wrapper.readByte(), this._value = this._wrapper.readShort(), !0) : !1
    }
    parse(e)
    {
        return e ? (this._wrapper = e, this._count = e.readByte(), !0) : !1
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get height()
    {
        return this._value
    }
}
class k1 {
    flush()
    {
        return this._blockedTilesMap = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const r = e.readInt(),
                i = e.readInt();
            this._blockedTilesMap[i] || (this._blockedTilesMap[i] = []),
            this._blockedTilesMap[i][r] = !0,
            t--
        }
        return !0
    }
    get blockedTilesMap()
    {
        return this._blockedTilesMap
    }
}
class V1 {
    flush()
    {
        return this._floorType = null, this._wallType = null, this._landscapeType = null, this._landscapeAnimation = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = e.readString(),
            r = e.readString();
        switch (t) {
        case "floor":
            this._floorType = r;
            break;
        case "wallpaper":
            this._wallType = r;
            break;
        case "landscape":
            this._landscapeType = r;
            break;
        case "landscapeanim":
            this._landscapeAnimation = r;
            break
        }
        return !0
    }
    get floorType()
    {
        return this._floorType
    }
    get wallType()
    {
        return this._wallType
    }
    get landscapeType()
    {
        return this._landscapeType
    }
    get landscapeAnimation()
    {
        return this._landscapeAnimation
    }
}
class H1 {
    flush()
    {
        return this._name = null, this._roomId = 0, !0
    }
    parse(e)
    {
        return e ? (this._name = e.readString(), this._roomId = e.readInt(), !0) : !1
    }
    get name()
    {
        return this._name
    }
    get roomId()
    {
        return this._roomId
    }
}
class j1 {
    flush()
    {
        return this._hideWalls = !1, this._thicknessWall = 0, this._thicknessFloor = 0, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._hideWalls = e.readBoolean();
        let t = e.readInt(),
            r = e.readInt();
        return t = t < -2 ? -2 : t > 1 ? 1 : t, r = r < -2 ? -2 : r > 1 ? 1 : r, this._thicknessWall = Math.pow(2, t), this._thicknessFloor = Math.pow(2, r), !0
    }
    get hideWalls()
    {
        return this._hideWalls
    }
    get thicknessWall()
    {
        return this._thicknessWall
    }
    get thicknessFloor()
    {
        return this._thicknessFloor
    }
}
class fp {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._webId = e.readInt(),
        this._name = e.readString(),
        this._level = e.readInt(),
        this._figure = e.readString(),
        this._owner = e.readString()
    }
    dispose()
    {
        this._webId = 0,
        this._name = "",
        this._level = 0,
        this._figure = "",
        this._owner = ""
    }
    get webId()
    {
        return this._webId
    }
    get name()
    {
        return this._name
    }
    get level()
    {
        return this._level
    }
    get figure()
    {
        return this._figure
    }
    get owner()
    {
        return this._owner
    }
}
class mp {
    constructor(e)
    {
        this._stuffId = e.readInt(),
        this._classId = e.readInt(),
        this._productCode = e.readString(),
        this._userId = e.readInt(),
        this._userName = e.readString(),
        this._rarityLevel = e.readInt(),
        this._hasMutation = e.readBoolean()
    }
    get stuffId()
    {
        return this._stuffId
    }
    get classId()
    {
        return this._classId
    }
    get productCode()
    {
        return this._productCode
    }
    get userId()
    {
        return this._userId
    }
    get userName()
    {
        return this._userName
    }
    get rarityLevel()
    {
        return this._rarityLevel
    }
    get hasMutation()
    {
        return this._hasMutation
    }
}
class W1 {
    flush()
    {
        return this._resultData = null, this._otherResultData = null, !0
    }
    parse(e)
    {
        return e ? (this._resultData = new mp(e), this._otherResultData = new mp(e), !0) : !1
    }
    get resultData()
    {
        return this._resultData
    }
    get otherResultData()
    {
        return this._otherResultData
    }
}
class Y1 {
    flush()
    {
        return this._petId = -1, this._roomIndex = -1, this._gainedExperience = 0, !0
    }
    parse(e)
    {
        return e ? (this._petId = e.readInt(), this._roomIndex = e.readInt(), this._gainedExperience = e.readInt(), !0) : !1
    }
    get petId()
    {
        return this._petId
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get gainedExperience()
    {
        return this._gainedExperience
    }
}
class z1 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._roomIndex = e.readInt(), this._petId = e.readInt(), this._figureData = new dm(e), this._hasSaddle = e.readBoolean(), this._isRiding = e.readBoolean(), !0) : !1
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get petId()
    {
        return this._petId
    }
    get figureData()
    {
        return this._figureData
    }
    get hasSaddle()
    {
        return this._hasSaddle
    }
    get isRiding()
    {
        return this._isRiding
    }
}
class K1 {
    flush()
    {
        return this._id = -1, this._skillThresholds = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._id = e.readInt(),
        this._name = e.readString(),
        this._level = e.readInt(),
        this._maximumLevel = e.readInt(),
        this._experience = e.readInt(),
        this._levelExperienceGoal = e.readInt(),
        this._energy = e.readInt(),
        this._maximumEnergy = e.readInt(),
        this._happyness = e.readInt(),
        this._maximumHappyness = e.readInt(),
        this._respect = e.readInt(),
        this._ownerId = e.readInt(),
        this._age = e.readInt(),
        this._ownerName = e.readString(),
        this._rarityLevel = e.readInt(),
        this._saddle = e.readBoolean(),
        this._rider = e.readBoolean();
        let t = e.readInt();
        for (; t > 0;)
            this._skillThresholds.push(e.readInt()),
            t--;
        return this._skillThresholds.sort(), this._publiclyRideable = e.readInt(), this._breedable = e.readBoolean(), this._fullyGrown = e.readBoolean(), this._dead = e.readBoolean(), this._unknownRarity = e.readInt(), this._maximumTimeToLive = e.readInt(), this._remainingTimeToLive = e.readInt(), this._remainingGrowTime = e.readInt(), this._publiclyBreedable = e.readBoolean(), !0
    }
    get id()
    {
        return this._id
    }
    get name()
    {
        return this._name
    }
    get level()
    {
        return this._level
    }
    get maximumLevel()
    {
        return this._maximumLevel
    }
    get experience()
    {
        return this._experience
    }
    get energy()
    {
        return this._energy
    }
    get happyness()
    {
        return this._happyness
    }
    get levelExperienceGoal()
    {
        return this._levelExperienceGoal
    }
    get maximumEnergy()
    {
        return this._maximumEnergy
    }
    get maximumHappyness()
    {
        return this._maximumHappyness
    }
    get respect()
    {
        return this._respect
    }
    get ownerId()
    {
        return this._ownerId
    }
    get ownerName()
    {
        return this._ownerName
    }
    get age()
    {
        return this._age
    }
    get rarityLevel()
    {
        return this._rarityLevel
    }
    get saddle()
    {
        return this._saddle
    }
    get rider()
    {
        return this._rider
    }
    get breedable()
    {
        return this._breedable
    }
    get fullyGrown()
    {
        return this._fullyGrown
    }
    get dead()
    {
        return this._dead
    }
    get maximumTimeToLive()
    {
        return this._maximumTimeToLive
    }
    get remainingTimeToLive()
    {
        return this._remainingTimeToLive
    }
    get remainingGrowTime()
    {
        return this._remainingGrowTime
    }
    get skillTresholds()
    {
        return this._skillThresholds
    }
    get publiclyRideable()
    {
        return this._publiclyRideable
    }
    get unknownRarity()
    {
        return this._unknownRarity
    }
    get publiclyBreedable()
    {
        return this._publiclyBreedable
    }
}
class q1 {
    flush()
    {
        return this._roomIndex = -1, this._petId = -1, this._canBreed = !1, this._canHarvest = !1, this._canRevive = !1, this._hasBreedingPermission = !1, !0
    }
    parse(e)
    {
        return e ? (this._roomIndex = e.readInt(), this._petId = e.readInt(), this._canBreed = e.readBoolean(), this._canHarvest = e.readBoolean(), this._canRevive = e.readBoolean(), this._hasBreedingPermission = e.readBoolean(), !0) : !1
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get petId()
    {
        return this._petId
    }
    get canBreed()
    {
        return this._canBreed
    }
    get canHarvest()
    {
        return this._canHarvest
    }
    get canRevive()
    {
        return this._canRevive
    }
    get hasBreedingPermission()
    {
        return this._hasBreedingPermission
    }
}
class X1 {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._chance = e.readInt(),
        this._breeds = [];
        let t = e.readInt();
        for (; t > 0;)
            this._breeds.push(e.readInt()),
            t--
    }
    dispose()
    {
        this._chance = -1,
        this._breeds = []
    }
    get chance()
    {
        return this._chance
    }
    get breeds()
    {
        return this._breeds
    }
}
class Q1 {
    flush()
    {
        return this._isPlaying = !1, !0
    }
    parse(e)
    {
        return e ? (this._isPlaying = e.readBoolean(), !0) : !1
    }
    get isPlaying()
    {
        return this._isPlaying
    }
}
class J1 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !0
    }
}
class Z1 {
    flush()
    {
        return this._seconds = 0, !0
    }
    parse(e)
    {
        return e ? (this._seconds = e.readInt(), !0) : !1
    }
    get seconds()
    {
        return this._seconds
    }
}
class $1 {
    flush()
    {
        return this._seconds = 0, !0
    }
    parse(e)
    {
        return e ? (this._seconds = e.readInt(), !0) : !1
    }
    get seconds()
    {
        return this._seconds
    }
}
class hm {
    flush()
    {
        return this._roomIndex = null, this._message = null, this._gesture = 0, this._bubble = 0, this._urls = [], this._messageLength = 0, !0
    }
    parse(e)
    {
        return e ? (this._roomIndex = e.readInt(), this._message = e.readString(), this._gesture = e.readInt(), this._bubble = e.readInt(), this.parseUrls(e), this._messageLength = e.readInt(), !0) : !1
    }
    parseUrls(e)
    {
        if (!e)
            return !1;
        this._urls = [];
        let t = e.readInt();
        for (; t > 0;)
            this._urls.push(e.readString()),
            t--;
        return !0
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get message()
    {
        return this._message
    }
    get gesture()
    {
        return this._gesture
    }
    get bubble()
    {
        return this._bubble
    }
    get urls()
    {
        return this._urls
    }
    get messageLength()
    {
        return this._messageLength
    }
}
class eF {
    flush()
    {
        return this._unitId = null, this._isTyping = !1, !0
    }
    parse(e)
    {
        return e ? (this._unitId = e.readInt(), this._isTyping = e.readInt() === 1, !0) : !1
    }
    get unitId()
    {
        return this._unitId
    }
    get isTyping()
    {
        return this._isTyping
    }
}
class tF {
    flush()
    {
        return this._unitId = null, this._danceId = 0, !0
    }
    parse(e)
    {
        return e ? (this._unitId = e.readInt(), this._danceId = e.readInt(), !0) : !1
    }
    get unitId()
    {
        return this._unitId
    }
    get danceId()
    {
        return this._danceId
    }
}
class sF {
    flush()
    {
        return this._unitId = null, this._effectId = 0, this._delay = 0, !0
    }
    parse(e)
    {
        return e ? (this._unitId = e.readInt(), this._effectId = e.readInt(), this._delay = e.readInt(), !0) : !1
    }
    get unitId()
    {
        return this._unitId
    }
    get effectId()
    {
        return this._effectId
    }
    get delay()
    {
        return this._delay
    }
}
class rF {
    flush()
    {
        return this._unitId = null, this._expression = 0, !0
    }
    parse(e)
    {
        return e ? (this._unitId = e.readInt(), this._expression = e.readInt(), !0) : !1
    }
    get unitId()
    {
        return this._unitId
    }
    get expression()
    {
        return this._expression
    }
}
class iF {
    flush()
    {
        return this._unitId = null, this._handId = 0, !0
    }
    parse(e)
    {
        return e ? (this._unitId = e.readInt(), this._handId = e.readInt(), !0) : !1
    }
    get unitId()
    {
        return this._unitId
    }
    get handId()
    {
        return this._handId
    }
}
class nF {
    flush()
    {
        return this._giverUserId = -1, this._handItemType = -1, !0
    }
    parse(e)
    {
        return e ? (this._giverUserId = e.readInt(), this._handItemType = e.readInt(), !0) : !1
    }
    get giverUserId()
    {
        return this._giverUserId
    }
    get handItemType()
    {
        return this._handItemType
    }
}
class aF {
    flush()
    {
        return this._unitId = null, this._isIdle = !1, !0
    }
    parse(e)
    {
        return e ? (this._unitId = e.readInt(), this._isIdle = e.readBoolean(), !0) : !1
    }
    get unitId()
    {
        return this._unitId
    }
    get isIdle()
    {
        return this._isIdle
    }
}
class oF {
    flush()
    {
        return this._unitId = null, this._figure = null, this._gender = "M", this._motto = null, this._achievementScore = 0, !0
    }
    parse(e)
    {
        return e ? (this._unitId = e.readInt(), this._figure = e.readString(), this._gender = e.readString().toLocaleUpperCase(), this._motto = e.readString(), this._achievementScore = e.readInt(), !0) : !1
    }
    get unitId()
    {
        return this._unitId
    }
    get figure()
    {
        return this._figure
    }
    get gender()
    {
        return this._gender
    }
    get motto()
    {
        return this._motto
    }
    get achievementScore()
    {
        return this._achievementScore
    }
}
class lF {
    flush()
    {
        return this._unitId = null, this._value = 0, !0
    }
    parse(e)
    {
        return e ? (this._unitId = e.readInt(), this._value = e.readInt(), !0) : !1
    }
    get unitId()
    {
        return this._unitId
    }
    get value()
    {
        return this._value
    }
}
class Rl {
    constructor(e)
    {
        this._roomIndex = 0,
        this._x = 0,
        this._y = 0,
        this._z = 0,
        this._dir = 0,
        this._name = "",
        this._userType = 0,
        this._sex = "",
        this._figure = "",
        this._custom = "",
        this._activityPoints = 0,
        this._webID = 0,
        this._groupID = 0,
        this._groupStatus = 0,
        this._groupName = "",
        this._subType = "",
        this._ownerId = 0,
        this._ownerName = "",
        this._rarityLevel = 0,
        this._hasSaddle = !1,
        this._isRiding = !1,
        this._canBreed = !1,
        this._canHarvest = !1,
        this._canRevive = !1,
        this._hasBreedingPermission = !1,
        this._petLevel = 0,
        this._petPosture = "",
        this._botSkills = [],
        this._isModerator = !1,
        this._isReadOnly = !1,
        this._roomIndex = e
    }
    setReadOnly()
    {
        this._isReadOnly = !0
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get x()
    {
        return this._x
    }
    set x(e)
    {
        this._isReadOnly || (this._x = e)
    }
    get y()
    {
        return this._y
    }
    set y(e)
    {
        this._isReadOnly || (this._y = e)
    }
    get z()
    {
        return this._z
    }
    set z(e)
    {
        this._isReadOnly || (this._z = e)
    }
    get dir()
    {
        return this._dir
    }
    set dir(e)
    {
        this._isReadOnly || (this._dir = e)
    }
    get name()
    {
        return this._name
    }
    set name(e)
    {
        this._isReadOnly || (this._name = e)
    }
    get userType()
    {
        return this._userType
    }
    set userType(e)
    {
        this._isReadOnly || (this._userType = e)
    }
    get sex()
    {
        return this._sex
    }
    set sex(e)
    {
        this._isReadOnly || (this._sex = e)
    }
    get figure()
    {
        return this._figure
    }
    set figure(e)
    {
        this._isReadOnly || (this._figure = e)
    }
    get custom()
    {
        return this._custom
    }
    set custom(e)
    {
        this._isReadOnly || (this._custom = e)
    }
    get activityPoints()
    {
        return this._activityPoints
    }
    set activityPoints(e)
    {
        this._isReadOnly || (this._activityPoints = e)
    }
    get webID()
    {
        return this._webID
    }
    set webID(e)
    {
        this._isReadOnly || (this._webID = e)
    }
    get groupID()
    {
        return this._groupID
    }
    set groupID(e)
    {
        this._isReadOnly || (this._groupID = e)
    }
    get groupName()
    {
        return this._groupName
    }
    set groupName(e)
    {
        this._isReadOnly || (this._groupName = e)
    }
    get groupStatus()
    {
        return this._groupStatus
    }
    set groupStatus(e)
    {
        this._isReadOnly || (this._groupStatus = e)
    }
    get subType()
    {
        return this._subType
    }
    set subType(e)
    {
        this._isReadOnly || (this._subType = e)
    }
    get ownerId()
    {
        return this._ownerId
    }
    set ownerId(e)
    {
        this._isReadOnly || (this._ownerId = e)
    }
    get ownerName()
    {
        return this._ownerName
    }
    set ownerName(e)
    {
        this._isReadOnly || (this._ownerName = e)
    }
    get rarityLevel()
    {
        return this._rarityLevel
    }
    set rarityLevel(e)
    {
        this._isReadOnly || (this._rarityLevel = e)
    }
    get hasSaddle()
    {
        return this._hasSaddle
    }
    set hasSaddle(e)
    {
        this._isReadOnly || (this._hasSaddle = e)
    }
    get isRiding()
    {
        return this._isRiding
    }
    set isRiding(e)
    {
        this._isReadOnly || (this._isRiding = e)
    }
    get canBreed()
    {
        return this._canBreed
    }
    set canBreed(e)
    {
        this._isReadOnly || (this._canBreed = e)
    }
    get canHarvest()
    {
        return this._canHarvest
    }
    set canHarvest(e)
    {
        this._isReadOnly || (this._canHarvest = e)
    }
    get canRevive()
    {
        return this._canRevive
    }
    set canRevive(e)
    {
        this._isReadOnly || (this._canRevive = e)
    }
    get hasBreedingPermission()
    {
        return this._hasBreedingPermission
    }
    set hasBreedingPermission(e)
    {
        this._isReadOnly || (this._hasBreedingPermission = e)
    }
    get petLevel()
    {
        return this._petLevel
    }
    set petLevel(e)
    {
        this._isReadOnly || (this._petLevel = e)
    }
    get petPosture()
    {
        return this._petPosture
    }
    set petPosture(e)
    {
        this._isReadOnly || (this._petPosture = e)
    }
    get botSkills()
    {
        return this._botSkills
    }
    set botSkills(e)
    {
        this._botSkills = e
    }
    get isModerator()
    {
        return this._isModerator
    }
    set isModerator(e)
    {
        this._isReadOnly || (this._isModerator = e)
    }
}
Rl.M = "M";
Rl.F = "F";
class cF {
    flush()
    {
        return this._users = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._users = [];
        const t = e.readInt();
        let r = 0;
        for (; r < t;) {
            const i = e.readInt(),
                n = e.readString(),
                o = e.readString();
            let l = e.readString();
            const c = e.readInt(),
                u = e.readInt(),
                h = e.readInt(),
                d = parseFloat(e.readString()),
                m = e.readInt(),
                p = e.readInt(),
                E = new Rl(c);
            if (E.dir = m, E.name = n, E.custom = o, E.x = u, E.y = h, E.z = d, this._users.push(E), p === 1) {
                E.webID = i,
                E.userType = yt.USER,
                E.sex = this.resolveSex(e.readString()),
                E.groupID = e.readInt(),
                E.groupStatus = e.readInt(),
                E.groupName = e.readString();
                const T = e.readString();
                T !== "" && (l = this.convertSwimFigure(T, l, E.sex)),
                E.figure = l,
                E.activityPoints = e.readInt(),
                E.isModerator = e.readBoolean()
            } else if (p === 2)
                E.userType = yt.PET,
                E.figure = l,
                E.webID = i,
                E.subType = e.readInt().toString(),
                E.ownerId = e.readInt(),
                E.ownerName = e.readString(),
                E.rarityLevel = e.readInt(),
                E.hasSaddle = e.readBoolean(),
                E.isRiding = e.readBoolean(),
                E.canBreed = e.readBoolean(),
                E.canHarvest = e.readBoolean(),
                E.canRevive = e.readBoolean(),
                E.hasBreedingPermission = e.readBoolean(),
                E.petLevel = e.readInt(),
                E.petPosture = e.readString();
            else if (p === 3)
                E.userType = yt.BOT,
                E.webID = c * -1,
                l.indexOf("/") === -1 ? E.figure = l : E.figure = "hr-100-.hd-180-1.ch-876-66.lg-270-94.sh-300-64",
                E.sex = Rl.M;
            else if (p === 4) {
                E.userType = yt.RENTABLE_BOT,
                E.webID = i,
                E.sex = this.resolveSex(e.readString()),
                E.figure = l,
                E.ownerId = e.readInt(),
                E.ownerName = e.readString();
                const T = e.readInt();
                if (T) {
                    const I = [];
                    let S = 0;
                    for (; S < T;)
                        I.push(e.readShort()),
                        S++;
                    E.botSkills = I
                }
            }
            r++
        }
        return !0
    }
    resolveSex(e)
    {
        return e.substr(0, 1).toLowerCase() === "f" ? Rl.F : Rl.M
    }
    convertSwimFigure(e, t, r)
    {
        const i = t.split(".");
        let n = 1,
            o = 1,
            l = 1;
        const c = 1e4;
        let u = 0;
        for (; u < i.length;) {
            const p = i[u].split("-");
            p.length > 2 && p[0] === "hd" && (n = parseInt(p[2])),
            u++
        }
        const h = ["238,238,238", "250,56,49", "253,146,160", "42,199,210", "53,51,44", "239,255,146", "198,255,152", "255,146,90", "157,89,126", "182,243,255", "109,255,51", "51,120,201", "255,182,49", "223,161,233", "249,251,50", "202,175,143", "197,198,197", "71,98,61", "138,131,97", "255,140,51", "84,198,39", "30,108,153", "152,79,136", "119,200,255", "255,192,142", "60,75,135", "124,44,71", "215,255,227", "143,63,28", "255,99,147", "31,155,121", "253,255,51"],
            d = e.split("=");
        if (d.length > 1) {
            const m = d[1].split("/");
            m[0];
            const p = m[1];
            r === "F" ? l = 10010 : l = 10011;
            const E = h.indexOf(p);
            o = c + E + 1
        }
        return t + (".bds-10001-" + n + ".ss-" + l + "-" + o)
    }
    get users()
    {
        return this._users
    }
}
class uF {
    flush()
    {
        return this._unitId = null, !0
    }
    parse(e)
    {
        return e ? (this._unitId = parseInt(e.readString()), !0) : !1
    }
    get unitId()
    {
        return this._unitId
    }
}
class hF {
    constructor(e, t)
    {
        this._action = e,
        this._value = t
    }
    get action()
    {
        return this._action
    }
    get value()
    {
        return this._value
    }
}
class dF {
    constructor(e, t, r, i, n, o, l, c=0, u=0, h=0, d, m, p)
    {
        this._id = e,
        this._x = t,
        this._y = r,
        this._z = i,
        this._height = n,
        this._headDirection = o,
        this._direction = l,
        this._targetX = c,
        this._targetY = u,
        this._targetZ = h,
        this._didMove = d,
        this._canStandUp = m,
        this._actions = p || []
    }
    get id()
    {
        return this._id
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get z()
    {
        return this._z
    }
    get height()
    {
        return this._height
    }
    get headDirection()
    {
        return this._headDirection
    }
    get direction()
    {
        return this._direction
    }
    get targetX()
    {
        return this._targetX
    }
    get targetY()
    {
        return this._targetY
    }
    get targetZ()
    {
        return this._targetZ
    }
    get didMove()
    {
        return this._didMove
    }
    get canStandUp()
    {
        return this._canStandUp
    }
    get actions()
    {
        return this._actions
    }
}
class _F {
    flush()
    {
        return this._statuses = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const r = this.parseStatus(e);
            if (!r) {
                t--;
                continue
            }
            this._statuses.push(r),
            t--
        }
        return !0
    }
    parseStatus(e)
    {
        if (!e)
            return null;
        const t = e.readInt(),
            r = e.readInt(),
            i = e.readInt(),
            n = parseFloat(e.readString()),
            o = e.readInt() % 8 * 45,
            l = e.readInt() % 8 * 45,
            c = e.readString();
        let u = 0,
            h = 0,
            d = 0,
            m = 0,
            p = !1,
            E = !1;
        if (c) {
            const T = c.split("/"),
                I = [];
            for (const S of T) {
                const A = S.split(" ");
                if (A[0] !== "" && A.length >= 2) {
                    switch (A[0]) {
                    case "mv":
                        {
                            const N = A[1].split(",");
                            N.length >= 3 && (u = parseInt(N[0]), h = parseInt(N[1]), d = parseFloat(N[2]), E = !0);
                            break
                        }case "sit":
                        {
                            const N = parseFloat(A[1]);
                            A.length >= 3 && (p = A[2] === "1"),
                            m = N;
                            break
                        }case "lay":
                        {
                            const N = parseFloat(A[1]);
                            m = Math.abs(N);
                            break
                        }
                    }
                    I.push(new hF(A[0], A[1]))
                }
            }
            this._statuses.push(new dF(t, r, i, n, m, o, l, u, h, d, E, p, I))
        }
    }
    get statuses()
    {
        return this._statuses
    }
}
const pg = class {
    constructor(s)
    {
        if (!s)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(s)
    }
    flush()
    {
        return this._rentable = !1, this._itemId = 0, this._furniType = null, this._ref = 0, this._spriteId = 0, this._category = 0, this._stuffData = null, this._isGroupable = !1, this._isRecyclable = !1, this._tradable = !1, this._sellable = !1, this._secondsToExpiration = 0, this._extra = 0, this._flatId = 0, this._isWallItem = !1, this._hasRentPeriodStarted = !1, this._expirationTimeStamp = 0, this._slotId = "", this._songId = -1, !0
    }
    parse(s)
    {
        return s ? (this._itemId = s.readInt(), this._furniType = s.readString(), this._ref = s.readInt(), this._spriteId = s.readInt(), this._category = s.readInt(), this._stuffData = Ja.parseObjectData(s), this._isRecyclable = s.readBoolean(), this._tradable = s.readBoolean(), this._isGroupable = s.readBoolean(), this._sellable = s.readBoolean(), this._secondsToExpiration = s.readInt(), this._expirationTimeStamp = Pe(), this.secondsToExpiration > -1 ? this._rentable = !0 : (this._rentable = !1, this._secondsToExpiration = -1), this._hasRentPeriodStarted = s.readBoolean(), this._flatId = s.readInt(), this._isWallItem = this._furniType === pg.WALL_ITEM, this._furniType === pg.FLOOR_ITEM && (this._slotId = s.readString(), this._extra = s.readInt()), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
    get furniType()
    {
        return this._furniType
    }
    get ref()
    {
        return this._ref
    }
    get spriteId()
    {
        return this._spriteId
    }
    get category()
    {
        return this._category
    }
    get stuffData()
    {
        return this._stuffData
    }
    get isGroupable()
    {
        return this._isGroupable
    }
    get isRecycleable()
    {
        return this._isRecyclable
    }
    get tradable()
    {
        return this._tradable
    }
    get sellable()
    {
        return this._sellable
    }
    get secondsToExpiration()
    {
        return this._secondsToExpiration
    }
    get flatId()
    {
        return this._flatId
    }
    get slotId()
    {
        return this._slotId
    }
    get songId()
    {
        return this._songId
    }
    get extra()
    {
        return this._extra
    }
    get rentable()
    {
        return this._rentable
    }
    get isWallItem()
    {
        return this._isWallItem
    }
    get hasRentPeriodStarted()
    {
        return this._hasRentPeriodStarted
    }
    get expirationTimeStamp()
    {
        return this._expirationTimeStamp
    }
    get creationDay()
    {
        return 0
    }
    get creationMonth()
    {
        return 0
    }
    get creationYear()
    {
        return 0
    }
    get isExternalImageFurni()
    {
        return this._furniType.indexOf("external_image") !== -1
    }
}
;
let Md = pg;
Md.WALL_ITEM = "I";
Md.FLOOR_ITEM = "S";
class gF {
    flush()
    {
        return this._items = [], !0
    }
    parse(e)
    {
        return e ? (this._items.push(new Md(e)), !0) : !1
    }
    get items()
    {
        return this._items
    }
}
class fF {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class mF {
    flush()
    {
        return this._totalFragments = 0, this._fragmentNumber = 0, this._fragment = new Map, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._totalFragments = e.readInt(),
        this._fragmentNumber = e.readInt();
        let t = e.readInt();
        for (; t > 0;) {
            const r = new Md(e);
            r && this._fragment.set(r.itemId, r),
            t--
        }
        return !0
    }
    get totalFragments()
    {
        return this._totalFragments
    }
    get fragmentNumber()
    {
        return this._fragmentNumber
    }
    get fragment()
    {
        return this._fragment
    }
}
class EF {
    flush()
    {
        return this._itemId = 0, !0
    }
    parse(e)
    {
        return e ? (this._itemId = e.readInt(), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
}
class pF {
    flush()
    {
        return this._itemId = 0, this._itemsLeft = 0, !0
    }
    parse(e)
    {
        return e ? (this._itemId = e.readInt(), this._itemsLeft = e.readInt(), !0) : !1
    }
    get itemId()
    {
        return this._itemId
    }
    get itemsLeft()
    {
        return this._itemsLeft
    }
}
class IF {
    flush()
    {
        return this._itemType = "", this._classId = 0, this._productCode = "", !0
    }
    parse(e)
    {
        return e ? (this._itemType = e.readString(), this._classId = e.readInt(), this._productCode = e.readString(), this._placedItemId = e.readInt(), this._placedItemType = e.readString(), this._placedInRoom = e.readBoolean(), this._petFigureString = e.readString(), !0) : !1
    }
    get itemType()
    {
        return this._itemType
    }
    get classId()
    {
        return this._classId
    }
    get productCode()
    {
        return this._productCode
    }
    get placedItemId()
    {
        return this._placedItemId
    }
    get placedItemType()
    {
        return this._placedItemType
    }
    get placedInRoom()
    {
        return this._placedInRoom
    }
    get petFigureString()
    {
        return this._petFigureString
    }
}
class TF {
    flush()
    {
        this._nestId = 0,
        this._pet1 && (this._pet1.dispose(), this._pet1 = null),
        this._pet2 && (this._pet2.dispose(), this._pet2 = null);
        for (const e of this._rarityCategories)
            e && e.dispose();
        return this._rarityCategories = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._nestId = e.readInt(),
        this._pet1 = new fp(e),
        this._pet2 = new fp(e);
        let t = e.readInt();
        for (; t > 0;)
            this._rarityCategories.push(new X1(e)),
            t--;
        return this._resultPetType = e.readInt(), !0
    }
    get nestId()
    {
        return this._nestId
    }
    get pet1()
    {
        return this._pet1
    }
    get pet2()
    {
        return this._pet2
    }
    get rarityCategories()
    {
        return this._rarityCategories
    }
    get resultPetType()
    {
        return this._resultPetType
    }
}
class RF {
    flush()
    {
        return this._breedingNestStuffId = 0, this._result = 0, !0
    }
    parse(e)
    {
        return e ? (this._breedingNestStuffId = e.readInt(), this._result = e.readInt(), !0) : !1
    }
    get breedingNestStuffId()
    {
        return this._breedingNestStuffId
    }
    get result()
    {
        return this._result
    }
}
class OF {
    flush()
    {
        return this._petId = -1, this._rarityCategory = -1, !0
    }
    parse(e)
    {
        return this._petId = e.readInt(), this._rarityCategory = e.readInt(), !0
    }
    get rarityCategory()
    {
        return this._rarityCategory
    }
    get petId()
    {
        return this._petId
    }
}
class dm {
    constructor(e)
    {
        this._typeId = e.readInt(),
        this._paletteId = e.readInt(),
        this._color = e.readString(),
        this._breedId = e.readInt(),
        this._customParts = [],
        this._customPartCount = e.readInt();
        let t = 0;
        for (; t < this._customPartCount;)
            this._customParts.push(e.readInt()),
            this._customParts.push(e.readInt()),
            this._customParts.push(e.readInt()),
            t++
    }
    get typeId()
    {
        return this._typeId
    }
    get paletteId()
    {
        return this._paletteId
    }
    get color()
    {
        return this._color
    }
    get breedId()
    {
        return this._breedId
    }
    get figuredata()
    {
        let e = this.typeId + " " + this.paletteId + " " + this.color;
        e = e + (" " + this.custompartCount);
        for (const t of this.customParts)
            e = e + (" " + t);
        return e
    }
    get customParts()
    {
        return this._customParts
    }
    get custompartCount()
    {
        return this._customPartCount
    }
}
class bd {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._id = e.readInt(),
        this._name = e.readString(),
        this._figureData = new dm(e),
        this._level = e.readInt()
    }
    get id()
    {
        return this._id
    }
    get name()
    {
        return this._name
    }
    get typeId()
    {
        return this._figureData.typeId
    }
    get paletteId()
    {
        return this._figureData.paletteId
    }
    get color()
    {
        return this._figureData.color
    }
    get breedId()
    {
        return this._figureData.breedId
    }
    get customPartCount()
    {
        return this._figureData.custompartCount
    }
    get figureString()
    {
        return this._figureData.figuredata
    }
    get figureData()
    {
        return this._figureData
    }
    get level()
    {
        return this._level
    }
}
class SF {
    flush()
    {
        return this._pet = null, this._boughtAsGift = !1, !0
    }
    parse(e)
    {
        return this._pet = new bd(e), this._boughtAsGift = e.readBoolean(), !0
    }
    get pet()
    {
        return this._pet
    }
    get boughtAsGift()
    {
        return this._boughtAsGift
    }
}
class Dd {
    flush()
    {
        return this._state = 0, this._ownPetId = 0, this._otherPetId = 0, !0
    }
    parse(e)
    {
        return e ? (this._state = e.readInt(), this._ownPetId = e.readInt(), this._otherPetId = e.readInt(), !0) : !1
    }
    get state()
    {
        return this._state
    }
    get ownPetId()
    {
        return this._ownPetId
    }
    get otherPetId()
    {
        return this._otherPetId
    }
}
Dd.STATE_CANCEL = 1;
Dd.STATE_ACCEPT = 2;
Dd.STATE_REQUEST = 3;
class CF {
    flush()
    {
        return this._fragment = null, !0
    }
    parse(e)
    {
        this._totalFragments = e.readInt(),
        this._fragmentNumber = e.readInt();
        let t = e.readInt();
        for (this._fragment = new Map; t > 0;) {
            const r = new bd(e);
            this._fragment.set(r.id, r),
            t--
        }
        return !0
    }
    get totalFragments()
    {
        return this._totalFragments
    }
    get fragmentNumber()
    {
        return this._fragmentNumber
    }
    get fragment()
    {
        return this._fragment
    }
}
class AF {
    flush()
    {
        return this._boughtAsGift = !1, this._pet = null, !0
    }
    parse(e)
    {
        return this._boughtAsGift = e.readBoolean(), this._pet = new bd(e), !0
    }
    get boughtAsGift()
    {
        return this._boughtAsGift
    }
    get pet()
    {
        return this._pet
    }
}
class NF {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._petId = e.readInt(), !0) : !1
    }
    get petId()
    {
        return this._petId
    }
}
class yF {
    constructor(e)
    {
        this._itemId = e.readInt(),
        this._furniType = e.readString().toUpperCase(),
        this._ref = e.readInt(),
        this._spriteId = e.readInt(),
        this._category = e.readInt(),
        this._isGroupable = e.readBoolean(),
        this._stuffData = Ja.parseObjectData(e),
        this._secondsToExpiration = -1,
        this._expirationTimeStamp = Pe(),
        this._hasRentPeriodStarted = !1,
        this._creationDay = e.readInt(),
        this._creationMonth = e.readInt(),
        this._creationYear = e.readInt(),
        this._extra = this.furniType === "S" ? e.readInt() : -1,
        this._flatId = -1,
        this._rentable = !1,
        this._isWallItem = this._furniType === "I"
    }
    get itemId()
    {
        return this._itemId
    }
    get furniType()
    {
        return this._furniType
    }
    get ref()
    {
        return this._ref
    }
    get spriteId()
    {
        return this._spriteId
    }
    get category()
    {
        return this._category
    }
    get stuffData()
    {
        return this._stuffData
    }
    get extra()
    {
        return this._extra
    }
    get secondsToExpiration()
    {
        return this._secondsToExpiration
    }
    get creationDay()
    {
        return this._creationDay
    }
    get creationMonth()
    {
        return this._creationMonth
    }
    get creationYear()
    {
        return this._creationYear
    }
    get isGroupable()
    {
        return this._isGroupable
    }
    get songId()
    {
        return this._extra
    }
    get flatId()
    {
        return this._flatId
    }
    get rentable()
    {
        return this._rentable
    }
    get isWallItem()
    {
        return this._isWallItem
    }
    get hasRentPeriodStarted()
    {
        return this._hasRentPeriodStarted
    }
    get expirationTimeStamp()
    {
        return this._expirationTimeStamp
    }
    get isRecycleable()
    {
        return !0
    }
    get tradable()
    {
        return !0
    }
    get sellable()
    {
        return !0
    }
    get slotId()
    {
        return null
    }
    get isExternalImageFurni()
    {
        return this._furniType.indexOf("external_image") !== -1
    }
}
class MF {
    flush()
    {
        return this._userID = -1, this._userAccepts = !1, !0
    }
    parse(e)
    {
        return e ? (this._userID = e.readInt(), this._userAccepts = e.readInt() > 0, !0) : !1
    }
    get userID()
    {
        return this._userID
    }
    get userAccepts()
    {
        return this._userAccepts
    }
}
class _m {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._userId = e.readInt(), this._reason = e.readInt(), !0) : !1
    }
    get userID()
    {
        return this._userId
    }
    get reason()
    {
        return this._reason
    }
}
_m.ERROR_WHILE_COMMIT = 1;
class bF {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class DF {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class vF {
    flush()
    {
        return this._firstUserID = -1, this._firstUserItemArray = null, this._firstUserNumItems = 0, this._firstUserNumCredits = 0, this._secondUserID = -1, this._secondUserItemArray = null, this._secondUserNumItems = 0, this._secondUserNumCredits = 0, !0
    }
    parse(e)
    {
        return !e || (this._firstUserID = e.readInt(), this._firstUserItemArray = [], !this.parseItems(e, this._firstUserItemArray)) || (this._firstUserNumItems = e.readInt(), this._firstUserNumCredits = e.readInt(), this._secondUserID = e.readInt(), this._secondUserItemArray = [], !this.parseItems(e, this._secondUserItemArray)) ? !1 : (this._secondUserNumItems = e.readInt(), this._secondUserNumCredits = e.readInt(), !0)
    }
    parseItems(e, t)
    {
        let r = e.readInt();
        for (; r > 0;)
            t.push(new yF(e)),
            r--;
        return !0
    }
    get firstUserID()
    {
        return this._firstUserID
    }
    get firstUserItemArray()
    {
        return this._firstUserItemArray
    }
    get firstUserNumItems()
    {
        return this._firstUserNumItems
    }
    get firstUserNumCredits()
    {
        return this._firstUserNumCredits
    }
    get secondUserID()
    {
        return this._secondUserID
    }
    get secondUserItemArray()
    {
        return this._secondUserItemArray
    }
    get secondUserNumItems()
    {
        return this._secondUserNumItems
    }
    get secondUserNumCredits()
    {
        return this._secondUserNumCredits
    }
}
class PF {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class LF {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class gm {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._reason = e.readInt(), this._otherUserName = e.readString(), !0) : !1
    }
    get reason()
    {
        return this._reason
    }
    get otherUserName()
    {
        return this._otherUserName
    }
}
gm.REASON_YOU_ARE_ALREADY_TRADING = 7;
gm.REASON_OTHER_USER_ALREADY_TRADING = 8;
class UF {
    flush()
    {
        return this._userId = -1, this._userCanTrade = !1, this._otherUserId = -1, this._otherUserCanTrade = !1, !0
    }
    parse(e)
    {
        return e ? (this._userId = e.readInt(), this._userCanTrade = e.readInt() === 1, this._otherUserId = e.readInt(), this._otherUserCanTrade = e.readInt() === 1, !0) : !1
    }
    get userID()
    {
        return this._userId
    }
    get userCanTrade()
    {
        return this._userCanTrade
    }
    get otherUserID()
    {
        return this._otherUserId
    }
    get otherUserCanTrade()
    {
        return this._otherUserCanTrade
    }
}
class wF {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class FF {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class xF {
    flush()
    {
        return this._respect = 0, this._petOwnerId = 0, this._petData = null, !0
    }
    parse(e)
    {
        return e ? (this._respect = e.readInt(), this._petOwnerId = e.readInt(), this._petData = new bd(e), !0) : !1
    }
    get respect()
    {
        return this._respect
    }
    get petOwnerId()
    {
        return this._petOwnerId
    }
    get petData()
    {
        return this._petData
    }
    get isTreat()
    {
        return this._petData.typeId === Le.MONSTERPLANT
    }
}
class GF {
    flush()
    {
        return this._petId = 0, this._userId = 0, this._supplementType = 0, !0
    }
    parse(e)
    {
        return e ? (this._petId = e.readInt(), this._userId = e.readInt(), this._supplementType = e.readInt(), !0) : !1
    }
    get petId()
    {
        return this._petId
    }
    get userId()
    {
        return this._userId
    }
    get supplementType()
    {
        return this._supplementType
    }
}
class Ga {}
Ga.WATER = 0;
Ga.LIGHT = 1;
Ga.REVIVE = 2;
Ga.REBREED_FERTILIZER = 3;
Ga.SPEED_FERTILIZER = 4;
class BF {
    flush()
    {
        return this._userId = 0, this._respectsReceived = 0, !0
    }
    parse(e)
    {
        return e ? (this._userId = e.readInt(), this._respectsReceived = e.readInt(), !0) : !1
    }
    get userId()
    {
        return this._userId
    }
    get respectsReceived()
    {
        return this._respectsReceived
    }
}
class kF {
    constructor(e, t, r)
    {
        this._hasControllers = !1,
        this._roomId = e,
        this._roomName = t,
        this._hasControllers = r
    }
    get roomId()
    {
        return this._roomId
    }
    get roomName()
    {
        return this._roomName
    }
    get hasControllers()
    {
        return this._hasControllers
    }
}
class VF {
    constructor(e)
    {
        this._currentHcStreak = e.readInt(),
        this._firstSubscriptionDate = e.readString(),
        this._kickbackPercentage = e.readDouble(),
        this._totalCreditsMissed = e.readInt(),
        this._totalCreditsRewarded = e.readInt(),
        this._totalCreditsSpent = e.readInt(),
        this._creditRewardForStreakBonus = e.readInt(),
        this._creditRewardForMonthlySpent = e.readInt(),
        this._timeUntilPayday = e.readInt()
    }
    get currentHcStreak()
    {
        return this._currentHcStreak
    }
    get firstSubscriptionDate()
    {
        return this._firstSubscriptionDate
    }
    get kickbackPercentage()
    {
        return this._kickbackPercentage
    }
    get totalCreditsMissed()
    {
        return this._totalCreditsMissed
    }
    get totalCreditsRewarded()
    {
        return this._totalCreditsRewarded
    }
    get totalCreditsSpent()
    {
        return this._totalCreditsSpent
    }
    get creditRewardForStreakBonus()
    {
        return this._creditRewardForStreakBonus
    }
    get creditRewardForMonthlySpent()
    {
        return this._creditRewardForMonthlySpent
    }
    get timeUntilPayday()
    {
        return this._timeUntilPayday
    }
}
class HF {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return this._data = new VF(e), !0
    }
    get data()
    {
        return this._data
    }
}
class jF {
    flush()
    {
        return this._looks = new Map, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        e.readInt();
        let t = e.readInt();
        for (; t > 0;) {
            const r = e.readInt(),
                i = e.readString(),
                n = e.readString();
            this._looks.set(r, [i, n]),
            t--
        }
        return !0
    }
    get looks()
    {
        return this._looks
    }
}
class WF {
    flush()
    {
        return this._result = -1, !0
    }
    parse(e)
    {
        return e ? (this._result = e.readInt(), !0) : !1
    }
    get result()
    {
        return this._result
    }
}
class YF {
    flush()
    {
        return this._isVip = !1, this._rooms = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._isVip = e.readBoolean();
        let t = e.readInt();
        for (; t > 0;)
            this._rooms.push(new kF(e.readInt(), e.readString(), e.readBoolean())),
            t--;
        return !0
    }
    get isVip()
    {
        return this._isVip
    }
    get rooms()
    {
        return this._rooms
    }
}
class zF {
    flush()
    {
        return this._pageId = -1, this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._pageId = e.readInt(), this._data = new Nd(e), !0) : !1
    }
    get pageId()
    {
        return this._pageId
    }
    get data()
    {
        return this._data
    }
}
class KF {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._type = -1, this._breedId = -1, this._paletteId = -1, this._sellable = !1, this._rare = !1, !0
    }
    parse(e)
    {
        return e ? (this._type = e.readInt(), this._breedId = e.readInt(), this._paletteId = e.readInt(), this._sellable = e.readBoolean(), this._rare = e.readBoolean(), !0) : !1
    }
    get type()
    {
        return this._type
    }
    get breedId()
    {
        return this._breedId
    }
    get paletteId()
    {
        return this._paletteId
    }
    get sellable()
    {
        return this._sellable
    }
    get rare()
    {
        return this._rare
    }
}
class qF {
    flush()
    {
        return this._productCode = "", this._palettes = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._productCode = e.readString();
        let t = e.readInt();
        for (; t > 0;)
            this._palettes.push(new KF(e)),
            t--;
        return !0
    }
    get productCode()
    {
        return this._productCode
    }
    get palettes()
    {
        return this._palettes
    }
}
class XF {
    constructor(e)
    {
        this._trackingState = e.readInt(),
        this._id = e.readInt(),
        this._identifier = e.readString(),
        this._productCode = e.readString(),
        this._priceInCredits = e.readInt(),
        this._priceInActivityPoints = e.readInt(),
        this._activityPointType = e.readInt(),
        this._purchaseLimit = e.readInt();
        const t = e.readInt();
        this._expirationTime = t > 0 ? t * 1e3 + Date.now() : 0,
        this._title = e.readString(),
        this._description = e.readString(),
        this._imageUrl = e.readString(),
        this._iconImageUrl = e.readString(),
        this._type = e.readInt(),
        this._subProductCodes = [];
        let r = e.readInt();
        for (; r > 0;)
            this._subProductCodes.push(e.readString()),
            r--;
        return this
    }
    populate(e)
    {
        e && (this._id = e.id, this._identifier = e.identifier, this._type = e.type, this._title = e.title, this._description = e.description, this._imageUrl = e.imageUrl, this._iconImageUrl = e.iconImageUrl, this._productCode = e.productCode, this._purchaseLimit = e.purchaseLimit, this._expirationTime = e.expirationTime, this._priceInCredits = e.priceInCredits, this._priceInActivityPoints = e.priceInActivityPoints, this._activityPointType = e.activityPointType, this._subProductCodes = e.subProductCodes, this._trackingState = e.trackingState)
    }
    purchase(e)
    {
        this._purchaseLimit = this._purchaseLimit - e
    }
    get id()
    {
        return this._id
    }
    get identifier()
    {
        return this._identifier
    }
    get type()
    {
        return this._type
    }
    get title()
    {
        return this._title
    }
    get description()
    {
        return this._description
    }
    get imageUrl()
    {
        return this._imageUrl
    }
    get iconImageUrl()
    {
        return this._iconImageUrl
    }
    get productCode()
    {
        return this._productCode
    }
    get purchaseLimit()
    {
        return this._purchaseLimit
    }
    get expirationTime()
    {
        return this._expirationTime
    }
    get priceInCredits()
    {
        return this._priceInCredits
    }
    get priceInActivityPoints()
    {
        return this._priceInActivityPoints
    }
    get activityPointType()
    {
        return this._activityPointType
    }
    get subProductCodes()
    {
        return this._subProductCodes
    }
    get trackingState()
    {
        return this._trackingState
    }
}
class QF {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class JF {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new XF(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class ZF {
    constructor()
    {
        this._errorCode = ""
    }
    flush()
    {
        return this._errorCode = "", !0
    }
    parse(e)
    {
        return e ? (this._errorCode = e.readString(), !0) : !1
    }
    get errorCode()
    {
        return this._errorCode
    }
}
class $F {
    constructor()
    {
        this._productName = "",
        this._productDescription = ""
    }
    flush()
    {
        return this._productDescription = "", this._productName = "", !0
    }
    parse(e)
    {
        return e ? (this._productDescription = e.readString(), this._productName = e.readString(), !0) : !1
    }
    get productName()
    {
        return this._productName
    }
    get productDescription()
    {
        return this._productDescription
    }
}
class ex {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class Za {
    flush()
    {
        return this._goalId = 0, this._goalCode = null, this._result = 0, this._requiredFurnis = null, this._missingFurnis = null, !0
    }
    parse(e)
    {
        this._goalId = e.readInt(),
        this._goalCode = e.readString(),
        this._result = e.readInt(),
        this._requiredFurnis = [];
        let t = e.readInt();
        for (; t > 0;)
            this._requiredFurnis.push(e.readString()),
            t--;
        for (t = e.readInt(); t > 0;)
            this._missingFurnis[e.readString()] = "",
            t--;
        return !0
    }
    get goalId()
    {
        return this._goalId
    }
    get goalCode()
    {
        return this._goalCode
    }
    get result()
    {
        return this._result
    }
    get requiredFurnis()
    {
        return this._requiredFurnis
    }
    isMissing(e)
    {
        return !!this._missingFurnis[e]
    }
}
Za.SUBMITTED = 0;
Za.ASK_FOR_SUBMIT = 1;
Za.ASK_FOR_CONFIRM = 2;
Za.PREREQUISITES_NOT_MET = 3;
Za.ROOM_DOOR_NOT_OPEN = 4;
Za.ROOM_TOO_OLD = 5;
Za.ASK_FOR_ACCEPT_RULES = 6;
class vd {}
vd.ALLOWED = 0;
vd.REQUIRED_PERK_MISSING = 1;
vd.REQUIRED_BADGE_MISSING = 2;
class tx {
    flush()
    {
        return this._goalId = 0, this._goalCode = null, this._resultCode = 0, this._votesRemaining = 0, !0
    }
    parse(e)
    {
        return this._goalId = e.readInt(), this._goalCode = e.readString(), this._resultCode = e.readInt(), this._votesRemaining = e.readInt(), !0
    }
    get goalId()
    {
        return this._goalId
    }
    get goalCode()
    {
        return this._goalCode
    }
    get isVotingAllowedForUser()
    {
        return this._resultCode === vd.ALLOWED
    }
    get votesRemaining()
    {
        return this._votesRemaining
    }
    get resultCode()
    {
        return this._resultCode
    }
}
class sx {
    flush()
    {
        return this._schedulingStr = null, this._code = null, !0
    }
    parse(e)
    {
        return this._schedulingStr = e.readString(), this._code = e.readString(), !0
    }
    get schedulingStr()
    {
        return this._schedulingStr
    }
    get code()
    {
        return this._code
    }
}
class rx {
    flush()
    {
        return this._isPartOf = !1, this._targetId = 0, !0
    }
    parse(e)
    {
        return this._isPartOf = e.readBoolean(), this._targetId = e.readInt(), !0
    }
    get isPartOf()
    {
        return this._isPartOf
    }
    get targetId()
    {
        return this._targetId
    }
}
class ix {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !0
    }
}
class nx {
    flush()
    {
        return this._timeStr = null, this._secondsUntil = 0, !0
    }
    parse(e)
    {
        return this._timeStr = e.readString(), this._secondsUntil = e.readInt(), !0
    }
    get timeStr()
    {
        return this._timeStr
    }
    get secondsUntil()
    {
        return this._secondsUntil
    }
}
class vR {
    constructor(e)
    {
        this._recipeName = e.readString(),
        this._itemName = e.readString()
    }
    get recipeName()
    {
        return this._recipeName
    }
    get itemName()
    {
        return this._itemName
    }
}
class ax {
    constructor()
    {
        this._recipes = [],
        this._ingredients = []
    }
    flush()
    {
        return this._recipes = [], this._ingredients = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = e.readInt();
        for (let i = 0; i < t; i++)
            this._recipes.push(new vR(e));
        const r = e.readInt();
        for (let i = 0; i < r; i++)
            this._ingredients.push(e.readString());
        return !0
    }
    get recipes()
    {
        return this._recipes
    }
    get ingredients()
    {
        return this._ingredients
    }
    isActive()
    {
        return this._recipes.length > 0 || this._ingredients.length > 0
    }
}
class ox {
    constructor(e)
    {
        this._count = e.readInt(),
        this._itemName = e.readString()
    }
    get count()
    {
        return this._count
    }
    get itemName()
    {
        return this._itemName
    }
}
class lx {
    constructor()
    {
        this._ingredients = []
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._ingredients.push(new ox(e));
        return !0
    }
    flush()
    {
        return this._ingredients = [], !0
    }
    get ingredients()
    {
        return this._ingredients
    }
}
class cx {
    parse(e)
    {
        return e ? (this._count = e.readInt(), this._hasRecipes = e.readBoolean(), !0) : !1
    }
    flush()
    {
        return this._count = 0, this._hasRecipes = !1, !0
    }
    get count()
    {
        return this._count
    }
    get hasRecipes()
    {
        return this._hasRecipes
    }
}
class ux {
    parse(e)
    {
        return e ? (this._success = e.readBoolean(), this._success && (this._result = new vR(e)), !0) : !1
    }
    flush()
    {
        return this._success = !1, !0
    }
    get success()
    {
        return this._success
    }
    get result()
    {
        return this._result
    }
}
class hx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class dx {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._senderId = e.readInt(),
        this._errorCode = e.readInt()
    }
    get senderId()
    {
        return this._senderId
    }
    get errorCode()
    {
        return this._errorCode
    }
}
class _x {
    flush()
    {
        return this._failuers = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._failuers.push(new dx(e)),
            t--;
        return !0
    }
    get failures()
    {
        return this._failuers
    }
}
class gx {
    flush()
    {
        return this._success = !1, !0
    }
    parse(e)
    {
        return e ? (this._success = e.readBoolean(), !0) : !1
    }
    get success()
    {
        return this._success
    }
}
class fx {
    flush()
    {
        return this._errorCode = 0, !0
    }
    parse(e)
    {
        return e ? (this._errorCode = e.readInt(), !0) : !1
    }
    get errorCode()
    {
        return this._errorCode
    }
}
class PR {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._id = e.readInt(),
        this._name = e.readString()
    }
    get id()
    {
        return this._id
    }
    get name()
    {
        return this._name
    }
}
class Ig {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._id = e.readInt(),
        this._name = e.readString(),
        this._gender = e.readInt(),
        this._online = e.readBoolean(),
        this._followingAllowed = e.readBoolean(),
        this._figure = e.readString(),
        this._categoryId = e.readInt(),
        this._motto = e.readString(),
        this._realName = e.readString(),
        this._lastAccess = e.readString(),
        this._persistedMessageUser = e.readBoolean(),
        this._vipMember = e.readBoolean(),
        this._pocketHabboUser = e.readBoolean(),
        this._relationshipStatus = e.readShort()
    }
    get id()
    {
        return this._id
    }
    get name()
    {
        return this._name
    }
    get gender()
    {
        return this._gender
    }
    get online()
    {
        return this._online
    }
    get followingAllowed()
    {
        return this._followingAllowed
    }
    get figure()
    {
        return this._figure
    }
    get categoryId()
    {
        return this._categoryId
    }
    get motto()
    {
        return this._motto
    }
    get lastAccess()
    {
        return this._lastAccess
    }
    get realName()
    {
        return this._realName
    }
    get persistedMessageUser()
    {
        return this._persistedMessageUser
    }
    get vipMember()
    {
        return this._vipMember
    }
    get pocketHabboUser()
    {
        return this._pocketHabboUser
    }
    get relationshipStatus()
    {
        return this._relationshipStatus
    }
}
class mx {
    flush()
    {
        return this._totalFragments = 0, this._fragmentNumber = 0, this._fragment = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._totalFragments = e.readInt(),
        this._fragmentNumber = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._fragment.push(new Ig(e)),
            t--;
        return !0
    }
    get totalFragments()
    {
        return this._totalFragments
    }
    get fragmentNumber()
    {
        return this._fragmentNumber
    }
    get fragment()
    {
        return this._fragment
    }
}
class Ex {
    flush()
    {
        return this._categories = [], this._removedFriendIds = [], this._addedFriends = [], this._updatedFriends = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._categories.push(new PR(e)),
            t--;
        let r = e.readInt();
        for (; r > 0;) {
            const i = e.readInt();
            i === -1 ? this._removedFriendIds.push(e.readInt()) : i === 0 ? this._updatedFriends.push(new Ig(e)) : i === 1 && this._addedFriends.push(new Ig(e)),
            r--
        }
        return !0
    }
    get categories()
    {
        return this._categories
    }
    get removedFriendIds()
    {
        return this._removedFriendIds
    }
    get addedFriends()
    {
        return this._addedFriends
    }
    get updatedFriends()
    {
        return this._updatedFriends
    }
}
class px {
    flush()
    {
        return this._typeCode = -1, this._avatarId = 0, this._message = null, !0
    }
    parse(e)
    {
        return e ? (this._typeCode = e.readInt(), this._avatarId = e.readInt(), this._message = e.readString(), !0) : !1
    }
    get typeCode()
    {
        return this._typeCode
    }
    get avatarId()
    {
        return this._avatarId
    }
    get message()
    {
        return this._message
    }
}
class LR {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._requestId = e.readInt(),
        this._requesterName = e.readString(),
        this._figureString = e.readString(),
        this._requesterUserId = this._requestId
    }
    get requestId()
    {
        return this._requestId
    }
    get requesterName()
    {
        return this._requesterName
    }
    get requesterUserId()
    {
        return this._requesterUserId
    }
    get figureString()
    {
        return this._figureString
    }
}
class Ix {
    flush()
    {
        return this._totalRequests = 0, this._requests = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._totalRequests = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._requests.push(new LR(e)),
            t--;
        return !0
    }
    get totalRequests()
    {
        return this._totalRequests
    }
    get requests()
    {
        return this._requests
    }
}
class Ep {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this._avatarId = e.readInt(),
        this._avatarName = e.readString(),
        this._avatarMotto = e.readString(),
        this._isAvatarOnline = e.readBoolean(),
        this._canFollow = e.readBoolean(),
        this._lastOnlineData = e.readString(),
        this._avatarGender = e.readInt(),
        this._avatarFigure = e.readString(),
        this._realName = e.readString()
    }
    get avatarId()
    {
        return this._avatarId
    }
    get avatarName()
    {
        return this._avatarName
    }
    get avatarMotto()
    {
        return this._avatarMotto
    }
    get isAvatarOnline()
    {
        return this._isAvatarOnline
    }
    get canFollow()
    {
        return this._canFollow
    }
    get avatarGender()
    {
        return this._avatarGender
    }
    get avatarFigure()
    {
        return this._avatarFigure
    }
    get lastOnlineData()
    {
        return this._lastOnlineData
    }
    get realName()
    {
        return this._realName
    }
}
class Tx {
    flush()
    {
        return this._friends = [], this._others = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._friends.push(new Ep(e)),
            t--;
        let r = e.readInt();
        for (; r > 0;)
            this._others.push(new Ep(e)),
            r--;
        return !0
    }
    get friends()
    {
        return this._friends
    }
    get others()
    {
        return this._others
    }
}
class Rx {
    flush()
    {
        return this._errorCode = 0, this._userId = 0, this._message = null, !0
    }
    parse(e)
    {
        return e ? (this._errorCode = e.readInt(), this._userId = e.readInt(), this._message = e.readString(), !0) : !1
    }
    get errorCode()
    {
        return this._errorCode
    }
    get userId()
    {
        return this._userId
    }
    get message()
    {
        return this._message
    }
}
class Ox {
    flush()
    {
        return this._clientMessageId = 0, this._errorCode = 0, !0
    }
    parse(e)
    {
        return e ? (this._clientMessageId = e.readInt(), this._errorCode = e.readInt(), !0) : !1
    }
    get clientMessageId()
    {
        return this._clientMessageId
    }
    get errorCode()
    {
        return this._errorCode
    }
}
class Sx {
    flush()
    {
        return this._userFriendLimit = 0, this._normalFriendLimit = 0, this._extendedFriendLimit = 0, this._categories = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._userFriendLimit = e.readInt(),
        this._normalFriendLimit = e.readInt(),
        this._extendedFriendLimit = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._categories.push(new PR(e)),
            t--;
        return !0
    }
    get userFriendLimit()
    {
        return this._userFriendLimit
    }
    get normalFriendLimit()
    {
        return this._normalFriendLimit
    }
    get extendedFriendLimit()
    {
        return this._extendedFriendLimit
    }
    get categories()
    {
        return this._categories
    }
}
class Cx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class Ax {
    flush()
    {
        return this._count = 0, !0
    }
    parse(e)
    {
        return e ? (this._count = e.readInt(), !0) : !1
    }
    get count()
    {
        return this._count
    }
}
class Nx {
    flush()
    {
        return this._senderId = 0, this._messageText = null, this._secondsSinceSent = 0, this._extraData = null, !0
    }
    parse(e)
    {
        return e ? (this._senderId = e.readInt(), this._messageText = e.readString(), this._secondsSinceSent = e.readInt(), e.bytesAvailable && (this._extraData = e.readString()), !0) : !1
    }
    get senderId()
    {
        return this._senderId
    }
    get messageText()
    {
        return this._messageText
    }
    get secondsSinceSent()
    {
        return this._secondsSinceSent
    }
    get extraData()
    {
        return this._extraData
    }
}
class yx {
    flush()
    {
        return this._request = null, !0
    }
    parse(e)
    {
        return e ? (this._request = new LR(e), !0) : !1
    }
    get request()
    {
        return this._request
    }
}
class Mx {
    flush()
    {
        return this._errorCode = 0, this._failedRecipients = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._errorCode = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._failedRecipients.push(e.readInt()),
            t--;
        return !0
    }
    get errorCode()
    {
        return this._errorCode
    }
    get failedRecipients()
    {
        return this._failedRecipients
    }
}
class bx {
    flush()
    {
        return this._senderId = 0, this._messageText = null, !0
    }
    parse(e)
    {
        return e ? (this._senderId = e.readInt(), this._messageText = e.readString(), !0) : !1
    }
    get senderId()
    {
        return this._senderId
    }
    get messageText()
    {
        return this._messageText
    }
}
class Dx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._gameTypeId = e.readInt(), this._freeGamesLeft = e.readInt(), this._gamesPlayedTotal = e.readInt(), !0) : !1
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get freeGamesLeft()
    {
        return this._freeGamesLeft
    }
    get gamesPlayedTotal()
    {
        return this._gamesPlayedTotal
    }
    get hasUnlimitedGames()
    {
        return this._freeGamesLeft == -1
    }
}
class nu {
    flush()
    {
        return this._status = -1, this._blockLength = -1, this._gamesPlayed = -1, this._freeGamesLeft = -1, !0
    }
    parse(e)
    {
        return e ? (this._status = e.readInt(), this._blockLength = e.readInt(), this._gamesPlayed = e.readInt(), this._freeGamesLeft = e.readInt(), !0) : !1
    }
    get status()
    {
        return this._status
    }
    get blockLength()
    {
        return this._blockLength
    }
    get gamesPlayed()
    {
        return this._gamesPlayed
    }
    get freeGamesLeft()
    {
        return this._freeGamesLeft
    }
    get hasUnlimitedGames()
    {
        return this._freeGamesLeft == -1
    }
}
nu.STATUS_OK = 0;
nu.STATUS_FAILED_REASON_UNKNOWN = 1;
nu.STATUS_FAILED_REASON_GAME_DIRECTORY_IS_NOT_AVAILABLE = 2;
nu.STATUS_FAILED_REASON_HOTEL_IS_CLOSED = 3;
class vx {
    flush()
    {
        return this._position = -1, !0
    }
    parse(e)
    {
        return e ? (this._position = e.readInt(), !0) : !1
    }
    get position()
    {
        return this._position
    }
}
class ua {
    flush()
    {
        return this._reason = -1, !0
    }
    parse(e)
    {
        return e ? (this._reason = e.readInt(), !0) : !1
    }
    get reason()
    {
        return this._reason
    }
}
ua.KICKED = 1;
ua.DUPLICATE_MACHINEID = 2;
ua.INVITATION_REQUIRED = 3;
ua.NO_SPACE_IN_TEAM = 4;
ua.TEAM_NOT_FOUND = 5;
ua.USER_HAS_ACTIVE_INSTANCE = 6;
ua.USER_HAS_PENDING_INSTANCE_REQUEST = 7;
ua.USER_HAS_NO_FREE_GAMES_LEFT = 8;
class fm {
    flush()
    {
        return this._reason = -1, !0
    }
    parse(e)
    {
        return e ? (this._reason = e.readInt(), !0) : !1
    }
    get reason()
    {
        return this._reason
    }
}
fm.NOT_ENOUGH_PLAYERS = 1;
fm.GAME_HAS_NO_OWNER = 2;
class Px {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class Lx {
    flush()
    {
        return this._userId = -1, !0
    }
    parse(e)
    {
        return e ? (this._userId = e.readInt(), !0) : !1
    }
    get userId()
    {
        return this._userId
    }
}
class Ux {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._stuffCode = e.readString(), this._badgeCode = e.readString(), !0) : !1
    }
    get stuffCode()
    {
        return this._stuffCode
    }
    get badgeCode()
    {
        return this._badgeCode
    }
}
class wx {
    flush()
    {
        return this._stuffId = -1, this._achievementId = 0, this._requiredLevelBadgeCode = "", this._userProgress = 0, this._totalProgress = 0, this._endTime = 0, !0
    }
    parse(e)
    {
        return e ? (this._stuffId = e.readInt(), this._achievementId = e.readInt(), this._requiredLevelBadgeCode = e.readString(), this._userProgress = e.readInt(), this._totalProgress = e.readInt(), this._endTime = e.readInt(), !0) : !1
    }
    get stuffId()
    {
        return this._stuffId
    }
    get achievementId()
    {
        return this._achievementId
    }
    get requiredLevelBadgeCode()
    {
        return this._requiredLevelBadgeCode
    }
    get userProgress()
    {
        return this._userProgress
    }
    get totalProgress()
    {
        return this._totalProgress
    }
    get endTime()
    {
        return this._endTime
    }
}
class Fx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._stuffId = e.readInt();
        const t = e.readInt();
        let r = 0;
        for (; r < t;)
            this._achievements.push(new DR(e)),
            r++;
        return this._endTime = e.readInt(), !0
    }
    get stuffId()
    {
        return this._stuffId
    }
    get achievements()
    {
        return this._achievements
    }
    get endTime()
    {
        return this._endTime
    }
}
class xx {
    constructor(e, t, r, i)
    {
        this._gameTypeId = e,
        this._achievementId = t,
        this._achievementName = r,
        this._levels = i
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get achievementId()
    {
        return this._achievementId
    }
    get achievementName()
    {
        return this._achievementName
    }
    get levels()
    {
        return this._levels
    }
}
class Gx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._achievements = [];
        const t = e.readInt();
        let r = 0;
        for (; r < t;) {
            const i = e.readInt(),
                n = e.readInt();
            let o = 0;
            for (; o < n;) {
                const l = e.readInt(),
                    c = e.readString(),
                    u = e.readInt();
                this._achievements.push(new xx(i, l, c, u)),
                o++
            }
            r++
        }
        return !0
    }
    get achievements()
    {
        return this._achievements
    }
}
class Bx {
    constructor(e, t, r, i, n, o)
    {
        this._gameId = e,
        this._gameNameId = t,
        this._bgColor = r,
        this._textColor = i,
        this._assetUrl = n,
        this._supportUrl = o
    }
    get gameId()
    {
        return this._gameId
    }
    get gameNameId()
    {
        return this._gameNameId
    }
    get bgColor()
    {
        return this._bgColor
    }
    get textColor()
    {
        return this._textColor
    }
    get assetUrl()
    {
        return this._assetUrl
    }
    get supportUrl()
    {
        return this._supportUrl
    }
}
class kx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._gameTypeId = e.readInt(), this._inviterId = e.readInt(), !0) : !1
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get inviterId()
    {
        return this._inviterId
    }
}
class Vx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._games = [];
        const t = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = e.readInt(),
                n = e.readString(),
                o = e.readString();
            let l = parseInt(o, 16);
            l = l | 4278190080;
            const c = e.readString();
            let u = parseInt(c, 16);
            u = u | 4278190080;
            const h = e.readString(),
                d = e.readString();
            this._games.push(new Bx(i, n, l, u, h, d))
        }
        return !0
    }
    get games()
    {
        return this._games
    }
}
const Tg = class {
    flush()
    {
        return !0
    }
    parse(s)
    {
        return s ? (this._gameTypeId = s.readInt(), this._status = s.readInt(), !0) : !1
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get isOk()
    {
        return this._status == Tg.OK
    }
    get isInMaintenance()
    {
        return this._status == Tg.MAINTENANCE
    }
}
;
let mm = Tg;
mm.OK = 0;
mm.MAINTENANCE = 1;
class Hx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._gameTypeId = e.readInt(), !0) : !1
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
}
class UR {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._gameTypeId = e.readInt(), this._reason = e.readInt(), !0) : !1
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get reason()
    {
        return this._reason
    }
}
UR.DUPLICATE_MACHINEID = 1;
class jx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._gameTypeId = e.readInt(), !0) : !1
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
}
class Wx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._gameTypeId = e.readInt(),
        this._gameClientId = e.readString(),
        this._url = e.readString(),
        this._quality = e.readString(),
        this._scaleMode = e.readString(),
        this._frameRate = e.readInt(),
        this._minMajorVersion = e.readInt(),
        this._minMinorVersion = e.readInt(),
        this._params = new Map;
        const t = e.readInt();
        let r = 0;
        for (; r < t;)
            this._params.set(e.readString(), e.readString()),
            r++;
        return !0
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get url()
    {
        return this._url
    }
    get quality()
    {
        return this._quality
    }
    get scaleMode()
    {
        return this._scaleMode
    }
    get frameRate()
    {
        return this._frameRate
    }
    get minMajorVersion()
    {
        return this._minMajorVersion
    }
    get minMinorVersion()
    {
        return this._minMinorVersion
    }
    get params()
    {
        return this._params
    }
    get gameClientId()
    {
        return this._gameClientId
    }
}
class Yx {
    flush()
    {
        return this._gameTypeId = 0, this._url = null, this._gameClientId = null, !0
    }
    parse(e)
    {
        return e ? (this._gameTypeId = e.readInt(), this._gameClientId = e.readString(), this._url = e.readString(), !0) : !1
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get url()
    {
        return this._url
    }
    get gameClientId()
    {
        return this._gameClientId
    }
}
class zx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._gameTypeId = e.readInt(), this._gameClientId = e.readString(), !0) : !1
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get gameClientId()
    {
        return this._gameClientId
    }
}
class Kx {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class Pd {
    flush()
    {
        return this._year = -1, this._week = -1, this._maxOffset = -1, this._currentOffset = -1, this._minutesUntilReset = -1, !0
    }
    parse(e)
    {
        return e ? (this._year = e.readInt(), this._week = e.readInt(), this._maxOffset = e.readInt(), this._currentOffset = e.readInt(), this._minutesUntilReset = e.readInt(), !0) : !1
    }
    get year()
    {
        return this._year
    }
    get week()
    {
        return this._week
    }
    get maxOffset()
    {
        return this._maxOffset
    }
    get currentOffset()
    {
        return this._currentOffset
    }
    get minutesUntilReset()
    {
        return this._minutesUntilReset
    }
}
class qx {
    constructor(e)
    {
        this._name = e.readString(),
        this._figure = e.readString(),
        this._gender = e.readString(),
        this._rank = e.readInt(),
        this._score = e.readInt()
    }
    get name()
    {
        return this._name
    }
    get figure()
    {
        return this._figure
    }
    get gender()
    {
        return this._gender
    }
    get rank()
    {
        return this._rank
    }
    get score()
    {
        return this._score
    }
}
class Xx {
    flush()
    {
        return this._gameTypeId = -1, this._products = [], this._minutesUntilNextWeek = 0, this._rewardingOn = !0, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._gameTypeId = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._products.push(new oi(e)),
            t--;
        return this._minutesUntilNextWeek = e.readInt(), this._rewardingOn = e.readBoolean(), !0
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get products()
    {
        return this._products
    }
    get minutesUntilNextWeek()
    {
        return this._minutesUntilNextWeek
    }
    get rewardingOn()
    {
        return this._rewardingOn
    }
}
class Qx {
    flush()
    {
        return this._gameTypeId = -1, this._winners = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._gameTypeId = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._winners.push(new qx(e)),
            t--;
        return !0
    }
    get gameTypeId()
    {
        return this._gameTypeId
    }
    get winners()
    {
        return this._winners
    }
}
class Jx {
    flush()
    {
        return this._errorCode = 0, !0
    }
    parse(e)
    {
        return e ? (this._errorCode = e.readInt(), !0) : !1
    }
    get errorCode()
    {
        return this._errorCode
    }
}
class Zx {
    flush()
    {
        return this._phoneStatusCode = -1, this._millisecondsToAllowProcessReset = -1, !0
    }
    parse(e)
    {
        return e ? (this._phoneStatusCode = e.readInt(), this._collectionStatusCode = e.readInt(), this._millisecondsToAllowProcessReset = e.readInt(), !0) : !1
    }
    get phoneStatusCode()
    {
        return this._phoneStatusCode
    }
    get collectionStatusCode()
    {
        return this._collectionStatusCode
    }
    get millisecondsToAllowProcessReset()
    {
        return this._millisecondsToAllowProcessReset
    }
}
class $x {
    flush()
    {
        return this._resultCode = -1, !0
    }
    parse(e)
    {
        return e ? (this._resultCode = e.readInt(), this._millisToAllowProcessReset = e.readInt(), !0) : !1
    }
    get resultCode()
    {
        return this._resultCode
    }
    get millisToAllowProcessReset()
    {
        return this._millisToAllowProcessReset
    }
}
class eG {
    flush()
    {
        return this._resultCode = -1, this._millisecondsToAllowProcessReset = -1, !0
    }
    parse(e)
    {
        return e ? (this._resultCode = e.readInt(), this._millisecondsToAllowProcessReset = e.readInt(), !0) : !1
    }
    get resultCode()
    {
        return this._resultCode
    }
    get millisToAllowProcessReset()
    {
        return this._millisecondsToAllowProcessReset
    }
}
class tG {
    flush()
    {
        return this._bases = new Map, this._symbols = new Map, this._partColors = new Map, this._colorsA = new Map, this._colorsB = new Map, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const l = e.readInt(),
                c = e.readString(),
                u = e.readString();
            this._bases.set(l, [c, u]),
            t--
        }
        let r = e.readInt();
        for (; r > 0;) {
            const l = e.readInt(),
                c = e.readString(),
                u = e.readString();
            this._symbols.set(l, [c, u]),
            r--
        }
        let i = e.readInt();
        for (; i > 0;) {
            const l = e.readInt(),
                c = e.readString();
            this._partColors.set(l, c),
            i--
        }
        let n = e.readInt();
        for (; n > 0;) {
            const l = e.readInt(),
                c = e.readString();
            this._colorsA.set(l, c),
            n--
        }
        let o = e.readInt();
        for (; o > 0;) {
            const l = e.readInt(),
                c = e.readString();
            this._colorsB.set(l, c),
            o--
        }
        return !0
    }
    get bases()
    {
        return this._bases
    }
    get symbols()
    {
        return this._symbols
    }
    get partColors()
    {
        return this._partColors
    }
    get colorsA()
    {
        return this._colorsA
    }
    get colorsB()
    {
        return this._colorsB
    }
}
class sG {
    flush()
    {
        return this._groupCost = 0, this._availableRooms = new Map, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._groupCost = e.readInt();
        let t = e.readInt();
        for (; t > 0;) {
            const r = e.readInt(),
                i = e.readString();
            e.readBoolean(),
            this._availableRooms.set(r, i),
            t--
        }
        return !0
    }
    get groupCost()
    {
        return this._groupCost
    }
    get availableRooms()
    {
        return this._availableRooms
    }
}
class rG {
    flush()
    {
        return this._userId = 0, this._furnitureCount = 0, !0
    }
    parse(e)
    {
        return e ? (this._userId = e.readInt(), this._furnitureCount = e.readInt(), !0) : !1
    }
    get userId()
    {
        return this._userId
    }
    get furnitureCount()
    {
        return this._furnitureCount
    }
}
class iG {
    flush()
    {
        return this._id = 0, this._type = 0, this._title = null, this._description = null, this._badge = null, this._roomId = 0, this._roomName = null, this._membershipType = 0, this._membersCount = 0, this._isFavorite = !1, this._createdAt = null, this._isOwner = !1, this._isAdmin = !1, this._ownerName = null, this._flag = !1, this._canMembersDecorate = !1, this._pendingRequestsCount = 0, !0
    }
    parse(e)
    {
        return e ? (this._id = e.readInt(), e.readBoolean(), this._type = e.readInt(), this._title = e.readString(), this._description = e.readString(), this._badge = e.readString(), this._roomId = e.readInt(), this._roomName = e.readString(), this._membershipType = e.readInt(), this._membersCount = e.readInt(), this._isFavorite = e.readBoolean(), this._createdAt = e.readString(), this._isOwner = e.readBoolean(), this._isAdmin = e.readBoolean(), this._ownerName = e.readString(), this._flag = e.readBoolean(), this._canMembersDecorate = e.readBoolean(), this._pendingRequestsCount = e.readInt(), !0) : !1
    }
    get id()
    {
        return this._id
    }
    get type()
    {
        return this._type
    }
    get title()
    {
        return this._title
    }
    get description()
    {
        return this._description
    }
    get badge()
    {
        return this._badge
    }
    get roomId()
    {
        return this._roomId
    }
    get roomName()
    {
        return this._roomName
    }
    get membershipType()
    {
        return this._membershipType
    }
    get membersCount()
    {
        return this._membersCount
    }
    get isFavorite()
    {
        return this._isFavorite
    }
    get createdAt()
    {
        return this._createdAt
    }
    get isOwner()
    {
        return this._isOwner
    }
    get isAdmin()
    {
        return this._isAdmin
    }
    get ownerName()
    {
        return this._ownerName
    }
    get flag()
    {
        return this._flag
    }
    get canMembersDecorate()
    {
        return this._canMembersDecorate
    }
    get pendingRequestsCount()
    {
        return this._pendingRequestsCount
    }
}
class nG {
    constructor(e)
    {
        this.isBase = e,
        this.key = 0,
        this.color = 0,
        this.position = 4
    }
    get code()
    {
        return this.key === 0 ? null : (this.isBase ? "b" : "s") + (this.key < 100 ? "0" : "") + (this.key < 10 ? "0" : "") + this.key + (this.color < 10 ? "0" : "") + this.color + this.position
    }
}
class Ws {}
Ws.OWNER = 0;
Ws.ADMIN = 1;
Ws.MEMBER = 2;
Ws.REQUESTED = 3;
Ws.DELETED = 4;
class aG {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._rank = -1, this._id = 0, this._name = null, this._figure = null, this._joinedAt = null, !0
    }
    parse(e)
    {
        return e ? (this._rank = e.readInt(), this._id = e.readInt(), this._name = e.readString(), this._figure = e.readString(), this._joinedAt = e.readString(), !0) : !1
    }
    get id()
    {
        return this._id
    }
    get name()
    {
        return this._name
    }
    get figure()
    {
        return this._figure
    }
    get rank()
    {
        return this._rank
    }
    get joinedAt()
    {
        return this._joinedAt
    }
}
class oG {
    flush()
    {
        return this._groupId = 0, this._groupTitle = null, this._roomId = 0, this._badge = null, this._totalMembersCount = 0, this._result = [], this._admin = !1, this._pageSize = 0, this._pageIndex = 0, this._level = 0, this._query = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._groupId = e.readInt(),
        this._groupTitle = e.readString(),
        this._roomId = e.readInt(),
        this._badge = e.readString(),
        this._totalMembersCount = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._result.push(new aG(e)),
            t--;
        return this._admin = e.readBoolean(), this._pageSize = e.readInt(), this._pageIndex = e.readInt(), this._level = e.readInt(), this._query = e.readString(), !0
    }
    get groupId()
    {
        return this._groupId
    }
    get groupTitle()
    {
        return this._groupTitle
    }
    get roomId()
    {
        return this._roomId
    }
    get badge()
    {
        return this._badge
    }
    get totalMembersCount()
    {
        return this._totalMembersCount
    }
    get result()
    {
        return this._result
    }
    get admin()
    {
        return this._admin
    }
    get pageSize()
    {
        return this._pageSize
    }
    get pageIndex()
    {
        return this._pageIndex
    }
    get level()
    {
        return this._level
    }
    get query()
    {
        return this._query
    }
}
class lG {
    flush()
    {
        return this._roomId = 0, this._groupId = 0, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._groupId = e.readInt(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get guildId()
    {
        return this._groupId
    }
}
class cG {
    flush()
    {
        return this._roomId = 0, this._roomName = null, this._id = 0, this._title = null, this._description = null, this._colorA = 0, this._colorB = 0, this._state = 0, this._canMembersDecorate = !1, this._badgeParts = new Map, this._badgeCode = null, this._membersCount = 0, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        e.readInt() === 1 && (this._roomId = e.readInt(), this._roomName = e.readString(), e.readBoolean()),
        e.readBoolean(),
        this._id = e.readInt(),
        this._title = e.readString(),
        this._description = e.readString(),
        e.readInt(),
        this._colorA = e.readInt(),
        this._colorB = e.readInt(),
        this._state = e.readInt(),
        this._canMembersDecorate = e.readInt() === 0,
        e.readBoolean(),
        e.readString();
        const r = e.readInt();
        for (let i = 0; i < r; i++) {
            const n = new nG(i === 0);
            n.key = e.readInt(),
            n.color = e.readInt(),
            n.position = e.readInt(),
            n.key === 0 && (n.position = 4),
            this._badgeParts.set(i, n)
        }
        return this._badgeCode = e.readString(), this._membersCount = e.readInt(), !0
    }
    get roomId()
    {
        return this._roomId
    }
    get roomName()
    {
        return this._roomName
    }
    get id()
    {
        return this._id
    }
    get title()
    {
        return this._title
    }
    get description()
    {
        return this._description
    }
    get colorA()
    {
        return this._colorA
    }
    get colorB()
    {
        return this._colorB
    }
    get state()
    {
        return this._state
    }
    get canMembersDecorate()
    {
        return this._canMembersDecorate
    }
    get badgeParts()
    {
        return this._badgeParts
    }
    get badgeCode()
    {
        return this._badgeCode
    }
    get membersCount()
    {
        return this._membersCount
    }
}
class uG {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return this._groupId = e.readInt(), !0
    }
    get groupId()
    {
        return this._groupId
    }
}
class jc {
    static parse(e)
    {
        return this.fillFromMessage(new jc, e)
    }
    static fillFromMessage(e, t)
    {
        return e._groupId = t.readInt(), e._name = t.readString(), e._description = t.readString(), e._icon = t.readString(), e._totalThreads = t.readInt(), e._leaderboardScore = t.readInt(), e._totalMessages = t.readInt(), e._unreadMessages = t.readInt(), e._lastMessageId = t.readInt(), e._lastMessageAuthorId = t.readInt(), e._lastMessageAuthorName = t.readString(), e._lastMessageTimeAsSecondsAgo = t.readInt(), e
    }
    get groupId()
    {
        return this._groupId
    }
    get name()
    {
        return this._name
    }
    get description()
    {
        return this._description
    }
    get icon()
    {
        return this._icon
    }
    get totalThreads()
    {
        return this._totalThreads
    }
    get leaderboardScore()
    {
        return this._leaderboardScore
    }
    get totalMessages()
    {
        return this._totalMessages
    }
    get unreadMessages()
    {
        return this._unreadMessages
    }
    get lastMessageId()
    {
        return this._lastMessageId
    }
    get lastMessageAuthorId()
    {
        return this._lastMessageAuthorId
    }
    get lastMessageAuthorName()
    {
        return this._lastMessageAuthorName
    }
    get lastMessageTimeAsSecondsAgo()
    {
        return this._lastMessageTimeAsSecondsAgo
    }
    updateFrom(e)
    {
        this._totalThreads = e._totalThreads,
        this._totalMessages = e._totalMessages,
        this._unreadMessages = e._unreadMessages,
        this._lastMessageAuthorId = e._lastMessageAuthorId,
        this._lastMessageAuthorName = e._lastMessageAuthorName,
        this._lastMessageId = e._lastMessageId,
        this._lastMessageTimeAsSecondsAgo = e._lastMessageTimeAsSecondsAgo
    }
    get lastReadMessageId()
    {
        return this._totalMessages - this._unreadMessages
    }
    set lastReadMessageId(e)
    {
        this._unreadMessages = this._totalMessages - e,
        this._unreadMessages < 0 && (this._unreadMessages = 0)
    }
    addNewThread(e)
    {
        this._lastMessageAuthorId = e.lastUserId,
        this._lastMessageAuthorName = e.lastUserName,
        this._lastMessageId = e.lastMessageId,
        this._lastMessageTimeAsSecondsAgo = e.lastCommentTime,
        this._totalThreads++,
        this._totalMessages++,
        this._unreadMessages = 0
    }
}
class Em extends jc {
    static parse(e)
    {
        const t = new Em;
        return jc.fillFromMessage(t, e), t._readPermissions = e.readInt(), t._postMessagePermissions = e.readInt(), t._postThreadPermissions = e.readInt(), t._moderatePermissions = e.readInt(), t._readPermissionError = e.readString(), t._postMessagePermissionError = e.readString(), t._postThreadPermissionError = e.readString(), t._moderatePermissionError = e.readString(), t._reportPermissionError = e.readString(), t._canChangeSettings = e.readBoolean(), t._isStaff = e.readBoolean(), t
    }
    get readPermissions()
    {
        return this._readPermissions
    }
    get postMessagePermissions()
    {
        return this._postMessagePermissions
    }
    get postThreadPermissions()
    {
        return this._postThreadPermissions
    }
    get moderatePermissions()
    {
        return this._moderatePermissions
    }
    get hasReadPermissionError()
    {
        return this._readPermissionError.length === 0
    }
    get canReport()
    {
        return !0
    }
    get hasPostMessagePermissionError()
    {
        return this._postMessagePermissionError.length === 0
    }
    get hasPostThreadPermissionError()
    {
        return this._postThreadPermissionError.length === 0
    }
    get hasModeratePermissionError()
    {
        return this._moderatePermissionError.length === 0
    }
    get canChangeSettings()
    {
        return this._canChangeSettings
    }
    get isStaf()
    {
        return this._isStaff
    }
    get readPermissionError()
    {
        return this._readPermissionError
    }
    get postMessagePermissionError()
    {
        return this._postMessagePermissionError
    }
    get postThreadPermissionError()
    {
        return this._postThreadPermissionError
    }
    get moderatePermissionError()
    {
        return this._moderatePermissionError
    }
    get reportPermissionError()
    {
        return this._reportPermissionError
    }
}
class hG {
    flush()
    {
        return this._extendedForumData = null, !0
    }
    parse(e)
    {
        return e ? (this._extendedForumData = Em.parse(e), !0) : !1
    }
    get extendedForumData()
    {
        return this._extendedForumData
    }
}
class dG {
    flush()
    {
        return this._listCode = -1, this._totalAmount = 0, this._startIndex = -1, this._amount = 0, this._forums = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._listCode = e.readInt(),
        this._totalAmount = e.readInt(),
        this._startIndex = e.readInt(),
        this._amount = e.readInt(),
        this._forums = [];
        let t = 0;
        for (; t < this._amount;)
            this._forums.push(jc.parse(e)),
            t++;
        return !0
    }
    get listCode()
    {
        return this._listCode
    }
    get totalAmount()
    {
        return this._totalAmount
    }
    get startIndex()
    {
        return this._startIndex
    }
    get amount()
    {
        return this._amount
    }
    get forums()
    {
        return this._forums
    }
}
class au {
    static parse(e)
    {
        const t = new au;
        return t._threadId = e.readInt(), t._authorId = e.readInt(), t._authorName = e.readString(), t._header = e.readString(), t._isPinned = e.readBoolean(), t._isLocked = e.readBoolean(), t._creationTimeAsSecondsAgo = e.readInt(), t._totalMessages = e.readInt(), t._unreadMessagesCount = e.readInt(), t._lastMessageId = e.readInt(), t._lastUserId = e.readInt(), t._lastUserName = e.readString(), t._lastCommentTime = e.readInt(), t._state = e.readByte(), t._adminId = e.readInt(), t._adminName = e.readString(), t._adminOperationTimeAsSecondsAgo = e.readInt(), t
    }
    get adminOperationTimeAsSecondsAgo()
    {
        return this._adminOperationTimeAsSecondsAgo
    }
    set adminOperationTimeAsSecondsAgo(e)
    {
        this._adminOperationTimeAsSecondsAgo = e
    }
    get lastCommentTime()
    {
        return this._lastCommentTime
    }
    set lastCommentTime(e)
    {
        this._lastCommentTime = e
    }
    get threadId()
    {
        return this._threadId
    }
    set threadId(e)
    {
        this._threadId = e
    }
    get authorId()
    {
        return this._authorId
    }
    set authorId(e)
    {
        this._authorId = e
    }
    get authorName()
    {
        return this._authorName
    }
    set authorName(e)
    {
        this._authorName = e
    }
    get creationTimeAsSecondsAgo()
    {
        return this._creationTimeAsSecondsAgo
    }
    set creationTimeAsSecondsAgo(e)
    {
        this._creationTimeAsSecondsAgo = e
    }
    get header()
    {
        return this._header
    }
    set header(e)
    {
        this._header = e
    }
    get lastMessageId()
    {
        return this._lastMessageId
    }
    set lastMessageId(e)
    {
        this._lastMessageId = e
    }
    get lastUserId()
    {
        return this._lastUserId
    }
    set lastUserId(e)
    {
        this._lastUserId = e
    }
    get lastUserName()
    {
        return this._lastUserName
    }
    set lastUserName(e)
    {
        this._lastUserName = e
    }
    get totalMessages()
    {
        return this._totalMessages
    }
    set totalMessages(e)
    {
        this._totalMessages = e
    }
    get unreadMessagesCount()
    {
        return this._unreadMessagesCount
    }
    set unreadMessagesCount(e)
    {
        this._unreadMessagesCount = e
    }
    get state()
    {
        return this._state
    }
    set state(e)
    {
        this._state = e
    }
    get adminId()
    {
        return this._adminId
    }
    set adminId(e)
    {
        this._adminId = e
    }
    get adminName()
    {
        return this._adminName
    }
    set adminName(e)
    {
        this._adminName = e
    }
    get isPinned()
    {
        return this._isPinned
    }
    set isPinned(e)
    {
        this._isPinned = e
    }
    get isLocked()
    {
        return this._isLocked
    }
    set isLocked(e)
    {
        this._isLocked = e
    }
}
class _G {
    flush()
    {
        return this._groupId = -1, this._startIndex = -1, this._amount = 0, this._threads = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._groupId = e.readInt(),
        this._startIndex = e.readInt(),
        this._amount = e.readInt(),
        this._threads = [];
        let t = 0;
        for (; t < this._amount;)
            this._threads.push(au.parse(e)),
            t++;
        return !0
    }
    get groupId()
    {
        return this._groupId
    }
    get startIndex()
    {
        return this._startIndex
    }
    get amount()
    {
        return this._amount
    }
    get threads()
    {
        return this._threads
    }
}
class ou {
    static parse(e)
    {
        const t = new ou;
        return t._messageId = e.readInt(), t._messageIndex = e.readInt(), t._authorId = e.readInt(), t._authorName = e.readString(), t._authorFigure = e.readString(), t._creationTime = e.readInt(), t._messageText = e.readString(), t._state = e.readByte(), t._adminId = e.readInt(), t._adminName = e.readString(), t._adminOperationTimeAsSeccondsAgo = e.readInt(), t._authorPostCount = e.readInt(), t
    }
    get state()
    {
        return this._state
    }
    set state(e)
    {
        this._state = e
    }
    get adminId()
    {
        return this._adminId
    }
    set adminId(e)
    {
        this._adminId = e
    }
    get adminName()
    {
        return this._adminName
    }
    set adminName(e)
    {
        this._adminName = e
    }
    get adminOperationTimeAsSeccondsAgo()
    {
        return this._adminOperationTimeAsSeccondsAgo
    }
    set adminOperationTimeAsSeccondsAgo(e)
    {
        this._adminOperationTimeAsSeccondsAgo = e
    }
    get messageId()
    {
        return this._messageId
    }
    set messageId(e)
    {
        this._messageId = e
    }
    get creationTime()
    {
        return this._creationTime
    }
    set creationTime(e)
    {
        this._creationTime = e
    }
    get authorName()
    {
        return this._authorName
    }
    set authorName(e)
    {
        this._authorName = e
    }
    get authorFigure()
    {
        return this._authorFigure
    }
    set authorFigure(e)
    {
        this._authorFigure = e
    }
    get threadId()
    {
        return this._threadId
    }
    set threadId(e)
    {
        this._threadId = e
    }
    get messageIndex()
    {
        return this._messageIndex
    }
    set messageIndex(e)
    {
        this._messageIndex = e
    }
    set groupID(e)
    {
        this._groupId = e
    }
    get groupId()
    {
        return this._groupId
    }
    get authorId()
    {
        return this._authorId
    }
    set authorId(e)
    {
        this._authorId = e
    }
    get messageText()
    {
        return this._messageText
    }
    set messageText(e)
    {
        this._messageText = e
    }
    get authorPostCount()
    {
        return this._authorPostCount
    }
    set authorPostCount(e)
    {
        this._authorPostCount = e
    }
}
class gG {
    flush()
    {
        return this._groupId = -1, this._threadId = -1, this._message = null, !0
    }
    parse(e)
    {
        return e ? (this._groupId = e.readInt(), this._threadId = e.readInt(), this._message = ou.parse(e), !0) : !1
    }
    get groupId()
    {
        return this._groupId
    }
    get threadId()
    {
        return this._threadId
    }
    get message()
    {
        return this._message
    }
}
class fG {
    flush()
    {
        return this._groupId = -1, this._thread = null, !0
    }
    parse(e)
    {
        return e ? (this._groupId = e.readInt(), this._thread = au.parse(e), !0) : !1
    }
    get groupId()
    {
        return this._groupId
    }
    get thread()
    {
        return this._thread
    }
}
class mG {
    flush()
    {
        return this._groupId = -1, this._threadId = -1, this._startIndex = -1, this._amount = 0, this._messages = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._groupId = e.readInt(),
        this._threadId = e.readInt(),
        this._startIndex = e.readInt(),
        this._amount = e.readInt(),
        this._messages = [];
        let t = 0;
        for (; t < this._amount;) {
            const r = ou.parse(e);
            r.groupID = this._groupId,
            r.threadId = this._threadId,
            this._messages.push(r),
            t++
        }
        return !0
    }
    get groupId()
    {
        return this._groupId
    }
    get threadId()
    {
        return this._threadId
    }
    get startIndex()
    {
        return this._startIndex
    }
    get amount()
    {
        return this._amount
    }
    get messages()
    {
        return this._messages
    }
}
class EG {
    flush()
    {
        return this._count = 0, !0
    }
    parse(e)
    {
        return e ? (this._count = e.readInt(), !0) : !1
    }
    get count()
    {
        return this._count
    }
}
class pG {
    flush()
    {
        return this._groupId = -1, this._threadId = -1, this._message = null, !0
    }
    parse(e)
    {
        return e ? (this._groupId = e.readInt(), this._threadId = e.readInt(), this._message = ou.parse(e), !0) : !1
    }
    get groupId()
    {
        return this._groupId
    }
    get threadId()
    {
        return this._threadId
    }
    get message()
    {
        return this._message
    }
}
class IG {
    flush()
    {
        return this._groupId = -1, this._thread = null, !0
    }
    parse(e)
    {
        return e ? (this._groupId = e.readInt(), this._thread = au.parse(e), !0) : !1
    }
    get groupId()
    {
        return this._groupId
    }
    get thread()
    {
        return this._thread
    }
}
class TG {
    constructor()
    {
        this._encryptedPublicKey = null,
        this._serverClientEncryption = !1
    }
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._encryptedPublicKey = e.readString(), e.bytesAvailable && (this._serverClientEncryption = e.readBoolean()), !0) : !1
    }
    get encryptedPublicKey()
    {
        return this._encryptedPublicKey
    }
    get serverClientEncryption()
    {
        return this._serverClientEncryption
    }
}
class RG {
    flush()
    {
        return this._reason = -1, !0
    }
    parse(e)
    {
        return e ? (this._reason = 0, e.bytesAvailable && (this._reason = e.readInt()), !0) : !1
    }
    get reason()
    {
        return this._reason
    }
}
class OG {
    flush()
    {
        return this._accounts && (this._accounts = new Map), !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._accounts = new Map;
        let t = e.readInt();
        for (; t > 0;)
            this._accounts.set(e.readInt(), e.readString()),
            t--;
        return !0
    }
    get accounts()
    {
        return this._accounts
    }
}
class SG {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._encryptedPrime = e.readString(), this._encryptedGenerator = e.readString(), !0) : !1
    }
    get encryptedPrime()
    {
        return this._encryptedPrime
    }
    get encryptedGenerator()
    {
        return this._encryptedGenerator
    }
}
class CG {
    flush()
    {
        return this._noobnessLevel = 0, !0
    }
    parse(e)
    {
        return e ? (this._noobnessLevel = e.readInt(), !0) : !1
    }
    get noobnessLevel()
    {
        return this._noobnessLevel
    }
}
class AG {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._infoUrl = e.readString(), !0) : !1
    }
    get infoUrl()
    {
        return this._infoUrl
    }
}
class NG {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !0
    }
}
class yG {
    flush()
    {
        return this._calls = [], !0
    }
    parse(e)
    {
        this._calls = [];
        const t = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = e.readString(),
                n = e.readString(),
                o = e.readString();
            this._calls.push({
                callId: i,
                timeStamp: n,
                message: o
            })
        }
        return !0
    }
    get pendingCalls()
    {
        return this._calls
    }
    get count()
    {
        return this._calls.length
    }
}
class MG {
    flush()
    {
        return this._message = null, !0
    }
    parse(e)
    {
        return this._message = e.readString(), !0
    }
    get message()
    {
        return this._message
    }
}
class bG {
    flush()
    {
        return this._resultType = 0, this._messageText = null, !0
    }
    parse(e)
    {
        return e ? (this._resultType = e.readInt(), this._messageText = e.readString(), !0) : !1
    }
    get resultType()
    {
        return this._resultType
    }
    get messageText()
    {
        return this._messageText
    }
}
class DG {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !0
    }
}
class vG {
    flush()
    {
        return this._acceptanceTimeout = -1, !0
    }
    parse(e)
    {
        return this._acceptanceTimeout = e.readInt(), !0
    }
    get acceptanceTimeout()
    {
        return this._acceptanceTimeout
    }
}
class PG {
    flush()
    {
        return this._winningVoteCode = -1, this._ownVoteCode = -1, this._finalStatus = null, !0
    }
    parse(e)
    {
        this._finalStatus = [],
        this._winningVoteCode = e.readInt(),
        this._ownVoteCode = e.readInt();
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._finalStatus.push(e.readInt());
        return !0
    }
    get winningVoteCode()
    {
        return this._winningVoteCode
    }
    get ownVoteCode()
    {
        return this._ownVoteCode
    }
    get finalStatus()
    {
        return this._finalStatus
    }
}
class LG {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return this._votingTimeout = e.readInt(), this._chatRecord = e.readString(), !0
    }
    get votingTimeout()
    {
        return this._votingTimeout
    }
    get chatRecord()
    {
        return this._chatRecord
    }
}
class jo {
    flush()
    {
        return this._status = null, !0
    }
    parse(e)
    {
        this._status = [];
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._status.push(e.readInt());
        return !0
    }
    get status()
    {
        return this._status
    }
}
jo.AWAITING_VOTE = 0;
jo.VOTED_OK = 1;
jo.VOTED_BAD = 2;
jo.VOTED_VERY_BAD = 3;
jo.NO_VOTE = 4;
jo.FINDING_NEW_VOTER = 5;
class UG {
    flush()
    {
        return this._onDuty = !1, this._guidesOnDuty = 0, this._helpersOnDuty = 0, this._guardiansOnDuty = 0, !0
    }
    parse(e)
    {
        return e ? (this._onDuty = e.readBoolean(), this._guidesOnDuty = e.readInt(), this._helpersOnDuty = e.readInt(), this._guardiansOnDuty = e.readInt(), !0) : !1
    }
    get onDuty()
    {
        return this._onDuty
    }
    get guidesOnDuty()
    {
        return this._guidesOnDuty
    }
    get helpersOnDuty()
    {
        return this._helpersOnDuty
    }
    get guardiansOnDuty()
    {
        return this._guardiansOnDuty
    }
}
class wG {
    constructor(e, t, r, i, n, o, l)
    {
        this._type = e,
        this._secondsAgo = t,
        this._isGuide = r,
        this._otherPartyName = i,
        this._otherPartyFigure = n,
        this._description = o,
        this._roomName = l
    }
    get type()
    {
        return this._type
    }
    set type(e)
    {
        this._type = e
    }
    get secondsAgo()
    {
        return this._secondsAgo
    }
    set secondsAgo(e)
    {
        this._secondsAgo = e
    }
    get isGuide()
    {
        return this._isGuide
    }
    set isGuide(e)
    {
        this._isGuide = e
    }
    get otherPartyName()
    {
        return this._otherPartyName
    }
    set otherPartyName(e)
    {
        this._otherPartyName = e
    }
    get otherPartyFigure()
    {
        return this._otherPartyFigure
    }
    set otherPartyFigure(e)
    {
        this._otherPartyFigure = e
    }
    get description()
    {
        return this._description
    }
    set description(e)
    {
        this._description = e
    }
    get roomName()
    {
        return this._roomName
    }
    set roomName(e)
    {
        this._roomName = e
    }
}
class lu {
    flush()
    {
        return this._statusCode = 0, this._pendingTicket = null, !0
    }
    parse(e)
    {
        return e ? (this._statusCode = e.readInt(), this._pendingTicket = new wG(e.readInt(), e.readInt(), e.readBoolean(), e.readString(), e.readString(), e.readString(), e.readString()), !0) : !1
    }
    get statusCode()
    {
        return this._statusCode
    }
    get pendingTicket()
    {
        return this._pendingTicket
    }
}
lu.GUIDE_REPORTING_STATUS_OK = 0;
lu.GUIDE_REPORTING_STATUS_PENDING_TICKET = 1;
lu.GUIDE_REPORTING_STATUS_ABUSIVE = 2;
lu.GUIDE_REPORTING_STATUS_REPORTING_TOO_QUICKLY = 3;
class FG {
    flush()
    {
        return this._asGuide = !1, this._helpRequestType = 0, this._helpRequestDescription = null, this._roleSpecificWaitTime = 0, !0
    }
    parse(e)
    {
        return e ? (this._asGuide = e.readBoolean(), this._helpRequestType = e.readInt(), this._helpRequestDescription = e.readString(), this._roleSpecificWaitTime = e.readInt(), !0) : !1
    }
    get asGuide()
    {
        return this._asGuide
    }
    get helpRequestType()
    {
        return this._helpRequestType
    }
    get helpRequestDescription()
    {
        return this._helpRequestDescription
    }
    get roleSpecificWaitTime()
    {
        return this._roleSpecificWaitTime
    }
}
class xG {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class GG {
    flush()
    {
        return this._endReason = 0, !0
    }
    parse(e)
    {
        return e ? (this._endReason = e.readInt(), !0) : !1
    }
    get endReason()
    {
        return this._endReason
    }
}
class $l {
    flush()
    {
        return this._errorCode = 0, !0
    }
    parse(e)
    {
        return e ? (this._errorCode = e.readInt(), !0) : !1
    }
    get errorCode()
    {
        return this._errorCode
    }
}
$l.ERROR_GENERIC = 0;
$l.ERROR_GUIDES_REJECT = 1;
$l.ERROR_NOT_ENOUGH_GUIDES = 2;
$l.ERROR_NOT_ENOUGH_VOTES = 3;
$l.ERROR_NO_CHATLOG_FOUND = 4;
class BG {
    flush()
    {
        return this._roomId = 0, this._roomName = null, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._roomName = e.readString(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get roomName()
    {
        return this._roomName
    }
}
class kG {
    flush()
    {
        return this._chatMessage = null, this._senderId = 0, !0
    }
    parse(e)
    {
        return e ? (this._chatMessage = e.readString(), this._senderId = e.readInt(), !0) : !1
    }
    get chatMessage()
    {
        return this._chatMessage
    }
    get senderId()
    {
        return this._senderId
    }
}
class VG {
    flush()
    {
        return this._isTyping = !1, !0
    }
    parse(e)
    {
        return e ? (this._isTyping = e.readBoolean(), !0) : !1
    }
    get isTyping()
    {
        return this._isTyping
    }
}
class HG {
    flush()
    {
        return this._requesterRoomId = 0, !0
    }
    parse(e)
    {
        return e ? (this._requesterRoomId = e.readInt(), !0) : !1
    }
    get requesterRoomId()
    {
        return this._requesterRoomId
    }
}
class jG {
    flush()
    {
        return this._requesterUserId = 0, this._requesterName = null, this._requesterFigure = null, this._guideUserId = 0, this._guideName = null, this._guideFigure = null, !0
    }
    parse(e)
    {
        return e ? (this._requesterUserId = e.readInt(), this._requesterName = e.readString(), this._requesterFigure = e.readString(), this._guideUserId = e.readInt(), this._guideName = e.readString(), this._guideFigure = e.readString(), !0) : !1
    }
    get requesterUserId()
    {
        return this._requesterUserId
    }
    get requesterName()
    {
        return this._requesterName
    }
    get requesterFigure()
    {
        return this._requesterFigure
    }
    get guideUserId()
    {
        return this._guideUserId
    }
    get guideName()
    {
        return this._guideName
    }
    get guideFigure()
    {
        return this._guideFigure
    }
}
class cu {
    flush()
    {
        return this._result = 0, !0
    }
    parse(e)
    {
        return e ? (this._result = e.readInt(), !0) : !1
    }
    get result()
    {
        return this._result
    }
}
cu.CREATION_RESULT_OK = 0;
cu.CREATION_RESULT_UNABLE_TO_REPORT = 1;
cu.CREATION_RESULT_NO_CHATLOG_FOUND = 2;
cu.CREATION_RESULT_BULLY_ALREADY_REPORTED = 3;
class Ld {
    flush()
    {
        return this._resolution = 0, !0
    }
    parse(e)
    {
        return e ? (this._resolution = e.readInt(), !0) : !1
    }
    get resolution()
    {
        return this._resolution
    }
}
Ld.RESOLUTION_GUARDIANS_TOOK_ACTION = 0;
Ld.RESOLUTION_FORWARDED_TO_MODERATORS = 1;
Ld.RESOLUTION_REPORTER_IS_ABUSIVE = 2;
class WG {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class YG {
    flush()
    {
        return this._closeReason = 0, this._messageText = "", !0
    }
    parse(e)
    {
        return e ? (this._closeReason = e.readInt(), this._messageText = e.readString(), !0) : !1
    }
    get closeReason()
    {
        return this._closeReason
    }
    get messageText()
    {
        return this._messageText
    }
}
class zG {
    flush()
    {
        return this._quizCode = null, this._questionIds = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._quizCode = e.readString();
        const t = e.readInt();
        this._questionIds = [];
        for (let r = 0; r < t; r++)
            this._questionIds.push(e.readInt());
        return !0
    }
    get quizCode()
    {
        return this._quizCode
    }
    get questionIds()
    {
        return this._questionIds
    }
}
class KG {
    flush()
    {
        return this._quizCode = null, this._questionIdsForWrongAnswers = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._quizCode = e.readString();
        const t = e.readInt();
        this._questionIdsForWrongAnswers = [];
        for (let r = 0; r < t; r++)
            this._questionIdsForWrongAnswers.push(e.readInt());
        return !0
    }
    get quizCode()
    {
        return this._quizCode
    }
    get questionIdsForWrongAnswers()
    {
        return this._questionIdsForWrongAnswers
    }
}
class Ud {
    constructor(e)
    {
        this._id = e.readInt(),
        this._title = e.readString(),
        this._bodyText = e.readString(),
        this._buttonText = e.readString(),
        this._linkType = e.readInt(),
        this._linkContent = e.readString(),
        this._imageUrl = e.readString()
    }
    get id()
    {
        return this._id
    }
    get title()
    {
        return this._title
    }
    get bodyText()
    {
        return this._bodyText
    }
    get buttonText()
    {
        return this._buttonText
    }
    get linkType()
    {
        return this._linkType
    }
    get linkContent()
    {
        return this._linkContent
    }
    get imageUrl()
    {
        return this._imageUrl
    }
}
Ud.LINK_TYPE_URL = 0;
Ud.LINK_TYPE_INTERNAL = 1;
Ud.LINK_TYPE_NO_LINK = 2;
class qG {
    flush()
    {
        return this._articles = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._articles.push(new Ud(e));
        return !0
    }
    get articles()
    {
        return this._articles
    }
}
class XG {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._acknowledged = e.readBoolean(), !0) : !1
    }
    get acknowledged()
    {
        return this._acknowledged
    }
}
class QG {
    flush()
    {
        return this._newOfferId = -1, this._newPrice = 0, this._requestedOfferId = -1, !0
    }
    parse(e)
    {
        return e ? (this._result = e.readInt(), this._newOfferId = e.readInt(), this._newPrice = e.readInt(), this._requestedOfferId = e.readInt(), !0) : !1
    }
    get result()
    {
        return this._result
    }
    get offerId()
    {
        return this._newOfferId
    }
    get newPrice()
    {
        return this._newPrice
    }
    get requestedOfferId()
    {
        return this._requestedOfferId
    }
}
class JG {
    flush()
    {
        return this._offerId = 0, this._success = !1, !0
    }
    parse(e)
    {
        return e ? (this._offerId = e.readInt(), this._success = e.readBoolean(), !0) : !1
    }
    get offerId()
    {
        return this._offerId
    }
    get success()
    {
        return this._success
    }
}
class ZG {
    flush()
    {
        return this._tokenCount = 0, this._result = 0, !0
    }
    parse(e)
    {
        return e ? (this._result = e.readInt(), this._tokenCount = e.readInt(), !0) : !1
    }
    get tokenCount()
    {
        return this._tokenCount
    }
    get resultCode()
    {
        return this._result
    }
}
class $G {
    flush()
    {
        return this._enabled = !1, this._commission = 0, this._credits = 0, this._advertisements = 0, this._maximumPrice = 0, this._minimumPrice = 0, this._offerTime = 0, this._displayTime = 0, !0
    }
    parse(e)
    {
        return e ? (this._enabled = e.readBoolean(), this._commission = e.readInt(), this._credits = e.readInt(), this._advertisements = e.readInt(), this._minimumPrice = e.readInt(), this._maximumPrice = e.readInt(), this._offerTime = e.readInt(), this._displayTime = e.readInt(), !0) : !1
    }
    get enabled()
    {
        return this._enabled
    }
    get commission()
    {
        return this._commission
    }
    get credits()
    {
        return this._credits
    }
    get advertisements()
    {
        return this._advertisements
    }
    get minimumPrice()
    {
        return this._minimumPrice
    }
    get maximumPrice()
    {
        return this._maximumPrice
    }
    get offerTime()
    {
        return this._offerTime
    }
    get displayTime()
    {
        return this._displayTime
    }
}
class eB {
    flush()
    {
        return this._result = 0, !0
    }
    parse(e)
    {
        return e ? (this._result = e.readInt(), !0) : !1
    }
    get result()
    {
        return this._result
    }
}
class tB {
    flush()
    {
        return this._averagePrice = 0, this._currentOfferCount = 0, this._historyLength = 0, this._dayOffsets = [], this._averagePrices = [], this._soldAmounts = [], this._furniTypeId = 0, this._furniCategoryId = 0, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._averagePrice = e.readInt(),
        this._currentOfferCount = e.readInt(),
        this._historyLength = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._dayOffsets.push(e.readInt()),
            this._averagePrices.push(e.readInt()),
            this._soldAmounts.push(e.readInt()),
            t--;
        return this._furniCategoryId = e.readInt(), this._furniTypeId = e.readInt(), !0
    }
    get averagePrice()
    {
        return this._averagePrice
    }
    get offerCount()
    {
        return this._currentOfferCount
    }
    get historyLength()
    {
        return this._historyLength
    }
    get dayOffsets()
    {
        return this._dayOffsets
    }
    get averagePrices()
    {
        return this._averagePrices
    }
    get soldAmounts()
    {
        return this._soldAmounts
    }
    get furniTypeId()
    {
        return this._furniTypeId
    }
    get furniCategoryId()
    {
        return this._furniCategoryId
    }
}
class wR {
    constructor(e, t, r, i, n, o, l, c, u, h=-1)
    {
        this._timeLeftMinutes = -1,
        this._offerId = e,
        this._furniId = t,
        this._furniType = r,
        this._extraData = i,
        this._stuffData = n,
        this._price = o,
        this._status = l,
        this._timeLeftMinutes = c,
        this._averagePrice = u,
        this._offerCount = h
    }
    get offerId()
    {
        return this._offerId
    }
    get furniId()
    {
        return this._furniId
    }
    get furniType()
    {
        return this._furniType
    }
    get extraData()
    {
        return this._extraData
    }
    get stuffData()
    {
        return this._stuffData
    }
    get price()
    {
        return this._price
    }
    get status()
    {
        return this._status
    }
    get timeLeftMinutes()
    {
        return this._timeLeftMinutes
    }
    get averagePrice()
    {
        return this._averagePrice
    }
    get offerCount()
    {
        return this._offerCount
    }
    get isUniqueLimitedItem()
    {
        return this.stuffData != null && this.stuffData.uniqueSeries > 0
    }
}
const Ic = class {
    constructor()
    {
        this.MAX_LIST_LENGTH = 500
    }
    flush()
    {
        return this._offers = [], this._totalItemsFound = 0, !0
    }
    parse(s)
    {
        if (!s)
            return !1;
        const e = s.readInt();
        let t = 0;
        for (; t < e;) {
            const r = s.readInt(),
                i = s.readInt();
            let n = s.readInt(),
                o = -1,
                l = "",
                c = null;
            n === Ic.FURNITYPE_STUFF ? (o = s.readInt(), c = Ja.parseObjectData(s)) : n === Ic.FURNITYPE_WALL ? (o = s.readInt(), l = s.readString()) : n == Ic.FAKE_FURNITYPE_UNIQUE && (o = s.readInt(), c = Tn.getData(Lr.FORMAT_KEY), c.uniqueNumber = s.readInt(), c.uniqueSeries = s.readInt(), n = Ic.FURNITYPE_STUFF);
            const u = s.readInt(),
                h = s.readInt(),
                d = s.readInt(),
                m = s.readInt(),
                p = new wR(r, o, n, l, c, u, i, h, d, m);
            t < this.MAX_LIST_LENGTH && this._offers.push(p),
            t++
        }
        return this._totalItemsFound = s.readInt(), !0
    }
    get offers()
    {
        return this._offers
    }
    get totalItemsFound()
    {
        return this._totalItemsFound
    }
}
;
let wd = Ic;
wd.FURNITYPE_STUFF = 1;
wd.FURNITYPE_WALL = 2;
wd.FAKE_FURNITYPE_UNIQUE = 3;
const FR = class {
    flush()
    {
        return this._offers = [], !0
    }
    parse(s)
    {
        if (!s)
            return !1;
        this._offers = [],
        this._creditsWaiting = s.readInt();
        const e = s.readInt();
        for (let t = 0; t < e; t++) {
            const r = s.readInt(),
                i = s.readInt();
            let n = s.readInt(),
                o,
                l,
                c;
            n == 1 ? (o = s.readInt(), c = this.getStuffData(s)) : n == 2 ? (o = s.readInt(), l = s.readString()) : n == 3 && (o = s.readInt(), c = Tn.getData(Lr.FORMAT_KEY), c.uniqueNumber = s.readInt(), c.uniqueSeries = s.readInt(), n = 1);
            const u = s.readInt(),
                h = s.readInt(),
                d = s.readInt(),
                m = new wR(r, o, n, l, c, u, i, h, d);
            t < FR.MAX_LIST_LENGTH && this._offers.push(m)
        }
        return !0
    }
    get offers()
    {
        return this._offers
    }
    get creditsWaiting()
    {
        return this._creditsWaiting
    }
    getStuffData(s)
    {
        const e = s.readInt(),
            t = Tn.getData(e);
        return t.parseWrapper(s), t
    }
}
;
let xR = FR;
xR.MAX_LIST_LENGTH = 500;
class sB {
    constructor(e, t, r, i, n)
    {
        this._timestamp = e,
        this._habboId = t,
        this._username = r,
        this._message = i,
        this._hasHighlighting = n
    }
    get timestamp()
    {
        return this._timestamp
    }
    get userId()
    {
        return this._habboId
    }
    get userName()
    {
        return this._username
    }
    get message()
    {
        return this._message
    }
    get hasHighlighting()
    {
        return this._hasHighlighting
    }
}
class Dn {
    constructor(e)
    {
        this._context = new Map,
        this._chatlog = [],
        this._recordType = e.readByte();
        const t = e.readShort();
        for (let i = 0; i < t; i++) {
            const n = e.readString(),
                o = e.readByte();
            switch (o) {
            case 0:
                this._context.set(n, e.readBoolean());
                break;
            case 1:
                this._context.set(n, e.readInt());
                break;
            case 2:
                this._context.set(n, e.readString());
                break;
            default:
                throw new Error("Unknown data type " + o)
            }
        }
        const r = e.readShort();
        for (let i = 0; i < r; i++) {
            const n = e.readString(),
                o = e.readInt(),
                l = e.readString(),
                c = e.readString(),
                u = e.readBoolean();
            this._chatlog.push(new sB(n, o, l, c, u))
        }
    }
    get recordType()
    {
        return this._recordType
    }
    get context()
    {
        return this._context
    }
    get chatlog()
    {
        return this._chatlog
    }
    get roomId()
    {
        return this.getInt("roomId")
    }
    get roomName()
    {
        return this._context.get("roomName")
    }
    get groupId()
    {
        return this.getInt("groupId")
    }
    get threadId()
    {
        return this.getInt("threadId")
    }
    get messageId()
    {
        return this.getInt("messageId")
    }
    getInt(e)
    {
        const t = this._context.get(e);
        return t || 0
    }
}
Dn.TYPE_SIMPLE = 0;
Dn.TYPE_ROOM_CHAT = 1;
Dn.TYPE_IM_SESSION = 2;
Dn.TYPE_DISCUSSION_THREAD = 3;
Dn.TYPE_DISCUSSION_MESSAGE = 4;
Dn.TYPE_SELFIE = 5;
Dn.TYPE_PHOTO = 6;
class rB {
    constructor(e)
    {
        this._issueId = e.readInt(),
        this._callerUserId = e.readInt(),
        this._reportedUserId = e.readInt(),
        this._chatRecordId = e.readInt(),
        this._chatRecord = new Dn(e)
    }
    get issueId()
    {
        return this._issueId
    }
    get callerUserId()
    {
        return this._callerUserId
    }
    get reportedUserId()
    {
        return this._reportedUserId
    }
    get chatRecordId()
    {
        return this._chatRecordId
    }
    get chatRecord()
    {
        return this._chatRecord
    }
}
class iB {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new rB(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class nB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return this._issueId = parseInt(e.readString()), !0
    }
    get issueId()
    {
        return this._issueId
    }
}
class Ba {
    constructor(e, t, r, i, n, o, l, c, u, h, d, m, p, E, T, I)
    {
        this._disposed = !1,
        this._issueId = e,
        this._state = t,
        this._categoryId = r,
        this._reportedCategoryId = i,
        this._issueAgeInMilliseconds = n,
        this._priority = o,
        this._groupingId = l,
        this._reporterUserId = c,
        this._reporterUserName = u,
        this._reportedUserId = h,
        this._reportedUserName = d,
        this._pickerUserId = m,
        this._pickerUserName = p,
        this._message = E,
        this._chatRecordId = T,
        this._patterns = I,
        this._creationTimeInMilliseconds = Pe()
    }
    get issueId()
    {
        return this._issueId
    }
    get state()
    {
        return this._state
    }
    get categoryId()
    {
        return this._categoryId
    }
    get reportedCategoryId()
    {
        return this._reportedCategoryId
    }
    get issueAgeInMilliseconds()
    {
        return this._issueAgeInMilliseconds
    }
    get priority()
    {
        return this._priority
    }
    get groupingId()
    {
        return this._groupingId
    }
    get reporterUserId()
    {
        return this._reporterUserId
    }
    get reporterUserName()
    {
        return this._reporterUserName
    }
    get reportedUserId()
    {
        return this._reportedUserId
    }
    get reportedUserName()
    {
        return this._reportedUserName
    }
    get pickerUserId()
    {
        return this._pickerUserId
    }
    get pickerUserName()
    {
        return this._pickerUserName
    }
    get message()
    {
        return this._message
    }
    get chatRecordId()
    {
        return this._chatRecordId
    }
    get patterns()
    {
        return this._patterns
    }
    dispose()
    {
        if (!this.disposed) {
            for (const e of this._patterns)
                e.dispose();
            this._patterns = [],
            this._disposed = !0
        }
    }
    get disposed()
    {
        return this._disposed
    }
    getOpenTime(e)
    {
        const r = (this._issueAgeInMilliseconds + e - this._creationTimeInMilliseconds) / 1e3 / 60,
            i = r % 60,
            n = r / 60,
            o = (i < 10 ? "0" : "") + i;
        return (n < 10 ? "0" : "") + n + ":" + o
    }
}
Ba.STATE_OPEN = 1;
Ba.STATE_PICKED = 2;
Ba.STATE_CLOSED = 3;
class aB {
    constructor(e)
    {
        this._disposed = !1,
        this._pattern = e.readString(),
        this._startIndex = e.readInt(),
        this._endIndex = e.readInt()
    }
    dispose()
    {
        this._disposed = !0,
        this._pattern = "",
        this._startIndex = -1,
        this._endIndex = -1
    }
    get disposed()
    {
        return this._disposed
    }
    get pattern()
    {
        return this._pattern
    }
    get startIndex()
    {
        return this._startIndex
    }
    get endIndex()
    {
        return this._endIndex
    }
}
class GR {
    get issueData()
    {
        return this._issueData
    }
    flush()
    {
        return this._issueData = null, !0
    }
    parse(e)
    {
        const t = e.readInt(),
            r = e.readInt(),
            i = e.readInt(),
            n = e.readInt(),
            o = e.readInt(),
            l = e.readInt(),
            c = e.readInt(),
            u = e.readInt(),
            h = e.readString(),
            d = e.readInt(),
            m = e.readString(),
            p = e.readInt(),
            E = e.readString(),
            T = e.readString(),
            I = e.readInt(),
            S = e.readInt(),
            A = [];
        for (let N = 0; N < S; N++)
            A.push(new aB(e));
        return this._issueData = new Ba(t, r, i, n, o, l, c, u, h, d, m, p, E, T, I, A), !0
    }
}
class oB {
    flush()
    {
        return this._issues = null, !0
    }
    parse(e)
    {
        this._issues = [];
        const t = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = e.readInt(),
                n = e.readInt(),
                o = e.readString(),
                l = new Ba(i, 0, 0, 0, 0, 0, 0, 0, null, 0, null, n, o, null, 0, []);
            this._issues.push(l)
        }
        return this._retryEnabled = e.readBoolean(), this._retryCount = e.readInt(), !0
    }
    get issues()
    {
        return this._issues
    }
    get retryEnabled()
    {
        return this._retryEnabled
    }
    get retryCount()
    {
        return this._retryCount
    }
}
class lB {
    flush()
    {
        return this._message = "", this._url = null, !0
    }
    parse(e)
    {
        return e ? (this._message = e.readString(), this._url = e.readString(), !0) : !1
    }
    get message()
    {
        return this._message
    }
    get url()
    {
        return this._url
    }
}
class cB {
    flush()
    {
        return this._userId = -1, this._success = !1, !0
    }
    parse(e)
    {
        return this._userId = e.readInt(), this._success = e.readBoolean(), !0
    }
    get userId()
    {
        return this._userId
    }
    get success()
    {
        return this._success
    }
}
class uB {
    constructor(e)
    {
        this._disposed = !1;
        const t = new GR;
        this._issues = [],
        this._messageTemplates = [],
        this._roomMessageTemplates = [];
        let r = e.readInt(),
            i = 0;
        for (; i < r;)
            t.parse(e) && this._issues.push(t.issueData),
            i++;
        for (r = e.readInt(), i = 0; i < r;)
            this._messageTemplates.push(e.readString()),
            i++;
        for (r = e.readInt(), i = 0; i < r;)
            e.readString(),
            i++;
        for (this._cfhPermission = e.readBoolean(), this._chatlogsPermission = e.readBoolean(), this._alertPermission = e.readBoolean(), this._kickPermission = e.readBoolean(), this._banPermission = e.readBoolean(), this._roomAlertPermission = e.readBoolean(), this._roomKickPermission = e.readBoolean(), r = e.readInt(), i = 0; i < r;)
            this._roomMessageTemplates.push(e.readString()),
            i++
    }
    dispose()
    {
        this._disposed || (this._disposed = !0, this._messageTemplates = null, this._roomMessageTemplates = null, this._issues = null)
    }
    get disposed()
    {
        return this._disposed
    }
    get messageTemplates()
    {
        return this._messageTemplates
    }
    get roomMessageTemplates()
    {
        return this._roomMessageTemplates
    }
    get issues()
    {
        return this._issues
    }
    get cfhPermission()
    {
        return this._cfhPermission
    }
    get chatlogsPermission()
    {
        return this._chatlogsPermission
    }
    get alertPermission()
    {
        return this._alertPermission
    }
    get kickPermission()
    {
        return this._kickPermission
    }
    get banPermission()
    {
        return this._banPermission
    }
    get roomAlertPermission()
    {
        return this._roomAlertPermission
    }
    get roomKickPermission()
    {
        return this._roomKickPermission
    }
}
class hB {
    constructor()
    {
        this._data = null
    }
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return this._data = new uB(e), !0
    }
    get data()
    {
        return this._data
    }
}
class dB {
    flush()
    {
        return this._message = "", this._url = "", !0
    }
    parse(e)
    {
        return e ? (this._message = e.readString(), this._url = e.readString(), !0) : !1
    }
    get message()
    {
        return this._message
    }
    get url()
    {
        return this._url
    }
}
class _B {
    constructor(e)
    {
        if (this._tags = [], this._exists = e.readBoolean(), !this.exists)
            return;
        this._name = e.readString(),
        this._desc = e.readString();
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._tags.push(e.readString())
    }
    get name()
    {
        return this._name
    }
    get desc()
    {
        return this._desc
    }
    get tags()
    {
        return this._tags
    }
    get exists()
    {
        return this._exists
    }
    get disposed()
    {
        return this._disposed
    }
    dispose()
    {
        this._disposed || (this._disposed = !0, this._tags = null)
    }
}
class gB {
    constructor(e)
    {
        this._flatId = e.readInt(),
        this._userCount = e.readInt(),
        this._ownerInRoom = e.readBoolean(),
        this._ownerId = e.readInt(),
        this._ownerName = e.readString(),
        this._room = new _B(e)
    }
    get flatId()
    {
        return this._flatId
    }
    get userCount()
    {
        return this._userCount
    }
    get ownerInRoom()
    {
        return this._ownerInRoom
    }
    get ownerId()
    {
        return this._ownerId
    }
    get ownerName()
    {
        return this._ownerName
    }
    get room()
    {
        return this._room
    }
    get disposed()
    {
        return this._disposed
    }
    dispose()
    {
        this._disposed || (this._disposed = !0, this._room != null && (this._room.dispose(), this._room = null))
    }
}
class fB {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new gB(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class mB {
    flush()
    {
        return this._windowX = 0, this._windowY = 0, this._windowWidth = 0, this._windowHeight = 0, !0
    }
    parse(e)
    {
        return this._windowX = e.readInt(), this._windowY = e.readInt(), this._windowWidth = e.readInt(), this._windowHeight = e.readInt(), !0
    }
    get windowX()
    {
        return this._windowX
    }
    get windowY()
    {
        return this._windowY
    }
    get windowWidth()
    {
        return this._windowWidth
    }
    get windowHeight()
    {
        return this._windowHeight
    }
}
class EB {
    constructor(e)
    {
        this._lastSanctionTime = "",
        this._sanctionAgeHours = 0,
        this._userId = e.readInt(),
        this._userName = e.readString(),
        this._figure = e.readString(),
        this._registrationAgeInMinutes = e.readInt(),
        this._minutesSinceLastLogin = e.readInt(),
        this._online = e.readBoolean(),
        this._cfhCount = e.readInt(),
        this._abusiveCfhCount = e.readInt(),
        this._cautionCount = e.readInt(),
        this._banCount = e.readInt(),
        this._tradingLockCount = e.readInt(),
        this._tradingExpiryDate = e.readString(),
        this._lastPurchaseDate = e.readString(),
        this._identityId = e.readInt(),
        this._identityRelatedBanCount = e.readInt(),
        this._primaryEmailAddress = e.readString(),
        this._userClassification = e.readString(),
        e.bytesAvailable && (this._lastSanctionTime = e.readString(), this._sanctionAgeHours = e.readInt())
    }
    get userId()
    {
        return this._userId
    }
    get userName()
    {
        return this._userName
    }
    get figure()
    {
        return this._figure
    }
    get registrationAgeInMinutes()
    {
        return this._registrationAgeInMinutes
    }
    get minutesSinceLastLogin()
    {
        return this._minutesSinceLastLogin
    }
    get online()
    {
        return this._online
    }
    get cfhCount()
    {
        return this._cfhCount
    }
    get abusiveCfhCount()
    {
        return this._abusiveCfhCount
    }
    get cautionCount()
    {
        return this._cautionCount
    }
    get banCount()
    {
        return this._banCount
    }
    get tradingLockCount()
    {
        return this._tradingLockCount
    }
    get tradingExpiryDate()
    {
        return this._tradingExpiryDate
    }
    get lastPurchaseDate()
    {
        return this._lastPurchaseDate
    }
    get identityId()
    {
        return this._identityId
    }
    get identityRelatedBanCount()
    {
        return this._identityRelatedBanCount
    }
    get primaryEmailAddress()
    {
        return this._primaryEmailAddress
    }
    get userClassification()
    {
        return this._userClassification
    }
    get lastSanctionTime()
    {
        return this._lastSanctionTime
    }
    get sanctionAgeHours()
    {
        return this._sanctionAgeHours
    }
}
class pB {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new EB(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class IB {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new Dn(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class TB {
    constructor(e)
    {
        this._roomId = e.readInt(),
        this._roomName = e.readString(),
        this._enterHour = e.readInt(),
        this._enterMinute = e.readInt()
    }
    get roomId()
    {
        return this._roomId
    }
    get roomName()
    {
        return this._roomName
    }
    get enterHour()
    {
        return this._enterHour
    }
    get enterMinute()
    {
        return this._enterMinute
    }
}
class RB {
    constructor(e)
    {
        this._rooms = [],
        this._userId = e.readInt(),
        this._userName = e.readString();
        const t = e.readInt();
        let r = 0;
        for (; r < t;)
            this._rooms.push(new TB(e)),
            r++
    }
    get userId()
    {
        return this._userId
    }
    get userName()
    {
        return this._userName
    }
    get rooms()
    {
        return this._rooms
    }
}
class OB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return this._data = new RB(e), !0
    }
    get data()
    {
        return this._data
    }
}
class SB {
    flush()
    {
        return this._message = "", !0
    }
    parse(e)
    {
        return e ? (this._message = e.readString(), !0) : !1
    }
    get message()
    {
        return this._message
    }
}
class CB {
    constructor(e)
    {
        this._roomChatlogs = [],
        this._userId = e.readInt(),
        this._username = e.readString();
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._roomChatlogs.push(new Dn(e))
    }
    get userId()
    {
        return this._userId
    }
    get username()
    {
        return this._username
    }
    get roomChatlogs()
    {
        return this._roomChatlogs
    }
}
class AB {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new CB(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class NB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class yB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._contentType = e.readString(), this._classId = e.readInt(), !0) : !1
    }
    get contentType()
    {
        return this._contentType
    }
    get classId()
    {
        return this._classId
    }
}
class MB {
    flush()
    {
        return this._boxColor = null, this._keyColor = null, !0
    }
    parse(e)
    {
        return e ? (this._boxColor = e.readString(), this._keyColor = e.readString(), !0) : !1
    }
    get boxColor()
    {
        return this._boxColor
    }
    get keyColor()
    {
        return this._keyColor
    }
}
class bB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class DB {
    flush()
    {
        return this._canCreate = !1, this._errorCode = 0, !0
    }
    parse(e)
    {
        return e ? (this._canCreate = e.readBoolean(), this._errorCode = e.readInt(), !0) : !1
    }
    get canCreate()
    {
        return this._canCreate
    }
    get errorCode()
    {
        return this._errorCode
    }
}
class pm {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._resultCode = e.readInt(), this._roomLimit = e.readInt(), !0) : !1
    }
    get resultCode()
    {
        return this._resultCode
    }
    get roomLimit()
    {
        return this._roomLimit
    }
}
pm.CREATION_ALLOWED = 0;
pm.ROOM_LIMIT_REACHED = 1;
class vB {
    constructor(e)
    {
        this._categoryToCurrentUserCountMap = new Map,
        this._categoryToMaxUserCountMap = new Map;
        const t = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = e.readInt(),
                n = e.readInt(),
                o = e.readInt();
            this._categoryToCurrentUserCountMap.set(i, n),
            this._categoryToMaxUserCountMap.set(i, o)
        }
    }
    get categoryToCurrentUserCountMap()
    {
        return this._categoryToCurrentUserCountMap
    }
    get categoryToMaxUserCountMap()
    {
        return this._categoryToMaxUserCountMap
    }
}
class PB {
    constructor(e, t=0, r=0)
    {
        this._goalId = t,
        this._pageIndex = r,
        e && (this._goalId = e.readInt(), this._pageIndex = e.readInt(), this._pageCount = e.readInt())
    }
    get goalId()
    {
        return this._goalId
    }
    get pageIndex()
    {
        return this._pageIndex
    }
    get pageCount()
    {
        return this._pageCount
    }
}
const Tc = class {
    constructor(s)
    {
        this._index = s.readInt(),
        this._popupCaption = s.readString(),
        this._popupDesc = s.readString(),
        this._showDetails = s.readInt() == 1,
        this._picText = s.readString(),
        this._picRef = s.readString(),
        this._folderId = s.readInt(),
        this._userCount = s.readInt(),
        this._type = s.readInt(),
        this._type == Tc.TYPE_TAG ? this._tag = s.readString() : this._type == Tc.TYPE_GUEST_ROOM ? this._guestRoomData = new nt(s) : this._open = s.readBoolean()
    }
    dispose()
    {
        this._disposed || (this._disposed = !0, this._guestRoomData != null && (this._guestRoomData.flush(), this._guestRoomData = null))
    }
    get disposed()
    {
        return this._disposed
    }
    get type()
    {
        return this._type
    }
    get index()
    {
        return this._index
    }
    get popupCaption()
    {
        return this._popupCaption
    }
    get popupDesc()
    {
        return this._popupDesc
    }
    get showDetails()
    {
        return this._showDetails
    }
    get picText()
    {
        return this._picText
    }
    get picRef()
    {
        return this._picRef
    }
    get folderId()
    {
        return this._folderId
    }
    get tag()
    {
        return this._tag
    }
    get userCount()
    {
        return this._userCount
    }
    get guestRoomData()
    {
        return this._guestRoomData
    }
    get open()
    {
        return this._open
    }
    toggleOpen()
    {
        this._open = !this._open
    }
    get maxUsers()
    {
        return this.type == Tc.TYPE_TAG ? 0 : this.type == Tc.TYPE_GUEST_ROOM ? this._guestRoomData.maxUserCount : 0
    }
}
;
let Fd = Tc;
Fd.TYPE_TAG = 1;
Fd.TYPE_GUEST_ROOM = 2;
Fd.TYPE_FOLDER = 4;
class LB {
    constructor(e)
    {
        this._rooms = [],
        this._searchType = e.readInt(),
        this._searchParam = e.readString();
        const t = e.readInt();
        for (let i = 0; i < t; i++)
            this._rooms.push(new nt(e));
        e.readBoolean() && (this._ad = new Fd(e))
    }
    dispose()
    {
        if (!this._disposed) {
            if (this._disposed = !0, this._rooms != null)
                for (const e of this._rooms)
                    e.flush();
            this._ad != null && (this._ad.dispose(), this._ad = null),
            this._rooms = null
        }
    }
    get disposed()
    {
        return this._disposed
    }
    get searchType()
    {
        return this._searchType
    }
    get searchParam()
    {
        return this._searchParam
    }
    get rooms()
    {
        return this._rooms
    }
    get ad()
    {
        return this._ad
    }
}
class BR {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._id = -1, this._code = null, this._filter = null, this._localization = null, !0
    }
    parse(e)
    {
        return e ? (this._id = e.readInt(), this._code = e.readString(), this._filter = e.readString(), this._localization = e.readString(), !0) : !1
    }
    get id()
    {
        return this._id
    }
    get code()
    {
        return this._code
    }
    get filter()
    {
        return this._filter
    }
    get localization()
    {
        return this._localization
    }
}
class UB {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._code = null, this._data = null, this._action = -1, this._closed = !1, this._mode = -1, this._rooms = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._code = e.readString(),
        this._data = e.readString(),
        this._action = e.readInt(),
        this._closed = e.readBoolean(),
        this._mode = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._rooms.push(new nt(e)),
            t--;
        return !0
    }
    get code()
    {
        return this._code
    }
    get data()
    {
        return this._data
    }
    get action()
    {
        return this._action
    }
    get closed()
    {
        return this._closed
    }
    get mode()
    {
        return this._mode
    }
    get rooms()
    {
        return this._rooms
    }
}
class wB {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._code = null, this._data = null, this._results = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._code = e.readString(),
        this._data = e.readString();
        let t = e.readInt();
        for (; t > 0;)
            this._results.push(new UB(e)),
            t--;
        return !0
    }
    get code()
    {
        return this._code
    }
    get data()
    {
        return this._data
    }
    get results()
    {
        return this._results
    }
}
class FB {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._code = null, this._savedSearches = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._code = e.readString();
        let t = e.readInt();
        for (; t > 0;)
            this._savedSearches.push(new BR(e)),
            t--;
        return !0
    }
    get code()
    {
        return this._code
    }
    get savedSearches()
    {
        return this._savedSearches
    }
}
class xB {
    constructor(e)
    {
        this._adId = e.readInt(),
        this._ownerAvatarId = e.readInt(),
        this._ownerAvatarName = e.readString(),
        this._flatId = e.readInt(),
        this._eventType = e.readInt(),
        this._eventName = e.readString(),
        this._eventDescription = e.readString();
        const t = e.readInt(),
            r = e.readInt(),
            i = new Date;
        let n = i.getTime();
        const o = t * 60 * 1e3;
        n = n - o;
        const l = new Date(n);
        this._creationTime = l.getDate() + "-" + l.getMonth() + "-" + l.getFullYear() + " " + l.getHours() + ":" + l.getMinutes();
        let c = i.getTime();
        const u = r * 60 * 1e3;
        c = c + u,
        this._expirationDate = new Date(c),
        this._categoryId = e.readInt()
    }
    dispose()
    {
        this._disposed || (this._disposed = !0)
    }
    get disposed()
    {
        return this._disposed
    }
    get adId()
    {
        return this._adId
    }
    get ownerAvatarId()
    {
        return this._ownerAvatarId
    }
    get ownerAvatarName()
    {
        return this._ownerAvatarName
    }
    get flatId()
    {
        return this._flatId
    }
    get categoryId()
    {
        return this._categoryId
    }
    get eventType()
    {
        return this._eventType
    }
    get eventName()
    {
        return this._eventName
    }
    get eventDescription()
    {
        return this._eventDescription
    }
    get creationTime()
    {
        return this._creationTime
    }
    get expirationDate()
    {
        return this._expirationDate
    }
}
class GB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._data = new vB(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class BB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._data = new PB(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class kB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._globalId = e.readString(), this._convertedId = e.readInt(), !0) : !1
    }
    get globalId()
    {
        return this._globalId
    }
    get convertedId()
    {
        return this._convertedId
    }
}
class VB {
    flush()
    {
        return this._userName = null, !0
    }
    parse(e)
    {
        return e ? (this._userName = e.readString(), !0) : !1
    }
    get userName()
    {
        return this._userName
    }
}
class HB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._flatId = e.readInt(), this._added = e.readBoolean(), !0) : !1
    }
    get flatId()
    {
        return this._flatId
    }
    get added()
    {
        return this._added
    }
}
class jB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._favouriteRoomIds = [],
        this._limit = e.readInt();
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._favouriteRoomIds.push(e.readInt());
        return !0
    }
    get limit()
    {
        return this._limit
    }
    get favoriteRoomIds()
    {
        return this._favouriteRoomIds
    }
}
class WB {
    flush()
    {
        return this._userName = null, !0
    }
    parse(e)
    {
        return e ? (this._userName = e.readString(), !0) : !1
    }
    get userName()
    {
        return this._userName
    }
}
class YB {
    flush()
    {
        return this._roomId = -1, this._roomName = null, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._roomName = e.readString(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get roomName()
    {
        return this._roomName
    }
}
class zB {
    flush()
    {
        return this._roomEnter = !1, this._roomForward = !1, this._data = null, this._staffPick = !1, this._isGroupMember = !1, this._moderation = null, this._chat = null, !0
    }
    parse(e)
    {
        return e ? (this._roomEnter = e.readBoolean(), this._data = new nt(e), this._roomForward = e.readBoolean(), this._staffPick = e.readBoolean(), this._isGroupMember = e.readBoolean(), this.data.allInRoomMuted = e.readBoolean(), this._moderation = new Ns(e), this.data.canMute = e.readBoolean(), this._chat = new Tt(e), !0) : !1
    }
    get roomEnter()
    {
        return this._roomEnter
    }
    get roomForward()
    {
        return this._roomForward
    }
    get data()
    {
        return this._data
    }
    get staffPick()
    {
        return this._staffPick
    }
    get isGroupMember()
    {
        return this._isGroupMember
    }
    get moderation()
    {
        return this._moderation
    }
    get chat()
    {
        return this._chat
    }
}
class KB {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._data = new LB(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class qB {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._id = -1, this._name = null, this._visible = !1, this._automatic = !1, this._automaticCategoryKey = null, this._globalCategoryKey = null, this._staffOnly = !1, !0
    }
    parse(e)
    {
        return e ? (this._id = e.readInt(), this._name = e.readString(), this._visible = e.readBoolean(), this._automatic = e.readBoolean(), this._automaticCategoryKey = e.readString(), this._globalCategoryKey = e.readString(), this._staffOnly = e.readBoolean(), !0) : !1
    }
    get id()
    {
        return this._id
    }
    get name()
    {
        return this._name
    }
    get visible()
    {
        return this._visible
    }
    get automatic()
    {
        return this._automatic
    }
    get automaticCategoryKey()
    {
        return this._automaticCategoryKey
    }
    get globalCategoryKey()
    {
        return this._globalCategoryKey
    }
    get staffOnly()
    {
        return this._staffOnly
    }
}
class XB {
    flush()
    {
        return this._categories = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._categories.push(e.readString()),
            t--;
        return !0
    }
    get categories()
    {
        return this._categories
    }
}
class QB {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._id = -1, this._name = null, this._visible = !1, !0
    }
    parse(e)
    {
        return e ? (this._id = e.readInt(), this._name = e.readString(), this._visible = e.readBoolean(), !0) : !1
    }
    get id()
    {
        return this._id
    }
    get name()
    {
        return this._name
    }
    get visible()
    {
        return this._visible
    }
}
class JB {
    flush()
    {
        return this._homeRoomId = -1, this._roomIdToEnter = -1, !0
    }
    parse(e)
    {
        return e ? (this._homeRoomId = e.readInt(), this._roomIdToEnter = e.readInt(), !0) : !1
    }
    get homeRoomId()
    {
        return this._homeRoomId
    }
    get roomIdToEnter()
    {
        return this._roomIdToEnter
    }
}
class ZB {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._roomId = -1, this._areaId = -1, this._image = null, this._caption = null, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), this._areaId = e.readInt(), this._image = e.readString(), this._caption = e.readString(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
    get areaId()
    {
        return this._areaId
    }
    get image()
    {
        return this._image
    }
    get caption()
    {
        return this._caption
    }
}
class $B {
    flush()
    {
        return this._rooms = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._rooms.push(new ZB(e)),
            t--;
        return !0
    }
    get rooms()
    {
        return this._rooms
    }
}
class ek {
    flush()
    {
        return this._topLevelContexts = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._topLevelContexts.push(new FB(e)),
            t--;
        return !0
    }
    get topLevelContexts()
    {
        return this._topLevelContexts
    }
}
class tk {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class sk {
    flush()
    {
        return this._searches = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._searches.push(new BR(e)),
            t--;
        return !0
    }
    get searches()
    {
        return this._searches
    }
}
class rk {
    flush()
    {
        return this._result = null, !0
    }
    parse(e)
    {
        return e ? (this._result = new wB(e), !0) : !1
    }
    get result()
    {
        return this._result
    }
}
class ik {
    flush()
    {
        return this._windowX = 0, this._windowY = 0, this._windowWidth = 0, this._windowHeight = 0, this._leftPanelHidden = !1, this._resultsMode = 0, !0
    }
    parse(e)
    {
        return e ? (this._windowX = e.readInt(), this._windowY = e.readInt(), this._windowWidth = e.readInt(), this._windowHeight = e.readInt(), this._leftPanelHidden = e.readBoolean(), this._resultsMode = e.readInt(), !0) : !1
    }
    get windowX()
    {
        return this._windowX
    }
    get windowY()
    {
        return this._windowY
    }
    get windowWidth()
    {
        return this._windowWidth
    }
    get windowHeight()
    {
        return this._windowHeight
    }
    get leftPanelHidden()
    {
        return this._leftPanelHidden
    }
    get resultsMode()
    {
        return this._resultsMode
    }
}
class nk {
    constructor(e)
    {
        this._tagName = e.readString(),
        this._userCount = e.readInt()
    }
    get tagName()
    {
        return this._tagName
    }
    get userCount()
    {
        return this._userCount
    }
}
class ak {
    constructor(e)
    {
        if (!e)
            throw new Error("invalid_wrapper");
        this.flush(),
        this.parse(e)
    }
    flush()
    {
        return this._tags = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._tags = [];
        const t = e.readInt();
        let r = 0;
        for (; r < t;)
            this._tags.push(new nk(e)),
            r++;
        return !0
    }
    get tags()
    {
        return this._tags
    }
}
class ok {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new ak(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class lk {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !0
    }
}
class ck {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return this._data = new xB(e), !0
    }
    get data()
    {
        return this._data
    }
}
class uk {
    flush()
    {
        return this._words = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._words.push(e.readString()),
            t--;
        return !0
    }
    get words()
    {
        return this._words
    }
}
class hk {
    flush()
    {
        return this._roomId = 0, !0
    }
    parse(e)
    {
        return e ? (this._roomId = e.readInt(), !0) : !1
    }
    get roomId()
    {
        return this._roomId
    }
}
class dk {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return this._flatId = e.readInt(), this._resultCode = e.readInt(), !0
    }
    get flatId()
    {
        return this._flatId
    }
    get resultCode()
    {
        return this._resultCode
    }
}
class _k {
    flush()
    {
        return this._categories = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._categories.push(new QB(e)),
            t--;
        return !0
    }
    get categories()
    {
        return this._categories
    }
}
class gk {
    flush()
    {
        return this._categories = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._categories.push(new qB(e)),
            t--;
        return !0
    }
    get categories()
    {
        return this._categories
    }
}
class fk {
    constructor(e)
    {
        this._badgeCode = "",
        this._removedBadgeCode = "",
        this._type = e.readInt(),
        this._level = e.readInt(),
        this._badgeId = e.readInt(),
        this._badgeCode = e.readString(),
        this._points = e.readInt(),
        this._levelRewardPoints = e.readInt(),
        this._levelRewardPointType = e.readInt(),
        this._bonusPoints = e.readInt(),
        this._achievementID = e.readInt(),
        this._removedBadgeCode = e.readString(),
        this._category = e.readString(),
        this._showDialogToUser = e.readBoolean()
    }
    get type()
    {
        return this._type
    }
    get level()
    {
        return this._level
    }
    get points()
    {
        return this._points
    }
    get levelRewardPoints()
    {
        return this._levelRewardPoints
    }
    get levelRewardPointType()
    {
        return this._levelRewardPointType
    }
    get bonusPoints()
    {
        return this._bonusPoints
    }
    get badgeId()
    {
        return this._badgeId
    }
    get badgeCode()
    {
        return this._badgeCode
    }
    get removedBadgeCode()
    {
        return this._removedBadgeCode
    }
    get achievementID()
    {
        return this._achievementID
    }
    get category()
    {
        return this._category
    }
    get showDialogToUser()
    {
        return this._showDialogToUser
    }
}
class mk {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new fk(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class Ek {
    flush()
    {
        return this._amount = 0, this._amountChanged = 0, this._type = -1, !0
    }
    parse(e)
    {
        return e ? (this._amount = e.readInt(), this._amountChanged = e.readInt(), this._type = e.readInt(), !0) : !1
    }
    get amount()
    {
        return this._amount
    }
    get amountChanged()
    {
        return this._amountChanged
    }
    get type()
    {
        return this._type
    }
}
class pk {
    flush()
    {
        return this._errorCode = -1, !0
    }
    parse(e)
    {
        return e ? (this._errorCode = e.readInt(), !0) : !1
    }
    get errorCode()
    {
        return this._errorCode
    }
}
class Ik {
    flush()
    {
        return this._numGifts = 0, !0
    }
    parse(e)
    {
        return e ? (this._numGifts = e.readInt(), !0) : !1
    }
    get numGifts()
    {
        return this._numGifts
    }
}
class Tk {
    flush()
    {
        return this._errorCode = 0, this._messageId = 0, this._timestamp = null, !0
    }
    parse(e)
    {
        return e ? (this._messageId = e.readInt(), this._errorCode = e.readInt(), this._timestamp = e.readString(), !0) : !1
    }
    get errorCode()
    {
        return this._errorCode
    }
    get messageId()
    {
        return this._messageId
    }
    get timestamp()
    {
        return this._timestamp
    }
}
class Rk {
    flush()
    {
        return this._key = null, !0
    }
    parse(e)
    {
        return e ? (this._key = e.readString(), !0) : !1
    }
    get key()
    {
        return this._key
    }
}
class Ok {
    flush()
    {
        return this._message = null, !0
    }
    parse(e)
    {
        return e ? (this._message = e.readString(), !0) : !1
    }
    get message()
    {
        return this._message
    }
}
class Sk {
    flush()
    {
        return this._enabled = !1, !0
    }
    parse(e)
    {
        return e ? (this._enabled = e.readBoolean(), !0) : !1
    }
    get enabled()
    {
        return this._enabled
    }
}
class Ck {
    flush()
    {
        return this._messages = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;)
            this._messages.push(e.readString()),
            t--;
        return !0
    }
    get messages()
    {
        return this._messages
    }
}
class Ak {
    flush()
    {
        return this._type = null, this._parameters = new Map, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._type = e.readString();
        let t = e.readInt();
        for (; t > 0;)
            this._parameters.set(e.readString(), e.readString()),
            t--;
        return !0
    }
    get type()
    {
        return this._type
    }
    get parameters()
    {
        return this._parameters
    }
}
class Nk {
    flush()
    {
        return this._contentType = null, this._classId = 0, this._name = null, this._description = null, !0
    }
    parse(e)
    {
        return e ? (this._contentType = e.readString(), this._classId = e.readInt(), this._name = e.readString(), this._description = e.readString(), !0) : !1
    }
    get contentType()
    {
        return this._contentType
    }
    get classId()
    {
        return this._classId
    }
    get name()
    {
        return this._name
    }
    get description()
    {
        return this._description
    }
}
class yk {
    flush()
    {
        return this._petId = -1, this._petName = null, this._level = 0, this._figureData = null, !0
    }
    parse(e)
    {
        return e ? (this._petId = e.readInt(), this._petName = e.readString(), this._level = e.readInt(), this._figureData = new dm(e), !0) : !1
    }
    get petId()
    {
        return this._petId
    }
    get petName()
    {
        return this._petName
    }
    get level()
    {
        return this._level
    }
    get figureData()
    {
        return this._figureData
    }
}
class Mk {
    flush()
    {
        return this._errorCode = -1, !0
    }
    parse(e)
    {
        return e ? (this._errorCode = e.readInt(), !0) : !1
    }
    get errorCode()
    {
        return this._errorCode
    }
}
class bk {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !0
    }
}
class Dk {
    flush()
    {
        return this._alertMessage = null, !0
    }
    parse(e)
    {
        return e ? (this._alertMessage = e.readString(), e.bytesAvailable && (this._titleMessage = e.readString()), !0) : !1
    }
    get alertMessage()
    {
        return this._alertMessage
    }
    get titleMessage()
    {
        return this._titleMessage
    }
}
class vk {
    flush()
    {
        return this._items = new as, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = e.readInt();
        for (; t > 0;) {
            const r = e.readInt();
            let i = e.readInt();
            const n = [];
            for (; i > 0;)
                n.push(e.readInt()),
                i--;
            this._items.add(r, n),
            t--
        }
        return !0
    }
    getItemsByCategory(e)
    {
        return this._items.getValue(e)
    }
    get categories()
    {
        return this._items.getKeys()
    }
}
class Pk {
    constructor(e, t, r)
    {
        this._code = e,
        this._errorMessage = t,
        this._isAllowed = r
    }
    get code()
    {
        return this._code
    }
    get errorMessage()
    {
        return this._errorMessage
    }
    get isAllowed()
    {
        return this._isAllowed
    }
}
class si {}
si.USE_GUIDE_TOOL = "USE_GUIDE_TOOL";
si.GIVE_GUIDE_TOUR = "GIVE_GUIDE_TOUR";
si.JUDGE_CHAT_REVIEWS = "JUDGE_CHAT_REVIEWS";
si.VOTE_IN_COMPETITIONS = "VOTE_IN_COMPETITIONS";
si.CALL_ON_HELPERS = "CALL_ON_HELPERS";
si.CITIZEN = "CITIZEN";
si.TRADE = "TRADE";
si.HEIGHTMAP_EDITOR_BETA = "HEIGHTMAP_EDITOR_BETA";
si.BUILDER_AT_WORK = "BUILDER_AT_WORK";
si.NAVIGATOR_ROOM_THUMBNAIL_CAMERA = "NAVIGATOR_ROOM_THUMBNAIL_CAMERA";
si.CAMERA = "CAMERA";
si.MOUSE_ZOOM = "MOUSE_ZOOM";
class Lk {
    flush()
    {
        return this._perks = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._perks = [];
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._perks.push(new Pk(e.readString(), e.readString(), e.readBoolean()));
        return !0
    }
    isAllowed(e)
    {
        let t = !1;
        for (const r of this._perks)
            if (r.code === e) {
                t = r.isAllowed;
                break
            }
        return t
    }
    get perks()
    {
        return this._perks
    }
}
class Uk {
    flush()
    {
        return this._objectId = -1, this._figureData = null, !0
    }
    parse(e)
    {
        return this._objectId = e.readInt(), e.bytesAvailable && (this._figureData = new Nn(e.readString())), !0
    }
    get objectId()
    {
        return this._objectId
    }
    get figureData()
    {
        return this._figureData
    }
}
class wk {
    flush()
    {
        return this._objectId = 0, this._nameValidationStatus = 0, this._nameValidationInfo = null, !0
    }
    parse(e)
    {
        return this._objectId = e.readInt(), this._nameValidationStatus = e.readInt(), this._nameValidationInfo = e.readString(), !0
    }
    get objectId()
    {
        return this._objectId
    }
    get nameValidationStatus()
    {
        return this._nameValidationStatus
    }
    get nameValidationInfo()
    {
        return this._nameValidationInfo
    }
}
class Fk {
    flush()
    {
        return this._roomIndex = -1, this._petId = -1, this._level = -1, !0
    }
    parse(e)
    {
        return this._roomIndex = e.readInt(), this._petId = e.readInt(), this._level = e.readInt(), !0
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get petId()
    {
        return this._petId
    }
    get level()
    {
        return this._level
    }
}
class xk {
    flush()
    {
        return this._currentAge = -1, this._requiredAge = -1, !0
    }
    parse(e)
    {
        return this._currentAge = e.readInt(), this._requiredAge = e.readInt(), !0
    }
    get currentAge()
    {
        return this._currentAge
    }
    get requiredAge()
    {
        return this._requiredAge
    }
}
class Gk {
    flush()
    {
        return this._petId = -1, this._commands = [], this._enabledCommands = [], !0
    }
    parse(e)
    {
        this._petId = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._commands.push(e.readInt()),
            t--;
        let r = e.readInt();
        for (; r > 0;)
            this._enabledCommands.push(e.readInt()),
            r--;
        return !0
    }
    get petId()
    {
        return this._petId
    }
    get commands()
    {
        return this._commands
    }
    get enabledCommands()
    {
        return this._enabledCommands
    }
}
class Bk {
    constructor(e, t, r)
    {
        this._value = e,
        this._choiceText = t,
        this._choiceType = r
    }
    get value()
    {
        return this._value
    }
    set value(e)
    {
        this._value = e
    }
    get choiceText()
    {
        return this._choiceText
    }
    set choiceText(e)
    {
        this._choiceText = e
    }
    get choiceType()
    {
        return this._choiceType
    }
    set choiceType(e)
    {
        this._choiceType = e
    }
}
class kk {
    constructor()
    {
        this._children = [],
        this._questionChoices = []
    }
    get questionId()
    {
        return this._questionId
    }
    set questionId(e)
    {
        this._questionId = e
    }
    get questionType()
    {
        return this._questionType
    }
    set questionType(e)
    {
        this._questionType = e
    }
    get sortOrder()
    {
        return this._sortOrder
    }
    set sortOrder(e)
    {
        this._sortOrder = e
    }
    get questionText()
    {
        return this._questionText
    }
    set questionText(e)
    {
        this._questionText = e
    }
    get questionCategory()
    {
        return this._questionCategory
    }
    set questionCategory(e)
    {
        this._questionCategory = e
    }
    get questionAnswerType()
    {
        return this._questionAnswerType
    }
    set questionAnswerType(e)
    {
        this._questionAnswerType = e
    }
    get questionAnswerCount()
    {
        return this._questionAnswerCount
    }
    set questionAnswerCount(e)
    {
        this._questionAnswerCount = e
    }
    get children()
    {
        return this._children
    }
    set children(e)
    {
        this._children = e
    }
    get questionChoices()
    {
        return this._questionChoices
    }
    set questionChoices(e)
    {
        this._questionChoices = e
    }
}
class Vk {
    constructor()
    {
        this._id = -1,
        this._startMessage = "",
        this._endMessage = "",
        this._numQuestions = 0,
        this._questionArray = [],
        this._npsPoll = !1
    }
    flush()
    {
        return this._id = -1, this._startMessage = "", this._endMessage = "", this._numQuestions = 0, this._questionArray = [], !0
    }
    parse(e)
    {
        this._id = e.readInt(),
        this._startMessage = e.readString(),
        this._endMessage = e.readString(),
        this._numQuestions = e.readInt();
        for (let t = 0; t < this._numQuestions; t++) {
            const r = this.parsePollQuestion(e),
                i = e.readInt();
            for (let n = 0; n < i; n++)
                r.children.push(this.parsePollQuestion(e));
            this._questionArray.push(r)
        }
        return this._npsPoll = e.readBoolean(), !0
    }
    parsePollQuestion(e)
    {
        const t = new kk;
        if (t.questionId = e.readInt(), t.sortOrder = e.readInt(), t.questionType = e.readInt(), t.questionText = e.readString(), t.questionCategory = e.readInt(), t.questionAnswerType = e.readInt(), t.questionAnswerCount = e.readInt(), t.questionType == 1 || t.questionType == 2)
            for (let r = 0; r < t.questionAnswerCount; r++)
                t.questionChoices.push(new Bk(e.readString(), e.readString(), e.readInt()));
        return t
    }
    get id()
    {
        return this._id
    }
    get startMessage()
    {
        return this._startMessage
    }
    get endMessage()
    {
        return this._endMessage
    }
    get numQuestions()
    {
        return this._numQuestions
    }
    get questionArray()
    {
        return this._questionArray
    }
    get npsPoll()
    {
        return this._npsPoll
    }
}
class Hk {
    flush()
    {
        throw !0
    }
    parse(e)
    {
        return !0
    }
}
class jk {
    constructor()
    {
        this._id = -1,
        this._type = "",
        this._headline = "",
        this._summary = ""
    }
    flush()
    {
        return this._id = -1, this._type = "", this._summary = "", !0
    }
    parse(e)
    {
        return this._id = e.readInt(), this._type = e.readString(), this._headline = e.readString(), this._summary = e.readString(), !0
    }
    get id()
    {
        return this._id
    }
    get type()
    {
        return this._type
    }
    get headline()
    {
        return this._headline
    }
    get summary()
    {
        return this._summary
    }
}
class Wk {
    flush()
    {
        return this._userId = -1, this._value = "", this._answerCounts = null, !0
    }
    parse(e)
    {
        this._userId = e.readInt(),
        this._value = e.readString(),
        this._answerCounts = new Map;
        const t = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = e.readString(),
                n = e.readInt();
            this._answerCounts.set(i, n)
        }
        return !0
    }
    get userId()
    {
        return this._userId
    }
    get value()
    {
        return this._value
    }
    get answerCounts()
    {
        return this._answerCounts
    }
}
class Yk {
    flush()
    {
        return this._questionId = -1, this._answerCounts = null, !0
    }
    parse(e)
    {
        this._questionId = e.readInt(),
        this._answerCounts = new Map;
        const t = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = e.readString(),
                n = e.readInt();
            this._answerCounts.set(i, n)
        }
        return !0
    }
    get questionId()
    {
        return this._questionId
    }
    get answerCounts()
    {
        return this._answerCounts
    }
}
class zk {
    constructor()
    {
        this._pollType = null,
        this._pollId = -1,
        this._questionId = -1,
        this._duration = -1,
        this._question = null
    }
    flush()
    {
        return this._pollType = null, this._pollId = -1, this._questionId = -1, this._duration = -1, this._question = null, !0
    }
    parse(e)
    {
        this._pollType = e.readString(),
        this._pollId = e.readInt(),
        this._questionId = e.readInt(),
        this._duration = e.readInt();
        const t = e.readInt(),
            r = e.readInt(),
            i = e.readInt(),
            n = e.readString();
        if (this._question = {
            id: t,
            number: r,
            type: i,
            content: n
        }, this._question.type == 1 || this._question.type == 2) {
            this._question.selection_min = e.readInt();
            const o = e.readInt();
            this._question.selections = [],
            this._question.selection_values = [],
            this._question.selection_count = o,
            this._question.selection_max = o;
            for (let l = 0; l < o; l++)
                this._question.selection_values.push(e.readString()),
                this._question.selections.push(e.readString())
        }
        return !0
    }
    get pollType()
    {
        return this._pollType
    }
    get pollId()
    {
        return this._pollId
    }
    get questionId()
    {
        return this._questionId
    }
    get duration()
    {
        return this._duration
    }
    get question()
    {
        return this._question
    }
}
class Kk {
    flush()
    {
        return this._question = null, this._choices = [], this._SafeStr_7651 = [], this._SafeStr_7654 = -1, !0
    }
    parse(e)
    {
        this._question = e.readString(),
        this._choices = [],
        this._SafeStr_7651 = [];
        let t = e.readInt();
        for (; t > 0;)
            this._choices.push(e.readString()),
            this._SafeStr_7651.push(e.readInt()),
            t--;
        return this._SafeStr_7654 = e.readInt(), !0
    }
    get question()
    {
        return this._question
    }
    get choices()
    {
        return this._choices
    }
    get SafeStr_7651()
    {
        return this._SafeStr_7651
    }
    get SafeStr_7654()
    {
        return this._SafeStr_7654
    }
}
class qk {
    flush()
    {
        return this._question = null, this._choices = [], !0
    }
    parse(e)
    {
        this._question = e.readString(),
        this._choices = [];
        const t = e.readInt();
        let r = 0;
        for (; r < t;)
            this._choices.push(e.readString()),
            r++;
        return !0
    }
    get question()
    {
        return this._question
    }
    get choices()
    {
        return this._choices.slice()
    }
}
class Xk {
    constructor(e)
    {
        this._rewardUserLimits = [],
        this._hasGoalExpired = e.readBoolean(),
        this._personalContributionScore = e.readInt(),
        this._personalContributionRank = e.readInt(),
        this._communityTotalScore = e.readInt(),
        this._communityHighestAchievedLevel = e.readInt(),
        this._scoreRemainingUntilNextLevel = e.readInt(),
        this._percentCompletionTowardsNextLevel = e.readInt(),
        this._goalCode = e.readString(),
        this._timeRemainingInSeconds = e.readInt();
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._rewardUserLimits.push(e.readInt())
    }
    dispose()
    {
        this._rewardUserLimits = null
    }
    get disposed()
    {
        return this._rewardUserLimits == null
    }
    get hasGoalExpired()
    {
        return this._hasGoalExpired
    }
    get personalContributionScore()
    {
        return this._personalContributionScore
    }
    get personalContributionRank()
    {
        return this._personalContributionRank
    }
    get communityTotalScore()
    {
        return this._communityTotalScore
    }
    get communityHighestAchievedLevel()
    {
        return this._communityHighestAchievedLevel
    }
    get scoreRemainingUntilNextLevel()
    {
        return this._scoreRemainingUntilNextLevel
    }
    get percentCompletionTowardsNextLevel()
    {
        return this._percentCompletionTowardsNextLevel
    }
    get timeRemainingInSeconds()
    {
        return this._timeRemainingInSeconds
    }
    get rewardUserLimits()
    {
        return this._rewardUserLimits
    }
    get goalCode()
    {
        return this._goalCode
    }
}
class Qk {
    constructor(e)
    {
        this._communityGoalId = e.readInt(),
        this._communityGoalCode = e.readString(),
        this._userRank = e.readInt(),
        this._rewardCode = e.readString(),
        this._badge = e.readBoolean(),
        this._localizedName = e.readString()
    }
    get communityGoalId()
    {
        return this._communityGoalId
    }
    get communityGoalCode()
    {
        return this._communityGoalCode
    }
    get userRank()
    {
        return this._userRank
    }
    get rewardCode()
    {
        return this._rewardCode
    }
    get badge()
    {
        return this._badge
    }
    get localizedName()
    {
        return this._localizedName
    }
}
class Jk {
    flush()
    {
        return this._prizes = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._prizes.push(new Qk(e));
        return !0
    }
    get prizes()
    {
        return this._prizes
    }
}
class Zk {
    constructor(e)
    {
        this._userId = e.readInt(),
        this._userName = e.readString(),
        this._figure = e.readString(),
        this._rank = e.readInt(),
        this._currentScore = e.readInt()
    }
    get userId()
    {
        return this._userId
    }
    get userName()
    {
        return this._userName
    }
    get figure()
    {
        return this._figure
    }
    get rank()
    {
        return this._rank
    }
    get currentScore()
    {
        return this._currentScore
    }
}
class $k {
    constructor(e)
    {
        this._hof = [],
        this._goalCode = e.readString();
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._hof.push(new Zk(e))
    }
    dispose()
    {
        this._hof = null
    }
    get disposed()
    {
        return this._hof == null
    }
    get hof()
    {
        return this._hof
    }
    get goalCode()
    {
        return this._goalCode
    }
}
class eV {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new $k(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class tV {
    flush()
    {
        return this._data = null, !0
    }
    parse(e)
    {
        return e ? (this._data = new Xk(e), !0) : !1
    }
    get data()
    {
        return this._data
    }
}
class sV {
    flush()
    {
        return this._state = -1, this._userCount = -1, this._userCountGoal = -1, !0
    }
    parse(e)
    {
        return e ? (this._state = e.readInt(), this._userCount = e.readInt(), this._userCountGoal = e.readInt(), !0) : !1
    }
    get state()
    {
        return this._state
    }
    get userCount()
    {
        return this._userCount
    }
    get userCountGoal()
    {
        return this._userCountGoal
    }
}
class rV {
    flush()
    {
        return this._imageUri = "", !0
    }
    parse(e)
    {
        return e ? (this._imageUri = e.readString(), !0) : !1
    }
    get imageUri()
    {
        return this._imageUri
    }
}
class iV {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return e ? (this._expired = e.readBoolean(), !0) : !1
    }
    get expired()
    {
        return this._expired
    }
}
class Wo {
    constructor(e)
    {
        this._receiveTime = new Date,
        this._campaignCode = e.readString(),
        this._completedQuestsInCampaign = e.readInt(),
        this._questCountInCampaign = e.readInt(),
        this._activityPointType = e.readInt(),
        this._id = e.readInt(),
        this._accepted = e.readBoolean(),
        this._type = e.readString(),
        this._imageVersion = e.readString(),
        this._rewardCurrencyAmount = e.readInt(),
        this._localizationCode = e.readString(),
        this._completedSteps = e.readInt(),
        this._totalSteps = e.readInt(),
        this._sortOrder = e.readInt(),
        this._catalogPageName = e.readString(),
        this._chainCode = e.readString(),
        this._easy = e.readBoolean()
    }
    static getCampaignLocalizationKeyForCode(e)
    {
        return "quests." + e
    }
    get campaignCode()
    {
        return this._campaignCode
    }
    get localizationCode()
    {
        return this._localizationCode
    }
    get completedQuestsInCampaign()
    {
        return this._completedQuestsInCampaign
    }
    get questCountInCampaign()
    {
        return this._questCountInCampaign
    }
    get activityPointType()
    {
        return this._activityPointType
    }
    set accepted(e)
    {
        this._accepted = e
    }
    get accepted()
    {
        return this._accepted
    }
    set id(e)
    {
        this._id = e
    }
    get id()
    {
        return this._id
    }
    get type()
    {
        return this._type
    }
    get imageVersion()
    {
        return this._imageVersion
    }
    get rewardCurrencyAmount()
    {
        return this._rewardCurrencyAmount
    }
    get completedSteps()
    {
        return this._completedSteps
    }
    get totalSteps()
    {
        return this._totalSteps
    }
    get isCompleted()
    {
        return this._completedSteps == this._totalSteps
    }
    set waitPeriodSeconds(e)
    {
        this._waitPeriodSeconds = e
    }
    get waitPeriodSeconds()
    {
        if (this._waitPeriodSeconds < 1)
            return 0;
        const t = new Date().getTime() - this._receiveTime.getTime();
        return Math.max(0, this._waitPeriodSeconds - Math.floor(t / 1e3))
    }
    getCampaignLocalizationKey()
    {
        return Wo.getCampaignLocalizationKeyForCode(this.campaignCode)
    }
    getQuestLocalizationKey()
    {
        return this.getCampaignLocalizationKey() + "." + this._localizationCode
    }
    get completedCampaign()
    {
        return this._id < 1
    }
    get lastQuestInCampaign()
    {
        return this._completedQuestsInCampaign >= this._questCountInCampaign
    }
    get receiveTime()
    {
        return this._receiveTime
    }
    get sortOrder()
    {
        return this._sortOrder
    }
    get catalogPageName()
    {
        return this._catalogPageName
    }
    get chainCode()
    {
        return this._chainCode
    }
    get easy()
    {
        return this._easy
    }
}
class nV {
    flush()
    {
        return this._questData = null, !0
    }
    parse(e)
    {
        return e ? (this._questData = new Wo(e), this._showDialog = e.readBoolean(), !0) : !1
    }
    get questData()
    {
        return this._questData
    }
    get showDialog()
    {
        return this._showDialog
    }
}
class aV {
    flush()
    {
        return this._quest = null, !0
    }
    parse(e)
    {
        return e ? (e.readBoolean() && (this._quest = new Wo(e), this._easyQuestCount = e.readInt(), this._hardQuestCount = e.readInt()), !0) : !1
    }
    get quest()
    {
        return this._quest
    }
    get easyQuestCount()
    {
        return this._easyQuestCount
    }
    get hardQuestCount()
    {
        return this._hardQuestCount
    }
}
class oV {
    flush()
    {
        return this._quest = null, !0
    }
    parse(e)
    {
        return e ? (this._quest = new Wo(e), !0) : !1
    }
    get quest()
    {
        return this._quest
    }
}
class lV {
    flush()
    {
        return this._quests = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._quests.push(new Wo(e));
        return this._openWindow = e.readBoolean(), !0
    }
    get quests()
    {
        return this._quests
    }
    get openWindow()
    {
        return this._openWindow
    }
}
class cV {
    flush()
    {
        return this._quests = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._quests.push(new Wo(e));
        return !0
    }
    get quests()
    {
        return this._quests
    }
}
class uV {
    flush()
    {
        return this._recyclerFinishedStatus = -1, this._prizeId = 0, !0
    }
    parse(e)
    {
        return e ? (this._recyclerFinishedStatus = e.readInt(), this._prizeId = e.readInt(), !0) : !1
    }
    get recyclerFinishedStatus()
    {
        return this._recyclerFinishedStatus
    }
    get prizeId()
    {
        return this._prizeId
    }
}
class hV {
    flush()
    {
        return this._recyclerStatus = -1, this._recyclerTimeoutSeconds = 0, !0
    }
    parse(e)
    {
        return e ? (this._recyclerStatus = e.readInt(), this._recyclerTimeoutSeconds = e.readInt(), !0) : !1
    }
    get recyclerStatus()
    {
        return this._recyclerStatus
    }
    get recyclerTimeoutSeconds()
    {
        return this._recyclerTimeoutSeconds
    }
}
class Im {
    constructor(e)
    {
        this._stuffIds = [],
        this._intParams = [],
        this._stuffTypeSelectionEnabled = e.readBoolean(),
        this._furniLimit = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._stuffIds.push(e.readInt()),
            t--;
        for (this._stuffTypeId = e.readInt(), this._id = e.readInt(), this._stringParam = e.readString(), t = e.readInt(); t > 0;)
            this._intParams.push(e.readInt()),
            t--;
        this._stuffTypeSelectionCode = e.readInt()
    }
    getBoolean(e)
    {
        return this._intParams[e] === 1
    }
    get stuffTypeSelectionEnabled()
    {
        return this._stuffTypeSelectionEnabled
    }
    get stuffTypeSelectionCode()
    {
        return this._stuffTypeSelectionCode
    }
    set stuffTypeSelectionCode(e)
    {
        this._stuffTypeSelectionCode = e
    }
    get maximumItemSelectionCount()
    {
        return this._furniLimit
    }
    get selectedItems()
    {
        return this._stuffIds
    }
    get id()
    {
        return this._id
    }
    get stringData()
    {
        return this._stringParam
    }
    get intData()
    {
        return this._intParams
    }
    get code()
    {
        return 0
    }
    get spriteId()
    {
        return this._stuffTypeId
    }
}
class Tm extends Im {
    constructor(e)
    {
        super(e),
        this._type = e.readInt()
    }
    get type()
    {
        return this._type
    }
    get code()
    {
        return this._type
    }
}
class Rm extends Im {
    constructor(e)
    {
        super(e),
        this._conflictingActions = [],
        this._triggerConf = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._conflictingActions.push(e.readInt()),
            t--
    }
    get code()
    {
        return this._triggerConf
    }
    get conflictingActions()
    {
        return this._conflictingActions
    }
}
class Om extends Im {
    constructor(e)
    {
        super(e),
        this._conflictingTriggers = [],
        this._type = e.readInt(),
        this._delayInPulses = e.readInt();
        let t = e.readInt();
        for (; t > 0;)
            this._conflictingTriggers.push(e.readInt()),
            t--
    }
    get type()
    {
        return this._type
    }
    get code()
    {
        return this._type
    }
    get delayInPulses()
    {
        return this._delayInPulses
    }
    get conflictingTriggers()
    {
        return this._conflictingTriggers
    }
}
class dV {
    flush()
    {
        return this._definition = null, !0
    }
    parse(e)
    {
        return e ? (this._definition = new Om(e), !0) : !1
    }
    get definition()
    {
        return this._definition
    }
}
class _V {
    flush()
    {
        return this._definition = null, !0
    }
    parse(e)
    {
        return e ? (this._definition = new Tm(e), !0) : !1
    }
    get definition()
    {
        return this._definition
    }
}
class gV {
    flush()
    {
        return this._definition = null, !0
    }
    parse(e)
    {
        return e ? (this._definition = new Rm(e), !0) : !1
    }
    get definition()
    {
        return this._definition
    }
}
class fV {
    flush()
    {
        return this._stuffId = 0, !0
    }
    parse(e)
    {
        return e ? (this._stuffId = e.readInt(), !0) : !1
    }
    get stuffId()
    {
        return this._stuffId
    }
}
class mV {
    flush()
    {
        return this._reason = 0, !0
    }
    parse(e)
    {
        return e ? (this._reason = e.readInt(), !0) : !1
    }
    get reason()
    {
        return this._reason
    }
}
class EV {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class pV {
    flush()
    {
        return this._info = null, !0
    }
    parse(e)
    {
        return e ? (this._info = e.readString(), !0) : !1
    }
    get info()
    {
        return this._info
    }
}
class IV {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class TV {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !0
    }
}
class RV {
    constructor()
    {
        this._songDisks = new as
    }
    flush()
    {
        return this._songDisks.reset(), this._maxLength = 0, !0
    }
    parse(e)
    {
        this._maxLength = e.readInt();
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._songDisks.add(e.readInt(), e.readInt());
        return !0
    }
    get songDisks()
    {
        return this._songDisks
    }
    get maxLength()
    {
        return this._maxLength
    }
}
class OV {
    flush()
    {
        return this._currentSongId = -1, this._currentPosition = -1, this._nextSongId = -1, this._nextPosition = -1, this._syncCount = -1, !0
    }
    parse(e)
    {
        return this._currentSongId = e.readInt(), this._currentPosition = e.readInt(), this._nextSongId = e.readInt(), this._nextPosition = e.readInt(), this._syncCount = e.readInt(), !0
    }
    get currentSongId()
    {
        return this._currentSongId
    }
    get currentPosition()
    {
        return this._currentPosition
    }
    get nextSongId()
    {
        return this._nextSongId
    }
    get nextPosition()
    {
        return this._nextPosition
    }
    get syncCount()
    {
        return this._syncCount
    }
}
class SV {
    flush()
    {
        return this._songId = 0, this._officialSongId = "", !0
    }
    parse(e)
    {
        return this._officialSongId = e.readString(), this._songId = e.readInt(), !0
    }
    get songId()
    {
        return this._songId
    }
    get officialSongId()
    {
        return this._officialSongId
    }
}
class xd {
    constructor(e, t, r, i)
    {
        this._startPlayHead = 0,
        this._id = e,
        this._length = t,
        this._name = r,
        this._creator = i
    }
    get id()
    {
        return this._id
    }
    get length()
    {
        return this._length
    }
    get name()
    {
        return this._name
    }
    get creator()
    {
        return this._creator
    }
    get startPlayHeadPos()
    {
        return this._startPlayHead
    }
    set startPlayHeadPos(e)
    {
        this._startPlayHead = e
    }
}
class CV {
    flush()
    {
        return this._synchronizationCount = -1, this._playlist = [], !0
    }
    parse(e)
    {
        this._synchronizationCount = e.readInt();
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._playlist.push(new xd(e.readInt(), e.readInt(), e.readString(), e.readString()));
        return !0
    }
    get synchronizationCount()
    {
        return this._synchronizationCount
    }
    get playList()
    {
        return this._playlist
    }
}
class AV {
    flush()
    {
        return this._entry = null, !0
    }
    parse(e)
    {
        return this._entry = new xd(e.readInt(), e.readInt(), e.readString(), e.readString()), !0
    }
    get entry()
    {
        return this._entry
    }
}
class NV extends xd {
    constructor(e, t, r, i, n)
    {
        super(e, t, r, i),
        this._data = "",
        this._data = n
    }
    get data()
    {
        return this._data
    }
}
class yV {
    flush()
    {
        return this._songs = [], !0
    }
    parse(e)
    {
        const t = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = e.readInt();
            e.readString();
            const n = e.readString(),
                o = e.readString(),
                l = e.readInt(),
                c = e.readString(),
                u = new NV(i, l, n, c, o);
            this._songs.push(u)
        }
        return !0
    }
    get songs()
    {
        return this._songs
    }
}
class MV {
    constructor()
    {
        this._songDiskInventory = new as
    }
    flush()
    {
        return this._songDiskInventory.reset(), !0
    }
    parse(e)
    {
        const t = e.readInt();
        for (let r = 0; r < t; r++)
            this._songDiskInventory.add(e.readInt(), e.readInt());
        return !0
    }
    getDiskId(e)
    {
        return e >= 0 && e < this._songDiskInventory.length ? this._songDiskInventory.getKey(e) : -1
    }
    getSongId(e)
    {
        return e >= 0 && e < this._songDiskInventory.length ? this._songDiskInventory.getWithIndex(e) : -1
    }
    get songDiskCount()
    {
        return this._songDiskInventory.length
    }
}
class bV {
    flush()
    {
        return this._talentTrackName = null, this._level = -1, this._rewardPerks = [], this._rewardProducts = [], !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t = 0;
        this._talentTrackName = e.readString(),
        this._level = e.readInt();
        const r = e.readInt();
        for (; t < r;)
            this._rewardPerks.push(new UV(e)),
            t++;
        const i = e.readInt();
        if (t < i)
            for (let n = 0; n < i; n++) {
                const o = e.readString(),
                    l = e.readInt();
                this._rewardProducts.push(new kR(o, l)),
                t++
            }
        return !0
    }
    get talentTrackName()
    {
        return this._talentTrackName
    }
    get level()
    {
        return this._level
    }
    get rewardPerks()
    {
        return this._rewardPerks
    }
    get rewardProducts()
    {
        return this._rewardProducts
    }
}
class DV {
    constructor(e, t, r, i, n)
    {
        this._level = e,
        this._state = t,
        this._tasks = r,
        this._rewardPerks = i,
        this._rewardProducts = n
    }
    get level()
    {
        return this._level
    }
    get state()
    {
        return this._state
    }
    get tasks()
    {
        return this._tasks
    }
    get perks()
    {
        return this._rewardPerks
    }
    get items()
    {
        return this._rewardProducts
    }
}
class vV {
    flush()
    {
        return this._talentTrackName = null, this._level = -1, this._maxLevel = -1, !0
    }
    parse(e)
    {
        return e ? (this._talentTrackName = e.readString(), this._level = e.readInt(), this._maxLevel = e.readInt(), !0) : !1
    }
    get talentTrackName()
    {
        return this._talentTrackName
    }
    get level()
    {
        return this._level
    }
    get maxLevel()
    {
        return this._maxLevel
    }
}
class kR {
    constructor(e, t)
    {
        this._productCode = e,
        this._vipDays = t
    }
    get productCode()
    {
        return this._productCode
    }
    get vipDays()
    {
        return this._vipDays
    }
}
class PV {
    constructor(e, t, r, i, n, o)
    {
        this._id = e,
        this._requiredLevel = t,
        this._badgeCode = r,
        this._state = i,
        this._currentScore = n,
        this._totalScore = o
    }
    get id()
    {
        return this._id
    }
    get requiredLevel()
    {
        return this._requiredLevel
    }
    get badgeCode()
    {
        return this._badgeCode
    }
    get state()
    {
        return this._state
    }
    get currentScore()
    {
        return this._currentScore
    }
    get totalScore()
    {
        return this._totalScore
    }
}
class LV {
    flush()
    {
        return this._type = null, this._levels = null, !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        this._type = e.readString(),
        this._levels = [];
        const t = e.readInt();
        for (let r = 0; r < t; r++) {
            const i = e.readInt(),
                n = e.readInt(),
                o = [],
                l = e.readInt();
            for (let m = 0; m < l; m++) {
                const p = e.readInt(),
                    E = e.readInt(),
                    T = e.readString(),
                    I = e.readInt(),
                    S = e.readInt(),
                    A = e.readInt();
                o.push(new PV(p, E, T, I, S, A))
            }
            const c = [],
                u = e.readInt();
            for (let m = 0; m < u; m++)
                c.push(e.readString());
            const h = [],
                d = e.readInt();
            for (let m = 0; m < d; m++) {
                const p = e.readString(),
                    E = e.readInt();
                h.push(new kR(p, E))
            }
            this._levels.push(new DV(i, n, o, c, h))
        }
        return !0
    }
    get type()
    {
        return this._type
    }
    get levels()
    {
        return this._levels
    }
}
class UV {
    constructor(e)
    {
        this._perkId = e.readInt()
    }
    get perkId()
    {
        return this._perkId
    }
}
class wV {
    flush()
    {
        return this._classifiedUsersNames && (this._classifiedUsersNames = new Map), this._classifiedUsersClass && (this._classifiedUsersClass = new Map), !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        let t,
            r,
            i,
            n = e.readInt();
        for (this._classifiedUsersNames = new Map, this._classifiedUsersClass = new Map; n > 0;)
            t = e.readInt(),
            r = e.readString(),
            i = e.readString(),
            this._classifiedUsersNames.set(t, r),
            this._classifiedUsersClass.set(t, i),
            n--;
        return !0
    }
    get classifiedUsernameMap()
    {
        return this._classifiedUsersNames
    }
    get classifiedUserTypeMap()
    {
        return this._classifiedUsersClass
    }
}
class FV extends L {
    constructor(e)
    {
        super(e, BU)
    }
    getParser()
    {
        return this.parser
    }
}
class xV extends L {
    constructor(e)
    {
        super(e, kU)
    }
    getParser()
    {
        return this.parser
    }
}
class VR extends L {
    constructor(e)
    {
        super(e, VU)
    }
    getParser()
    {
        return this.parser
    }
}
class GV extends L {
    constructor(e)
    {
        super(e, HU)
    }
    getParser()
    {
        return this.parser
    }
}
class HR extends L {
    constructor(e)
    {
        super(e, jU)
    }
    getParser()
    {
        return this.parser
    }
}
class jR extends L {
    constructor(e)
    {
        super(e, WU)
    }
    getParser()
    {
        return this.parser
    }
}
class WR extends L {
    constructor(e)
    {
        super(e, YU)
    }
    getParser()
    {
        return this.parser
    }
}
class YR extends L {
    constructor(e)
    {
        super(e, zU)
    }
    getParser()
    {
        return this.parser
    }
}
class tn extends L {
    constructor(e)
    {
        super(e, KU)
    }
    getParser()
    {
        return this.parser
    }
}
tn.NAME_OK = 0;
tn.ERROR_NAME_REQUIRED = 1;
tn.ERROR_NAME_TOO_SHORT = 2;
tn.ERROR_NAME_TOO_LONG = 3;
tn.ERROR_NAME_NOT_VALID = 4;
tn.ERROR_NAME_IN_USE = 5;
tn.ERROR_NAME_CHANGE_NOT_ALLOWED = 6;
tn.ERROR_MERGE_HOTEL_DOWN = 7;
class zR extends L {
    constructor(e)
    {
        super(e, qU)
    }
    getParser()
    {
        return this.parser
    }
}
class Sm extends L {
    constructor(e)
    {
        super(e, XU)
    }
    getParser()
    {
        return this.parser
    }
}
class BV extends L {
    constructor(e)
    {
        super(e, JU)
    }
    getParser()
    {
        return this.parser
    }
}
class KR extends L {
    constructor(e)
    {
        super(e, ZU)
    }
    getParser()
    {
        return this.parser
    }
}
class qR extends L {
    constructor(e)
    {
        super(e, $U)
    }
    getParser()
    {
        return this.parser
    }
}
class kV extends L {
    constructor(e)
    {
        super(e, e0)
    }
    getParser()
    {
        return this.parser
    }
}
class XR extends L {
    constructor(e)
    {
        super(e, t0)
    }
    getParser()
    {
        return this.parser
    }
}
class QR extends L {
    constructor(e)
    {
        super(e, n0)
    }
    getParser()
    {
        return this.parser
    }
}
class JR extends L {
    constructor(e)
    {
        super(e, a0)
    }
    getParser()
    {
        return this.parser
    }
}
class ZR extends L {
    constructor(e)
    {
        super(e, o0)
    }
    getParser()
    {
        return this.parser
    }
}
class $R extends L {
    constructor(e)
    {
        super(e, l0)
    }
    getParser()
    {
        return this.parser
    }
}
class eO extends L {
    constructor(e)
    {
        super(e, c0)
    }
    getParser()
    {
        return this.parser
    }
}
class VV extends L {
    constructor(e)
    {
        super(e, u0)
    }
    getParser()
    {
        return this.parser
    }
}
class tO extends L {
    constructor(e)
    {
        super(e, h0)
    }
    getParser()
    {
        return this.parser
    }
}
class HV extends L {
    constructor(e)
    {
        super(e, d0)
    }
    getParser()
    {
        return this.parser
    }
}
class sO extends L {
    constructor(e)
    {
        super(e, _0)
    }
    getParser()
    {
        return this.parser
    }
}
class jV extends L {
    constructor(e)
    {
        super(e, g0)
    }
    getParser()
    {
        return this.parser
    }
}
class rO extends L {
    constructor(e)
    {
        super(e, f0)
    }
    getParser()
    {
        return this.parser
    }
}
class iO extends L {
    constructor(e)
    {
        super(e, m0)
    }
    getParser()
    {
        return this.parser
    }
}
class nO extends L {
    constructor(e)
    {
        super(e, E0)
    }
    getParser()
    {
        return this.parser
    }
}
class aO extends L {
    constructor(e)
    {
        super(e, p0)
    }
    getParser()
    {
        return this.parser
    }
}
class oO extends L {
    constructor(e)
    {
        super(e, I0)
    }
    getParser()
    {
        return this.parser
    }
}
class WV extends L {
    constructor(e)
    {
        super(e, R0)
    }
    getParser()
    {
        return this.parser
    }
}
class YV extends L {
    constructor(e)
    {
        super(e, C0)
    }
    getParser()
    {
        return this.parser
    }
}
class lO extends L {
    constructor(e)
    {
        super(e, A0)
    }
    getParser()
    {
        return this.parser
    }
}
class cO extends L {
    constructor(e)
    {
        super(e, O0)
    }
    getParser()
    {
        return this.parser
    }
}
class zV extends L {
    constructor(e)
    {
        super(e, N0)
    }
    getParser()
    {
        return this.parser
    }
}
class uO extends L {
    constructor(e)
    {
        super(e, y0)
    }
    getParser()
    {
        return this.parser
    }
}
class Cm extends L {
    constructor(e)
    {
        super(e, b0)
    }
    getParser()
    {
        return this.parser
    }
}
class hO extends L {
    constructor(e)
    {
        super(e, D0)
    }
    getParser()
    {
        return this.parser
    }
}
class KV extends L {
    constructor(e)
    {
        super(e, P0)
    }
    getParser()
    {
        return this.parser
    }
}
class qV extends L {
    constructor(e)
    {
        super(e, U0)
    }
    getParser()
    {
        return this.parser
    }
}
class dO extends L {
    constructor(e)
    {
        super(e, w0)
    }
    getParser()
    {
        return this.parser
    }
}
class _O extends L {
    constructor(e)
    {
        super(e, F0)
    }
    getParser()
    {
        return this.parser
    }
}
class XV extends L {
    constructor(e)
    {
        super(e, x0)
    }
    getParser()
    {
        return this.parser
    }
}
class gO extends L {
    constructor(e)
    {
        super(e, G0)
    }
    getParser()
    {
        return this.parser
    }
}
class QV extends L {
    constructor(e)
    {
        super(e, B0)
    }
    getParser()
    {
        return this.parser
    }
}
class fO extends L {
    constructor(e)
    {
        super(e, k0)
    }
    getParser()
    {
        return this.parser
    }
}
class JV extends L {
    constructor(e)
    {
        super(e, V0)
    }
    getParser()
    {
        return this.parser
    }
}
class ZV extends L {
    constructor(e)
    {
        super(e, H0)
    }
    getParser()
    {
        return this.parser
    }
}
class mO extends L {
    constructor(e)
    {
        super(e, j0)
    }
    getParser()
    {
        return this.parser
    }
}
class EO extends L {
    constructor(e)
    {
        super(e, W0)
    }
    getParser()
    {
        return this.parser
    }
}
class pO extends L {
    constructor(e)
    {
        super(e, Y0)
    }
    getParser()
    {
        return this.parser
    }
}
class IO extends L {
    constructor(e)
    {
        super(e, K0)
    }
    getParser()
    {
        return this.parser
    }
}
class TO extends L {
    constructor(e)
    {
        super(e, YF)
    }
    getParser()
    {
        return this.parser
    }
}
class $V extends L {
    constructor(e)
    {
        super(e, zF)
    }
    getParser()
    {
        return this.parser
    }
}
class RO extends L {
    constructor(e)
    {
        super(e, qF)
    }
    getParser()
    {
        return this.parser
    }
}
class OO extends L {
    constructor(e)
    {
        super(e, JF)
    }
    getParser()
    {
        return this.parser
    }
}
class eH extends L {
    constructor(e)
    {
        super(e, QF)
    }
    getParser()
    {
        return this.parser
    }
}
class SO extends L {
    constructor(e)
    {
        super(e, ZF)
    }
    getParser()
    {
        return this.parser
    }
}
class CO extends L {
    constructor(e)
    {
        super(e, $F)
    }
    getParser()
    {
        return this.parser
    }
}
class AO extends L {
    constructor(e)
    {
        super(e, ex)
    }
    getParser()
    {
        return this.parser
    }
}
class tH extends L {
    constructor(e)
    {
        super(e, Za)
    }
    getParser()
    {
        return this.parser
    }
}
class sH extends L {
    constructor(e)
    {
        super(e, tx)
    }
    getParser()
    {
        return this.parser
    }
}
class rH extends L {
    constructor(e)
    {
        super(e, sx)
    }
    getParser()
    {
        return this.parser
    }
}
class iH extends L {
    constructor(e)
    {
        super(e, rx)
    }
    getParser()
    {
        return this.parser
    }
}
class nH extends L {
    constructor(e)
    {
        super(e, ix)
    }
    getParser()
    {
        return this.parser
    }
}
class aH extends L {
    constructor(e)
    {
        super(e, nx)
    }
    getParser()
    {
        return this.parser
    }
}
class NO extends L {
    constructor(e)
    {
        super(e, ax)
    }
    getParser()
    {
        return this.parser
    }
}
class yO extends L {
    constructor(e)
    {
        super(e, lx)
    }
    getParser()
    {
        return this.parser
    }
}
class MO extends L {
    constructor(e)
    {
        super(e, cx)
    }
    getParser()
    {
        return this.parser
    }
}
class bO extends L {
    constructor(e)
    {
        super(e, ux)
    }
    getParser()
    {
        return this.parser
    }
}
class Wc extends L {
    constructor(e)
    {
        super(e, hx)
    }
    getParser()
    {
        return this.parser
    }
}
class oH extends L {
    constructor(e)
    {
        super(e, _x)
    }
    getParser()
    {
        return this.parser
    }
}
class lH extends L {
    constructor(e)
    {
        super(e, gx)
    }
    getParser()
    {
        return this.parser
    }
}
class cH extends L {
    constructor(e)
    {
        super(e, fx)
    }
    getParser()
    {
        return this.parser
    }
}
class DO extends L {
    constructor(e)
    {
        super(e, mx)
    }
    getParser()
    {
        return this.parser
    }
}
class vO extends L {
    constructor(e)
    {
        super(e, Ex)
    }
    getParser()
    {
        return this.parser
    }
}
class uH extends L {
    constructor(e)
    {
        super(e, px)
    }
    getParser()
    {
        return this.parser
    }
}
class PO extends L {
    constructor(e)
    {
        super(e, Ix)
    }
    getParser()
    {
        return this.parser
    }
}
class LO extends L {
    constructor(e)
    {
        super(e, Tx)
    }
    getParser()
    {
        return this.parser
    }
}
class hH extends L {
    constructor(e)
    {
        super(e, Rx)
    }
    getParser()
    {
        return this.parser
    }
}
class dH extends L {
    constructor(e)
    {
        super(e, Ox)
    }
    getParser()
    {
        return this.parser
    }
}
class UO extends L {
    constructor(e)
    {
        super(e, Sx)
    }
    getParser()
    {
        return this.parser
    }
}
class _H extends L {
    constructor(e)
    {
        super(e, Cx)
    }
    getParser()
    {
        return this.parser
    }
}
class gH extends L {
    constructor(e)
    {
        super(e, Ax)
    }
    getParser()
    {
        return this.parser
    }
}
class Am extends L {
    constructor(e)
    {
        super(e, Nx)
    }
    getParser()
    {
        return this.parser
    }
}
class Nm extends L {
    constructor(e)
    {
        super(e, yx)
    }
    getParser()
    {
        return this.parser
    }
}
class wO extends L {
    constructor(e)
    {
        super(e, Mx)
    }
    getParser()
    {
        return this.parser
    }
}
class ym extends L {
    constructor(e)
    {
        super(e, bx)
    }
    getParser()
    {
        return this.parser
    }
}
class FO extends L {
    constructor(e)
    {
        super(e, Dx)
    }
    getParser()
    {
        return this.parser
    }
}
class fH extends L {
    constructor(e)
    {
        super(e, nu)
    }
    getParser()
    {
        return this.parser
    }
}
class mH extends L {
    constructor(e)
    {
        super(e, vx)
    }
    getParser()
    {
        return this.parser
    }
}
class EH extends L {
    constructor(e)
    {
        super(e, ua)
    }
    getParser()
    {
        return this.parser
    }
}
class pH extends L {
    constructor(e)
    {
        super(e, fm)
    }
    getParser()
    {
        return this.parser
    }
}
class IH extends L {
    constructor(e)
    {
        super(e, Px)
    }
    getParser()
    {
        return this.parser
    }
}
class TH extends L {
    constructor(e)
    {
        super(e, Lx)
    }
    getParser()
    {
        return this.parser
    }
}
class RH extends L {
    constructor(e)
    {
        super(e, Ux)
    }
    getParser()
    {
        return this.parser
    }
}
class OH extends L {
    constructor(e)
    {
        super(e, wx)
    }
    getParser()
    {
        return this.parser
    }
}
class SH extends L {
    constructor(e)
    {
        super(e, Fx)
    }
    getParser()
    {
        return this.parser
    }
}
class CH extends L {
    constructor(e)
    {
        super(e, Gx)
    }
    getParser()
    {
        return this.parser
    }
}
class AH extends L {
    constructor(e)
    {
        super(e, kx)
    }
    getParser()
    {
        return this.parser
    }
}
class xO extends L {
    constructor(e)
    {
        super(e, Vx)
    }
    getParser()
    {
        return this.parser
    }
}
class GO extends L {
    constructor(e)
    {
        super(e, mm)
    }
    getParser()
    {
        return this.parser
    }
}
class NH extends L {
    constructor(e)
    {
        super(e, Hx)
    }
    getParser()
    {
        return this.parser
    }
}
class yH extends L {
    constructor(e)
    {
        super(e, UR)
    }
    getParser()
    {
        return this.parser
    }
}
class MH extends L {
    constructor(e)
    {
        super(e, jx)
    }
    getParser()
    {
        return this.parser
    }
}
class bH extends L {
    constructor(e)
    {
        super(e, Wx)
    }
    getParser()
    {
        return this.parser
    }
}
class Mm extends L {
    constructor(e)
    {
        super(e, Yx)
    }
    getParser()
    {
        return this.parser
    }
}
class DH extends L {
    constructor(e)
    {
        super(e, zx)
    }
    getParser()
    {
        return this.parser
    }
}
class vH extends L {
    constructor(e)
    {
        super(e, Kx)
    }
    getParser()
    {
        return this.parser
    }
}
class PH extends L {
    constructor(e)
    {
        super(e, Pd)
    }
    getParser()
    {
        return this.parser
    }
}
class LH extends L {
    constructor(e)
    {
        super(e, Pd)
    }
    getParser()
    {
        return this.parser
    }
}
class UH extends L {
    constructor(e)
    {
        super(e, Pd)
    }
    getParser()
    {
        return this.parser
    }
}
class wH extends L {
    constructor(e)
    {
        super(e, Pd)
    }
    getParser()
    {
        return this.parser
    }
}
class FH extends L {
    constructor(e)
    {
        super(e, Xx)
    }
    getParser()
    {
        return this.parser
    }
}
class xH extends L {
    constructor(e)
    {
        super(e, Qx)
    }
    getParser()
    {
        return this.parser
    }
}
class Uh extends L {
    constructor(e)
    {
        super(e, Jx)
    }
    getParser()
    {
        return this.parser
    }
}
class GH extends L {
    constructor(e)
    {
        super(e, Zx)
    }
    getParser()
    {
        return this.parser
    }
}
class BH extends L {
    constructor(e)
    {
        super(e, $x)
    }
    getParser()
    {
        return this.parser
    }
}
class kH extends L {
    constructor(e)
    {
        super(e, eG)
    }
    getParser()
    {
        return this.parser
    }
}
class bm extends L {
    constructor(e)
    {
        super(e, tG)
    }
    getParser()
    {
        return this.parser
    }
}
class BO extends L {
    constructor(e)
    {
        super(e, sG)
    }
    getParser()
    {
        return this.parser
    }
}
class kO extends L {
    constructor(e)
    {
        super(e, rG)
    }
    getParser()
    {
        return this.parser
    }
}
class ec extends L {
    constructor(e)
    {
        super(e, iG)
    }
    getParser()
    {
        return this.parser
    }
}
class VO extends L {
    constructor(e)
    {
        super(e, oG)
    }
    getParser()
    {
        return this.parser
    }
}
class HO extends L {
    constructor(e)
    {
        super(e, lG)
    }
    getParser()
    {
        return this.parser
    }
}
class jO extends L {
    constructor(e)
    {
        super(e, cG)
    }
    getParser()
    {
        return this.parser
    }
}
class WO extends L {
    constructor(e)
    {
        super(e, uG)
    }
    getParser()
    {
        return this.parser
    }
}
class VH extends L {
    constructor(e)
    {
        super(e, hG)
    }
    getParser()
    {
        return this.parser
    }
}
class HH extends L {
    constructor(e)
    {
        super(e, dG)
    }
    getParser()
    {
        return this.parser
    }
}
class jH extends L {
    constructor(e)
    {
        super(e, _G)
    }
    getParser()
    {
        return this.parser
    }
}
class WH extends L {
    constructor(e)
    {
        super(e, gG)
    }
    getParser()
    {
        return this.parser
    }
}
class YH extends L {
    constructor(e)
    {
        super(e, fG)
    }
    getParser()
    {
        return this.parser
    }
}
class zH extends L {
    constructor(e)
    {
        super(e, mG)
    }
    getParser()
    {
        return this.parser
    }
}
class KH extends L {
    constructor(e)
    {
        super(e, EG)
    }
    getParser()
    {
        return this.parser
    }
}
class qH extends L {
    constructor(e)
    {
        super(e, pG)
    }
    getParser()
    {
        return this.parser
    }
}
class XH extends L {
    constructor(e)
    {
        super(e, IG)
    }
    getParser()
    {
        return this.parser
    }
}
class QH extends L {
    constructor(e)
    {
        super(e, TG)
    }
    getParser()
    {
        return this.parser
    }
}
class Xe {}
Xe.LOGOUT = 0;
Xe.JUST_BANNED = 1;
Xe.CONCURRENT_LOGIN = 2;
Xe.CONNECTION_LOST_TO_PEER = 3;
Xe.AVATAR_IDENTITY_CHANGE = 4;
Xe.REMOVE_FURNITURE_TOOL = 5;
Xe.STILL_BANNED = 10;
Xe.DUAL_LOGIN_BY_USERID = 11;
Xe.HOTEL_CLOSED = 12;
Xe.DUAL_LOGIN_BY_IP = 13;
Xe.PEER_CONNECTION_MISSING = 16;
Xe.NO_LOGIN_PERMISSION = 17;
Xe.DUPLICATE_CONNECTION = 18;
Xe.HOTEL_CLOSING = 19;
Xe.INCORRECT_PASSWORD = 20;
Xe.INVALID_LOGIN_TICKET = 22;
Xe.VERSION_CHECK_URL = 23;
Xe.VERSION_CHECK_PROPERTY = 24;
Xe.VERSION_CHECK_MACHINE_ID = 25;
Xe.NO_MESSENGER_SESSION = 26;
Xe.USER_NOT_FOUND = 27;
Xe.CRYPTO_NOT_INITIALIZED = 28;
Xe.DEV_CRYPTO_NOT_ALLOWED = 29;
Xe.DUPLICATE_UUID_DETECTED = 100;
Xe.OLD_SESSION_IN_PROXY = 101;
Xe.PUBLIC_KEY_NOT_NUMERIC = 102;
Xe.PUBLIC_KEY_TOO_SHORT = 103;
Xe.SOCKET_READ_GENERIC = 104;
Xe.SOCKET_READ_FIRST_BYTE = 105;
Xe.SOCKET_READ_LENGTH = 106;
Xe.SOCKET_READ_BODY = 107;
Xe.SOCKET_READ_POLICY = 108;
Xe.SOCKET_IO_EXCEPTION = 109;
Xe.SOCKET_WRONG_CRYPTO = 110;
Xe.PROXY_RUNTIME_EXCEPTION = 111;
Xe.IDLE_CONNECTION = 112;
Xe.PONG_TIMEOUT = 113;
Xe.IDLE_CONNECTION_NOT_AUTH = 114;
Xe.IDLE_CONNECTION_NO_USER_ID = 115;
Xe.WRITE_CLOSED_CHANNEL = 116;
Xe.SOCKET_WRITE_EXCEPTION_1 = 117;
Xe.SOCKET_WRITE_EXCEPTION_2 = 118;
Xe.SOCKET_WRITE_EXCEPTION_3 = 119;
class JH extends L {
    constructor(e)
    {
        super(e, RG)
    }
    getParser()
    {
        return this.parser
    }
    get reasonString()
    {
        switch (this.getParser().reason) {
        case Xe.JUST_BANNED:
        case Xe.STILL_BANNED:
            return "banned";
        case Xe.CONCURRENT_LOGIN:
            return "concurrentlogin";
        case Xe.INCORRECT_PASSWORD:
            return "incorrectpassword";
        default:
            return "logout"
        }
    }
}
class ZH extends L {
    constructor(e)
    {
        super(e, OG)
    }
    getParser()
    {
        return this.parser
    }
}
class $H extends L {
    constructor(e)
    {
        super(e, SG)
    }
    getParser()
    {
        return this.parser
    }
}
class YO extends L {
    constructor(e)
    {
        super(e, CG)
    }
    getParser()
    {
        return this.parser
    }
}
class zO extends L {
    constructor(e)
    {
        super(e, AG)
    }
    getParser()
    {
        return this.parser
    }
}
class KO extends L {
    constructor(e)
    {
        super(e, NG)
    }
    getParser()
    {
        return this.parser
    }
}
class qO extends L {
    constructor(e)
    {
        super(e, yG)
    }
    getParser()
    {
        return this.parser
    }
}
class XO extends L {
    constructor(e)
    {
        super(e, MG)
    }
    getParser()
    {
        return this.parser
    }
}
class QO extends L {
    constructor(e)
    {
        super(e, bG)
    }
    getParser()
    {
        return this.parser
    }
}
class e2 extends L {
    constructor(e)
    {
        super(e, DG)
    }
    getParser()
    {
        return this.parser
    }
}
class t2 extends L {
    constructor(e)
    {
        super(e, vG)
    }
    getParser()
    {
        return this.parser
    }
}
class s2 extends L {
    constructor(e)
    {
        super(e, PG)
    }
    getParser()
    {
        return this.parser
    }
}
class r2 extends L {
    constructor(e)
    {
        super(e, LG)
    }
    getParser()
    {
        return this.parser
    }
}
class i2 extends L {
    constructor(e)
    {
        super(e, jo)
    }
    getParser()
    {
        return this.parser
    }
}
class JO extends L {
    constructor(e)
    {
        super(e, UG)
    }
    getParser()
    {
        return this.parser
    }
}
class n2 extends L {
    constructor(e)
    {
        super(e, lu)
    }
    getParser()
    {
        return this.parser
    }
}
class ZO extends L {
    constructor(e)
    {
        super(e, FG)
    }
    getParser()
    {
        return this.parser
    }
}
class $O extends L {
    constructor(e)
    {
        super(e, xG)
    }
    getParser()
    {
        return this.parser
    }
}
class Dm extends L {
    constructor(e)
    {
        super(e, GG)
    }
    getParser()
    {
        return this.parser
    }
}
class vm extends L {
    constructor(e)
    {
        super(e, $l)
    }
    getParser()
    {
        return this.parser
    }
}
class eS extends L {
    constructor(e)
    {
        super(e, BG)
    }
    getParser()
    {
        return this.parser
    }
}
class tS extends L {
    constructor(e)
    {
        super(e, kG)
    }
    getParser()
    {
        return this.parser
    }
}
class sS extends L {
    constructor(e)
    {
        super(e, VG)
    }
    getParser()
    {
        return this.parser
    }
}
class rS extends L {
    constructor(e)
    {
        super(e, HG)
    }
    getParser()
    {
        return this.parser
    }
}
class Pm extends L {
    constructor(e)
    {
        super(e, jG)
    }
    getParser()
    {
        return this.parser
    }
}
class a2 extends L {
    constructor(e)
    {
        super(e, cu)
    }
    getParser()
    {
        return this.parser
    }
}
class o2 extends L {
    constructor(e)
    {
        super(e, Ld)
    }
    getParser()
    {
        return this.parser
    }
}
class l2 extends L {
    constructor(e)
    {
        super(e, WG)
    }
    getParser()
    {
        return this.parser
    }
}
class iS extends L {
    constructor(e)
    {
        super(e, YG)
    }
    getParser()
    {
        return this.parser
    }
}
class c2 extends L {
    constructor(e)
    {
        super(e, zG)
    }
    getParser()
    {
        return this.parser
    }
}
class u2 extends L {
    constructor(e)
    {
        super(e, KG)
    }
    getParser()
    {
        return this.parser
    }
}
class O {}
O.ACHIEVEMENT_LIST = 305;
O.AUTHENTICATED = 2491;
O.AUTHENTICATION = -1;
O.AVAILABILITY_STATUS = 2033;
O.BUILDERS_CLUB_EXPIRED = 1452;
O.CLUB_OFFERS = 2405;
O.CATALOG_PAGE = 804;
O.CATALOG_PAGE_LIST = 1032;
O.CATALOG_PURCHASE_OK = 869;
O.CATALOG_PURCHASE_ERROR = 1404;
O.CATALOG_PURCHASE_NOT_ALLOWED = 3770;
O.PRODUCT_OFFER = 3388;
O.LIMITED_SOLD_OUT = 377;
O.CATALOG_PUBLISHED = 1866;
O.CFH_RESULT_MESSAGE = 3635;
O.CLIENT_LATENCY = 10;
O.CLIENT_PING = 3928;
O.DESKTOP_CAMPAIGN = 1745;
O.DESKTOP_NEWS = 286;
O.DESKTOP_VIEW = 122;
O.BUNDLE_DISCOUNT_RULESET = 2347;
O.FIRST_LOGIN_OF_DAY = 793;
O.FURNITURE_ALIASES = 1723;
O.FURNITURE_DATA = 2547;
O.FURNITURE_FLOOR = 1778;
O.FURNITURE_FLOOR_ADD = 1534;
O.FURNITURE_FLOOR_REMOVE = 2703;
O.FURNITURE_FLOOR_UPDATE = 3776;
O.FURNITURE_ITEMDATA = 2202;
O.FURNITURE_STATE = 2376;
O.FURNITURE_GROUP_CONTEXT_MENU_INFO = 3293;
O.FURNITURE_POSTIT_STICKY_POLE_OPEN = 2366;
O.GAME_CENTER_ACHIEVEMENTS = 2265;
O.GAME_CENTER_GAME_LIST = 222;
O.GAME_CENTER_STATUS = 2893;
O.GAME_CENTER_IN_ARENA_QUEUE = 872;
O.GAME_CENTER_STOP_COUNTER = 3191;
O.GAME_CENTER_USER_LEFT_GAME = 3138;
O.GAME_CENTER_DIRECTORY_STATUS = 2246;
O.GAME_CENTER_STARTING_GAME_FAILED = 2142;
O.GAME_CENTER_JOINING_FAILED = 1730;
O.GAMESTATUSMESSAGE = 3805;
O.GAMEACHIEVEMENTS = 1689;
O.GAMEINVITE = 904;
O.JOININGQUEUEFAILED = 3035;
O.JOINEDQUEUEMESSAGE = 2260;
O.LEFTQUEUE = 1477;
O.LOAD_GAME_URL = 2624;
O.LOADGAME = 3654;
O.UNLOADGAME = 1715;
O.ACHIEVEMENTRESOLUTIONCOMPLETED = 740;
O.ACHIEVEMENTRESOLUTIONPROGRESS = 3370;
O.ACHIEVEMENTRESOLUTIONS = 66;
O.GENERIC_ALERT = 3801;
O.MODERATOR_MESSAGE = 2030;
O.GENERIC_ERROR = 1600;
O.GIFT_WRAPPER_CONFIG = 2234;
O.GROUP_BADGES = 2402;
O.GROUP_CREATE_OPTIONS = 2159;
O.GROUP_FORUM_DATA = 3011;
O.GROUP_FORUM_LIST = 3001;
O.GROUP_FORUM_THREADS = 1073;
O.GROUP_FORUM_POST = 2049;
O.GROUP_FORUM_POST_THREAD = 1862;
O.GROUP_FORUM_THREAD_MESSAGES = 509;
O.GROUP_FORUM_UNREAD_COUNT = 2379;
O.GROUP_FORUM_UPDATE_MESSAGE = 324;
O.GROUP_FORUM_UPDATE_THREAD = 2528;
O.GROUP_INFO = 1702;
O.GROUP_LIST = 420;
O.GROUP_MEMBER = 265;
O.GROUP_MEMBERS = 1200;
O.GROUP_MEMBERS_REFRESH = 2445;
O.GROUP_MEMBER_REMOVE_CONFIRM = 1876;
O.GROUP_PURCHASED = 2808;
O.GROUP_SETTINGS = 3965;
O.GROUP_BADGE_PARTS = 2238;
O.GROUP_MEMBERSHIP_REQUESTED = 1180;
O.GROUP_DETAILS_CHANGED = 1459;
O.GROUP_HABBO_JOIN_FAILED = 762;
O.GUILD_EDIT_FAILED = 3988;
O.GUILD_MEMBER_MGMT_FAILED = 818;
O.ITEM_DIMMER_SETTINGS = 2710;
O.ITEM_STACK_HELPER = 2816;
O.ITEM_WALL = 1369;
O.ITEM_WALL_ADD = 2187;
O.ITEM_WALL_REMOVE = 3208;
O.ITEM_WALL_UPDATE = 2009;
O.MARKETPLACE_CONFIG = 1823;
O.MESSENGER_ACCEPT_FRIENDS = 896;
O.MESSENGER_CHAT = 1587;
O.MESSENGER_FIND_FRIENDS = 1210;
O.MESSENGER_FOLLOW_FAILED = 3048;
O.MESSENGER_FRIEND_NOTIFICATION = 3082;
O.MESSENGER_FRIENDS = 3130;
O.MESSENGER_INIT = 1605;
O.MESSENGER_INSTANCE_MESSAGE_ERROR = 3359;
O.MESSENGER_INVITE = 3870;
O.MESSENGER_INVITE_ERROR = 462;
O.MESSENGER_MESSAGE_ERROR = 892;
O.MESSENGER_MINIMAIL_COUNT = 2803;
O.MESSENGER_MINIMAIL_NEW = 1911;
O.MESSENGER_RELATIONSHIPS = 2016;
O.MESSENGER_REQUEST = 2219;
O.MESSENGER_REQUEST_ERROR = 892;
O.MESSENGER_REQUESTS = 280;
O.MESSENGER_SEARCH = 973;
O.MESSENGER_UPDATE = 2800;
O.MODERATION_REPORT_DISABLED = 1651;
O.MODERATION_TOOL = 2696;
O.MODERATION_USER_INFO = 2866;
O.MOTD_MESSAGES = 2035;
O.NAVIGATOR_CATEGORIES = 1562;
O.NAVIGATOR_COLLAPSED = 1543;
O.NAVIGATOR_EVENT_CATEGORIES = 3244;
O.NAVIGATOR_LIFTED = 3104;
O.NAVIGATOR_METADATA = 3052;
O.NAVIGATOR_OPEN_ROOM_CREATOR = 2064;
O.NAVIGATOR_SEARCH = 2690;
O.NAVIGATOR_SEARCHES = 3984;
O.NAVIGATOR_SETTINGS = 518;
O.THUMBNAIL_UPDATE_RESULT = 1927;
O.CAN_CREATE_ROOM = 378;
O.CATEGORIES_WITH_VISITOR_COUNT = 1455;
O.COMPETITION_ROOMS_DATA = 3954;
O.CONVERTED_ROOM_ID = 1331;
O.GUEST_ROOM_SEARCH_RESULT = 52;
O.NOTIFICATION_LIST = 1992;
O.NOTIFICATION_OFFER_REWARD_DELIVERED = 2125;
O.NOTIFICATION_SIMPLE_ALERT = 5100;
O.NOTIFICATION_ELEMENT_POINTER = 1787;
O.PET_FIGURE_UPDATE = 1924;
O.PET_INFO = 2901;
O.PET_TRAINING_PANEL = 1164;
O.PET_LEVEL_UPDATE = 2824;
O.PET_SCRATCH_FAILED = 1130;
O.PET_OPEN_PACKAGE_REQUESTED = 2380;
O.PET_OPEN_PACKAGE_RESULT = 546;
O.PET_BREEDING = 1746;
O.PET_CONFIRM_BREEDING_RESULT = 1625;
O.PET_GO_TO_BREEDING_NEST_FAILURE = 2621;
O.PET_NEST_BREEDING_SUCCESS = 2527;
O.PET_CONFIRM_BREEDING_REQUEST = 634;
O.PET_BREEDING_RESULT = 1553;
O.RECYCLER_PRIZES = 3164;
O.RECYCLER_STATUS = 3433;
O.RECYCLER_FINISHED = 468;
O.ROOM_BAN_LIST = 1869;
O.ROOM_BAN_REMOVE = 3429;
O.ROOM_CREATED = 1304;
O.ROOM_DOORBELL = 2309;
O.ROOM_DOORBELL_ACCEPTED = 3783;
O.ROOM_DOORBELL_REJECTED = 878;
O.ROOM_ENTER = 758;
O.ROOM_ENTER_ERROR = 899;
O.ROOM_FORWARD = 160;
O.ROOM_HEIGHT_MAP = 2753;
O.ROOM_HEIGHT_MAP_UPDATE = 558;
O.ROOM_INFO = 687;
O.ROOM_INFO_OWNER = 749;
O.ROOM_MODEL = 1301;
O.ROOM_MODEL_BLOCKED_TILES = 3990;
O.ROOM_MODEL_DOOR = 1664;
O.ROOM_MODEL_NAME = 2031;
O.ROOM_MUTED = 2533;
O.ROOM_MUTE_USER = 826;
O.ROOM_PAINT = 2454;
O.ROOM_PROMOTION = 2274;
O.ROOM_QUEUE_STATUS = 2208;
O.ROOM_RIGHTS = 780;
O.ROOM_RIGHTS_CLEAR = 2392;
O.ROOM_RIGHTS_LIST = 1284;
O.ROOM_RIGHTS_LIST_ADD = 2088;
O.ROOM_RIGHTS_LIST_REMOVE = 1327;
O.ROOM_RIGHTS_OWNER = 339;
O.ROOM_ROLLING = 3207;
O.ROOM_SCORE = 482;
O.ROOM_SETTINGS = 1498;
O.ROOM_SETTINGS_CHAT = 1191;
O.ROOM_SETTINGS_SAVE = 948;
O.ROOM_SETTINGS_SAVE_ERROR = 1555;
O.ROOM_INFO_UPDATED = 3297;
O.ROOM_SPECTATOR = 1033;
O.ROOM_THICKNESS = 3547;
O.ROOM_GET_FILTER_WORDS = 2937;
O.ROOM_MESSAGE_NOTIFICATION = 1634;
O.ROOM_POPULAR_TAGS_RESULT = 2012;
O.INFO_FEED_ENABLE = 3284;
O.SECURITY_MACHINE = 1488;
O.MYSTERY_BOX_KEYS = 2833;
O.GOTMYSTERYBOXPRIZEMESSAGE = 3712;
O.CANCELMYSTERYBOXWAITMESSAGE = 596;
O.SHOWMYSTERYBOXWAITMESSAGE = 3201;
O.TRADE_ACCEPTED = 2568;
O.TRADE_CLOSED = 1373;
O.TRADE_COMPLETED = 1001;
O.TRADE_CONFIRMATION = 2720;
O.TRADE_LIST_ITEM = 2024;
O.TRADE_NOT_OPEN = 3128;
O.TRADE_OPEN = 2505;
O.TRADE_OPEN_FAILED = 217;
O.TRADE_OTHER_NOT_ALLOWED = 1254;
O.TRADE_YOU_NOT_ALLOWED = 3058;
O.TRADE_NO_SUCH_ITEM = 2873;
O.UNIT = 374;
O.UNIT_CHANGE_NAME = 2182;
O.UNIT_CHAT = 1446;
O.UNIT_CHAT_SHOUT = 1036;
O.UNIT_CHAT_WHISPER = 2704;
O.UNIT_DANCE = 2233;
O.UNIT_EFFECT = 1167;
O.UNIT_EXPRESSION = 1631;
O.UNIT_HAND_ITEM = 1474;
O.UNIT_IDLE = 1797;
O.UNIT_INFO = 3920;
O.UNIT_NUMBER = 2324;
O.UNIT_REMOVE = 2661;
O.UNIT_STATUS = 1640;
O.UNIT_TYPING = 1717;
O.UNSEEN_ITEMS = 2103;
O.USER_ACHIEVEMENT_SCORE = 1968;
O.USER_BADGES = 717;
O.USER_BADGES_ADD = 2493;
O.USER_BADGES_CURRENT = 1087;
O.USER_BOT_REMOVE = 233;
O.USER_BOTS = 3086;
O.USER_CHANGE_NAME = 118;
O.USER_CLOTHING = 1450;
O.USER_CREDITS = 3475;
O.USER_CURRENCY = 2018;
O.ACTIVITY_POINT_NOTIFICATION = 2275;
O.USER_EFFECTS = 340;
O.USER_FAVORITE_ROOM = 2524;
O.USER_FAVORITE_ROOM_COUNT = 151;
O.USER_FIGURE = 2429;
O.USER_FURNITURE = 994;
O.USER_FURNITURE_ADD = 104;
O.USER_FURNITURE_POSTIT_PLACED = 1501;
O.USER_FURNITURE_REFRESH = 3151;
O.USER_FURNITURE_REMOVE = 159;
O.USER_HOME_ROOM = 2875;
O.ROOM_EVENT_CANCEL = 3479;
O.ROOM_EVENT = 1840;
O.USER_IGNORED = 126;
O.USER_IGNORED_RESULT = 207;
O.USER_INFO = 2725;
O.USER_OUTFITS = 3315;
O.USER_PERKS = 2586;
O.USER_PERMISSIONS = 411;
O.USER_PET_ADD = 2101;
O.USER_PET_REMOVE = 3253;
O.USER_PETS = 3522;
O.USER_PROFILE = 3898;
O.USER_RESPECT = 2815;
O.USER_SANCTION_STATUS = 3679;
O.USER_SETTINGS = 513;
O.USER_SUBSCRIPTION = 954;
O.USER_WARDROBE_PAGE = 3315;
O.USER_CLASSIFICATION = 966;
O.GET_USER_TAGS = 1255;
O.WIRED_ACTION = 1434;
O.WIRED_CONDITION = 1108;
O.WIRED_ERROR = 156;
O.WIRED_OPEN = 1830;
O.WIRED_REWARD = 178;
O.WIRED_SAVE = 1155;
O.WIRED_TRIGGER = 383;
O.PLAYING_GAME = 448;
O.FURNITURE_STATE_2 = 3431;
O.REMOVE_BOT_FROM_INVENTORY = 233;
O.ADD_BOT_TO_INVENTORY = 1352;
O.ACHIEVEMENT_PROGRESSED = 2107;
O.MODTOOL_ROOM_INFO = 1333;
O.MODTOOL_USER_CHATLOG = 3377;
O.MODTOOL_ROOM_CHATLOG = 3434;
O.MODTOOL_VISITED_ROOMS_USER = 1752;
O.MODERATOR_ACTION_RESULT = 2335;
O.ISSUE_DELETED = 3192;
O.ISSUE_INFO = 3609;
O.ISSUE_PICK_FAILED = 3150;
O.CFH_CHATLOG = 607;
O.MODERATOR_TOOL_PREFERENCES = 1576;
O.LOVELOCK_FURNI_START = 3753;
O.LOVELOCK_FURNI_FRIEND_COMFIRMED = 382;
O.LOVELOCK_FURNI_FINISHED = 770;
O.GIFT_RECEIVER_NOT_FOUND = 1517;
O.GIFT_OPENED = 56;
O.FLOOD_CONTROL = 566;
O.REMAINING_MUTE = 826;
O.USER_EFFECT_LIST = 340;
O.USER_EFFECT_LIST_ADD = 2867;
O.USER_EFFECT_LIST_REMOVE = 2228;
O.USER_EFFECT_ACTIVATE = 1959;
O.AVATAR_EFFECT_SELECTED = 3473;
O.CLUB_GIFT_INFO = 619;
O.REDEEM_VOUCHER_ERROR = 714;
O.REDEEM_VOUCHER_OK = 3336;
O.IN_CLIENT_LINK = 2023;
O.BOT_COMMAND_CONFIGURATION = 1618;
O.BOT_SKILL_LIST_UPDATE = 69;
O.BOT_FORCE_OPEN_CONTEXT_MENU = 296;
O.HAND_ITEM_RECEIVED = 354;
O.PET_PLACING_ERROR = 2913;
O.BOT_ERROR = 639;
O.MARKETPLACE_SELL_ITEM = 54;
O.MARKETPLACE_ITEM_STATS = 725;
O.MARKETPLACE_OWN_ITEMS = 3884;
O.MARKETPLACE_CANCEL_SALE = 3264;
O.MARKETPLACE_ITEM_POSTED = 1359;
O.MARKETPLACE_ITEMS_SEARCHED = 680;
O.MARKETPLACE_AFTER_ORDER_STATUS = 2032;
O.CATALOG_RECEIVE_PET_BREEDS = 3331;
O.CATALOG_APPROVE_NAME_RESULT = 1503;
O.OBJECTS_DATA_UPDATE = 1453;
O.PET_EXPERIENCE = 2156;
O.COMMUNITY_GOAL_VOTE_EVENT = 1435;
O.PROMO_ARTICLES = 286;
O.COMMUNITY_GOAL_EARNED_PRIZES = 3319;
O.COMMUNITY_GOAL_PROGRESS = 2525;
O.CONCURRENT_USERS_GOAL_PROGRESS = 2737;
O.QUEST_DAILY = 1878;
O.QUEST_CANCELLED = 3027;
O.QUEST_COMPLETED = 949;
O.COMMUNITY_GOAL_HALL_OF_FAME = 3005;
O.EPIC_POPUP = 3945;
O.SEASONAL_QUESTS = 1122;
O.QUESTS = 3625;
O.QUEST = 230;
O.BONUS_RARE_INFO = 1533;
O.CRAFTABLE_PRODUCTS = 1e3;
O.CRAFTING_RECIPE = 2774;
O.CRAFTING_RECIPES_AVAILABLE = 2124;
O.CRAFTING_RESULT = 618;
O.CAMERA_PUBLISH_STATUS = 2057;
O.CAMERA_PURCHASE_OK = 2783;
O.CAMERA_STORAGE_URL = 3696;
O.CAMERA_SNAPSHOT = 463;
O.COMPETITION_STATUS = 133;
O.INIT_CAMERA = 3878;
O.THUMBNAIL_STATUS = 3595;
O.ACHIEVEMENT_NOTIFICATION = 806;
O.CLUB_GIFT_NOTIFICATION = 2188;
O.INTERSTITIAL_MESSAGE = 1808;
O.ROOM_AD_ERROR = 1759;
O.AVAILABILITY_TIME = 600;
O.HOTEL_CLOSED_AND_OPENS = 3728;
O.HOTEL_CLOSES_AND_OPENS_AT = 2771;
O.HOTEL_WILL_CLOSE_MINUTES = 1050;
O.HOTEL_MAINTENANCE = 1350;
O.JUKEBOX_PLAYLIST_FULL = 105;
O.JUKEBOX_SONG_DISKS = 34;
O.NOW_PLAYING = 469;
O.OFFICIAL_SONG_ID = 1381;
O.PLAYLIST = 1748;
O.PLAYLIST_SONG_ADDED = 1140;
O.TRAX_SONG_INFO = 3365;
O.USER_SONG_DISKS_INVENTORY = 2602;
O.CHECK_USER_NAME = 563;
O.CFH_SANCTION = 2782;
O.CFH_TOPICS = 325;
O.CFH_SANCTION_STATUS = 2221;
O.CAMPAIGN_CALENDAR_DATA = 2531;
O.CAMPAIGN_CALENDAR_DOOR_OPENED = 2551;
O.BUILDERS_CLUB_FURNI_COUNT = 3828;
O.BUILDERS_CLUB_SUBSCRIPTION = 1452;
O.CATALOG_PAGE_EXPIRATION = 2668;
O.CATALOG_EARLIEST_EXPIRY = 2515;
O.CLUB_GIFT_SELECTED = 659;
O.TARGET_OFFER_NOT_FOUND = 1237;
O.TARGET_OFFER = 119;
O.DIRECT_SMS_CLUB_BUY = 195;
O.ROOM_AD_PURCHASE = 2468;
O.NOT_ENOUGH_BALANCE = 3914;
O.LIMITED_OFFER_APPEARING_NEXT = 44;
O.IS_OFFER_GIFTABLE = 761;
O.CLUB_EXTENDED_OFFER = 3964;
O.SEASONAL_CALENDAR_OFFER = 1889;
O.COMPETITION_ENTRY_SUBMIT = 1177;
O.COMPETITION_VOTING_INFO = 3506;
O.COMPETITION_TIMING_CODE = 1745;
O.COMPETITION_USER_PART_OF = 3841;
O.COMPETITION_NO_OWNED_ROOMS = 2064;
O.COMPETITION_SECONDS_UNTIL = 3926;
O.BADGE_POINT_LIMITS = 2501;
O.BADGE_REQUEST_FULFILLED = 2998;
O.HELPER_TALENT_TRACK = 3406;
O.TALENT_TRACK_LEVEL = 1203;
O.TALENT_TRACK_LEVEL_UP = 638;
O.USER_BANNED = 1683;
O.BOT_RECEIVED = 3684;
O.PET_LEVEL_NOTIFICATION = 859;
O.PET_RECEIVED = 1111;
O.MODERATION_CAUTION = 1890;
O.YOUTUBE_CONTROL_VIDEO = 1554;
O.YOUTUBE_DISPLAY_PLAYLISTS = 1112;
O.YOUTUBE_DISPLAY_VIDEO = 1411;
O.CFH_DISABLED_NOTIFY = 1651;
O.QUESTION = 2665;
O.POLL_CONTENTS = 2997;
O.POLL_ERROR = 662;
O.POLL_OFFER = 3785;
O.POLL_ROOM_RESULT = 5201;
O.POLL_START_ROOM = 5200;
O.QUESTION_ANSWERED = 2589;
O.QUESTION_FINISHED = 1066;
O.CFH_PENDING_CALLS = 1121;
O.GUIDE_ON_DUTY_STATUS = 1548;
O.GUIDE_SESSION_ATTACHED = 1591;
O.GUIDE_SESSION_DETACHED = 138;
O.GUIDE_SESSION_ENDED = 1456;
O.GUIDE_SESSION_ERROR = 673;
O.GUIDE_SESSION_INVITED_TO_GUIDE_ROOM = 219;
O.GUIDE_SESSION_MESSAGE = 841;
O.GUIDE_SESSION_PARTNER_IS_TYPING = 1016;
O.GUIDE_SESSION_REQUESTER_ROOM = 1847;
O.GUIDE_SESSION_STARTED = 3209;
O.GUIDE_TICKET_CREATION_RESULT = 3285;
O.GUIDE_TICKET_RESOLUTION = 2674;
O.GUIDE_REPORTING_STATUS = 3463;
O.HOTEL_MERGE_NAME_CHANGE = 1663;
O.ISSUE_CLOSE_NOTIFICATION = 934;
O.QUIZ_DATA = 2927;
O.QUIZ_RESULTS = 2772;
O.CFH_PENDING_CALLS_DELETED = 77;
O.CFH_REPLY = 3796;
O.CHAT_REVIEW_SESSION_DETACHED = 30;
O.CHAT_REVIEW_SESSION_OFFERED_TO_GUIDE = 735;
O.CHAT_REVIEW_SESSION_RESULTS = 3276;
O.CHAT_REVIEW_SESSION_STARTED = 143;
O.CHAT_REVIEW_SESSION_VOTING_STATUS = 1829;
O.SCR_SEND_KICKBACK_INFO = 3277;
O.PET_STATUS = 1907;
O.GROUP_DEACTIVATE = 3129;
O.PET_RESPECTED = 2788;
O.PET_SUPPLEMENT = 3441;
O.NOOBNESS_LEVEL = 3738;
O.DISCONNECT_REASON = 4e3;
O.CAN_CREATE_ROOM_EVENT = 2599;
O.FAVORITE_GROUP_UDPATE = 3403;
O.NO_SUCH_FLAT = 84;
O.ROOM_SETTINGS_ERROR = 2897;
O.SHOW_ENFORCE_ROOM_CATEGORY = 3896;
O.CUSTOM_USER_NOTIFICATION = 909;
O.NEW_USER_EXPERIENCE_GIFT_OFFER = 3575;
O.RESTORE_CLIENT = 426;
O.FIREWORK_CHARGE_DATA = 5210;
O.NEW_USER_EXPERIENCE_NOT_COMPLETE = 3639;
O.CONNECTION_ERROR = 1004;
O.ACCOUNT_SAFETY_LOCK_STATUS_CHANGE = 1243;
O.PHONE_COLLECTION_STATE = 2890;
O.PHONE_TRY_NUMBER_RESULT = 800;
O.PHONE_TRY_VERIFICATION_CODE_RESULT = 91;
O.EXTENDED_PROFILE_CHANGED = 876;
O.WELCOME_GIFT_CHANGE_EMAIL_RESULT = 2293;
O.WELCOME_GIFT_STATUS = 2707;
O.HANDSHAKE_INIT_DIFFIE = 1347;
O.HANDSHAKE_COMPLETE_DIFFIE = 3885;
O.RENTABLE_SPACE_RENT_OK = 2046;
O.RENTABLE_SPACE_STATUS = 3559;
O.RENTABLE_SPACE_RENT_FAILED = 1868;
O.EMAIL_STATUS = 612;
O.CHANGE_EMAIL_RESULT = 1815;
O.WEEKLY_GAME_REWARD = 2641;
O.WEEKLY_GAME_REWARD_WINNERS = 3097;
O.WEEKLY_COMPETITIVE_LEADERBOARD = 3512;
O.WEEKLY_COMPETITIVE_FRIENDS_LEADERBOARD = 3560;
O.WEEKLY_GAME2_FRIENDS_LEADERBOARD = 2270;
O.WEEKLY_GAME2_LEADERBOARD = 2196;
O.RENTABLE_FURNI_RENT_OR_BUYOUT_OFFER = 35;
O.HANDSHAKE_IDENTITY_ACCOUNT = 3523;
class nS extends L {
    constructor(e)
    {
        super(e, Ew)
    }
    getParser()
    {
        return this.parser
    }
}
class aS extends L {
    constructor(e)
    {
        super(e, pw)
    }
    getParser()
    {
        return this.parser
    }
}
class oS extends L {
    constructor(e)
    {
        super(e, Iw)
    }
    getParser()
    {
        return this.parser
    }
}
class h2 extends L {
    constructor(e)
    {
        super(e, Rw)
    }
    getParser()
    {
        return this.parser
    }
}
class d2 extends L {
    constructor(e)
    {
        super(e, Ow)
    }
    getParser()
    {
        return this.parser
    }
}
class _2 extends L {
    constructor(e)
    {
        super(e, Sw)
    }
    getParser()
    {
        return this.parser
    }
}
class g2 extends L {
    constructor(e)
    {
        super(e, Cw)
    }
    getParser()
    {
        return this.parser
    }
}
class f2 extends L {
    constructor(e)
    {
        super(e, Aw)
    }
    getParser()
    {
        return this.parser
    }
}
class Lm extends L {
    constructor(e)
    {
        super(e, yw)
    }
    getParser()
    {
        return this.parser
    }
}
class lS extends L {
    constructor(e)
    {
        super(e, Mw)
    }
    getParser()
    {
        return this.parser
    }
}
class cS extends L {
    constructor(e)
    {
        super(e, bw)
    }
    getParser()
    {
        return this.parser
    }
}
class m2 extends L {
    constructor(e)
    {
        super(e, Dw)
    }
    getParser()
    {
        return this.parser
    }
}
class uS extends L {
    constructor(e)
    {
        super(e, vw)
    }
    getParser()
    {
        return this.parser
    }
}
class Um extends L {
    constructor(e)
    {
        super(e, gF)
    }
    getParser()
    {
        return this.parser
    }
}
class wh extends L {
    constructor(e)
    {
        super(e, mF)
    }
    getParser()
    {
        return this.parser
    }
}
class hS extends L {
    constructor(e)
    {
        super(e, fF)
    }
    getParser()
    {
        return this.parser
    }
}
class wm extends L {
    constructor(e)
    {
        super(e, EF)
    }
    getParser()
    {
        return this.parser
    }
}
class dS extends L {
    constructor(e)
    {
        super(e, pF)
    }
    getParser()
    {
        return this.parser
    }
}
class _S extends L {
    constructor(e)
    {
        super(e, IF)
    }
    getParser()
    {
        return this.parser
    }
}
class E2 extends L {
    constructor(e)
    {
        super(e, TF)
    }
    getParser()
    {
        return this.parser
    }
}
class p2 extends L {
    constructor(e)
    {
        super(e, RF)
    }
    getParser()
    {
        return this.parser
    }
}
class I2 extends L {
    constructor(e)
    {
        super(e, OF)
    }
    getParser()
    {
        return this.parser
    }
}
class gS extends L {
    constructor(e)
    {
        super(e, SF)
    }
    getParser()
    {
        return this.parser
    }
}
class fS extends L {
    constructor(e)
    {
        super(e, CF)
    }
    getParser()
    {
        return this.parser
    }
}
class mS extends L {
    constructor(e)
    {
        super(e, AF)
    }
    getParser()
    {
        return this.parser
    }
}
class ES extends L {
    constructor(e)
    {
        super(e, NF)
    }
    getParser()
    {
        return this.parser
    }
}
class pS extends L {
    constructor(e)
    {
        super(e, MF)
    }
    get userID()
    {
        return this.getParser().userID
    }
    get userAccepts()
    {
        return this.getParser().userAccepts
    }
    getParser()
    {
        return this.parser
    }
}
class IS extends L {
    constructor(e)
    {
        super(e, _m)
    }
    get userID()
    {
        return this.getParser().userID
    }
    getParser()
    {
        return this.parser
    }
}
class TS extends L {
    constructor(e)
    {
        super(e, bF)
    }
    getParser()
    {
        return this.parser
    }
}
class RS extends L {
    constructor(e)
    {
        super(e, DF)
    }
    getParser()
    {
        return this.parser
    }
}
class OS extends L {
    constructor(e)
    {
        super(e, vF)
    }
    get firstUserID()
    {
        return this.getParser().firstUserID
    }
    get secondUserID()
    {
        return this.getParser().secondUserID
    }
    get firstUserNumItems()
    {
        return this.getParser().firstUserNumItems
    }
    get secondUserNumItems()
    {
        return this.getParser().secondUserNumItems
    }
    get firstUserNumCredits()
    {
        return this.getParser().firstUserNumCredits
    }
    get secondUserNumCredits()
    {
        return this.getParser().secondUserNumCredits
    }
    get firstUserItemArray()
    {
        return this.getParser().firstUserItemArray
    }
    get secondUserItemArray()
    {
        return this.getParser().secondUserItemArray
    }
    getParser()
    {
        return this.parser
    }
}
class T2 extends L {
    constructor(e)
    {
        super(e, PF)
    }
    getParser()
    {
        return this.parser
    }
}
class SS extends L {
    constructor(e)
    {
        super(e, LF)
    }
    getParser()
    {
        return this.parser
    }
}
class CS extends L {
    constructor(e)
    {
        super(e, UF)
    }
    get userID()
    {
        return this.getParser().userID
    }
    get userCanTrade()
    {
        return this.getParser().userCanTrade
    }
    get otherUserID()
    {
        return this.getParser().otherUserID
    }
    get otherUserCanTrade()
    {
        return this.getParser().otherUserCanTrade
    }
    getParser()
    {
        return this.parser
    }
}
class AS extends L {
    constructor(e)
    {
        super(e, gm)
    }
    getParser()
    {
        return this.parser
    }
}
class NS extends L {
    constructor(e)
    {
        super(e, wF)
    }
    getParser()
    {
        return this.parser
    }
}
class yS extends L {
    constructor(e)
    {
        super(e, FF)
    }
    getParser()
    {
        return this.parser
    }
}
class MS extends L {
    constructor(e)
    {
        super(e, qG)
    }
    getParser()
    {
        return this.parser
    }
}
class R2 extends L {
    constructor(e)
    {
        super(e, XG)
    }
    getParser()
    {
        return this.parser
    }
}
class bS extends L {
    constructor(e)
    {
        super(e, QG)
    }
    getParser()
    {
        return this.parser
    }
}
class DS extends L {
    constructor(e)
    {
        super(e, JG)
    }
    getParser()
    {
        return this.parser
    }
}
class O2 extends L {
    constructor(e)
    {
        super(e, ZG)
    }
    getParser()
    {
        return this.parser
    }
}
class vS extends L {
    constructor(e)
    {
        super(e, $G)
    }
    getParser()
    {
        return this.parser
    }
}
class S2 extends L {
    constructor(e)
    {
        super(e, tB)
    }
    getParser()
    {
        return this.parser
    }
}
class PS extends L {
    constructor(e)
    {
        super(e, eB)
    }
    getParser()
    {
        return this.parser
    }
}
class LS extends L {
    constructor(e)
    {
        super(e, wd)
    }
    getParser()
    {
        return this.parser
    }
}
class US extends L {
    constructor(e)
    {
        super(e, xR)
    }
    getParser()
    {
        return this.parser
    }
}
class wS extends L {
    constructor(e)
    {
        super(e, iB)
    }
    getParser()
    {
        return this.parser
    }
}
class FS extends L {
    constructor(e)
    {
        super(e, nB)
    }
    getParser()
    {
        return this.parser
    }
}
class xS extends L {
    constructor(e)
    {
        super(e, GR)
    }
    getParser()
    {
        return this.parser
    }
}
class GS extends L {
    constructor(e)
    {
        super(e, oB)
    }
    getParser()
    {
        return this.parser
    }
}
class BS extends L {
    constructor(e)
    {
        super(e, cB)
    }
    getParser()
    {
        return this.parser
    }
}
class kS extends L {
    constructor(e)
    {
        super(e, lB)
    }
    getParser()
    {
        return this.parser
    }
}
class VS extends L {
    constructor(e)
    {
        super(e, hB)
    }
    getParser()
    {
        return this.parser
    }
}
class HS extends L {
    constructor(e)
    {
        super(e, dB)
    }
    getParser()
    {
        return this.parser
    }
}
class jS extends L {
    constructor(e)
    {
        super(e, fB)
    }
    getParser()
    {
        return this.parser
    }
}
class WS extends L {
    constructor(e)
    {
        super(e, mB)
    }
    getParser()
    {
        return this.parser
    }
}
class YS extends L {
    constructor(e)
    {
        super(e, pB)
    }
    getParser()
    {
        return this.parser
    }
}
class zS extends L {
    constructor(e)
    {
        super(e, IB)
    }
    getParser()
    {
        return this.parser
    }
}
class KS extends L {
    constructor(e)
    {
        super(e, OB)
    }
    getParser()
    {
        return this.parser
    }
}
class qS extends L {
    constructor(e)
    {
        super(e, SB)
    }
    getParser()
    {
        return this.parser
    }
}
class XS extends L {
    constructor(e)
    {
        super(e, AB)
    }
    getParser()
    {
        return this.parser
    }
}
class QS extends L {
    constructor(e)
    {
        super(e, NB)
    }
    getParser()
    {
        return this.parser
    }
}
class JS extends L {
    constructor(e)
    {
        super(e, yB)
    }
    getParser()
    {
        return this.parser
    }
}
class ZS extends L {
    constructor(e)
    {
        super(e, MB)
    }
    getParser()
    {
        return this.parser
    }
}
class $S extends L {
    constructor(e)
    {
        super(e, bB)
    }
    getParser()
    {
        return this.parser
    }
}
class C2 extends L {
    constructor(e)
    {
        super(e, pm)
    }
    getParser()
    {
        return this.parser
    }
}
class eC extends L {
    constructor(e)
    {
        super(e, DB)
    }
    getParser()
    {
        return this.parser
    }
}
class A2 extends L {
    constructor(e)
    {
        super(e, GB)
    }
    getParser()
    {
        return this.parser
    }
}
class N2 extends L {
    constructor(e)
    {
        super(e, BB)
    }
    getParser()
    {
        return this.parser
    }
}
class y2 extends L {
    constructor(e)
    {
        super(e, kB)
    }
    getParser()
    {
        return this.parser
    }
}
class Fm extends L {
    constructor(e)
    {
        super(e, VB)
    }
    getParser()
    {
        return this.parser
    }
    get userName()
    {
        return this.getParser().userName
    }
}
class tC extends L {
    constructor(e)
    {
        super(e, HB)
    }
    getParser()
    {
        return this.parser
    }
}
class sC extends L {
    constructor(e)
    {
        super(e, jB)
    }
    getParser()
    {
        return this.parser
    }
}
class Fh extends L {
    constructor(e)
    {
        super(e, WB)
    }
    getParser()
    {
        return this.parser
    }
}
class rC extends L {
    constructor(e)
    {
        super(e, YB)
    }
    getParser()
    {
        return this.parser
    }
}
class na extends L {
    constructor(e)
    {
        super(e, zB)
    }
    getParser()
    {
        return this.parser
    }
}
class M2 extends L {
    constructor(e)
    {
        super(e, KB)
    }
    getParser()
    {
        return this.parser
    }
}
class b2 extends L {
    constructor(e)
    {
        super(e, XB)
    }
    getParser()
    {
        return this.parser
    }
}
class iC extends L {
    constructor(e)
    {
        super(e, JB)
    }
    getParser()
    {
        return this.parser
    }
}
class D2 extends L {
    constructor(e)
    {
        super(e, $B)
    }
    getParser()
    {
        return this.parser
    }
}
class nC extends L {
    constructor(e)
    {
        super(e, ek)
    }
    getParser()
    {
        return this.parser
    }
}
class aC extends L {
    constructor(e)
    {
        super(e, tk)
    }
    getParser()
    {
        return this.parser
    }
}
class v2 extends L {
    constructor(e)
    {
        super(e, sk)
    }
    getParser()
    {
        return this.parser
    }
}
class oC extends L {
    constructor(e)
    {
        super(e, rk)
    }
    getParser()
    {
        return this.parser
    }
}
class P2 extends L {
    constructor(e)
    {
        super(e, ik)
    }
    getParser()
    {
        return this.parser
    }
}
class L2 extends L {
    constructor(e)
    {
        super(e, ok)
    }
    getParser()
    {
        return this.parser
    }
}
class U2 extends L {
    constructor(e)
    {
        super(e, lk)
    }
    getParser()
    {
        return this.parser
    }
}
class lC extends L {
    constructor(e)
    {
        super(e, ck)
    }
    getParser()
    {
        return this.parser
    }
}
class cC extends L {
    constructor(e)
    {
        super(e, uk)
    }
    getParser()
    {
        return this.parser
    }
}
class uC extends L {
    constructor(e)
    {
        super(e, hk)
    }
    getParser()
    {
        return this.parser
    }
}
class w2 extends L {
    constructor(e)
    {
        super(e, dk)
    }
    getParser()
    {
        return this.parser
    }
}
class hC extends L {
    constructor(e)
    {
        super(e, _k)
    }
    getParser()
    {
        return this.parser
    }
}
class dC extends L {
    constructor(e)
    {
        super(e, gk)
    }
    getParser()
    {
        return this.parser
    }
}
class _C extends L {
    constructor(e)
    {
        super(e, mk)
    }
    getParser()
    {
        return this.parser
    }
}
class xm extends L {
    constructor(e)
    {
        super(e, Ek)
    }
    getParser()
    {
        return this.parser
    }
}
class gC extends L {
    constructor(e)
    {
        super(e, pk)
    }
    getParser()
    {
        return this.parser
    }
}
class fC extends L {
    constructor(e)
    {
        super(e, Ik)
    }
    getParser()
    {
        return this.parser
    }
}
class mC extends L {
    constructor(e)
    {
        super(e, Tk)
    }
    getParser()
    {
        return this.parser
    }
}
class F2 extends L {
    constructor(e)
    {
        super(e, Rk)
    }
    getParser()
    {
        return this.parser
    }
}
class EC extends L {
    constructor(e)
    {
        super(e, Ok)
    }
    getParser()
    {
        return this.parser
    }
}
class pC extends L {
    constructor(e)
    {
        super(e, Sk)
    }
    getParser()
    {
        return this.parser
    }
}
class IC extends L {
    constructor(e)
    {
        super(e, Ck)
    }
    getParser()
    {
        return this.parser
    }
}
class TC extends L {
    constructor(e)
    {
        super(e, Ak)
    }
    getParser()
    {
        return this.parser
    }
}
class x2 extends L {
    constructor(e)
    {
        super(e, Nk)
    }
    getParser()
    {
        return this.parser
    }
}
class RC extends L {
    constructor(e)
    {
        super(e, yk)
    }
    getParser()
    {
        return this.parser
    }
}
class OC extends L {
    constructor(e)
    {
        super(e, Mk)
    }
    getParser()
    {
        return this.parser
    }
}
class G2 extends L {
    constructor(e)
    {
        super(e, bk)
    }
    getParser()
    {
        return this.parser
    }
}
class SC extends L {
    constructor(e)
    {
        super(e, Dk)
    }
    getParser()
    {
        return this.parser
    }
}
class CC extends L {
    constructor(e)
    {
        super(e, vk)
    }
    getParser()
    {
        return this.parser
    }
}
class B2 {
    constructor(e)
    {
        this._itemName = e.readString(),
        this._extraInfo = e.readString(),
        this._extraInfo == "" && (this._extraInfo = null)
    }
    get itemName()
    {
        return this._itemName
    }
    get extraInfo()
    {
        return this._extraInfo
    }
}
class k2 {
    constructor(e)
    {
        this._thumbnailUrl = e.readString(),
        this._thumbnailUrl == "" && (this._thumbnailUrl = null),
        this._productOfferList = [];
        const t = e.readInt();
        let r = 0;
        for (; r < t;)
            this._productOfferList.push(new B2(e)),
            r++
    }
    get productOfferList()
    {
        return this._productOfferList
    }
    get thumbnailUrl()
    {
        return this._thumbnailUrl
    }
}
class V2 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        if (!e)
            return !1;
        const t = e.readInt();
        this._giftOptions = [];
        let r = 0;
        for (; r < t;)
            this._giftOptions.push(new W2(e)),
            r++;
        return !0
    }
    get giftOptions()
    {
        return this._giftOptions
    }
}
class H2 {
    flush()
    {
        return !0
    }
    parse(e)
    {
        return !!e
    }
}
class j2 extends L {
    constructor(e)
    {
        super(e, V2)
    }
    getParser()
    {
        return this.parser
    }
}
class W2 {
    constructor(e)
    {
        this._dayIndex = e.readInt(),
        this._stepIndex = e.readInt(),
        this._options = [];
        const t = e.readInt();
        let r = 0;
        for (; r < t;)
            this._options.push(new k2(e)),
            r++
    }
    get dayIndex()
    {
        return this._dayIndex
    }
    get stepIndex()
    {
        return this._stepIndex
    }
    get options()
    {
        return this._options
    }
}
class Y2 extends L {
    constructor(e)
    {
        super(e, H2)
    }
    getParser()
    {
        return this.parser
    }
}
class Gm extends L {
    constructor(e)
    {
        super(e, Lk)
    }
    getParser()
    {
        return this.parser
    }
}
class z2 extends L {
    constructor(e)
    {
        super(e, Dd)
    }
    getParser()
    {
        return this.parser
    }
}
class AC extends L {
    constructor(e)
    {
        super(e, Uk)
    }
    getParser()
    {
        return this.parser
    }
}
class NC extends L {
    constructor(e)
    {
        super(e, wk)
    }
    getParser()
    {
        return this.parser
    }
}
class yC extends L {
    constructor(e)
    {
        super(e, Fk)
    }
    getParser()
    {
        return this.parser
    }
}
class MC extends L {
    constructor(e)
    {
        super(e, xk)
    }
    getParser()
    {
        return this.parser
    }
}
class bC extends L {
    constructor(e)
    {
        super(e, Gk)
    }
    getParser()
    {
        return this.parser
    }
}
class DC extends L {
    constructor(e)
    {
        super(e, Vk)
    }
    getParser()
    {
        return this.parser
    }
}
class vC extends L {
    constructor(e)
    {
        super(e, Hk)
    }
    getParser()
    {
        return this.parser
    }
}
class PC extends L {
    constructor(e)
    {
        super(e, jk)
    }
    getParser()
    {
        return this.parser
    }
}
class LC extends L {
    constructor(e)
    {
        super(e, Wk)
    }
    getParser()
    {
        return this.parser
    }
}
class UC extends L {
    constructor(e)
    {
        super(e, zk)
    }
    getParser()
    {
        return this.parser
    }
}
class wC extends L {
    constructor(e)
    {
        super(e, Yk)
    }
    getParser()
    {
        return this.parser
    }
}
class FC extends L {
    constructor(e)
    {
        super(e, Kk)
    }
    getParser()
    {
        return this.parser
    }
}
class xC extends L {
    constructor(e)
    {
        super(e, qk)
    }
    getParser()
    {
        return this.parser
    }
}
class K2 extends L {
    constructor(e)
    {
        super(e, Jk)
    }
    getParser()
    {
        return this.parser
    }
}
class GC extends L {
    constructor(e)
    {
        super(e, eV)
    }
    getParser()
    {
        return this.parser
    }
}
class q2 extends L {
    constructor(e)
    {
        super(e, tV)
    }
    getParser()
    {
        return this.parser
    }
}
class X2 extends L {
    constructor(e)
    {
        super(e, sV)
    }
    getParser()
    {
        return this.parser
    }
}
class Q2 extends L {
    constructor(e)
    {
        super(e, rV)
    }
    getParser()
    {
        return this.parser
    }
}
class J2 extends L {
    constructor(e)
    {
        super(e, iV)
    }
    getParser()
    {
        return this.parser
    }
}
class Z2 extends L {
    constructor(e)
    {
        super(e, nV)
    }
    getParser()
    {
        return this.parser
    }
}
class $2 extends L {
    constructor(e)
    {
        super(e, aV)
    }
    getParser()
    {
        return this.parser
    }
}
class ej extends L {
    constructor(e)
    {
        super(e, oV)
    }
    getParser()
    {
        return this.parser
    }
}
class tj extends L {
    constructor(e)
    {
        super(e, lV)
    }
    getParser()
    {
        return this.parser
    }
}
class sj extends L {
    constructor(e)
    {
        super(e, cV)
    }
    getParser()
    {
        return this.parser
    }
}
class Bm extends L {
    constructor(e)
    {
        super(e, uV)
    }
    getParser()
    {
        return this.parser
    }
}
Bm.FINISHED_OK = 1;
Bm.FINISHED_FAIL = 2;
class Gd extends L {
    constructor(e)
    {
        super(e, hV)
    }
    getParser()
    {
        return this.parser
    }
}
Gd.SYSTEM_STATUS_ENABLED = 1;
Gd.SYSTEM_STATUS_DISABLED = 2;
Gd.SYSTEM_STATUS_TIMEOUT = 3;
class xh extends L {
    constructor(e)
    {
        super(e, Pw)
    }
    getParser()
    {
        return this.parser
    }
}
class Rg extends L {
    constructor(e)
    {
        super(e, Lw)
    }
    getParser()
    {
        return this.parser
    }
}
class Og extends L {
    constructor(e)
    {
        super(e, ww)
    }
    getParser()
    {
        return this.parser
    }
}
class Sg extends L {
    constructor(e)
    {
        super(e, Uw)
    }
    getParser()
    {
        return this.parser
    }
}
class BC extends L {
    constructor(e)
    {
        super(e, Fa)
    }
    getParser()
    {
        return this.parser
    }
}
class Gh extends L {
    constructor(e)
    {
        super(e, Fw)
    }
    getParser()
    {
        return this.parser
    }
}
class kC extends L {
    constructor(e)
    {
        super(e, xw)
    }
    getParser()
    {
        return this.parser
    }
}
class VC extends L {
    constructor(e)
    {
        super(e, Gw)
    }
    getParser()
    {
        return this.parser
    }
}
class rj extends L {
    constructor(e)
    {
        super(e, Bw)
    }
    getParser()
    {
        return this.parser
    }
}
class ij extends L {
    constructor(e)
    {
        super(e, Vw)
    }
    getParser()
    {
        return this.parser
    }
}
class HC extends L {
    constructor(e)
    {
        super(e, t1)
    }
    getParser()
    {
        return this.parser
    }
}
class km extends L {
    constructor(e)
    {
        super(e, s1)
    }
    getParser()
    {
        return this.parser
    }
}
class jC extends L {
    constructor(e)
    {
        super(e, r1)
    }
    getParser()
    {
        return this.parser
    }
}
class WC extends L {
    constructor(e)
    {
        super(e, i1)
    }
    getParser()
    {
        return this.parser
    }
}
class Cg extends L {
    constructor(e)
    {
        super(e, F1)
    }
    getParser()
    {
        return this.parser
    }
}
class Ag extends L {
    constructor(e)
    {
        super(e, x1)
    }
    getParser()
    {
        return this.parser
    }
}
class YC extends L {
    constructor(e)
    {
        super(e, a1)
    }
    getParser()
    {
        return this.parser
    }
}
class Ng extends L {
    constructor(e)
    {
        super(e, o1)
    }
    getParser()
    {
        return this.parser
    }
}
class yg extends L {
    constructor(e)
    {
        super(e, l1)
    }
    getParser()
    {
        return this.parser
    }
}
class Mg extends L {
    constructor(e)
    {
        super(e, c1)
    }
    getParser()
    {
        return this.parser
    }
}
class bg extends L {
    constructor(e)
    {
        super(e, u1)
    }
    getParser()
    {
        return this.parser
    }
}
class Dg extends L {
    constructor(e)
    {
        super(e, h1)
    }
    getParser()
    {
        return this.parser
    }
}
class nj extends L {
    constructor(e)
    {
        super(e, d1)
    }
    getParser()
    {
        return this.parser
    }
}
class vg extends L {
    constructor(e)
    {
        super(e, _1)
    }
    getParser()
    {
        return this.parser
    }
}
class Pg extends L {
    constructor(e)
    {
        super(e, Ja)
    }
    getParser()
    {
        return this.parser
    }
}
class zC extends L {
    constructor(e)
    {
        super(e, g1)
    }
    getParser()
    {
        return this.parser
    }
}
class KC extends L {
    constructor(e)
    {
        super(e, f1)
    }
    getParser()
    {
        return this.parser
    }
}
class Lg extends L {
    constructor(e)
    {
        super(e, m1)
    }
    getParser()
    {
        return this.parser
    }
}
class qC extends L {
    constructor(e)
    {
        super(e, E1)
    }
    getParser()
    {
        return this.parser
    }
}
class XC extends L {
    constructor(e)
    {
        super(e, p1)
    }
    getParser()
    {
        return this.parser
    }
}
class QC extends L {
    constructor(e)
    {
        super(e, I1)
    }
    getParser()
    {
        return this.parser
    }
}
class Ug extends L {
    constructor(e)
    {
        super(e, T1)
    }
    getParser()
    {
        return this.parser
    }
}
class aj extends L {
    constructor(e)
    {
        super(e, R1)
    }
    getParser()
    {
        return this.parser
    }
}
class oj extends L {
    constructor(e)
    {
        super(e, O1)
    }
    getParser()
    {
        return this.parser
    }
}
class lj extends L {
    constructor(e)
    {
        super(e, an)
    }
    getParser()
    {
        return this.parser
    }
}
class JC extends L {
    constructor(e)
    {
        super(e, S1)
    }
    getParser()
    {
        return this.parser
    }
}
class ZC extends L {
    constructor(e)
    {
        super(e, A1)
    }
    getParser()
    {
        return this.parser
    }
}
class cj extends L {
    constructor(e)
    {
        super(e, N1)
    }
    getParser()
    {
        return this.parser
    }
}
class wg extends L {
    constructor(e)
    {
        super(e, y1)
    }
    getParser()
    {
        return this.parser
    }
}
class Fg extends L {
    constructor(e)
    {
        super(e, M1)
    }
    getParser()
    {
        return this.parser
    }
}
class xg extends L {
    constructor(e)
    {
        super(e, b1)
    }
    getParser()
    {
        return this.parser
    }
}
class Gg extends L {
    constructor(e)
    {
        super(e, D1)
    }
    getParser()
    {
        return this.parser
    }
}
class uj extends L {
    constructor(e)
    {
        super(e, v1)
    }
    getParser()
    {
        return this.parser
    }
}
class $C extends L {
    constructor(e)
    {
        super(e, P1)
    }
    getParser()
    {
        return this.parser
    }
}
class eA extends L {
    constructor(e)
    {
        super(e, U1)
    }
    getParser()
    {
        return this.parser
    }
}
class tA extends L {
    constructor(e)
    {
        super(e, w1)
    }
    getParser()
    {
        return this.parser
    }
}
class Bh extends L {
    constructor(e)
    {
        super(e, um)
    }
    getParser()
    {
        return this.parser
    }
}
class kh extends L {
    constructor(e)
    {
        super(e, G1)
    }
    getParser()
    {
        return this.parser
    }
}
class Bg extends L {
    constructor(e)
    {
        super(e, xa)
    }
    getParser()
    {
        return this.parser
    }
}
class kg extends L {
    constructor(e)
    {
        super(e, B1)
    }
    getParser()
    {
        return this.parser
    }
}
class sA extends L {
    constructor(e)
    {
        super(e, k1)
    }
    getParser()
    {
        return this.parser
    }
}
class Vg extends L {
    constructor(e)
    {
        super(e, V1)
    }
    getParser()
    {
        return this.parser
    }
}
class Fl extends L {
    constructor(e)
    {
        super(e, H1)
    }
    getParser()
    {
        return this.parser
    }
}
class Vh extends L {
    constructor(e)
    {
        super(e, j1)
    }
    getParser()
    {
        return this.parser
    }
}
class rA extends L {
    constructor(e)
    {
        super(e, W1)
    }
    getParser()
    {
        return this.parser
    }
}
class iA extends L {
    constructor(e)
    {
        super(e, Y1)
    }
    getParser()
    {
        return this.parser
    }
}
class Hh extends L {
    constructor(e)
    {
        super(e, z1)
    }
    getParser()
    {
        return this.parser
    }
}
class nA extends L {
    constructor(e)
    {
        super(e, K1)
    }
    getParser()
    {
        return this.parser
    }
}
class aA extends L {
    constructor(e)
    {
        super(e, q1)
    }
    getParser()
    {
        return this.parser
    }
}
class oA extends L {
    constructor(e)
    {
        super(e, Q1)
    }
    getParser()
    {
        return this.parser
    }
}
class lA extends L {
    constructor(e)
    {
        super(e, J1)
    }
    getParser()
    {
        return this.parser
    }
}
class cA extends L {
    constructor(e)
    {
        super(e, Z1)
    }
    getParser()
    {
        return this.parser
    }
}
class uA extends L {
    constructor(e)
    {
        super(e, $1)
    }
    getParser()
    {
        return this.parser
    }
}
class Vm extends L {
    constructor(e)
    {
        super(e, hm)
    }
    getParser()
    {
        return this.parser
    }
}
class jh extends L {
    constructor(e)
    {
        super(e, hm)
    }
    getParser()
    {
        return this.parser
    }
}
class Wh extends L {
    constructor(e)
    {
        super(e, hm)
    }
    getParser()
    {
        return this.parser
    }
}
class Hg extends L {
    constructor(e)
    {
        super(e, eF)
    }
    getParser()
    {
        return this.parser
    }
}
class Yh extends L {
    constructor(e)
    {
        super(e, tF)
    }
    getParser()
    {
        return this.parser
    }
}
class jg extends L {
    constructor(e)
    {
        super(e, sF)
    }
    getParser()
    {
        return this.parser
    }
}
class zh extends L {
    constructor(e)
    {
        super(e, cF)
    }
    getParser()
    {
        return this.parser
    }
}
class Wg extends L {
    constructor(e)
    {
        super(e, rF)
    }
    getParser()
    {
        return this.parser
    }
}
class Yg extends L {
    constructor(e)
    {
        super(e, iF)
    }
    getParser()
    {
        return this.parser
    }
}
class hA extends L {
    constructor(e)
    {
        super(e, nF)
    }
    getParser()
    {
        return this.parser
    }
}
class zg extends L {
    constructor(e)
    {
        super(e, aF)
    }
    getParser()
    {
        return this.parser
    }
}
class Kh extends L {
    constructor(e)
    {
        super(e, oF)
    }
    getParser()
    {
        return this.parser
    }
}
class Kg extends L {
    constructor(e)
    {
        super(e, lF)
    }
    getParser()
    {
        return this.parser
    }
}
class qh extends L {
    constructor(e)
    {
        super(e, uF)
    }
    getParser()
    {
        return this.parser
    }
}
class qg extends L {
    constructor(e)
    {
        super(e, _F)
    }
    getParser()
    {
        return this.parser
    }
}
class dA extends L {
    constructor(e)
    {
        super(e, dV)
    }
    getParser()
    {
        return this.parser
    }
}
class _A extends L {
    constructor(e)
    {
        super(e, _V)
    }
    getParser()
    {
        return this.parser
    }
}
class gA extends L {
    constructor(e)
    {
        super(e, gV)
    }
    getParser()
    {
        return this.parser
    }
}
class hj extends L {
    constructor(e)
    {
        super(e, fV)
    }
    getParser()
    {
        return this.parser
    }
}
class Hm extends L {
    constructor(e)
    {
        super(e, mV)
    }
    getParser()
    {
        return this.parser
    }
}
Hm.PRODUCT_DONATED_CODE = 6;
Hm.BADGE_DONATED_CODE = 7;
class fA extends L {
    constructor(e)
    {
        super(e, EV)
    }
    getParser()
    {
        return this.parser
    }
}
class dj extends L {
    constructor(e)
    {
        super(e, pV)
    }
    getParser()
    {
        return this.parser
    }
}
class mA extends L {
    constructor(e)
    {
        super(e, jw)
    }
    getParser()
    {
        return this.parser
    }
}
class EA extends L {
    constructor(e)
    {
        super(e, Yw)
    }
    getParser()
    {
        return this.parser
    }
}
class pA extends L {
    constructor(e)
    {
        super(e, zw)
    }
    getParser()
    {
        return this.parser
    }
}
class IA extends L {
    constructor(e)
    {
        super(e, Kw)
    }
    getParser()
    {
        return this.parser
    }
}
class _j extends L {
    constructor(e)
    {
        super(e, qw)
    }
    getParser()
    {
        return this.parser
    }
}
class gj extends L {
    constructor(e)
    {
        super(e, Xw)
    }
    getParser()
    {
        return this.parser
    }
}
class TA extends L {
    constructor(e)
    {
        super(e, Qw)
    }
    getParser()
    {
        return this.parser
    }
}
class fj extends L {
    constructor(e)
    {
        super(e, Jw)
    }
    getParser()
    {
        return this.parser
    }
}
class mj extends L {
    constructor(e)
    {
        super(e, Zw)
    }
    getParser()
    {
        return this.parser
    }
}
class RA extends L {
    constructor(e)
    {
        super(e, Tr)
    }
    getParser()
    {
        return this.parser
    }
}
class Ej extends L {
    constructor(e)
    {
        super(e, $w)
    }
    getParser()
    {
        return this.parser
    }
}
class pj extends L {
    constructor(e)
    {
        super(e, e1)
    }
    getParser()
    {
        return this.parser
    }
}
class OA extends L {
    constructor(e)
    {
        super(e, IV)
    }
    getParser()
    {
        return this.parser
    }
}
class SA extends L {
    constructor(e)
    {
        super(e, TV)
    }
    getParser()
    {
        return this.parser
    }
}
class CA extends L {
    constructor(e)
    {
        super(e, RV)
    }
    getParser()
    {
        return this.parser
    }
}
class AA extends L {
    constructor(e)
    {
        super(e, OV)
    }
    getParser()
    {
        return this.parser
    }
}
class NA extends L {
    constructor(e)
    {
        super(e, SV)
    }
    getParser()
    {
        return this.parser
    }
}
class Ij extends L {
    constructor(e)
    {
        super(e, CV)
    }
    getParser()
    {
        return this.parser
    }
}
class Tj extends L {
    constructor(e)
    {
        super(e, AV)
    }
    getParser()
    {
        return this.parser
    }
}
class yA extends L {
    constructor(e)
    {
        super(e, yV)
    }
    getParser()
    {
        return this.parser
    }
}
class MA extends L {
    constructor(e)
    {
        super(e, MV)
    }
    getParser()
    {
        return this.parser
    }
}
class Rj extends L {
    constructor(e)
    {
        super(e, bV)
    }
    getParser()
    {
        return this.parser
    }
}
class Oj extends L {
    constructor(e)
    {
        super(e, vV)
    }
    getParser()
    {
        return this.parser
    }
}
class Sj extends L {
    constructor(e)
    {
        super(e, LV)
    }
    getParser()
    {
        return this.parser
    }
}
class jm extends L {
    constructor(e)
    {
        super(e, q0)
    }
    getParser()
    {
        return this.parser
    }
}
class bA extends L {
    constructor(e)
    {
        super(e, yd)
    }
    getParser()
    {
        return this.parser
    }
}
class DA extends L {
    constructor(e)
    {
        super(e, X0)
    }
    getParser()
    {
        return this.parser
    }
}
class Cj extends L {
    constructor(e)
    {
        super(e, AR)
    }
    getParser()
    {
        return this.parser
    }
}
class Wm extends L {
    constructor(e)
    {
        super(e, J0)
    }
    getParser()
    {
        return this.parser
    }
}
class Ym extends L {
    constructor(e)
    {
        super(e, Z0)
    }
    getParser()
    {
        return this.parser
    }
}
class xl extends L {
    constructor(e)
    {
        super(e, ew)
    }
    getParser()
    {
        return this.parser
    }
}
class Bd extends L {
    constructor(e)
    {
        super(e, tw)
    }
    getParser()
    {
        return this.parser
    }
}
class vA extends L {
    constructor(e)
    {
        super(e, sw)
    }
    getParser()
    {
        return this.parser
    }
}
class zm extends L {
    constructor(e)
    {
        super(e, rw)
    }
    getParser()
    {
        return this.parser
    }
}
class PA extends L {
    constructor(e)
    {
        super(e, iw)
    }
    getParser()
    {
        return this.parser
    }
}
class LA extends L {
    constructor(e)
    {
        super(e, nw)
    }
    getParser()
    {
        return this.parser
    }
}
class UA extends L {
    constructor(e)
    {
        super(e, aw)
    }
    getParser()
    {
        return this.parser
    }
}
class Aj extends L {
    constructor(e)
    {
        super(e, ow)
    }
    getParser()
    {
        return this.parser
    }
}
class Nj extends L {
    constructor(e)
    {
        super(e, lw)
    }
    getParser()
    {
        return this.parser
    }
}
class yj extends L {
    constructor(e)
    {
        super(e, yR)
    }
    getParser()
    {
        return this.parser
    }
}
class Mj extends L {
    constructor(e)
    {
        super(e, cw)
    }
    getParser()
    {
        return this.parser
    }
}
class wA extends L {
    constructor(e)
    {
        super(e, uw)
    }
    getParser()
    {
        return this.parser
    }
}
class FA extends L {
    constructor(e)
    {
        super(e, hw)
    }
    getParser()
    {
        return this.parser
    }
}
class bj extends L {
    constructor(e)
    {
        super(e, MR)
    }
    getParser()
    {
        return this.parser
    }
}
class xA extends L {
    constructor(e)
    {
        super(e, dw)
    }
    getParser()
    {
        return this.parser
    }
}
class Km extends L {
    constructor(e)
    {
        super(e, _w)
    }
    getParser()
    {
        return this.parser
    }
}
class GA extends L {
    constructor(e)
    {
        super(e, gw)
    }
    getParser()
    {
        return this.parser
    }
}
class BA extends L {
    constructor(e)
    {
        super(e, fw)
    }
    getParser()
    {
        return this.parser
    }
}
class kA extends L {
    constructor(e)
    {
        super(e, mw)
    }
    getParser()
    {
        return this.parser
    }
}
class VA extends L {
    constructor(e)
    {
        super(e, Jl)
    }
    getParser()
    {
        return this.parser
    }
}
const al = class {
    constructor(s)
    {
        this._type = s.readInt(),
        this._userId = s.readInt(),
        this._userName = s.readString(),
        this._figure = s.readString(),
        this._memberSince = s.readString()
    }
    get userId()
    {
        return this._userId
    }
    get userName()
    {
        return this._userName
    }
    get admin()
    {
        return this._type == al.TYPE_ADMIN
    }
    get owner()
    {
        return this._type == al.TYPE_OWNER
    }
    get pending()
    {
        return this._type == al.TYPE_PENDING
    }
    get member()
    {
        return this._type != al.TYPE_MEMBER
    }
    get blocked()
    {
        return this._type == al.TYPE_BLOCKED
    }
    get figure()
    {
        return this._figure
    }
    get memberSince()
    {
        return this._memberSince
    }
}
;
let tc = al;
tc.TYPE_OWNER = 0;
tc.TYPE_ADMIN = 1;
tc.TYPE_PENDING = 2;
tc.TYPE_MEMBER = 3;
tc.TYPE_BLOCKED = 4;
class HA extends L {
    constructor(e)
    {
        super(e, xF)
    }
    getParser()
    {
        return this.parser
    }
}
class jA extends L {
    constructor(e)
    {
        super(e, GF)
    }
    getParser()
    {
        return this.parser
    }
}
class qm extends L {
    constructor(e)
    {
        super(e, BF)
    }
    getParser()
    {
        return this.parser
    }
}
class WA extends L {
    constructor(e)
    {
        super(e, HF)
    }
    getParser()
    {
        return this.parser
    }
}
class YA extends L {
    constructor(e)
    {
        super(e, jF)
    }
    getParser()
    {
        return this.parser
    }
}
class Dj extends L {
    constructor(e)
    {
        super(e, WF)
    }
    getParser()
    {
        return this.parser
    }
}
class vj extends L {
    constructor(e)
    {
        super(e, wV)
    }
    getParser()
    {
        return this.parser
    }
}
class Pj {
    constructor()
    {
        this._data = []
    }
    dispose() {}
    getMessageArray()
    {
        return this._data
    }
}
class Lj {
    constructor()
    {
        this._data = []
    }
    dispose() {}
    getMessageArray()
    {
        return this._data
    }
}
class zA {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class KA {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class qA {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class XA {
    constructor(e=0)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class QA {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class JA {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Uj {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ZA {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class $A {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Xh {
    constructor(e="", t="", r="", i=-1, n=-1)
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = []
    }
    assignBitmap(e)
    {
        const t = pt.generateImageUrl(e);
        if (!t)
            return;
        const r = t.split(",")[1],
            i = Uint8Array.from(atob(r), n => n.charCodeAt(0));
        this._data.push(i.byteLength, i.buffer)
    }
    assignBase64(e)
    {
        const t = e.split(",")[1],
            r = Uint8Array.from(atob(t), i => i.charCodeAt(0));
        this._data.push(r.byteLength, r.buffer)
    }
}
class Xg extends Xh {
    constructor(e="", t="", r="", i=-1, n=-1)
    {
        super(e, t, r, i, n)
    }
}
class eN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class tN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class sN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class rN {
    constructor(e, t, r, i, n, o)
    {
        this._data = [e, t, r, i, n, o]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class iN {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class nN {
    constructor()
    {
        this._data = []
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class aN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class wj {
    constructor()
    {
        this._data = []
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class oN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class lN {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Fj {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class xj {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Xm {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class cN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class Gj {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class uN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Bj {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class kj {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class Vj {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class Hj {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class jj {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class hN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class dN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class Wj {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class _N {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Qm {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Yj {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class zj {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class gN {
    constructor(e, t, r, i, n, o, l, c, u)
    {
        this._data = [e, t, r, i, n, o, l, c, u]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class uu {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class fN {
    constructor(e, t, r, i, n, o, l)
    {
        this._data = [e, t, r, i, n, o, l]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class mN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Kj {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class EN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class qj {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class pN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Xj {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Qj {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Jj {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Zj {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class $j {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class eW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class tW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class sW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class rW {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class hu {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
hu.CONFIRM_LEVEL_NOT_ACCEPTED = 0;
hu.CONFIRM_LEVEL_NOT_SUBMITTED = 1;
hu.CONFIRM_LEVEL_NOT_CONFIRMED = 2;
hu.CONFIRM_LEVEL_COMMIT = 3;
class iW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class IN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class nW {
    constructor(e, t)
    {
        this._data = [e, t.length].concat(t)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class TN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class RN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class aW {
    constructor(e, t)
    {
        this._data = [e, t.length].concat(t)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ON {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class SN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class CN {
    constructor(...e)
    {
        this._data = [e.length, ...e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Qg {
    constructor(e, ...t)
    {
        this._data = [e, t.length, ...t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class AN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class kd {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class NN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class yN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class MN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class bN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class DN {
    constructor(...e)
    {
        this._data = [e.length, ...e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Jm {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
let vN = class {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
;
class PN {
    constructor(e, t)
    {
        this._data = [t.length, ...t, e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ol {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class oW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class LN {
    constructor(e=!0)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class lW {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class cW {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class uW {
    constructor()
    {
        this._data = []
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class hW {
    constructor()
    {
        this._data = []
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class UN {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class dW {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class _W {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class gW {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class fW {
    constructor()
    {
        this._data = []
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class wN {
    constructor()
    {
        this._data = []
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class FN {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class xN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class mW {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class GN {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class EW {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class pW {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class IW {
    constructor(e, t, r, i, n, o)
    {
        this._data = [e, t, r, i, n, o]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class TW {
    constructor(e, t, r, i, n, o)
    {
        this._data = [e, t, r, i, n, o]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class RW {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class OW {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class BN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
BN.NO_ISSUE_ID = -1;
class SW {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class kN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
kN.NO_ISSUE_ID = -1;
class CW {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class AW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class NW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class VN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class HN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class jN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class WN {
    constructor(e, t, r, i, n, o)
    {
        this._data = [e, t, r, i, n, o.length, ...o]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class YN {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class zN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class KN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class qN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Gl {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class XN {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Jg {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class QN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class JN {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Vd {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ZN {
    constructor(e, t)
    {
        this._data = [e, t.length, ...t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class $N {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ey {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ty {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class sy {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ry {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class yW {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class MW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class bW {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class DW {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class vW {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class PW {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class LW {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class UW {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class wW {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class FW {
    constructor(...e)
    {
        this._data = [e.length],
        e.forEach(t => {
            this._data.push(t.k),
            this._data.push(t._arg_2),
            this._data.push(t._arg_3)
        })
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class xW {
    constructor(e, t, r, i, n)
    {
        this._data = [e, t, r, i, n]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class GW {
    constructor(e, t, r, i)
    {
        this._data = [e, t, i, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class BW {
    constructor(e, t, r)
    {
        if (this._type = e, t.length === r.length) {
            this._data = [];
            for (let i = 0; i < t.length; i++)
                this._data.push(t[i]),
                this._data.push(r[i])
        }
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class iy {
    constructor(e, t, r, i)
    {
        this._data = [`NITRO-${Ql.RENDERER_VERSION.replaceAll(".", "-")}`, "HTML5", Sd.HTML5, Yf.BROWSER]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class kW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class VW {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ny {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class HW {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ay {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class oy {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class jW {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class WW {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ly {
    constructor(e, t, r, i, n)
    {
        this._data = [e, t, r, i, n]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class cy {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class uy {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i.length / 2, ...i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class hy {
    constructor(e, t, r, i, n)
    {
        this._data = [e, t, r, i, n]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class YW {
    constructor(e, t, r, i, n)
    {
        this._data = [e, t, r, i, n]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class dy {
    constructor(e, t, r, i, n)
    {
        this._data = [e, t, r, i, n.length / 2, ...n]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class zW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class KW {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class qW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class XW {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class _y {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class gy {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class QW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class JW {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ZW {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class fy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class $W {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class my {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ey {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class py {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Iy {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ty {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class eY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ry {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Zg {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class tY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Oy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Sy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class sY {
    constructor(e, t)
    {
        this._data = [e, t.length, ...t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class rY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class iY {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class nY {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class aY {
    constructor()
    {
        this._data = []
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class oY {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class lY {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class Cy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ay {
    constructor()
    {
        this._badges = []
    }
    getMessageArray()
    {
        const e = [];
        for (let t = 1; t <= this._badges.length; t++)
            e.push(t),
            e.push(this._badges[t - 1]);
        return e
    }
    dispose() {}
    addActivatedBadge(e)
    {
        this._badges.push(e)
    }
}
class $g {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ny {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class cY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class uY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class hY {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ef {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class yy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class My {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class by {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Dy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class tf {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class vy {
    constructor(...e)
    {
        this._data = [e.length, ...e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Py {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ly {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Uy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class wy {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Fy {
    constructor(e, ...t)
    {
        this._data = [e, t.length, ...t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class xy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class dY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class sf {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class _Y {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class Gy {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class gY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class By {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class fY {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class ky {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class Vy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class Hy {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class jy {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose()
    {
        this._data = null
    }
}
class mY {
    constructor(e, t, r)
    {
        this._data = [e, t.length, ...t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class La {
    constructor(e, t)
    {
        this._data = [t, e.length, ...e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
La.RESOLUTION_USELESS = 1;
La.RESOLUTION_ABUSIVE = 2;
La.RESOLUTION_RESOLVED = 3;
const Wy = class {
    constructor(s, e, t, r, i, n=-1)
    {
        this._data = [s, e, t, r, i],
        n != Wy.NO_ISSUE_ID && this._data.push(n)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
;
let ha = Wy;
ha.NO_ISSUE_ID = -1;
class Yy {
    constructor(e, t, r, i=-1)
    {
        this._data = [e, t, r],
        i != ha.NO_ISSUE_ID && this._data.push(i)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class zy {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ky {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class qy {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Xy {
    constructor(e, t=0)
    {
        this._data = [t, e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Qy {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Jy {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Zy {
    constructor(e, t, r, i=-1)
    {
        this._data = [e, t, r],
        i != ha.NO_ISSUE_ID && this._data.push(i)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class rf {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Zn {
    constructor(e, t, r)
    {
        this._data = [],
        this._data.push(e),
        this._data.push(t),
        this._data.push(r)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
Zn.ACTION_ALERT = 0;
Zn.ACTION_KICK = 1;
Zn.ACTION_MESSAGE = 3;
Zn.ACTION_MESSAGE_AND_SOFT_KICK = 4;
class $y {
    constructor(e, t, r, i=-1)
    {
        this._data = [e, t, r],
        i != ha.NO_ISSUE_ID && this._data.push(i)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Zm {
    constructor(e, t, r, i=-1)
    {
        this._data = [],
        this._data.push(e),
        this._data.push(t),
        this._data.push(""),
        this._data.push(""),
        this._data.push(r),
        i != ha.NO_ISSUE_ID && this._data.push(i)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class eM {
    constructor(e, t, r, i=-1)
    {
        this._data = [e, t, r],
        i != ha.NO_ISSUE_ID && this._data.push(i)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class EY {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class pY {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class tM {
    constructor(e, t, r, i, n=-1)
    {
        this._data = [e, t, r, i],
        n != ha.NO_ISSUE_ID && this._data.push(n)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class sM {
    constructor(e, t, r, i)
    {
        this._data = [e.length, ...e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class $m {
    constructor(e)
    {
        this._data = [e.length, ...e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class rM {
    constructor(e)
    {
        this._data = [e]
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class iM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class IY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class TY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class RY {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class nM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class aM {
    constructor(e, t, r, i, n, o)
    {
        this._data = [e, t, r, i, n, o]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class oM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class lM {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class OY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class SY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class CY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class cM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Yc {
    constructor(e, t, r)
    {
        this._data = [e, t ? 1 : 0, r ? 1 : 0]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class AY {
    constructor(e=0)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class NY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class eE {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class uM {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class yY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class MY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class bY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class DY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class vY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class PY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class LY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class UY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class wY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class hM {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class FY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class dM {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class _M {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class gM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class xo {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class xY {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class GY {
    constructor(e, t, r, i, n, o)
    {
        this._data = [e, t, r, i, n, o]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class BY {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class fM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class kY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class VY {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class HY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class jY {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class WY {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class YY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class zY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class KY {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class mM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class EM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class pM {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class qY {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class XY {
    constructor(...e)
    {
        this._data = [e.length * 3],
        e.forEach(t => {
            this._data.push(t.dayIndex),
            this._data.push(t.stepIndex),
            this._data.push(t.giftIndex)
        })
    }
    dispose()
    {
        this._data = null
    }
    getMessageArray()
    {
        return this._data
    }
}
class IM {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class R {}
R.ACHIEVEMENT_LIST = 219;
R.AUTHENTICATION = -1;
R.BOT_CONFIGURATION = 1986;
R.BOT_PICKUP = 3323;
R.BOT_PLACE = 1592;
R.BOT_SKILL_SAVE = 2624;
R.GET_CLUB_OFFERS = 3285;
R.GET_CLUB_GIFT_INFO = 487;
R.GET_CATALOG_INDEX = 1195;
R.GET_CATALOG_PAGE = 412;
R.CATALOG_PURCHASE = 3492;
R.CATALOG_PURCHASE_GIFT = 1411;
R.GET_PRODUCT_OFFER = 2594;
R.CLIENT_LATENCY = 295;
R.CLIENT_LATENCY_MEASURE = 96;
R.CLIENT_POLICY = 26979;
R.CLIENT_PONG = 2596;
R.CLIENT_TOOLBAR_TOGGLE = 2313;
R.CLIENT_VARIABLES = 1053;
R.GET_CURRENT_TIMING_CODE = 2912;
R.DESKTOP_NEWS = 1827;
R.DESKTOP_VIEW = 105;
R.GET_BUNDLE_DISCOUNT_RULESET = 223;
R.EVENT_TRACKER = 3457;
R.FIND_NEW_FRIENDS = 516;
R.FURNITURE_ALIASES = 3898;
R.FURNITURE_FLOOR_UPDATE = 248;
R.FURNITURE_MULTISTATE = 99;
R.FURNITURE_PICKUP = 3456;
R.FURNITURE_PLACE = 1258;
R.FURNITURE_POSTIT_PLACE = 2248;
R.FURNITURE_POSTIT_SAVE_STICKY_POLE = 3283;
R.FURNITURE_RANDOMSTATE = 3617;
R.FURNITURE_WALL_MULTISTATE = 210;
R.FURNITURE_WALL_UPDATE = 168;
R.GAMES_INIT = 2914;
R.GAMES_LIST = 741;
R.ACCEPTGAMEINVITE = 3802;
R.GAMEUNLOADEDMESSAGE = 3207;
R.GETGAMEACHIEVEMENTSMESSAGE = 2399;
R.GETGAMESTATUSMESSAGE = 3171;
R.GETUSERGAMEACHIEVEMENTSMESSAGE = 389;
R.JOINQUEUEMESSAGE = 1458;
R.LEAVEQUEUEMESSAGE = 2384;
R.RESETRESOLUTIONACHIEVEMENTMESSAGE = 3144;
R.GETWEEKLYGAMEREWARDWINNERS = 1054;
R.GAME2GETACCOUNTGAMESTATUSMESSAGE = 11;
R.GAME2CHECKGAMEDIRECTORYSTATUSMESSAGE = 3259;
R.GAME2EXITGAMEMESSAGE = 1445;
R.GAME2GAMECHATMESSAGE = 2502;
R.GAME2LOADSTAGEREADYMESSAGE = 2415;
R.GAME2PLAYAGAINMESSAGE = 3196;
R.GAME2REQUESTFULLSTATUSUPDATEMESSAGE = 1598;
R.GAME2GETWEEKLYFRIENDSLEADERBOARD = 1232;
R.GAME2GETWEEKLYLEADERBOARD = 2565;
R.GET_GIFT_WRAPPING_CONFIG = 418;
R.GROUP_ADMIN_ADD = 2894;
R.GROUP_ADMIN_REMOVE = 722;
R.GROUP_CREATE_OPTIONS = 798;
R.GROUP_FAVORITE = 3549;
R.GET_FORUM_STATS = 3149;
R.GET_FORUM_THREADS = 873;
R.GET_FORUMS_LIST = 436;
R.GET_FORUM_MESSAGES = 232;
R.GET_FORUM_THREAD = 3900;
R.GET_UNREAD_FORUMS_COUNT = 2908;
R.FORUM_MODERATE_MESSAGE = 286;
R.FORUM_MODERATE_THREAD = 1397;
R.FORUM_POST_MESSAGE = 3529;
R.UPDATE_FORUM_READ_MARKER = 1855;
R.UPDATE_FORUM_SETTINGS = 2214;
R.FORUM_UPDATE_THREAD = 3045;
R.GROUP_INFO = 2991;
R.GROUP_DELETE = 1134;
R.GROUP_MEMBER_REMOVE_CONFIRM = 3593;
R.GROUP_MEMBER_REMOVE = 593;
R.GROUP_MEMBERS = 312;
R.GROUP_MEMBERSHIPS = 367;
R.GROUP_REQUEST = 998;
R.GROUP_REQUEST_ACCEPT = 3386;
R.GROUP_REQUEST_DECLINE = 1894;
R.GROUP_SETTINGS = 1004;
R.GROUP_PARTS = 813;
R.GROUP_BUY = 230;
R.GROUP_SAVE_INFORMATION = 3137;
R.GROUP_SAVE_BADGE = 1991;
R.GROUP_SAVE_COLORS = 1764;
R.GROUP_SAVE_PREFERENCES = 3435;
R.GROUP_BADGES = 21;
R.GROUP_UNBLOCK_MEMBER = 2864;
R.GET_BADGE_POINTS_LIMITS = 1371;
R.REQUESTABADGE = 3077;
R.GETISBADGEREQUESTFULFILLED = 1364;
R.ITEM_CLOTHING_REDEEM = 3374;
R.ITEM_COLOR_WHEEL_CLICK = 2144;
R.ITEM_DICE_CLICK = 1990;
R.ITEM_DICE_CLOSE = 1533;
R.ITEM_DIMMER_SAVE = 1648;
R.ITEM_DIMMER_SETTINGS = 2813;
R.ITEM_DIMMER_TOGGLE = 2296;
R.ITEM_EXCHANGE_REDEEM = 3115;
R.ITEM_PAINT = 711;
R.SET_OBJECT_DATA = 3608;
R.ITEM_STACK_HELPER = 3839;
R.ITEM_WALL_CLICK = 210;
R.ITEM_WALL_UPDATE = 168;
R.MARKETPLACE_CONFIG = 2597;
R.ACCEPT_FRIEND = 137;
R.MESSENGER_CHAT = 3567;
R.DECLINE_FRIEND = 2890;
R.FOLLOW_FRIEND = 3997;
R.MESSENGER_FRIENDS = 1523;
R.MESSENGER_INIT = 2781;
R.MESSENGER_RELATIONSHIPS = 2138;
R.SET_RELATIONSHIP_STATUS = 3768;
R.REMOVE_FRIEND = 1689;
R.REQUEST_FRIEND = 3157;
R.GET_FRIEND_REQUESTS = 2448;
R.SEND_ROOM_INVITE = 1276;
R.HABBO_SEARCH = 1210;
R.FRIEND_LIST_UPDATE = 1419;
R.MOD_TOOL_USER_INFO = 3295;
R.GET_USER_FLAT_CATS = 3027;
R.NAVIGATOR_INIT = 2110;
R.NAVIGATOR_SEARCH = 249;
R.NAVIGATOR_ADD_COLLAPSED_CATEGORY = 1834;
R.NAVIGATOR_REMOVE_COLLAPSED_CATEGORY = 637;
R.NAVIGATOR_SEARCH_SAVE = 2226;
R.GET_USER_EVENT_CATS = 1782;
R.NAVIGATOR_SETTINGS_SAVE = 3159;
R.NAVIGATOR_CATEGORY_LIST_MODE = 1202;
R.NAVIGATOR_DELETE_SAVED_SEARCH = 1954;
R.PET_INFO = 2934;
R.PET_PICKUP = 1581;
R.PET_PLACE = 2647;
R.PET_RESPECT = 3202;
R.PET_RIDE = 1036;
R.PET_MOVE = 3449;
R.PET_OPEN_PACKAGE = 3698;
R.PET_SELECTED = 549;
R.PETS_BREED = 1638;
R.PET_CANCEL_BREEDING = 2713;
R.PET_CONFIRM_BREEDING = 3382;
R.GET_PET_TRAINING_PANEL = 2161;
R.RECYCLER_PRIZES = 398;
R.RECYCLER_STATUS = 1342;
R.RECYCLER_ITEMS = 2771;
R.RELEASE_VERSION = 4e3;
R.CALL_FOR_HELP = 1691;
R.ROOM_AMBASSADOR_ALERT = 2996;
R.ROOM_BAN_GIVE = 1477;
R.ROOM_BAN_LIST = 2267;
R.ROOM_BAN_REMOVE = 992;
R.ROOM_CREATE = 2752;
R.ROOM_DELETE = 532;
R.ROOM_DOORBELL = 1644;
R.ROOM_ENTER = 2312;
R.ROOM_FAVORITE = 3817;
R.ROOM_FAVORITE_REMOVE = 309;
R.CAN_CREATE_ROOM = 2128;
R.CANCEL_ROOM_EVENT = 2725;
R.EDIT_ROOM_EVENT = 3991;
R.COMPETITION_ROOM_SEARCH = 433;
R.FORWARD_TO_RANDOM_PROMOTED_ROOM = 10;
R.FORWARD_TO_SOME_ROOM = 1703;
R.GET_CATEGORIES_WITH_USER_COUNT = 3782;
R.GET_GUEST_ROOM = 2230;
R.GET_OFFICIAL_ROOMS = 1229;
R.GET_POPULAR_ROOM_TAGS = 826;
R.GUILD_BASE_SEARCH = 2930;
R.MY_FAVOURITE_ROOMS_SEARCH = 2578;
R.MY_FREQUENT_ROOM_HISTORY_SEARCH = 1002;
R.MY_FRIENDS_ROOM_SEARCH = 2266;
R.MY_GUILD_BASES_SEARCH = 39;
R.MY_RECOMMENDED_ROOMS = 2537;
R.MY_ROOM_HISTORY_SEARCH = 2264;
R.MY_ROOM_RIGHTS_SEARCH = 272;
R.MY_ROOMS_SEARCH = 2277;
R.POPULAR_ROOMS_SEARCH = 2758;
R.ROOM_AD_EVENT_TAB_CLICKED = 2412;
R.ROOM_AD_EVENT_TAB_VIEWED = 2668;
R.ROOM_AD_SEARCH = 2809;
R.ROOM_TEXT_SEARCH = 3943;
R.ROOMS_WHERE_MY_FRIENDS_ARE = 1786;
R.ROOMS_WITH_HIGHEST_SCORE_SEARCH = 2939;
R.SET_ROOM_SESSION_TAGS = 3305;
R.UPDATE_ROOM_THUMBNAIL = 2468;
R.ROOM_KICK = 1320;
R.ROOM_LIKE = 3582;
R.ROOM_MODEL = 2300;
R.GET_OCCUPIED_TILES = 1687;
R.GET_ROOM_ENTRY_TILE = 3559;
R.ROOM_MODEL_SAVE = 875;
R.ROOM_MUTE = 3637;
R.ROOM_MUTE_USER = 3485;
R.ROOM_RIGHTS_GIVE = 808;
R.ROOM_RIGHTS_LIST = 3385;
R.ROOM_RIGHTS_REMOVE = 2064;
R.ROOM_RIGHTS_REMOVE_ALL = 2683;
R.ROOM_RIGHTS_REMOVE_OWN = 3182;
R.ROOM_SETTINGS = 3129;
R.ROOM_SETTINGS_SAVE = 1969;
R.ROOM_SETTINGS_UPDATE_ROOM_CATEGORY_AND_TRADE = 1265;
R.ROOM_STAFF_PICK = 1918;
R.ROOM_FILTER_WORDS = 1911;
R.ROOM_FILTER_WORDS_MODIFY = 3001;
R.MYSTERYBOXWAITINGCANCELEDMESSAGE = 2012;
R.MYSTERYBOX_OPEN_TROPHY = 3074;
R.SECURITY_MACHINE = 2490;
R.SECURITY_TICKET = 2419;
R.TRADE = 1481;
R.TRADE_ACCEPT = 3863;
R.TRADE_CANCEL = 2341;
R.TRADE_CLOSE = 2551;
R.TRADE_CONFIRM = 2760;
R.TRADE_ITEM = 3107;
R.TRADE_ITEM_REMOVE = 3845;
R.TRADE_ITEMS = 1263;
R.TRADE_UNACCEPT = 1444;
R.UNIT_ACTION = 2456;
R.UNIT_CHAT = 1314;
R.UNIT_CHAT_SHOUT = 2085;
R.UNIT_CHAT_WHISPER = 1543;
R.UNIT_DANCE = 2080;
R.UNIT_DROP_HAND_ITEM = 2814;
R.UNIT_GIVE_HANDITEM = 2941;
R.UNIT_LOOK = 3301;
R.UNIT_POSTURE = 2235;
R.UNIT_SIGN = 1975;
R.UNIT_TYPING = 1597;
R.UNIT_TYPING_STOP = 1474;
R.UNIT_WALK = 3320;
R.USER_BADGES = 2769;
R.USER_BADGES_CURRENT = 2091;
R.USER_BADGES_CURRENT_UPDATE = 644;
R.USER_BOTS = 3848;
R.USER_CURRENCY = 273;
R.USER_EFFECT_ACTIVATE = 2959;
R.USER_EFFECT_ENABLE = 1752;
R.USER_FIGURE = 2730;
R.USER_FURNITURE = 3150;
R.REQUESTFURNIINVENTORYWHENNOTINROOM = 3500;
R.USER_HOME_ROOM = 1740;
R.USER_INFO = 357;
R.USER_MOTTO = 2228;
R.USER_IGNORED = 3878;
R.USER_PETS = 3095;
R.USER_PROFILE = 3265;
R.USER_PROFILE_BY_NAME = 2249;
R.USER_RESPECT = 2694;
R.GET_SOUND_SETTINGS = 2388;
R.USER_SETTINGS_CAMERA = 1461;
R.USER_SETTINGS_CHAT_STYLE = 1030;
R.USER_SETTINGS_INVITES = 1086;
R.USER_SETTINGS_OLD_CHAT = 1262;
R.USER_SETTINGS_VOLUME = 1367;
R.USER_SUBSCRIPTION = 3166;
R.GET_WARDROBE = 2742;
R.SAVE_WARDROBE_OUTFIT = 800;
R.USER_TAGS = 17;
R.PEER_USERS_CLASSIFICATION = 1160;
R.USER_CLASSIFICATION = 2285;
R.VISIT_USER = 2970;
R.WIRED_ACTION_SAVE = 2281;
R.WIRED_APPLY_SNAPSHOT = 3373;
R.WIRED_CONDITION_SAVE = 3203;
R.WIRED_OPEN = 768;
R.WIRED_TRIGGER_SAVE = 1520;
R.GET_ITEM_DATA = 3964;
R.ONE_WAY_DOOR_CLICK = 2765;
R.REMOVE_WALL_ITEM = 3336;
R.SET_ITEM_DATA = 3666;
R.CATALOG_REDEEM_VOUCHER = 339;
R.ROOM_TONER_APPLY = 2880;
R.FRIEND_FURNI_CONFIRM_LOCK = 3775;
R.MANNEQUIN_SAVE_NAME = 2850;
R.MANNEQUIN_SAVE_LOOK = 2209;
R.PRESENT_OPEN_PRESENT = 3558;
R.CATALOG_SELECT_VIP_GIFT = 2276;
R.USER_IGNORE_ID = 3314;
R.USER_IGNORE = 1117;
R.USER_UNIGNORE = 2061;
R.MODTOOL_REQUEST_ROOM_INFO = 707;
R.MODTOOL_CHANGE_ROOM_SETTINGS = 3260;
R.MODTOOL_REQUEST_USER_CHATLOG = 1391;
R.MODTOOL_REQUEST_ROOM_CHATLOG = 2587;
R.MODTOOL_SANCTION_ALERT = 229;
R.MODTOOL_SANCTION_BAN = 2766;
R.MODTOOL_SANCTION_KICK = 2582;
R.MODTOOL_SANCTION_TRADELOCK = 3742;
R.MODTOOL_ALERTEVENT = 1840;
R.MODTOOL_SANCTION_MUTE = 1945;
R.MODTOOL_REQUEST_USER_ROOMS = 3526;
R.MODTOOL_ROOM_ALERT = 3842;
R.MODTOOL_PREFERENCES = 31;
R.CLOSE_ISSUE_DEFAULT_ACTION = 2717;
R.CLOSE_ISSUES = 2067;
R.DEFAULT_SANCTION = 1681;
R.GET_CFH_CHATLOG = 211;
R.MODTOOL_SANCTION = 1392;
R.PICK_ISSUES = 15;
R.RELEASE_ISSUES = 1572;
R.CONVERT_GLOBAL_ROOM_ID = 314;
R.REQUEST_SELL_ITEM = 848;
R.REQUEST_MARKETPLACE_ITEM_STATS = 3288;
R.MARKETPLACE_SELL_ITEM = 3447;
R.MARKETPLACE_REQUEST_OWN_ITEMS = 2105;
R.MARKETPLACE_TAKE_BACK_ITEM = 434;
R.MARKETPLACE_REDEEM_CREDITS = 2650;
R.MARKETPLACE_REQUEST_OFFERS = 2407;
R.MARKETPLACE_BUY_OFFER = 1603;
R.MARKETPLACE_BUY_TOKENS = 1866;
R.CATALOG_REQUESET_PET_BREEDS = 1756;
R.APPROVE_NAME = 2109;
R.UNIT_GIVE_HANDITEM_PET = 2768;
R.PET_MOUNT = 1036;
R.PET_SUPPLEMENT = 749;
R.FURNITURE_GROUP_INFO = 2651;
R.ACHIEVEMENT_RESOLUTION_OPEN = 359;
R.USE_PET_PRODUCT = 1328;
R.REMOVE_PET_SADDLE = 186;
R.TOGGLE_PET_RIDING = 1472;
R.TOGGLE_PET_BREEDING = 3379;
R.UNSEEN_RESET_CATEGORY = 3493;
R.UNSEEN_RESET_ITEMS = 2343;
R.COMMUNITY_GOAL_VOTE_COMPOSER = 3536;
R.GET_PROMO_ARTICLES = 1827;
R.ACCEPT_QUEST = 3604;
R.ACTIVATE_QUEST = 793;
R.CANCEL_QUEST = 3133;
R.FRIEND_REQUEST_QUEST_COMPLETE = 1148;
R.GET_COMMUNITY_GOAL_EARNED_PRIZES = 2688;
R.GET_COMMUNITY_GOAL_HALL_OF_FAME = 2167;
R.GET_COMMUNITY_GOAL_PROGRESS = 1145;
R.GET_CONCURRENT_USERS_GOAL_PROGRESS = 1343;
R.GET_CONCURRENT_USERS_REWARD = 3872;
R.GET_DAILY_QUEST = 2486;
R.GET_QUESTS = 3333;
R.GET_SEASONAL_QUESTS_ONLY = 1190;
R.OPEN_QUEST_TRACKER = 2750;
R.REDEEM_COMMUNITY_GOAL_PRIZE = 90;
R.REJECT_QUEST = 2397;
R.START_CAMPAIGN = 1697;
R.GET_BONUS_RARE_INFO = 957;
R.CRAFT = 3591;
R.CRAFT_SECRET = 1251;
R.GET_CRAFTABLE_PRODUCTS = 633;
R.GET_CRAFTING_RECIPE = 1173;
R.GET_CRAFTING_RECIPES_AVAILABLE = 3086;
R.PHOTO_COMPETITION = 3959;
R.PUBLISH_PHOTO = 2068;
R.PURCHASE_PHOTO = 2408;
R.RENDER_ROOM = 3226;
R.RENDER_ROOM_THUMBNAIL = 1982;
R.REQUEST_CAMERA_CONFIGURATION = 796;
R.ADD_JUKEBOX_DISK = 753;
R.GET_JUKEBOX_PLAYLIST = 1435;
R.GET_NOW_PLAYING = 1325;
R.GET_OFFICIAL_SONG_ID = 3189;
R.GET_SONG_INFO = 3082;
R.GET_SOUND_MACHINE_PLAYLIST = 3498;
R.GET_USER_SONG_DISKS = 2304;
R.REMOVE_JUKEBOX_DISK = 3050;
R.INTERSTITIAL_SHOWN = 1109;
R.GET_INTERSTITIAL = 2519;
R.CHANGE_USERNAME = 2977;
R.CHECK_USERNAME = 3950;
R.OPEN_CAMPAIGN_CALENDAR_DOOR_STAFF = 3889;
R.OPEN_CAMPAIGN_CALENDAR_DOOR = 2257;
R.BUILDERS_CLUB_PLACE_ROOM_ITEM = 1051;
R.BUILDERS_CLUB_PLACE_WALL_ITEM = 462;
R.BUILDERS_CLUB_QUERY_FURNI_COUNT = 2529;
R.GET_CATALOG_PAGE_EXPIRATION = 742;
R.GET_CATALOG_PAGE_WITH_EARLIEST_EXP = 3135;
R.GET_DIRECT_CLUB_BUY_AVAILABLE = 801;
R.GET_HABBO_BASIC_MEMBERSHIP_EXTEND_OFFER = 603;
R.GET_HABBO_CLUB_EXTEND_OFFER = 2462;
R.GET_IS_OFFER_GIFTABLE = 1347;
R.GET_LIMITED_OFFER_APPEARING_NEXT = 410;
R.GET_NEXT_TARGETED_OFFER = 596;
R.GET_ROOM_AD_PURCHASE_INFO = 1075;
R.GET_SEASONAL_CALENDAR_DAILY_OFFER = 3257;
R.GET_TARGETED_OFFER = 2487;
R.MARK_CATALOG_NEW_ADDITIONS_PAGE_OPENED = 2150;
R.PURCHASE_BASIC_MEMBERSHIP_EXTENSION = 2735;
R.PURCHASE_ROOM_AD = 777;
R.PURCHASE_TARGETED_OFFER = 1826;
R.PURCHASE_VIP_MEMBERSHIP_EXTENSION = 3407;
R.ROOM_AD_PURCHASE_INITIATED = 2283;
R.SET_TARGETTED_OFFER_STATE = 2041;
R.SHOP_TARGETED_OFFER_VIEWED = 3483;
R.HELPER_TALENT_TRACK = 196;
R.TALENT_TRACK_GET_LEVEL = 2127;
R.FORWARD_TO_A_COMPETITION_ROOM = 172;
R.FORWARD_TO_A_SUBMITTABLE_ROOM = 1450;
R.FORWARD_TO_RANDOM_COMPETITION_ROOM = 865;
R.GET_IS_USER_PART_OF_COMPETITION = 2077;
R.GET_SECONDS_UNTIL = 271;
R.ROOM_COMPETITION_INIT = 1334;
R.SUBMIT_ROOM_TO_COMPETITION = 2595;
R.VOTE_FOR_ROOM = 143;
R.GET_GIFT = 2436;
R.RESET_PHONE_NUMBER_STATE = 2741;
R.SET_PHONE_NUMBER_VERIFICATION_STATUS = 1379;
R.TRY_PHONE_NUMBER = 790;
R.VERIFY_CODE = 2721;
R.CONTROL_YOUTUBE_DISPLAY_PLAYBACK = 3005;
R.GET_YOUTUBE_DISPLAY_STATUS = 336;
R.SET_YOUTUBE_DISPLAY_PLAYLIST = 2069;
R.GO_TO_FLAT = 685;
R.CHANGE_QUEUE = 3093;
R.CALL_FOR_HELP_FROM_FORUM_MESSAGE = 1412;
R.CALL_FOR_HELP_FROM_FORUM_THREAD = 534;
R.CALL_FOR_HELP_FROM_IM = 2950;
R.CALL_FOR_HELP_FROM_PHOTO = 2492;
R.CALL_FOR_HELP_FROM_SELFIE = 2755;
R.CHAT_REVIEW_GUIDE_DECIDES = 3365;
R.CHAT_REVIEW_GUIDE_DETACHED = 2501;
R.CHAT_REVIEW_GUIDE_VOTE = 3961;
R.CHAT_REVIEW_SESSION_CREATE = 3060;
R.DELETE_PENDING_CALLS_FOR_HELP = 3605;
R.GET_CFH_STATUS = 2746;
R.GET_FAQ_CATEGORY = 3445;
R.GET_FAQ_TEXT = 1849;
R.GET_GUIDE_REPORTING_STATUS = 3786;
R.GET_PENDING_CALLS_FOR_HELP = 3267;
R.GET_QUIZ_QUESTIONS = 1296;
R.GUIDE_SESSION_CREATE = 3338;
R.GUIDE_SESSION_FEEDBACK = 477;
R.GUIDE_SESSION_GET_REQUESTER_ROOM = 1052;
R.GUIDE_SESSION_GUIDE_DECIDES = 1424;
R.GUIDE_SESSION_INVITE_REQUESTER = 234;
R.GUIDE_SESSION_IS_TYPING = 519;
R.GUIDE_SESSION_MESSAGE = 3899;
R.GUIDE_SESSION_ON_DUTY_UPDATE = 1922;
R.GUIDE_SESSION_REPORT = 3969;
R.GUIDE_SESSION_REQUESTER_CANCELS = 291;
R.GUIDE_SESSION_RESOLVED = 887;
R.POST_QUIZ_ANSWERS = 3720;
R.SEARCH_FAQS = 2031;
R.POLL_ANSWER = 3505;
R.POLL_REJECT = 1773;
R.POLL_START = 109;
R.POLL_VOTE_COUNTER = 6200;
R.DISCONNECT = 2445;
R.SCR_GET_KICKBACK_INFO = 869;
R.COMPOST_PLANT = 3835;
R.HARVEST_PET = 1521;
R.SET_CLOTHING_CHANGE_DATA = 924;
R.GROUP_UNFAVORITE = 1820;
R.NEW_USER_EXPERIENCE_GET_GIFTS = 1822;
R.NEW_USER_EXPERIENCE_SCRIPT_PROCEED = 1299;
R.HANDSHAKE_INIT_DIFFIE = 3110;
R.HANDSHAKE_COMPLETE_DIFFIE = 773;
R.WELCOME_OPEN_GIFT = 2638;
R.WELCOME_GIFT_CHANGE_EMAIL = 66;
R.EMAIL_GET_STATUS = 2557;
R.EMAIL_CHANGE = 3965;
R.APPROVE_ALL_MEMBERSHIP_REQUESTS = 882;
R.RENTABLE_SPACE_CANCEL_RENT = 1667;
R.RENTABLE_SPACE_RENT = 2946;
R.RENTABLE_SPACE_STATUS = 872;
R.TRACKING_PERFORMANCE_LOG = 3230;
R.TRACKING_LAG_WARNING_REPORT = 3847;
R.ROOM_DIRECTORY_ROOM_NETWORK_OPEN_CONNECTION = 3736;
R.RENTABLE_EXTEND_RENT_OR_BUYOUT_STRIP_ITEM = 2115;
R.RENTABLE_EXTEND_RENT_OR_BUYOUT_FURNI = 1071;
R.RENTABLE_GET_RENT_OR_BUYOUT_OFFER = 2518;
R.UNIT_CLICK_OBJECT = 5e3;
R.DELETE_WARDROBE_OUTFIT = 5001;
class TM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class nf {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class du {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class QY {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class RM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class OM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class SM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class CM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class AM {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class NM {
    constructor(e, t, r)
    {
        this._data = [e, t, r.length, ...r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class yM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class MM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class bM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class JY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ZY {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class $Y {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ez {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class tz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class DM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class sz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class rz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class iz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class nz {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class az {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class oz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class lz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class cz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class uz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class hz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class dz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class _z {
    constructor(...e)
    {
        this._data = [e.length],
        e.forEach(t => {
            this._data.push(t.itemId)
        })
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class vM {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class PM {
    constructor(e, t=null)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class LM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class UM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class wM {
    constructor(e, t=0, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class FM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class xM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class GM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class BM {
    constructor(e, t, r=0)
    {
        this._data = [e, r, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class tE {
    constructor(...e)
    {
        this._data = [e.length, ...e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class kM {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class VM {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class sE {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class rE {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class HM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class jM {
    constructor(e, t, r, i, n, o, l, c, u, h, d, m, p, E, T, I, S, A, N, b, v, D, G, x)
    {
        this._data = [],
        this._data.push(e, t, r, i, n, o, l),
        this._data.push(u.length, ...u),
        this._data.push(h, d, m, p, E, T, I, S, A, N, b, v, D, G, x)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class WM {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Hd {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class fn {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class YM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class zM extends YM {
    constructor(e)
    {
        super(e)
    }
}
class KM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class qM extends YM {
    constructor(e)
    {
        super(e)
    }
}
class af {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class XM {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class QM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class JM {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ZM {
    constructor(e, t, r="")
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class $M {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class iE {
    constructor(e, t)
    {
        this._data = [e, t.size * 2];
        for (const [r, i] of t.entries())
            this._data.push(r, i)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class eb {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class tb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class sb {
    constructor(e, t, r, i, n)
    {
        this._data = [e, t, r, i, n]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class rb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class gz {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class fz {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class of {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ib {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class nb {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class nE {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class aE {
    constructor(e, t, r, i, n, o)
    {
        this._itemId = e,
        this._category = t,
        this._wallLocation = r,
        this._x = i,
        this._y = n,
        this._direction = o
    }
    getMessageArray()
    {
        switch (this._category) {
        case V.FLOOR:
            return [`${this._itemId} ${this._x} ${this._y} ${this._direction}`];
        case V.WALL:
            return [`${this._itemId} ${this._wallLocation} `];
        default:
            return []
        }
    }
    dispose() {}
}
class Uc {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ab {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class mz {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ob {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class lb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class cb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class ub {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Bl {
    constructor(e, t=0)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class hb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class db {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Qh {
    constructor(e, t=-100)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class _b {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class gb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class fb {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ez {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class oE {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class pz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class mb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Iz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Tz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Rz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Eb {
    constructor(e, t, r, i)
    {
        this._data = [e, t, r, i]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class pb {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Rc {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ib {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class lf {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Tb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class cf {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Rb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class lE {
    constructor(e, t, r, i, n, o, l)
    {
        this._data = [e, t, r, i, n, o, l]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ob {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Sb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Cb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class cE {
    constructor(e, t=0)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ab {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Nb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class yb {
    constructor(e, t, r)
    {
        this._data = [e + " " + t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Mb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class bb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Db {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class vb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Pb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Lb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class uE {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Ub {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class wb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Fb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class xb {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Gb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class jd {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
jd.STATE_START = 0;
jd.STATE_CANCEL = 1;
jd.STATE_ACCEPT = 2;
class Oz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Sz {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Cz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Az {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Bb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class kb {
    constructor(e, t, r, i, n, o)
    {
        this._data = [e, t.length, ...t, r, i.length, ...i, n, o]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Vb {
    constructor(e, t, r, i, n)
    {
        this._data = [e, t.length, ...t, r, i.length, ...i, n]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Hb {
    constructor(e, t, r, i, n)
    {
        this._data = [e, t.length, ...t, r, i.length, ...i, n]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Nz {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class jb {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Wb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Yb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class zb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Kb {
    constructor(...e)
    {
        this._data = [e.length].concat(e)
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class yz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Mz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class qb {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Xb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class bz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Dz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class vz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Pz {
    constructor(e, t, r, i, n, o, l, c, u, h, d)
    {
        this._data = [e, t, r, i, n, o, l, c, u, h, d]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Qb {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class hE {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Lz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Uz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Jb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Zb {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class $b {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class eD {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class tD {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class dE {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class _E {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class sD {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class rD {
    constructor(e, t=!0)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class gE {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class wz {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class iD {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class nD {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class uf {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class aD {
    constructor()
    {
        this._data = []
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class oD {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class lD {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class cD {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class uD {
    constructor(e, t, r)
    {
        this._data = [e, t, r]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Fz {
    constructor(e, t)
    {
        this._data = [e, t]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class hD {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class xz {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class dD {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class _D {
    constructor(e)
    {
        this._data = [e]
    }
    getMessageArray()
    {
        return this._data
    }
    dispose() {}
}
class Gz extends bn {
    constructor(e)
    {
        super(),
        this._communication = e,
        this._handShaking = !1,
        this._didConnect = !1,
        this._pongInterval = null,
        this.onConnectionOpenedEvent = this.onConnectionOpenedEvent.bind(this),
        this.onConnectionClosedEvent = this.onConnectionClosedEvent.bind(this),
        this.onConnectionErrorEvent = this.onConnectionErrorEvent.bind(this),
        this.sendPong = this.sendPong.bind(this)
    }
    onInit()
    {
        const e = this._communication.connection;
        e && (e.addEventListener(zs.CONNECTION_OPENED, this.onConnectionOpenedEvent), e.addEventListener(zs.CONNECTION_CLOSED, this.onConnectionClosedEvent), e.addEventListener(zs.CONNECTION_ERROR, this.onConnectionErrorEvent)),
        this._communication.registerMessageEvent(new AO(this.onClientPingEvent.bind(this))),
        this._communication.registerMessageEvent(new OA(this.onAuthenticatedEvent.bind(this)))
    }
    onDispose()
    {
        const e = this._communication.connection;
        e && (e.removeEventListener(zs.CONNECTION_OPENED, this.onConnectionOpenedEvent), e.removeEventListener(zs.CONNECTION_CLOSED, this.onConnectionClosedEvent), e.removeEventListener(zs.CONNECTION_ERROR, this.onConnectionErrorEvent)),
        this._handShaking = !1,
        this.stopPonging(),
        super.onDispose()
    }
    onConnectionOpenedEvent(e)
    {
        const t = this._communication.connection;
        t && (this._didConnect = !0, this.dispatchCommunicationDemoEvent(ss.CONNECTION_ESTABLISHED, t), ye.getValue("system.pong.manually", !1) && this.startPonging(), this.startHandshake(t), t.send(new iy(null, null, null, null)), this.tryAuthentication(t))
    }
    onConnectionClosedEvent(e)
    {
        const t = this._communication.connection;
        t && (this.stopPonging(), this._didConnect && this.dispatchCommunicationDemoEvent(ss.CONNECTION_CLOSED, t))
    }
    onConnectionErrorEvent(e)
    {
        const t = this._communication.connection;
        t && (this.stopPonging(), this.dispatchCommunicationDemoEvent(ss.CONNECTION_ERROR, t))
    }
    tryAuthentication(e)
    {
        if (!e || !this.getSSO()) {
            this.getSSO() || pe.error("Login without an SSO ticket is not supported"),
            this.dispatchCommunicationDemoEvent(ss.CONNECTION_HANDSHAKE_FAILED, e);
            return
        }
        e.send(new oy(this.getSSO(), Pe()))
    }
    onClientPingEvent(e)
    {
        !e || !e.connection || this.sendPong(e.connection)
    }
    onAuthenticatedEvent(e)
    {
        !e || !e.connection || (this.completeHandshake(e.connection), this.dispatchCommunicationDemoEvent(ss.CONNECTION_AUTHENTICATED, e.connection), e.connection.send(new ny))
    }
    startHandshake(e)
    {
        this.dispatchCommunicationDemoEvent(ss.CONNECTION_HANDSHAKING, e),
        this._handShaking = !0
    }
    completeHandshake(e)
    {
        this.dispatchCommunicationDemoEvent(ss.CONNECTION_HANDSHAKED, e),
        this._handShaking = !1
    }
    startPonging()
    {
        this.stopPonging(),
        this._pongInterval = setInterval(this.sendPong, ye.getValue("system.pong.interval.ms", 2e4))
    }
    stopPonging()
    {
        this._pongInterval && (clearInterval(this._pongInterval), this._pongInterval = null)
    }
    sendPong(e=null)
    {
        e = e || this._communication.connection || null,
        e && e.send(new ay)
    }
    dispatchCommunicationDemoEvent(e, t)
    {
        Ee.instance.events.dispatchEvent(new ss(e, t))
    }
    getSSO()
    {
        return ye.getValue("sso.ticket", null)
    }
}
class Bz {
    constructor()
    {
        this._events = new Map,
        this._composers = new Map,
        this.registerEvents(),
        this.registerComposers()
    }
    registerEvents()
    {
        this._events.set(O.INTERSTITIAL_MESSAGE, FV),
        this._events.set(O.ROOM_AD_ERROR, xV),
        this._events.set(O.AVAILABILITY_STATUS, VR),
        this._events.set(O.AVAILABILITY_TIME, GV),
        this._events.set(O.HOTEL_CLOSED_AND_OPENS, HR),
        this._events.set(O.HOTEL_CLOSES_AND_OPENS_AT, jR),
        this._events.set(O.HOTEL_WILL_CLOSE_MINUTES, WR),
        this._events.set(O.HOTEL_MAINTENANCE, YR),
        this._events.set(O.USER_CHANGE_NAME, tn),
        this._events.set(O.CHECK_USER_NAME, zR),
        this._events.set(O.USER_FIGURE, Sm),
        this._events.set(O.USER_OUTFITS, BV),
        this._events.set(O.ADD_BOT_TO_INVENTORY, KR),
        this._events.set(O.USER_BOTS, qR),
        this._events.set(O.BOT_RECEIVED, kV),
        this._events.set(O.REMOVE_BOT_FROM_INVENTORY, XR),
        this._events.set(O.CFH_SANCTION, QR),
        this._events.set(O.CFH_TOPICS, JR),
        this._events.set(O.CFH_SANCTION_STATUS, ZR),
        this._events.set(O.CAMERA_PUBLISH_STATUS, $R),
        this._events.set(O.CAMERA_PURCHASE_OK, eO),
        this._events.set(O.CAMERA_STORAGE_URL, tO),
        this._events.set(O.COMPETITION_STATUS, HV),
        this._events.set(O.INIT_CAMERA, sO),
        this._events.set(O.THUMBNAIL_STATUS, jV),
        this._events.set(O.CAMERA_SNAPSHOT, VV),
        this._events.set(O.CAMPAIGN_CALENDAR_DATA, rO),
        this._events.set(O.CAMPAIGN_CALENDAR_DOOR_OPENED, iO),
        this._events.set(O.BONUS_RARE_INFO, nO),
        this._events.set(O.BUILDERS_CLUB_FURNI_COUNT, aO),
        this._events.set(O.BUILDERS_CLUB_SUBSCRIPTION, oO),
        this._events.set(O.BUNDLE_DISCOUNT_RULESET, WV),
        this._events.set(O.CATALOG_PAGE_EXPIRATION, YV),
        this._events.set(O.CATALOG_PAGE, lO),
        this._events.set(O.CATALOG_PAGE_LIST, cO),
        this._events.set(O.CATALOG_EARLIEST_EXPIRY, zV),
        this._events.set(O.CATALOG_PUBLISHED, uO),
        this._events.set(O.CLUB_GIFT_INFO, Cm),
        this._events.set(O.CLUB_GIFT_SELECTED, hO),
        this._events.set(O.DIRECT_SMS_CLUB_BUY, KV),
        this._events.set(O.GIFT_RECEIVER_NOT_FOUND, dO),
        this._events.set(O.GIFT_WRAPPER_CONFIG, _O),
        this._events.set(O.CLUB_EXTENDED_OFFER, XV),
        this._events.set(O.CLUB_OFFERS, gO),
        this._events.set(O.IS_OFFER_GIFTABLE, QV),
        this._events.set(O.LIMITED_SOLD_OUT, fO),
        this._events.set(O.LIMITED_OFFER_APPEARING_NEXT, JV),
        this._events.set(O.NOT_ENOUGH_BALANCE, ZV),
        this._events.set(O.PRODUCT_OFFER, mO),
        this._events.set(O.CATALOG_PURCHASE_ERROR, EO),
        this._events.set(O.CATALOG_PURCHASE_NOT_ALLOWED, pO),
        this._events.set(O.CATALOG_PURCHASE_OK, IO),
        this._events.set(O.ROOM_AD_PURCHASE, TO),
        this._events.set(O.SEASONAL_CALENDAR_OFFER, $V),
        this._events.set(O.CATALOG_RECEIVE_PET_BREEDS, RO),
        this._events.set(O.TARGET_OFFER, OO),
        this._events.set(O.TARGET_OFFER_NOT_FOUND, eH),
        this._events.set(O.REDEEM_VOUCHER_ERROR, SO),
        this._events.set(O.REDEEM_VOUCHER_OK, CO),
        this._events.set(O.CLIENT_PING, AO),
        this._events.set(O.COMPETITION_ENTRY_SUBMIT, tH),
        this._events.set(O.COMPETITION_VOTING_INFO, sH),
        this._events.set(O.COMPETITION_TIMING_CODE, rH),
        this._events.set(O.COMPETITION_USER_PART_OF, iH),
        this._events.set(O.COMPETITION_NO_OWNED_ROOMS, nH),
        this._events.set(O.COMPETITION_SECONDS_UNTIL, aH),
        this._events.set(O.CRAFTABLE_PRODUCTS, NO),
        this._events.set(O.CRAFTING_RECIPE, yO),
        this._events.set(O.CRAFTING_RECIPES_AVAILABLE, MO),
        this._events.set(O.CRAFTING_RESULT, bO),
        this._events.set(O.DESKTOP_VIEW, Wc),
        this._events.set(O.MESSENGER_ACCEPT_FRIENDS, oH),
        this._events.set(O.MESSENGER_FIND_FRIENDS, lH),
        this._events.set(O.MESSENGER_FOLLOW_FAILED, cH),
        this._events.set(O.MESSENGER_FRIENDS, DO),
        this._events.set(O.MESSENGER_UPDATE, vO),
        this._events.set(O.MESSENGER_FRIEND_NOTIFICATION, uH),
        this._events.set(O.MESSENGER_REQUESTS, PO),
        this._events.set(O.MESSENGER_SEARCH, LO),
        this._events.set(O.MESSENGER_INSTANCE_MESSAGE_ERROR, hH),
        this._events.set(O.MESSENGER_MESSAGE_ERROR, dH),
        this._events.set(O.MESSENGER_INIT, UO),
        this._events.set(O.MESSENGER_MINIMAIL_NEW, _H),
        this._events.set(O.MESSENGER_MINIMAIL_COUNT, gH),
        this._events.set(O.MESSENGER_CHAT, Am),
        this._events.set(O.MESSENGER_REQUEST, Nm),
        this._events.set(O.MESSENGER_INVITE_ERROR, wO),
        this._events.set(O.MESSENGER_INVITE, ym),
        this._events.set(O.ACHIEVEMENTRESOLUTIONCOMPLETED, RH),
        this._events.set(O.ACHIEVEMENTRESOLUTIONPROGRESS, OH),
        this._events.set(O.ACHIEVEMENTRESOLUTIONS, SH),
        this._events.set(O.LOAD_GAME_URL, Mm),
        this._events.set(O.LOADGAME, bH),
        this._events.set(O.UNLOADGAME, DH),
        this._events.set(O.GAME_CENTER_GAME_LIST, xO),
        this._events.set(O.GAMESTATUSMESSAGE, GO),
        this._events.set(O.GAME_CENTER_ACHIEVEMENTS, vH),
        this._events.set(O.GAME_CENTER_STATUS, FO),
        this._events.set(O.GAME_CENTER_IN_ARENA_QUEUE, mH),
        this._events.set(O.GAME_CENTER_STOP_COUNTER, IH),
        this._events.set(O.GAME_CENTER_USER_LEFT_GAME, TH),
        this._events.set(O.GAME_CENTER_DIRECTORY_STATUS, fH),
        this._events.set(O.GAME_CENTER_STARTING_GAME_FAILED, pH),
        this._events.set(O.GAME_CENTER_JOINING_FAILED, EH),
        this._events.set(O.GAMEACHIEVEMENTS, CH),
        this._events.set(O.GAMEINVITE, AH),
        this._events.set(O.JOINEDQUEUEMESSAGE, NH),
        this._events.set(O.JOININGQUEUEFAILED, yH),
        this._events.set(O.LEFTQUEUE, MH),
        this._events.set(O.WEEKLY_GAME_REWARD, FH),
        this._events.set(O.WEEKLY_GAME_REWARD_WINNERS, xH),
        this._events.set(O.WEEKLY_COMPETITIVE_LEADERBOARD, wH),
        this._events.set(O.WEEKLY_COMPETITIVE_FRIENDS_LEADERBOARD, UH),
        this._events.set(O.WEEKLY_GAME2_FRIENDS_LEADERBOARD, PH),
        this._events.set(O.WEEKLY_GAME2_LEADERBOARD, LH),
        this._events.set(O.GROUP_INFO, ec),
        this._events.set(O.GROUP_MEMBER_REMOVE_CONFIRM, kO),
        this._events.set(O.GROUP_MEMBERS, VO),
        this._events.set(O.GROUP_CREATE_OPTIONS, BO),
        this._events.set(O.GROUP_BADGE_PARTS, bm),
        this._events.set(O.GROUP_SETTINGS, jO),
        this._events.set(O.GROUP_PURCHASED, HO),
        this._events.set(O.GROUP_BADGES, FA),
        this._events.set(O.GROUP_DEACTIVATE, WO),
        this._events.set(O.GROUP_MEMBERSHIP_REQUESTED, Nj),
        this._events.set(O.GROUP_DETAILS_CHANGED, Aj),
        this._events.set(O.GROUP_HABBO_JOIN_FAILED, bj),
        this._events.set(O.GROUP_FORUM_DATA, VH),
        this._events.set(O.GROUP_FORUM_LIST, HH),
        this._events.set(O.GROUP_FORUM_THREADS, jH),
        this._events.set(O.GROUP_FORUM_POST, WH),
        this._events.set(O.GROUP_FORUM_POST_THREAD, YH),
        this._events.set(O.GROUP_FORUM_THREAD_MESSAGES, zH),
        this._events.set(O.GROUP_FORUM_UNREAD_COUNT, KH),
        this._events.set(O.GROUP_FORUM_UPDATE_MESSAGE, qH),
        this._events.set(O.GROUP_FORUM_UPDATE_THREAD, XH),
        this._events.set(O.CFH_DISABLED_NOTIFY, zO),
        this._events.set(O.CFH_PENDING_CALLS_DELETED, KO),
        this._events.set(O.CFH_PENDING_CALLS, qO),
        this._events.set(O.CFH_REPLY, XO),
        this._events.set(O.CFH_RESULT_MESSAGE, QO),
        this._events.set(O.GUIDE_ON_DUTY_STATUS, JO),
        this._events.set(O.GUIDE_SESSION_ATTACHED, ZO),
        this._events.set(O.GUIDE_SESSION_DETACHED, $O),
        this._events.set(O.GUIDE_SESSION_ENDED, Dm),
        this._events.set(O.GUIDE_SESSION_ERROR, vm),
        this._events.set(O.GUIDE_SESSION_INVITED_TO_GUIDE_ROOM, eS),
        this._events.set(O.GUIDE_SESSION_MESSAGE, tS),
        this._events.set(O.GUIDE_SESSION_PARTNER_IS_TYPING, sS),
        this._events.set(O.GUIDE_SESSION_REQUESTER_ROOM, rS),
        this._events.set(O.GUIDE_SESSION_STARTED, Pm),
        this._events.set(O.GUIDE_TICKET_CREATION_RESULT, a2),
        this._events.set(O.GUIDE_TICKET_RESOLUTION, o2),
        this._events.set(O.GUIDE_REPORTING_STATUS, n2),
        this._events.set(O.HOTEL_MERGE_NAME_CHANGE, l2),
        this._events.set(O.ISSUE_CLOSE_NOTIFICATION, iS),
        this._events.set(O.QUIZ_DATA, c2),
        this._events.set(O.QUIZ_RESULTS, u2),
        this._events.set(O.CHAT_REVIEW_SESSION_DETACHED, e2),
        this._events.set(O.CHAT_REVIEW_SESSION_OFFERED_TO_GUIDE, t2),
        this._events.set(O.CHAT_REVIEW_SESSION_RESULTS, s2),
        this._events.set(O.CHAT_REVIEW_SESSION_STARTED, r2),
        this._events.set(O.CHAT_REVIEW_SESSION_VOTING_STATUS, i2),
        this._events.set(O.ACHIEVEMENT_PROGRESSED, nS),
        this._events.set(O.ACHIEVEMENT_LIST, aS),
        this._events.set(O.USER_ACHIEVEMENT_SCORE, oS),
        this._events.set(O.USER_EFFECT_ACTIVATE, h2),
        this._events.set(O.USER_EFFECT_LIST_ADD, d2),
        this._events.set(O.USER_EFFECT_LIST_REMOVE, _2),
        this._events.set(O.USER_EFFECT_LIST, f2),
        this._events.set(O.AVATAR_EFFECT_SELECTED, g2),
        this._events.set(O.USER_BADGES, cS),
        this._events.set(O.USER_BADGES_ADD, lS),
        this._events.set(O.BADGE_POINT_LIMITS, Lm),
        this._events.set(O.BADGE_REQUEST_FULFILLED, m2),
        this._events.set(O.USER_CLOTHING, uS),
        this._events.set(O.USER_FURNITURE_ADD, Um),
        this._events.set(O.USER_FURNITURE, wh),
        this._events.set(O.USER_FURNITURE_REFRESH, hS),
        this._events.set(O.USER_FURNITURE_REMOVE, wm),
        this._events.set(O.USER_FURNITURE_POSTIT_PLACED, dS),
        this._events.set(O.USER_PETS, fS),
        this._events.set(O.USER_PET_REMOVE, ES),
        this._events.set(O.USER_PET_ADD, gS),
        this._events.set(O.PET_RECEIVED, mS),
        this._events.set(O.PET_PLACING_ERROR, OC),
        this._events.set(O.YOUTUBE_CONTROL_VIDEO, $C),
        this._events.set(O.YOUTUBE_DISPLAY_PLAYLISTS, eA),
        this._events.set(O.YOUTUBE_DISPLAY_VIDEO, tA),
        this._events.set(O.TRADE_ACCEPTED, pS),
        this._events.set(O.TRADE_CLOSED, IS),
        this._events.set(O.TRADE_COMPLETED, TS),
        this._events.set(O.TRADE_CONFIRMATION, RS),
        this._events.set(O.TRADE_LIST_ITEM, OS),
        this._events.set(O.TRADE_NOT_OPEN, SS),
        this._events.set(O.TRADE_OPEN_FAILED, AS),
        this._events.set(O.TRADE_OPEN, CS),
        this._events.set(O.TRADE_OTHER_NOT_ALLOWED, NS),
        this._events.set(O.TRADE_YOU_NOT_ALLOWED, yS),
        this._events.set(O.TRADE_NO_SUCH_ITEM, T2),
        this._events.set(O.COMMUNITY_GOAL_VOTE_EVENT, R2),
        this._events.set(O.PROMO_ARTICLES, MS),
        this._events.set(O.MARKETPLACE_AFTER_ORDER_STATUS, bS),
        this._events.set(O.MARKETPLACE_CANCEL_SALE, DS),
        this._events.set(O.MARKETPLACE_SELL_ITEM, O2),
        this._events.set(O.MARKETPLACE_CONFIG, vS),
        this._events.set(O.MARKETPLACE_ITEM_STATS, S2),
        this._events.set(O.MARKETPLACE_ITEM_POSTED, PS),
        this._events.set(O.MARKETPLACE_ITEMS_SEARCHED, LS),
        this._events.set(O.MARKETPLACE_OWN_ITEMS, US),
        this._events.set(O.USER_BANNED, qS),
        this._events.set(O.MODERATION_CAUTION, kS),
        this._events.set(O.MODTOOL_ROOM_INFO, jS),
        this._events.set(O.MODTOOL_USER_CHATLOG, XS),
        this._events.set(O.MODTOOL_ROOM_CHATLOG, zS),
        this._events.set(O.MODERATION_USER_INFO, YS),
        this._events.set(O.MODERATION_TOOL, VS),
        this._events.set(O.MODTOOL_VISITED_ROOMS_USER, KS),
        this._events.set(O.CFH_CHATLOG, wS),
        this._events.set(O.ISSUE_DELETED, FS),
        this._events.set(O.ISSUE_INFO, xS),
        this._events.set(O.ISSUE_PICK_FAILED, GS),
        this._events.set(O.MODERATOR_ACTION_RESULT, BS),
        this._events.set(O.MODERATOR_MESSAGE, HS),
        this._events.set(O.MODERATOR_TOOL_PREFERENCES, WS),
        this._events.set(O.MYSTERY_BOX_KEYS, ZS),
        this._events.set(O.GOTMYSTERYBOXPRIZEMESSAGE, JS),
        this._events.set(O.CANCELMYSTERYBOXWAITMESSAGE, QS),
        this._events.set(O.SHOWMYSTERYBOXWAITMESSAGE, $S),
        this._events.set(O.CAN_CREATE_ROOM, C2),
        this._events.set(O.CAN_CREATE_ROOM_EVENT, eC),
        this._events.set(O.CATEGORIES_WITH_VISITOR_COUNT, A2),
        this._events.set(O.COMPETITION_ROOMS_DATA, N2),
        this._events.set(O.CONVERTED_ROOM_ID, y2),
        this._events.set(O.ROOM_DOORBELL, Fm),
        this._events.set(O.USER_FAVORITE_ROOM, tC),
        this._events.set(O.USER_FAVORITE_ROOM_COUNT, sC),
        this._events.set(O.ROOM_DOORBELL_REJECTED, Fh),
        this._events.set(O.ROOM_CREATED, rC),
        this._events.set(O.ROOM_INFO, na),
        this._events.set(O.GUEST_ROOM_SEARCH_RESULT, M2),
        this._events.set(O.USER_HOME_ROOM, iC),
        this._events.set(O.ROOM_EVENT_CANCEL, U2),
        this._events.set(O.ROOM_EVENT, lC),
        this._events.set(O.ROOM_INFO_UPDATED, uC),
        this._events.set(O.THUMBNAIL_UPDATE_RESULT, w2),
        this._events.set(O.NAVIGATOR_EVENT_CATEGORIES, hC),
        this._events.set(O.NAVIGATOR_CATEGORIES, dC),
        this._events.set(O.NAVIGATOR_COLLAPSED, b2),
        this._events.set(O.NAVIGATOR_LIFTED, D2),
        this._events.set(O.NAVIGATOR_METADATA, nC),
        this._events.set(O.NAVIGATOR_OPEN_ROOM_CREATOR, aC),
        this._events.set(O.NAVIGATOR_SEARCHES, v2),
        this._events.set(O.NAVIGATOR_SEARCH, oC),
        this._events.set(O.NAVIGATOR_SETTINGS, P2),
        this._events.set(O.GENERIC_ALERT, EC),
        this._events.set(O.MOTD_MESSAGES, IC),
        this._events.set(O.NOTIFICATION_LIST, TC),
        this._events.set(O.UNSEEN_ITEMS, CC),
        this._events.set(O.ACHIEVEMENT_NOTIFICATION, _C),
        this._events.set(O.INFO_FEED_ENABLE, pC),
        this._events.set(O.CLUB_GIFT_NOTIFICATION, fC),
        this._events.set(O.ACTIVITY_POINT_NOTIFICATION, xm),
        this._events.set(O.BOT_ERROR, gC),
        this._events.set(O.PET_LEVEL_NOTIFICATION, RC),
        this._events.set(O.NOTIFICATION_OFFER_REWARD_DELIVERED, x2),
        this._events.set(O.NOTIFICATION_SIMPLE_ALERT, SC),
        this._events.set(O.NOTIFICATION_ELEMENT_POINTER, F2),
        this._events.set(O.USER_PERKS, Gm),
        this._events.set(O.PET_TRAINING_PANEL, bC),
        this._events.set(O.PET_LEVEL_UPDATE, yC),
        this._events.set(O.PET_SCRATCH_FAILED, MC),
        this._events.set(O.PET_OPEN_PACKAGE_REQUESTED, AC),
        this._events.set(O.PET_OPEN_PACKAGE_RESULT, NC),
        this._events.set(O.PET_BREEDING_RESULT, rA),
        this._events.set(O.QUESTION, UC),
        this._events.set(O.POLL_CONTENTS, DC),
        this._events.set(O.POLL_ERROR, vC),
        this._events.set(O.POLL_OFFER, PC),
        this._events.set(O.POLL_START_ROOM, xC),
        this._events.set(O.QUESTION_ANSWERED, LC),
        this._events.set(O.QUESTION_FINISHED, wC),
        this._events.set(O.POLL_ROOM_RESULT, FC),
        this._events.set(O.COMMUNITY_GOAL_EARNED_PRIZES, K2),
        this._events.set(O.COMMUNITY_GOAL_PROGRESS, q2),
        this._events.set(O.CONCURRENT_USERS_GOAL_PROGRESS, X2),
        this._events.set(O.QUEST_DAILY, $2),
        this._events.set(O.QUEST_CANCELLED, J2),
        this._events.set(O.QUEST_COMPLETED, Z2),
        this._events.set(O.COMMUNITY_GOAL_HALL_OF_FAME, GC),
        this._events.set(O.EPIC_POPUP, Q2),
        this._events.set(O.SEASONAL_QUESTS, sj),
        this._events.set(O.QUESTS, tj),
        this._events.set(O.QUEST, ej),
        this._events.set(O.ROOM_ENTER_ERROR, BC),
        this._events.set(O.ROOM_ENTER, Gh),
        this._events.set(O.ROOM_FORWARD, kC),
        this._events.set(O.ROOM_DOORBELL_ACCEPTED, xh),
        this._events.set(O.ROOM_RIGHTS_CLEAR, Rg),
        this._events.set(O.ROOM_RIGHTS_OWNER, Sg),
        this._events.set(O.ROOM_RIGHTS, Og),
        this._events.set(O.BOT_COMMAND_CONFIGURATION, VC),
        this._events.set(O.BOT_SKILL_LIST_UPDATE, ij),
        this._events.set(O.BOT_FORCE_OPEN_CONTEXT_MENU, rj),
        this._events.set(O.ROOM_SETTINGS_CHAT, HC),
        this._events.set(O.ROOM_INFO_OWNER, km),
        this._events.set(O.ROOM_SCORE, jC),
        this._events.set(O.ROOM_ROLLING, Ag),
        this._events.set(O.FURNITURE_FLOOR_ADD, yg),
        this._events.set(O.FURNITURE_FLOOR, Mg),
        this._events.set(O.FURNITURE_FLOOR_REMOVE, bg),
        this._events.set(O.FURNITURE_FLOOR_UPDATE, Dg),
        this._events.set(O.ITEM_WALL_ADD, wg),
        this._events.set(O.ITEM_WALL, Fg),
        this._events.set(O.ITEM_WALL_REMOVE, xg),
        this._events.set(O.ITEM_WALL_UPDATE, Gg),
        this._events.set(O.FURNITURE_ALIASES, vg),
        this._events.set(O.FURNITURE_DATA, Pg),
        this._events.set(O.FURNITURE_ITEMDATA, Lg),
        this._events.set(O.ITEM_STACK_HELPER, zC),
        this._events.set(O.FURNITURE_STATE, Ug),
        this._events.set(O.ITEM_DIMMER_SETTINGS, ZC),
        this._events.set(O.FURNITURE_STATE_2, Ng),
        this._events.set(O.LOVELOCK_FURNI_FINISHED, qC),
        this._events.set(O.LOVELOCK_FURNI_FRIEND_COMFIRMED, XC),
        this._events.set(O.LOVELOCK_FURNI_START, QC),
        this._events.set(O.OBJECTS_DATA_UPDATE, Cg),
        this._events.set(O.FURNITURE_GROUP_CONTEXT_MENU_INFO, KC),
        this._events.set(O.FURNITURE_POSTIT_STICKY_POLE_OPEN, JC),
        this._events.set(O.ROOM_SPECTATOR, lA),
        this._events.set(O.CUSTOM_USER_NOTIFICATION, YC),
        this._events.set(O.ROOM_MESSAGE_NOTIFICATION, cj),
        this._events.set(O.ROOM_POPULAR_TAGS_RESULT, L2),
        this._events.set(O.ROOM_RIGHTS_LIST, IA),
        this._events.set(O.ROOM_RIGHTS_LIST_ADD, EA),
        this._events.set(O.ROOM_RIGHTS_LIST_REMOVE, pA),
        this._events.set(O.ROOM_BAN_LIST, mA),
        this._events.set(O.ROOM_SETTINGS_SAVE_ERROR, RA),
        this._events.set(O.ROOM_SETTINGS, TA),
        this._events.set(O.ROOM_SETTINGS_SAVE, mj),
        this._events.set(O.ROOM_SETTINGS_ERROR, fj),
        this._events.set(O.SHOW_ENFORCE_ROOM_CATEGORY, Ej),
        this._events.set(O.ROOM_BAN_REMOVE, pj),
        this._events.set(O.ROOM_MUTED, _j),
        this._events.set(O.NO_SUCH_FLAT, gj),
        this._events.set(O.FAVORITE_GROUP_UDPATE, WC),
        this._events.set(O.ROOM_MODEL_DOOR, kh),
        this._events.set(O.ROOM_HEIGHT_MAP, Bg),
        this._events.set(O.ROOM_HEIGHT_MAP_UPDATE, kg),
        this._events.set(O.ROOM_MODEL, Bh),
        this._events.set(O.ROOM_MODEL_NAME, Fl),
        this._events.set(O.ROOM_PAINT, Vg),
        this._events.set(O.ROOM_THICKNESS, Vh),
        this._events.set(O.ROOM_GET_FILTER_WORDS, cC),
        this._events.set(O.ROOM_MODEL_BLOCKED_TILES, sA),
        this._events.set(O.PET_FIGURE_UPDATE, Hh),
        this._events.set(O.PET_INFO, nA),
        this._events.set(O.PET_STATUS, aA),
        this._events.set(O.PET_EXPERIENCE, iA),
        this._events.set(O.PLAYING_GAME, oA),
        this._events.set(O.UNIT_DANCE, Yh),
        this._events.set(O.UNIT_EFFECT, jg),
        this._events.set(O.UNIT, zh),
        this._events.set(O.UNIT_EXPRESSION, Wg),
        this._events.set(O.UNIT_HAND_ITEM, Yg),
        this._events.set(O.UNIT_IDLE, zg),
        this._events.set(O.UNIT_INFO, Kh),
        this._events.set(O.UNIT_NUMBER, Kg),
        this._events.set(O.UNIT_REMOVE, qh),
        this._events.set(O.UNIT_STATUS, qg),
        this._events.set(O.HAND_ITEM_RECEIVED, hA),
        this._events.set(O.FLOOD_CONTROL, cA),
        this._events.set(O.REMAINING_MUTE, uA),
        this._events.set(O.UNIT_CHAT, Vm),
        this._events.set(O.UNIT_CHAT_SHOUT, jh),
        this._events.set(O.UNIT_CHAT_WHISPER, Wh),
        this._events.set(O.UNIT_TYPING, Hg),
        this._events.set(O.WIRED_ACTION, dA),
        this._events.set(O.WIRED_CONDITION, _A),
        this._events.set(O.WIRED_TRIGGER, gA),
        this._events.set(O.WIRED_OPEN, hj),
        this._events.set(O.WIRED_REWARD, Hm),
        this._events.set(O.WIRED_SAVE, fA),
        this._events.set(O.WIRED_ERROR, dj),
        this._events.set(O.AUTHENTICATED, OA),
        this._events.set(O.JUKEBOX_PLAYLIST_FULL, SA),
        this._events.set(O.JUKEBOX_SONG_DISKS, CA),
        this._events.set(O.NOW_PLAYING, AA),
        this._events.set(O.OFFICIAL_SONG_ID, NA),
        this._events.set(O.PLAYLIST, Ij),
        this._events.set(O.PLAYLIST_SONG_ADDED, Tj),
        this._events.set(O.TRAX_SONG_INFO, yA),
        this._events.set(O.USER_SONG_DISKS_INVENTORY, MA),
        this._events.set(O.HELPER_TALENT_TRACK, Sj),
        this._events.set(O.TALENT_TRACK_LEVEL, Oj),
        this._events.set(O.TALENT_TRACK_LEVEL_UP, Rj),
        this._events.set(O.IN_CLIENT_LINK, GA),
        this._events.set(O.USER_IGNORED, xA),
        this._events.set(O.USER_IGNORED_RESULT, Km),
        this._events.set(O.USER_RESPECT, qm),
        this._events.set(O.USER_PERMISSIONS, jm),
        this._events.set(O.USER_BADGES_CURRENT, Ym),
        this._events.set(O.USER_INFO, xl),
        this._events.set(O.UNIT_CHANGE_NAME, Bd),
        this._events.set(O.USER_SETTINGS, zm),
        this._events.set(O.USER_PROFILE, vA),
        this._events.set(O.MESSENGER_RELATIONSHIPS, Wm),
        this._events.set(O.GIFT_OPENED, _S),
        this._events.set(O.USER_CREDITS, BA),
        this._events.set(O.USER_CURRENCY, kA),
        this._events.set(O.USER_SUBSCRIPTION, VA),
        this._events.set(O.USER_WARDROBE_PAGE, YA),
        this._events.set(O.USER_CLASSIFICATION, vj),
        this._events.set(O.GET_USER_TAGS, PA),
        this._events.set(O.SCR_SEND_KICKBACK_INFO, WA),
        this._events.set(O.PET_RESPECTED, HA),
        this._events.set(O.PET_SUPPLEMENT, jA),
        this._events.set(O.ACCOUNT_SAFETY_LOCK_STATUS_CHANGE, bA),
        this._events.set(O.GENERIC_ERROR, Uh),
        this._events.set(O.GROUP_LIST, wA),
        this._events.set(O.CATALOG_APPROVE_NAME_RESULT, DA),
        this._events.set(O.CONNECTION_ERROR, mC),
        this._events.set(O.GUILD_EDIT_FAILED, yj),
        this._events.set(O.GUILD_MEMBER_MGMT_FAILED, Mj),
        this._events.set(O.EXTENDED_PROFILE_CHANGED, UA),
        this._events.set(O.NOOBNESS_LEVEL, YO),
        this._events.set(O.DISCONNECT_REASON, JH),
        this._events.set(O.HANDSHAKE_INIT_DIFFIE, $H),
        this._events.set(O.HANDSHAKE_COMPLETE_DIFFIE, QH),
        this._events.set(O.HANDSHAKE_IDENTITY_ACCOUNT, ZH),
        this._events.set(O.NEW_USER_EXPERIENCE_GIFT_OFFER, j2),
        this._events.set(O.NEW_USER_EXPERIENCE_NOT_COMPLETE, Y2),
        this._events.set(O.RESTORE_CLIENT, G2),
        this._events.set(O.FIREWORK_CHARGE_DATA, qV),
        this._events.set(O.PHONE_COLLECTION_STATE, GH),
        this._events.set(O.PHONE_TRY_NUMBER_RESULT, BH),
        this._events.set(O.PHONE_TRY_VERIFICATION_CODE_RESULT, kH),
        this._events.set(O.WELCOME_GIFT_CHANGE_EMAIL_RESULT, Dj),
        this._events.set(O.WELCOME_GIFT_STATUS, uj),
        this._events.set(O.RENTABLE_SPACE_RENT_OK, oj),
        this._events.set(O.RENTABLE_SPACE_STATUS, lj),
        this._events.set(O.RENTABLE_SPACE_RENT_FAILED, aj),
        this._events.set(O.RECYCLER_STATUS, Gd),
        this._events.set(O.RECYCLER_FINISHED, Bm),
        this._events.set(O.EMAIL_STATUS, LA),
        this._events.set(O.CHANGE_EMAIL_RESULT, Cj),
        this._events.set(O.RENTABLE_FURNI_RENT_OR_BUYOUT_OFFER, nj)
    }
    registerComposers()
    {
        this._composers.set(R.AUTHENTICATION, BW),
        this._composers.set(R.INTERSTITIAL_SHOWN, Lj),
        this._composers.set(R.GET_INTERSTITIAL, Pj),
        this._composers.set(R.GET_WARDROBE, XA),
        this._composers.set(R.SAVE_WARDROBE_OUTFIT, QA),
        this._composers.set(R.DELETE_WARDROBE_OUTFIT, JA),
        this._composers.set(R.CHANGE_USERNAME, KA),
        this._composers.set(R.CHECK_USERNAME, qA),
        this._composers.set(R.REQUEST_CAMERA_CONFIGURATION, eN),
        this._composers.set(R.RENDER_ROOM, Xh),
        this._composers.set(R.RENDER_ROOM_THUMBNAIL, Xg),
        this._composers.set(R.PURCHASE_PHOTO, $A),
        this._composers.set(R.PUBLISH_PHOTO, ZA),
        this._composers.set(R.PHOTO_COMPETITION, Uj),
        this._composers.set(R.OPEN_CAMPAIGN_CALENDAR_DOOR, sN),
        this._composers.set(R.OPEN_CAMPAIGN_CALENDAR_DOOR_STAFF, tN),
        this._composers.set(R.BUILDERS_CLUB_PLACE_ROOM_ITEM, rN),
        this._composers.set(R.BUILDERS_CLUB_PLACE_WALL_ITEM, iN),
        this._composers.set(R.BUILDERS_CLUB_QUERY_FURNI_COUNT, nN),
        this._composers.set(R.GET_CATALOG_INDEX, oN),
        this._composers.set(R.GET_CATALOG_PAGE, lN),
        this._composers.set(R.CATALOG_PURCHASE, uu),
        this._composers.set(R.CATALOG_PURCHASE_GIFT, gN),
        this._composers.set(R.GET_PRODUCT_OFFER, hN),
        this._composers.set(R.GET_CLUB_OFFERS, cN),
        this._composers.set(R.GET_CLUB_GIFT_INFO, Xm),
        this._composers.set(R.CATALOG_REDEEM_VOUCHER, EN),
        this._composers.set(R.GROUP_MEMBERSHIPS, hE),
        this._composers.set(R.GET_GIFT_WRAPPING_CONFIG, uN),
        this._composers.set(R.CATALOG_SELECT_VIP_GIFT, pN),
        this._composers.set(R.CATALOG_REQUESET_PET_BREEDS, _N),
        this._composers.set(R.GET_BONUS_RARE_INFO, aN),
        this._composers.set(R.GET_BUNDLE_DISCOUNT_RULESET, wj),
        this._composers.set(R.GET_CATALOG_PAGE_EXPIRATION, Fj),
        this._composers.set(R.GET_CATALOG_PAGE_WITH_EARLIEST_EXP, xj),
        this._composers.set(R.GET_DIRECT_CLUB_BUY_AVAILABLE, Gj),
        this._composers.set(R.GET_HABBO_BASIC_MEMBERSHIP_EXTEND_OFFER, Bj),
        this._composers.set(R.GET_HABBO_CLUB_EXTEND_OFFER, kj),
        this._composers.set(R.GET_IS_OFFER_GIFTABLE, Vj),
        this._composers.set(R.GET_LIMITED_OFFER_APPEARING_NEXT, Hj),
        this._composers.set(R.GET_NEXT_TARGETED_OFFER, jj),
        this._composers.set(R.GET_ROOM_AD_PURCHASE_INFO, dN),
        this._composers.set(R.GET_SEASONAL_CALENDAR_DAILY_OFFER, Wj),
        this._composers.set(R.GET_TARGETED_OFFER, Qm),
        this._composers.set(R.MARK_CATALOG_NEW_ADDITIONS_PAGE_OPENED, Yj),
        this._composers.set(R.PURCHASE_BASIC_MEMBERSHIP_EXTENSION, zj),
        this._composers.set(R.PURCHASE_ROOM_AD, fN),
        this._composers.set(R.PURCHASE_TARGETED_OFFER, mN),
        this._composers.set(R.PURCHASE_VIP_MEMBERSHIP_EXTENSION, Kj),
        this._composers.set(R.ROOM_AD_PURCHASE_INITIATED, qj),
        this._composers.set(R.SET_TARGETTED_OFFER_STATE, Xj),
        this._composers.set(R.SHOP_TARGETED_OFFER_VIEWED, Qj),
        this._composers.set(R.FORWARD_TO_A_COMPETITION_ROOM, Jj),
        this._composers.set(R.FORWARD_TO_A_SUBMITTABLE_ROOM, Zj),
        this._composers.set(R.FORWARD_TO_RANDOM_COMPETITION_ROOM, $j),
        this._composers.set(R.GET_CURRENT_TIMING_CODE, eW),
        this._composers.set(R.GET_IS_USER_PART_OF_COMPETITION, tW),
        this._composers.set(R.GET_SECONDS_UNTIL, sW),
        this._composers.set(R.ROOM_COMPETITION_INIT, rW),
        this._composers.set(R.SUBMIT_ROOM_TO_COMPETITION, hu),
        this._composers.set(R.VOTE_FOR_ROOM, iW),
        this._composers.set(R.CRAFT, IN),
        this._composers.set(R.CRAFT_SECRET, nW),
        this._composers.set(R.GET_CRAFTABLE_PRODUCTS, RN),
        this._composers.set(R.GET_CRAFTING_RECIPE, TN),
        this._composers.set(R.GET_CRAFTING_RECIPES_AVAILABLE, aW),
        this._composers.set(R.FRIEND_FURNI_CONFIRM_LOCK, SN),
        this._composers.set(R.ACCEPT_FRIEND, CN),
        this._composers.set(R.DECLINE_FRIEND, Qg),
        this._composers.set(R.FIND_NEW_FRIENDS, AN),
        this._composers.set(R.FOLLOW_FRIEND, kd),
        this._composers.set(R.FRIEND_LIST_UPDATE, NN),
        this._composers.set(R.GET_FRIEND_REQUESTS, yN),
        this._composers.set(R.HABBO_SEARCH, MN),
        this._composers.set(R.MESSENGER_INIT, bN),
        this._composers.set(R.REMOVE_FRIEND, DN),
        this._composers.set(R.REQUEST_FRIEND, Jm),
        this._composers.set(R.MESSENGER_CHAT, vN),
        this._composers.set(R.SEND_ROOM_INVITE, PN),
        this._composers.set(R.SET_RELATIONSHIP_STATUS, Ol),
        this._composers.set(R.VISIT_USER, oW),
        this._composers.set(R.ACHIEVEMENT_RESOLUTION_OPEN, xN),
        this._composers.set(R.ACCEPTGAMEINVITE, _W),
        this._composers.set(R.GAMEUNLOADEDMESSAGE, gW),
        this._composers.set(R.GETGAMEACHIEVEMENTSMESSAGE, fW),
        this._composers.set(R.GAMES_LIST, wN),
        this._composers.set(R.GETGAMESTATUSMESSAGE, FN),
        this._composers.set(R.GETUSERGAMEACHIEVEMENTSMESSAGE, mW),
        this._composers.set(R.JOINQUEUEMESSAGE, GN),
        this._composers.set(R.LEAVEQUEUEMESSAGE, EW),
        this._composers.set(R.RESETRESOLUTIONACHIEVEMENTMESSAGE, pW),
        this._composers.set(R.GAMES_INIT, RW),
        this._composers.set(R.GETWEEKLYGAMEREWARDWINNERS, OW),
        this._composers.set(R.GAME2GETACCOUNTGAMESTATUSMESSAGE, UN),
        this._composers.set(R.GAME2CHECKGAMEDIRECTORYSTATUSMESSAGE, hW),
        this._composers.set(R.GAME2EXITGAMEMESSAGE, LN),
        this._composers.set(R.GAME2GAMECHATMESSAGE, lW),
        this._composers.set(R.GAME2LOADSTAGEREADYMESSAGE, cW),
        this._composers.set(R.GAME2PLAYAGAINMESSAGE, uW),
        this._composers.set(R.GAME2REQUESTFULLSTATUSUPDATEMESSAGE, dW),
        this._composers.set(R.GAME2GETWEEKLYFRIENDSLEADERBOARD, IW),
        this._composers.set(R.GAME2GETWEEKLYLEADERBOARD, TW),
        this._composers.set(R.GET_GIFT, BN),
        this._composers.set(R.RESET_PHONE_NUMBER_STATE, SW),
        this._composers.set(R.SET_PHONE_NUMBER_VERIFICATION_STATUS, kN),
        this._composers.set(R.TRY_PHONE_NUMBER, CW),
        this._composers.set(R.VERIFY_CODE, AW),
        this._composers.set(R.GET_FORUM_STATS, MW),
        this._composers.set(R.GET_FORUMS_LIST, yW),
        this._composers.set(R.GET_FORUM_MESSAGES, bW),
        this._composers.set(R.GET_FORUM_THREAD, DW),
        this._composers.set(R.GET_FORUM_THREADS, vW),
        this._composers.set(R.GET_UNREAD_FORUMS_COUNT, PW),
        this._composers.set(R.FORUM_MODERATE_MESSAGE, LW),
        this._composers.set(R.FORUM_MODERATE_THREAD, UW),
        this._composers.set(R.FORUM_POST_MESSAGE, wW),
        this._composers.set(R.UPDATE_FORUM_READ_MARKER, FW),
        this._composers.set(R.UPDATE_FORUM_SETTINGS, xW),
        this._composers.set(R.FORUM_UPDATE_THREAD, GW),
        this._composers.set(R.CLIENT_PONG, ay),
        this._composers.set(R.RELEASE_VERSION, iy),
        this._composers.set(R.SECURITY_TICKET, oy),
        this._composers.set(R.USER_INFO, ny),
        this._composers.set(R.DISCONNECT, VW),
        this._composers.set(R.SECURITY_MACHINE, jW),
        this._composers.set(R.CLIENT_VARIABLES, WW),
        this._composers.set(R.HANDSHAKE_INIT_DIFFIE, HW),
        this._composers.set(R.HANDSHAKE_COMPLETE_DIFFIE, kW),
        this._composers.set(R.CALL_FOR_HELP_FROM_FORUM_MESSAGE, ly),
        this._composers.set(R.CALL_FOR_HELP_FROM_FORUM_THREAD, cy),
        this._composers.set(R.CALL_FOR_HELP_FROM_IM, uy),
        this._composers.set(R.CALL_FOR_HELP_FROM_PHOTO, hy),
        this._composers.set(R.CALL_FOR_HELP_FROM_SELFIE, YW),
        this._composers.set(R.CALL_FOR_HELP, dy),
        this._composers.set(R.CHAT_REVIEW_GUIDE_DECIDES, zW),
        this._composers.set(R.CHAT_REVIEW_GUIDE_DETACHED, KW),
        this._composers.set(R.CHAT_REVIEW_GUIDE_VOTE, qW),
        this._composers.set(R.CHAT_REVIEW_SESSION_CREATE, XW),
        this._composers.set(R.DELETE_PENDING_CALLS_FOR_HELP, _y),
        this._composers.set(R.GET_CFH_STATUS, gy),
        this._composers.set(R.GET_FAQ_CATEGORY, QW),
        this._composers.set(R.GET_FAQ_TEXT, JW),
        this._composers.set(R.GET_GUIDE_REPORTING_STATUS, ZW),
        this._composers.set(R.GET_PENDING_CALLS_FOR_HELP, fy),
        this._composers.set(R.GET_QUIZ_QUESTIONS, $W),
        this._composers.set(R.GUIDE_SESSION_CREATE, my),
        this._composers.set(R.GUIDE_SESSION_FEEDBACK, Ey),
        this._composers.set(R.GUIDE_SESSION_GET_REQUESTER_ROOM, py),
        this._composers.set(R.GUIDE_SESSION_GUIDE_DECIDES, Iy),
        this._composers.set(R.GUIDE_SESSION_INVITE_REQUESTER, Ty),
        this._composers.set(R.GUIDE_SESSION_IS_TYPING, eY),
        this._composers.set(R.GUIDE_SESSION_MESSAGE, Ry),
        this._composers.set(R.GUIDE_SESSION_ON_DUTY_UPDATE, Zg),
        this._composers.set(R.GUIDE_SESSION_REPORT, tY),
        this._composers.set(R.GUIDE_SESSION_REQUESTER_CANCELS, Oy),
        this._composers.set(R.GUIDE_SESSION_RESOLVED, Sy),
        this._composers.set(R.POST_QUIZ_ANSWERS, sY),
        this._composers.set(R.SEARCH_FAQS, rY),
        this._composers.set(R.DESKTOP_VIEW, ON),
        this._composers.set(R.GROUP_INFO, Gl),
        this._composers.set(R.GROUP_REQUEST, XN),
        this._composers.set(R.GROUP_MEMBER_REMOVE_CONFIRM, zN),
        this._composers.set(R.GROUP_MEMBER_REMOVE, Vd),
        this._composers.set(R.GROUP_MEMBERS, Jg),
        this._composers.set(R.GROUP_ADMIN_ADD, VN),
        this._composers.set(R.GROUP_ADMIN_REMOVE, HN),
        this._composers.set(R.GROUP_REQUEST_ACCEPT, QN),
        this._composers.set(R.GROUP_REQUEST_DECLINE, JN),
        this._composers.set(R.GROUP_DELETE, KN),
        this._composers.set(R.GROUP_CREATE_OPTIONS, YN),
        this._composers.set(R.GROUP_PARTS, jN),
        this._composers.set(R.GROUP_BUY, WN),
        this._composers.set(R.GROUP_SETTINGS, sy),
        this._composers.set(R.GROUP_SAVE_BADGE, ZN),
        this._composers.set(R.GROUP_SAVE_COLORS, $N),
        this._composers.set(R.GROUP_SAVE_INFORMATION, ey),
        this._composers.set(R.GROUP_SAVE_PREFERENCES, ty),
        this._composers.set(R.GROUP_FAVORITE, qN),
        this._composers.set(R.GROUP_UNFAVORITE, ry),
        this._composers.set(R.GROUP_BADGES, iD),
        this._composers.set(R.APPROVE_ALL_MEMBERSHIP_REQUESTS, NW),
        this._composers.set(R.GROUP_UNBLOCK_MEMBER, Fz),
        this._composers.set(R.ROOM_FAVORITE, iM),
        this._composers.set(R.CAN_CREATE_ROOM, TY),
        this._composers.set(R.CANCEL_ROOM_EVENT, IY),
        this._composers.set(R.CONVERT_GLOBAL_ROOM_ID, nM),
        this._composers.set(R.COMPETITION_ROOM_SEARCH, RY),
        this._composers.set(R.ROOM_CREATE, aM),
        this._composers.set(R.GET_USER_FLAT_CATS, uM),
        this._composers.set(R.GET_USER_EVENT_CATS, eE),
        this._composers.set(R.ROOM_FAVORITE_REMOVE, oM),
        this._composers.set(R.EDIT_ROOM_EVENT, lM),
        this._composers.set(R.FORWARD_TO_RANDOM_PROMOTED_ROOM, OY),
        this._composers.set(R.FORWARD_TO_SOME_ROOM, SY),
        this._composers.set(R.GET_CATEGORIES_WITH_USER_COUNT, CY),
        this._composers.set(R.GET_GUEST_ROOM, Yc),
        this._composers.set(R.GET_OFFICIAL_ROOMS, AY),
        this._composers.set(R.GET_POPULAR_ROOM_TAGS, NY),
        this._composers.set(R.GUILD_BASE_SEARCH, yY),
        this._composers.set(R.MY_FAVOURITE_ROOMS_SEARCH, MY),
        this._composers.set(R.MY_FREQUENT_ROOM_HISTORY_SEARCH, bY),
        this._composers.set(R.MY_FRIENDS_ROOM_SEARCH, DY),
        this._composers.set(R.MY_GUILD_BASES_SEARCH, vY),
        this._composers.set(R.MY_RECOMMENDED_ROOMS, PY),
        this._composers.set(R.MY_ROOM_HISTORY_SEARCH, LY),
        this._composers.set(R.MY_ROOM_RIGHTS_SEARCH, UY),
        this._composers.set(R.MY_ROOMS_SEARCH, wY),
        this._composers.set(R.POPULAR_ROOMS_SEARCH, BY),
        this._composers.set(R.ROOM_LIKE, fM),
        this._composers.set(R.ROOM_RIGHTS_REMOVE_OWN, kY),
        this._composers.set(R.ROOM_AD_EVENT_TAB_CLICKED, VY),
        this._composers.set(R.ROOM_AD_EVENT_TAB_VIEWED, HY),
        this._composers.set(R.ROOM_AD_SEARCH, jY),
        this._composers.set(R.ROOM_TEXT_SEARCH, zY),
        this._composers.set(R.ROOMS_WHERE_MY_FRIENDS_ARE, WY),
        this._composers.set(R.ROOMS_WITH_HIGHEST_SCORE_SEARCH, YY),
        this._composers.set(R.SET_ROOM_SESSION_TAGS, KY),
        this._composers.set(R.ROOM_STAFF_PICK, mM),
        this._composers.set(R.ROOM_FILTER_WORDS, cM),
        this._composers.set(R.ROOM_FILTER_WORDS_MODIFY, pM),
        this._composers.set(R.USER_HOME_ROOM, EM),
        this._composers.set(R.UPDATE_ROOM_THUMBNAIL, qY),
        this._composers.set(R.NAVIGATOR_INIT, dM),
        this._composers.set(R.NAVIGATOR_SEARCH, xo),
        this._composers.set(R.NAVIGATOR_ADD_COLLAPSED_CATEGORY, _M),
        this._composers.set(R.NAVIGATOR_REMOVE_COLLAPSED_CATEGORY, gM),
        this._composers.set(R.NAVIGATOR_SEARCH_SAVE, xY),
        this._composers.set(R.NAVIGATOR_SETTINGS_SAVE, GY),
        this._composers.set(R.NAVIGATOR_CATEGORY_LIST_MODE, hM),
        this._composers.set(R.NAVIGATOR_DELETE_SAVED_SEARCH, FY),
        this._composers.set(R.POLL_ANSWER, NM),
        this._composers.set(R.POLL_REJECT, yM),
        this._composers.set(R.POLL_START, MM),
        this._composers.set(R.POLL_VOTE_COUNTER, bM),
        this._composers.set(R.USER_EFFECT_ACTIVATE, iY),
        this._composers.set(R.USER_EFFECT_ENABLE, nY),
        this._composers.set(R.USER_BADGES, Cy),
        this._composers.set(R.USER_BADGES_CURRENT_UPDATE, Ay),
        this._composers.set(R.GET_BADGE_POINTS_LIMITS, aY),
        this._composers.set(R.REQUESTABADGE, lY),
        this._composers.set(R.GETISBADGEREQUESTFULFILLED, oY),
        this._composers.set(R.USER_BOTS, $g),
        this._composers.set(R.USER_FURNITURE, Ny),
        this._composers.set(R.REQUESTFURNIINVENTORYWHENNOTINROOM, cY),
        this._composers.set(R.USER_PETS, ef),
        this._composers.set(R.TRADE_ACCEPT, yy),
        this._composers.set(R.TRADE_CANCEL, My),
        this._composers.set(R.TRADE_CLOSE, by),
        this._composers.set(R.TRADE_CONFIRM, Dy),
        this._composers.set(R.TRADE_ITEM, tf),
        this._composers.set(R.TRADE_ITEMS, vy),
        this._composers.set(R.TRADE_ITEM_REMOVE, Py),
        this._composers.set(R.TRADE, Ly),
        this._composers.set(R.TRADE_UNACCEPT, Uy),
        this._composers.set(R.UNSEEN_RESET_CATEGORY, wy),
        this._composers.set(R.UNSEEN_RESET_ITEMS, Fy),
        this._composers.set(R.ACHIEVEMENT_LIST, zA),
        this._composers.set(R.PET_MOUNT, nf),
        this._composers.set(R.PET_RESPECT, du),
        this._composers.set(R.PET_SUPPLEMENT, QY),
        this._composers.set(R.REMOVE_PET_SADDLE, RM),
        this._composers.set(R.PET_INFO, OM),
        this._composers.set(R.TOGGLE_PET_BREEDING, SM),
        this._composers.set(R.TOGGLE_PET_RIDING, CM),
        this._composers.set(R.USE_PET_PRODUCT, AM),
        this._composers.set(R.GET_PET_TRAINING_PANEL, TM),
        this._composers.set(R.PET_OPEN_PACKAGE, oE),
        this._composers.set(R.PET_SELECTED, Oz),
        this._composers.set(R.PETS_BREED, jd),
        this._composers.set(R.PET_CANCEL_BREEDING, uY),
        this._composers.set(R.PET_CONFIRM_BREEDING, hY),
        this._composers.set(R.ROOM_ENTER, PM),
        this._composers.set(R.ROOM_DOORBELL, vM),
        this._composers.set(R.GO_TO_FLAT, Cb),
        this._composers.set(R.CHANGE_QUEUE, Sb),
        this._composers.set(R.ROOM_AMBASSADOR_ALERT, UM),
        this._composers.set(R.ROOM_BAN_GIVE, wM),
        this._composers.set(R.ROOM_BAN_REMOVE, kM),
        this._composers.set(R.ROOM_RIGHTS_GIVE, xM),
        this._composers.set(R.ROOM_KICK, GM),
        this._composers.set(R.ROOM_MUTE_USER, BM),
        this._composers.set(R.ROOM_RIGHTS_REMOVE, tE),
        this._composers.set(R.ROOM_RIGHTS_REMOVE_ALL, LM),
        this._composers.set(R.ROOM_DELETE, FM),
        this._composers.set(R.ROOM_SETTINGS, rE),
        this._composers.set(R.ROOM_SETTINGS_SAVE, jM),
        this._composers.set(R.ROOM_RIGHTS_LIST, HM),
        this._composers.set(R.ROOM_BAN_LIST, sE),
        this._composers.set(R.ROOM_SETTINGS_UPDATE_ROOM_CATEGORY_AND_TRADE, Nz),
        this._composers.set(R.BOT_CONFIGURATION, VM),
        this._composers.set(R.GET_ITEM_DATA, KM),
        this._composers.set(R.REMOVE_WALL_ITEM, JM),
        this._composers.set(R.BOT_PLACE, WM),
        this._composers.set(R.BOT_PICKUP, Hd),
        this._composers.set(R.BOT_SKILL_SAVE, fn),
        this._composers.set(R.PET_PLACE, XM),
        this._composers.set(R.PET_MOVE, af),
        this._composers.set(R.PET_PICKUP, QM),
        this._composers.set(R.SET_ITEM_DATA, $M),
        this._composers.set(R.SET_OBJECT_DATA, iE),
        this._composers.set(R.COMPOST_PLANT, zM),
        this._composers.set(R.HARVEST_PET, qM),
        this._composers.set(R.SET_CLOTHING_CHANGE_DATA, ZM),
        this._composers.set(R.FURNITURE_ALIASES, ib),
        this._composers.set(R.FURNITURE_GROUP_INFO, nb),
        this._composers.set(R.FURNITURE_PICKUP, nE),
        this._composers.set(R.FURNITURE_PLACE, aE),
        this._composers.set(R.ITEM_PAINT, Uc),
        this._composers.set(R.FURNITURE_POSTIT_PLACE, ab),
        this._composers.set(R.FURNITURE_POSTIT_SAVE_STICKY_POLE, eb),
        this._composers.set(R.CONTROL_YOUTUBE_DISPLAY_PLAYBACK, Rc),
        this._composers.set(R.GET_YOUTUBE_DISPLAY_STATUS, Ib),
        this._composers.set(R.SET_YOUTUBE_DISPLAY_PLAYLIST, lf),
        this._composers.set(R.FURNITURE_FLOOR_UPDATE, of),
        this._composers.set(R.FURNITURE_WALL_UPDATE, pb),
        this._composers.set(R.ITEM_DIMMER_SETTINGS, tb),
        this._composers.set(R.ITEM_DIMMER_SAVE, sb),
        this._composers.set(R.ITEM_DIMMER_TOGGLE, rb),
        this._composers.set(R.ROOM_TONER_APPLY, Eb),
        this._composers.set(R.ITEM_COLOR_WHEEL_CLICK, ob),
        this._composers.set(R.ITEM_DICE_CLICK, lb),
        this._composers.set(R.ITEM_DICE_CLOSE, cb),
        this._composers.set(R.FURNITURE_MULTISTATE, Bl),
        this._composers.set(R.FURNITURE_RANDOMSTATE, db),
        this._composers.set(R.ITEM_STACK_HELPER, Qh),
        this._composers.set(R.FURNITURE_WALL_MULTISTATE, _b),
        this._composers.set(R.ONE_WAY_DOOR_CLICK, hb),
        this._composers.set(R.ITEM_EXCHANGE_REDEEM, ub),
        this._composers.set(R.ITEM_CLOTHING_REDEEM, Ob),
        this._composers.set(R.ROOM_MODEL, cf),
        this._composers.set(R.GET_OCCUPIED_TILES, Tb),
        this._composers.set(R.GET_ROOM_ENTRY_TILE, Rb),
        this._composers.set(R.ROOM_MODEL_SAVE, lE),
        this._composers.set(R.UNIT_ACTION, Db),
        this._composers.set(R.UNIT_DANCE, vb),
        this._composers.set(R.UNIT_DROP_HAND_ITEM, Pb),
        this._composers.set(R.UNIT_GIVE_HANDITEM, Lb),
        this._composers.set(R.UNIT_GIVE_HANDITEM_PET, uE),
        this._composers.set(R.UNIT_LOOK, Ub),
        this._composers.set(R.UNIT_SIGN, Fb),
        this._composers.set(R.UNIT_POSTURE, wb),
        this._composers.set(R.UNIT_WALK, xb),
        this._composers.set(R.UNIT_CLICK_OBJECT, Gb),
        this._composers.set(R.UNIT_CHAT, cE),
        this._composers.set(R.UNIT_CHAT_SHOUT, Ab),
        this._composers.set(R.USER_SETTINGS_CHAT_STYLE, Nb),
        this._composers.set(R.UNIT_CHAT_WHISPER, yb),
        this._composers.set(R.UNIT_TYPING, Mb),
        this._composers.set(R.UNIT_TYPING_STOP, bb),
        this._composers.set(R.WIRED_APPLY_SNAPSHOT, Cz),
        this._composers.set(R.WIRED_OPEN, Az),
        this._composers.set(R.WIRED_ACTION_SAVE, kb),
        this._composers.set(R.WIRED_CONDITION_SAVE, Vb),
        this._composers.set(R.WIRED_TRIGGER_SAVE, Hb),
        this._composers.set(R.ROOM_MUTE, Bb),
        this._composers.set(R.APPROVE_NAME, Qb),
        this._composers.set(R.USER_RESPECT, hD),
        this._composers.set(R.SCR_GET_KICKBACK_INFO, aD),
        this._composers.set(R.PEER_USERS_CLASSIFICATION, dD),
        this._composers.set(R.USER_CLASSIFICATION, _D),
        this._composers.set(R.USER_IGNORED, Jb),
        this._composers.set(R.USER_IGNORE, $b),
        this._composers.set(R.USER_IGNORE_ID, eD),
        this._composers.set(R.USER_UNIGNORE, tD),
        this._composers.set(R.USER_BADGES_CURRENT, dE),
        this._composers.set(R.USER_FIGURE, _E),
        this._composers.set(R.USER_MOTTO, sD),
        this._composers.set(R.USER_PROFILE, rD),
        this._composers.set(R.USER_PROFILE_BY_NAME, Uz),
        this._composers.set(R.USER_TAGS, Zb),
        this._composers.set(R.MESSENGER_RELATIONSHIPS, gE),
        this._composers.set(R.MANNEQUIN_SAVE_NAME, fb),
        this._composers.set(R.MANNEQUIN_SAVE_LOOK, gb),
        this._composers.set(R.PRESENT_OPEN_PRESENT, mb),
        this._composers.set(R.MARKETPLACE_CONFIG, By),
        this._composers.set(R.MARKETPLACE_SELL_ITEM, Hy),
        this._composers.set(R.MARKETPLACE_REQUEST_OWN_ITEMS, Vy),
        this._composers.set(R.MARKETPLACE_TAKE_BACK_ITEM, Gy),
        this._composers.set(R.MARKETPLACE_REQUEST_OFFERS, ky),
        this._composers.set(R.MARKETPLACE_BUY_OFFER, sf),
        this._composers.set(R.MARKETPLACE_REDEEM_CREDITS, jy),
        this._composers.set(R.MARKETPLACE_BUY_TOKENS, _Y),
        this._composers.set(R.REQUEST_SELL_ITEM, gY),
        this._composers.set(R.REQUEST_MARKETPLACE_ITEM_STATS, fY),
        this._composers.set(R.USER_BOTS, $g),
        this._composers.set(R.USER_PETS, ef),
        this._composers.set(R.USER_CURRENCY, nD),
        this._composers.set(R.USER_SUBSCRIPTION, uf),
        this._composers.set(R.MODTOOL_REQUEST_ROOM_INFO, Ky),
        this._composers.set(R.MODTOOL_CHANGE_ROOM_SETTINGS, rf),
        this._composers.set(R.MODTOOL_REQUEST_USER_CHATLOG, Jy),
        this._composers.set(R.MODTOOL_REQUEST_ROOM_CHATLOG, Xy),
        this._composers.set(R.MOD_TOOL_USER_INFO, qy),
        this._composers.set(R.MODTOOL_SANCTION_ALERT, Zy),
        this._composers.set(R.MODTOOL_SANCTION_BAN, ha),
        this._composers.set(R.MODTOOL_SANCTION_KICK, $y),
        this._composers.set(R.MODTOOL_SANCTION_TRADELOCK, tM),
        this._composers.set(R.MODTOOL_ALERTEVENT, Zm),
        this._composers.set(R.MODTOOL_SANCTION_MUTE, eM),
        this._composers.set(R.MODTOOL_REQUEST_USER_ROOMS, Qy),
        this._composers.set(R.MODTOOL_ROOM_ALERT, Zn),
        this._composers.set(R.CLOSE_ISSUE_DEFAULT_ACTION, mY),
        this._composers.set(R.CLOSE_ISSUES, La),
        this._composers.set(R.DEFAULT_SANCTION, Yy),
        this._composers.set(R.GET_CFH_CHATLOG, zy),
        this._composers.set(R.MODTOOL_PREFERENCES, EY),
        this._composers.set(R.MODTOOL_SANCTION, pY),
        this._composers.set(R.PICK_ISSUES, sM),
        this._composers.set(R.RELEASE_ISSUES, $m),
        this._composers.set(R.MYSTERYBOXWAITINGCANCELEDMESSAGE, rM),
        this._composers.set(R.MYSTERYBOX_OPEN_TROPHY, Ez),
        this._composers.set(R.USER_SETTINGS_CAMERA, oD),
        this._composers.set(R.USER_SETTINGS_OLD_CHAT, lD),
        this._composers.set(R.USER_SETTINGS_INVITES, cD),
        this._composers.set(R.USER_SETTINGS_VOLUME, uD),
        this._composers.set(R.COMMUNITY_GOAL_VOTE_COMPOSER, dY),
        this._composers.set(R.GET_PROMO_ARTICLES, xy),
        this._composers.set(R.ACCEPT_QUEST, JY),
        this._composers.set(R.ACTIVATE_QUEST, ZY),
        this._composers.set(R.CANCEL_QUEST, $Y),
        this._composers.set(R.FRIEND_REQUEST_QUEST_COMPLETE, ez),
        this._composers.set(R.GET_COMMUNITY_GOAL_EARNED_PRIZES, tz),
        this._composers.set(R.GET_COMMUNITY_GOAL_HALL_OF_FAME, DM),
        this._composers.set(R.GET_COMMUNITY_GOAL_PROGRESS, sz),
        this._composers.set(R.GET_CONCURRENT_USERS_GOAL_PROGRESS, rz),
        this._composers.set(R.GET_CONCURRENT_USERS_REWARD, iz),
        this._composers.set(R.GET_DAILY_QUEST, nz),
        this._composers.set(R.GET_QUESTS, az),
        this._composers.set(R.GET_SEASONAL_QUESTS_ONLY, oz),
        this._composers.set(R.OPEN_QUEST_TRACKER, lz),
        this._composers.set(R.REDEEM_COMMUNITY_GOAL_PRIZE, cz),
        this._composers.set(R.REJECT_QUEST, uz),
        this._composers.set(R.START_CAMPAIGN, hz),
        this._composers.set(R.GET_SOUND_SETTINGS, Mz),
        this._composers.set(R.ADD_JUKEBOX_DISK, jb),
        this._composers.set(R.GET_JUKEBOX_PLAYLIST, Wb),
        this._composers.set(R.GET_NOW_PLAYING, Yb),
        this._composers.set(R.GET_OFFICIAL_SONG_ID, zb),
        this._composers.set(R.GET_SONG_INFO, Kb),
        this._composers.set(R.GET_SOUND_MACHINE_PLAYLIST, yz),
        this._composers.set(R.GET_USER_SONG_DISKS, qb),
        this._composers.set(R.REMOVE_JUKEBOX_DISK, Xb),
        this._composers.set(R.HELPER_TALENT_TRACK, Dz),
        this._composers.set(R.TALENT_TRACK_GET_LEVEL, bz),
        this._composers.set(R.NEW_USER_EXPERIENCE_GET_GIFTS, XY),
        this._composers.set(R.NEW_USER_EXPERIENCE_SCRIPT_PROCEED, IM),
        this._composers.set(R.WELCOME_OPEN_GIFT, pz),
        this._composers.set(R.WELCOME_GIFT_CHANGE_EMAIL, xz),
        this._composers.set(R.EMAIL_GET_STATUS, wz),
        this._composers.set(R.EMAIL_CHANGE, Lz),
        this._composers.set(R.RENTABLE_SPACE_CANCEL_RENT, Iz),
        this._composers.set(R.RENTABLE_SPACE_RENT, Tz),
        this._composers.set(R.RENTABLE_SPACE_STATUS, Rz),
        this._composers.set(R.RECYCLER_STATUS, dz),
        this._composers.set(R.RECYCLER_ITEMS, _z),
        this._composers.set(R.TRACKING_PERFORMANCE_LOG, Pz),
        this._composers.set(R.TRACKING_LAG_WARNING_REPORT, vz),
        this._composers.set(R.ROOM_DIRECTORY_ROOM_NETWORK_OPEN_CONNECTION, Sz),
        this._composers.set(R.RENTABLE_EXTEND_RENT_OR_BUYOUT_STRIP_ITEM, fz),
        this._composers.set(R.RENTABLE_EXTEND_RENT_OR_BUYOUT_FURNI, gz),
        this._composers.set(R.RENTABLE_GET_RENT_OR_BUYOUT_OFFER, mz)
    }
    get events()
    {
        return this._events
    }
    get composers()
    {
        return this._composers
    }
}
class kz extends bn {
    constructor(e)
    {
        super(),
        this._communication = e,
        this._connection = null,
        this._messages = new Bz,
        this._demo = new Gz(this),
        this.onConnectionOpenedEvent = this.onConnectionOpenedEvent.bind(this),
        this.onConnectionClosedEvent = this.onConnectionClosedEvent.bind(this),
        this.onConnectionErrorEvent = this.onConnectionErrorEvent.bind(this),
        this.onConnectionAuthenticatedEvent = this.onConnectionAuthenticatedEvent.bind(this)
    }
    onInit()
    {
        this._connection || (Ee.instance.events.addEventListener(ss.CONNECTION_AUTHENTICATED, this.onConnectionAuthenticatedEvent), this._connection = this._communication.createConnection(this), this._connection.registerMessages(this._messages), this._connection.addEventListener(zs.CONNECTION_OPENED, this.onConnectionOpenedEvent), this._connection.addEventListener(zs.CONNECTION_CLOSED, this.onConnectionClosedEvent), this._connection.addEventListener(zs.CONNECTION_ERROR, this.onConnectionErrorEvent), this._demo && this._demo.init(), this._connection.init(ye.getValue("socket.url")))
    }
    onDispose()
    {
        this._demo && this._demo.dispose(),
        this._connection && (this._connection.removeEventListener(zs.CONNECTION_OPENED, this.onConnectionOpenedEvent), this._connection.removeEventListener(zs.CONNECTION_CLOSED, this.onConnectionClosedEvent), this._connection.removeEventListener(zs.CONNECTION_ERROR, this.onConnectionErrorEvent)),
        Ee.instance.events.removeEventListener(ss.CONNECTION_AUTHENTICATED, this.onConnectionAuthenticatedEvent),
        super.onDispose()
    }
    onConnectionOpenedEvent(e)
    {
        pe.log("Connection Initialized")
    }
    onConnectionClosedEvent(e)
    {
        pe.log("Connection Closed")
    }
    onConnectionErrorEvent(e)
    {
        pe.log("Connection Error")
    }
    onConnectionAuthenticatedEvent(e)
    {
        pe.log("Connection Authenticated"),
        this._connection && this._connection.authenticated()
    }
    connectionInit(e)
    {
        pe.log("Initializing Connection", e)
    }
    registerMessageEvent(e)
    {
        return this._connection && this._connection.addMessageEvent(e), e
    }
    removeMessageEvent(e)
    {
        this._connection && this._connection.removeMessageEvent(e)
    }
    get demo()
    {
        return this._demo
    }
    get connection()
    {
        return this._connection
    }
}
const dh = class {
    static get available()
    {
        return this._isListeningForPostMessages || (this._isListeningForPostMessages = !0, window.addEventListener("message", s => {
            if (typeof s.data == "string" && s.data.startsWith(dh.MESSAGE_KEY)) {
                const {method: e, params: t} = JSON.parse(s.data.substr(dh.MESSAGE_KEY.length)),
                    r = window[e];
                if (!r)
                    return;
                r(...t);
                return
            }
        })), !0
    }
    static call(s, ...e)
    {
        if (window.top !== window && window.top.postMessage(dh.MESSAGE_KEY + JSON.stringify({
            method: s,
            params: e
        }), "*"), !("FlashExternalInterface" in window))
            return;
        const t = window.FlashExternalInterface[s];
        return typeof t < "u" ? t(...e) : void 0
    }
    static callGame(s, ...e)
    {
        if (window.top !== window && window.top.postMessage("Nitro_LegacyExternalGameInterface" + JSON.stringify({
            method: s,
            params: e
        }), "*"), !("FlashExternalGameInterface" in window))
            return;
        const t = window.FlashExternalGameInterface[s];
        return typeof t < "u" ? t(...e) : void 0
    }
    static addCallback(s, e)
    {
        window[s] = e
    }
}
;
let Ze = dh;
Ze.MESSAGE_KEY = "Nitro_LegacyExternalInterface";
Ze._isListeningForPostMessages = !1;
class Vz {
    constructor(e)
    {
        e.addMessageEvent(new Mm(this.onLoadGameUrl.bind(this)))
    }
    onLoadGameUrl(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        t && Ze.callGame("showGame", t.url)
    }
}
class A_ {
    constructor(e)
    {
        this._badgeId = "",
        this._level = 1,
        this._base = "",
        this._badgeId = e,
        this.parseText()
    }
    parseText()
    {
        let e = this._badgeId.length - 1;
        for (; e > 0 && this.isNumber(this._badgeId.charAt(e));)
            e--;
        this._base = this._badgeId.substr(0, e + 1);
        const t = this._badgeId.substr(e + 1, this._badgeId.length);
        t && t !== "" && (this._level = Number.parseInt(t))
    }
    isNumber(e)
    {
        const t = e.charCodeAt(0);
        return t >= 48 && t <= 57
    }
    get level()
    {
        return this._level
    }
    set level(e)
    {
        this._level = Math.max(1, e)
    }
    get getBadgeId()
    {
        return this._base + this._level
    }
    get base()
    {
        return this._base
    }
}
class Hz extends bn {
    constructor(e)
    {
        super(),
        this._communication = e,
        this._definitions = new Map,
        this._parameters = new Map,
        this._badgePointLimits = new Map,
        this._romanNumerals = ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX", "XXI", "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII", "XXVIII", "XXIX", "XXX"],
        this._pendingUrls = []
    }
    onInit()
    {
        this._communication.registerMessageEvent(new Lm(this.onBadgePointLimitsEvent.bind(this)));
        let e = ye.getValue("external.texts.url");
        Array.isArray(e) || (e = [ye.getValue("external.texts.url")]);
        for (let t = 0; t < e.length; t++)
            e[t] = ye.interpolate(e[t]);
        this._pendingUrls = e,
        this.loadNextLocalization()
    }
    loadNextLocalization()
    {
        if (!this._pendingUrls.length) {
            this.events && this.events.dispatchEvent(new va(va.LOADED));
            return
        }
        this.loadLocalizationFromURL(this._pendingUrls[0])
    }
    loadLocalizationFromURL(e)
    {
        fetch(e).then(t => t.json()).then(t => this.onLocalizationLoaded(t, e)).catch(t => this.onLocalizationFailed(t))
    }
    onLocalizationLoaded(e, t)
    {
        if (!e)
            return;
        if (!this.parseLocalization(e))
            throw new Error(`Invalid json data for file ${t}`);
        const r = this._pendingUrls.indexOf(t);
        r >= 0 && this._pendingUrls.splice(r, 1),
        this.loadNextLocalization()
    }
    onLocalizationFailed(e)
    {
        this.events && this.events.dispatchEvent(new va(va.FAILED))
    }
    parseLocalization(e)
    {
        if (!e)
            return !1;
        for (const t in e)
            this._definitions.set(t, e[t]);
        return !0
    }
    onBadgePointLimitsEvent(e)
    {
        const t = e.getParser();
        for (const r of t.data)
            this.setBadgePointLimit(r.badgeId, r.limit)
    }
    getBadgePointLimit(e)
    {
        return this._badgePointLimits.get(e) || -1
    }
    setBadgePointLimit(e, t)
    {
        this._badgePointLimits.set(e, t)
    }
    getRomanNumeral(e)
    {
        return this._romanNumerals[Math.max(0, e - 1)]
    }
    getPreviousLevelBadgeId(e)
    {
        const t = new A_(e);
        return t.level--, t.getBadgeId
    }
    hasValue(e)
    {
        return this._definitions.has(e)
    }
    getValue(e, t=!0)
    {
        if (!e || !e.length)
            return null;
        const r = e.match(/\$\{.[^}]*\}/g);
        if (r && r.length)
            for (const n of r)
                e = e.replace(n, this.getValue(n.slice(2, -1), t));
        let i = this._definitions.get(e) || null;
        if (!i && (i = ye.definitions.get(e), i))
            return i;
        if (i && t) {
            const n = this._parameters.get(e);
            if (n)
                for (const [o, l] of n)
                    i = i.replace("%" + o + "%", l)
        }
        return i || e
    }
    getValueWithParameter(e, t, r)
    {
        const i = this.getValue(e, !1),
            n = i.replace("%" + t + "%", r);
        if (i.startsWith("%{")) {
            const o = new RegExp("%{" + t.toUpperCase() + "\\|([^|]*)\\|([^|]*)\\|([^|]*)}"),
                l = i.match(o);
            if (!l)
                return n;
            let c = -1;
            switch (Number.parseInt(r)) {
            case 0:
                c = 1;
                break;
            case 1:
                c = 2;
                break;
            default:
            case 2:
                c = 3;
                break
            }
            if (c == -1 || typeof l[c] > "u")
                return n;
            const h = l[c];
            if (h)
                return h.replace("%%", r)
        }
        return n
    }
    getValueWithParameters(e, t, r)
    {
        let i = this.getValue(e, !1);
        if (t)
            for (let n = 0; n < t.length; n++) {
                const o = t[n],
                    l = r[n];
                if (l !== void 0 && (i = i.replace("%" + o + "%", l), i.startsWith("%{"))) {
                    const c = new RegExp("%{" + o.toUpperCase() + "\\|([^|]*)\\|([^|]*)\\|([^|]*)}"),
                        u = i.match(c);
                    if (!u)
                        continue;
                    const h = parseInt(l);
                    let d = -1;
                    switch (h) {
                    case 0:
                        d = 1;
                        break;
                    case 1:
                        d = 2;
                        break;
                    case 2:
                    default:
                        d = 3;
                        break
                    }
                    if (d === -1 || typeof u[d] > "u")
                        continue;
                    const m = u[d];
                    m && (i = m.replace("%%", l))
                }
            }
        return i
    }
    setValue(e, t)
    {
        this._definitions.set(e, t)
    }
    registerParameter(e, t, r)
    {
        if (!e || e.length === 0 || !t || t.length === 0)
            return;
        let i = this._parameters.get(e);
        i || (i = new Map, this._parameters.set(e, i)),
        i.set(t, r)
    }
    getBadgeName(e)
    {
        const t = new A_(e),
            r = ["badge_name_" + e, "badge_name_" + t.base];
        let i = this.fixBadLocalization(this.getExistingKey(r));
        return i = i.replace("%roman%", this.getRomanNumeral(t.level)), i
    }
    getBadgeDesc(e)
    {
        const t = new A_(e),
            r = ["badge_desc_" + e, "badge_desc_" + t.base];
        let i = this.fixBadLocalization(this.getExistingKey(r));
        const n = this.getBadgePointLimit(e);
        return n > -1 && (i = i.replace("%limit%", n.toString())), i = i.replace("%roman%", this.getRomanNumeral(t.level)), i
    }
    getExistingKey(e)
    {
        for (const t of e) {
            const r = this.getValue(t);
            if (r != t)
                return r
        }
        return ""
    }
    fixBadLocalization(e)
    {
        return e.replace("${", "$").replace("{", "$").replace("}", "$")
    }
}
zP.add(KP, qP, XP, QP, JP, ZP, $P);
class pp {
    constructor()
    {
        this.id = 0,
        this.data = null,
        this.image = null
    }
    getImage()
    {
        return this.image ? this.image : this.data ? pt.generateImage(this.data) : null
    }
}
class Nr extends Bs {
    constructor(e)
    {
        super(null, null),
        this._type = e
    }
    get type()
    {
        return this._type
    }
}
Nr.IMAGE_LOADED = "ROAUM_IMAGE_LOADED";
Nr.IMAGE_LOADING_FAILED = "ROAUM_IMAGE_FAILED";
class vs extends Bs {
    constructor()
    {
        super(null, null)
    }
}
class gD extends vs {
    constructor(e, t)
    {
        super(),
        this._itemType = e,
        this._itemName = t
    }
    get itemType()
    {
        return this._itemType
    }
    get itemName()
    {
        return this._itemName
    }
}
class fE extends vs {
    constructor(e=0)
    {
        super(),
        this._numberOfWords = e
    }
    get numberOfWords()
    {
        return this._numberOfWords
    }
}
class fD extends vs {
    constructor(e=0)
    {
        super(),
        this._danceStyle = e
    }
    get danceStyle()
    {
        return this._danceStyle
    }
}
class mD extends vs {
    constructor(e, t=0)
    {
        super(),
        this._effect = e,
        this._delayMilliseconds = t
    }
    get effect()
    {
        return this._effect
    }
    get delayMilliseconds()
    {
        return this._delayMilliseconds
    }
}
class ED extends vs {
    constructor(e)
    {
        super(),
        this._gainedExperience = e
    }
    get gainedExperience()
    {
        return this._gainedExperience
    }
}
class pD extends vs {
    constructor(e=0)
    {
        super(),
        this._expressionType = e
    }
    get expressionType()
    {
        return this._expressionType
    }
}
class Jh extends vs {
    constructor(e, t=null, r=null, i=!1)
    {
        super(),
        this._figure = e,
        this._gender = t,
        this._subType = r,
        this._isRiding = i
    }
    get figure()
    {
        return this._figure
    }
    get gender()
    {
        return this._gender
    }
    get subType()
    {
        return this._subType
    }
    get isRiding()
    {
        return this._isRiding
    }
}
class ID extends vs {
    constructor(e=0)
    {
        super(),
        this._level = e
    }
    get level()
    {
        return this._level
    }
}
class TD extends vs {
    constructor(e=0)
    {
        super(),
        this._gesture = e
    }
    get gesture()
    {
        return this._gesture
    }
}
class jz extends vs {
    constructor(e)
    {
        super(),
        this._guideStatus = e
    }
    get guideStatus()
    {
        return this._guideStatus
    }
}
class RD extends vs {
    constructor(e=!1)
    {
        super(),
        this._isMuted = e
    }
    get isMuted()
    {
        return this._isMuted
    }
}
class OD extends vs {}
class SD extends vs {
    constructor(e)
    {
        super(),
        this._gesture = e
    }
    get gesture()
    {
        return this._gesture
    }
}
class CD extends vs {
    constructor(e)
    {
        super(),
        this._value = e
    }
    get value()
    {
        return this._value
    }
}
class AD extends vs {
    constructor(e)
    {
        super(),
        this._isPlayingGame = e
    }
    get isPlayingGame()
    {
        return this._isPlayingGame
    }
}
class mE extends vs {
    constructor(e, t="")
    {
        super(),
        this._postureType = e,
        this._parameter = t
    }
    get postureType()
    {
        return this._postureType
    }
    get parameter()
    {
        return this._parameter
    }
}
class Zh extends vs {
    constructor(e)
    {
        super(),
        this._selected = e
    }
    get selected()
    {
        return this._selected
    }
}
class ND extends vs {
    constructor(e=0)
    {
        super(),
        this._signType = e
    }
    get signType()
    {
        return this._signType
    }
}
class EE extends vs {
    constructor(e=!1)
    {
        super(),
        this._isSleeping = e
    }
    get isSleeping()
    {
        return this._isSleeping
    }
}
class yD extends vs {
    constructor(e=!1)
    {
        super(),
        this._isTyping = e
    }
    get isTyping()
    {
        return this._isTyping
    }
}
class ka extends Bs {
    constructor(e, t, r, i=!1)
    {
        super(e, r),
        this._targetLocation = t,
        this._isSlide = i
    }
    get targetLocation()
    {
        return this._targetLocation ? this._targetLocation : this.location
    }
    get isSlide()
    {
        return this._isSlide
    }
}
class $h extends ka {
    constructor(e, t, r, i, n, o)
    {
        super(e, t, r),
        this._headDirection = i,
        this._canStandUp = n,
        this._baseY = o
    }
    get headDirection()
    {
        return this._headDirection
    }
    get canStandUp()
    {
        return this._canStandUp
    }
    get baseY()
    {
        return this._baseY
    }
}
class MD extends vs {
    constructor(e)
    {
        super(),
        this._itemType = e
    }
    get itemType()
    {
        return this._itemType
    }
}
class Gt extends Bs {
    constructor(e, t, r=null)
    {
        super(null, null),
        this._state = e,
        this._data = t,
        this._extra = r
    }
    get state()
    {
        return this._state
    }
    get data()
    {
        return this._data
    }
    get extra()
    {
        return this._extra
    }
}
class kl extends Bs {
    constructor(e, t)
    {
        super(null, null),
        this._badgeId = e,
        this._assetName = t
    }
    get badgeId()
    {
        return this._badgeId
    }
    get assetName()
    {
        return this._assetName
    }
}
kl.BADGE_LOADED = "ROGBUM_BADGE_LOADED";
class bD extends Bs {
    constructor(e, t, r)
    {
        super(e, t),
        this._height = r
    }
    get height()
    {
        return this._height
    }
}
class pE extends Bs {
    constructor(e)
    {
        super(null, null),
        this._data = e
    }
    get data()
    {
        return this._data
    }
}
class DD extends Bs {
    constructor(e, t)
    {
        super(null, null),
        this._numberKey = e,
        this._numberValue = t
    }
    get numberKey()
    {
        return this._numberKey
    }
    get numberValue()
    {
        return this._numberValue
    }
}
class ed extends Bs {
    constructor(e, t, r, i)
    {
        super(null, null),
        this._type = e,
        this._color = t,
        this._light = r,
        this._backgroundOnly = i
    }
    get type()
    {
        return this._type
    }
    get color()
    {
        return this._color
    }
    get light()
    {
        return this._light
    }
    get backgroundOnly()
    {
        return this._backgroundOnly
    }
}
ed.BACKGROUND_COLOR = "RORCUM_BACKGROUND_COLOR";
class $n extends Bs {
    constructor(e, t, r=0, i=0, n=0, o=0)
    {
        super(null, null),
        this._type = e,
        this._id = t,
        this._x = r,
        this._y = i,
        this._width = n,
        this._height = o
    }
    get type()
    {
        return this._type
    }
    get id()
    {
        return this._id
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get width()
    {
        return this._width
    }
    get height()
    {
        return this._height
    }
}
$n.ADD = "ORPFHUM_ADD";
$n.REMOVE = "ORPFHUM_REMOVE";
const vD = class  extends Bs{
    constructor(s)
    {
        super(null, null),
        this._type = vD.UPDATE_MAP,
        this._mapData = s
    }
    get type()
    {
        return this._type
    }
    get mapData()
    {
        return this._mapData
    }
}
;
let IE = vD;
IE.UPDATE_MAP = "RORMUM_UPDATE_MAP";
class Js extends Bs {
    constructor(e, t, r=null, i=null, n="window")
    {
        super(null, null),
        this._type = e,
        this._maskId = t,
        this._maskType = r,
        this._maskLocation = i ? new w(i.x, i.y, i.z) : null,
        this._maskCategory = n
    }
    get type()
    {
        return this._type
    }
    get maskId()
    {
        return this._maskId
    }
    get maskType()
    {
        return this._maskType
    }
    get maskLocation()
    {
        return this._maskLocation
    }
    get maskCategory()
    {
        return this._maskCategory
    }
}
Js.ADD_MASK = "RORMUM_ADD_MASK";
Js.REMOVE_MASK = "RORMUM_ADD_MASK";
Js.DOOR = "door";
Js.WINDOW = "window";
Js.HOLE = "hole";
class ea extends Bs {
    constructor(e, t)
    {
        super(null, null),
        this._type = e,
        this._value = t
    }
    get type()
    {
        return this._type
    }
    get value()
    {
        return this._value
    }
}
ea.WALL_THICKNESS = "RORPPUM_WALL_THICKNESS";
ea.FLOOR_THICKNESS = "RORPVUM_FLOOR_THICKNESS";
class ta extends Bs {
    constructor(e, t)
    {
        super(null, null),
        this._type = e,
        this._visible = t
    }
    get type()
    {
        return this._type
    }
    get visible()
    {
        return this._visible
    }
}
ta.WALL_VISIBILITY = "RORPVUM_WALL_VISIBILITY";
ta.FLOOR_VISIBILITY = "RORPVUM_FLOOR_VISIBILITY";
class Qs extends Bs {
    constructor(e, t)
    {
        super(null, null),
        this._type = e,
        this._value = t
    }
    get type()
    {
        return this._type
    }
    get value()
    {
        return this._value
    }
}
Qs.ROOM_WALL_UPDATE = "RORUM_ROOM_WALL_UPDATE";
Qs.ROOM_FLOOR_UPDATE = "RORUM_ROOM_FLOOR_UPDATE";
Qs.ROOM_LANDSCAPE_UPDATE = "RORUM_ROOM_LANDSCAPE_UPDATE";
class zc extends vs {
    constructor(e)
    {
        super(),
        this._selected = e
    }
    get selected()
    {
        return this._selected
    }
}
class ol extends Bs {
    constructor(e, t, r, i, n=!1)
    {
        super(e, null),
        this._height = t,
        this._visible = r,
        this._sourceEventId = i,
        this._toggleVisibility = n
    }
    get height()
    {
        return this._height
    }
    get visible()
    {
        return this._visible
    }
    get sourceEventId()
    {
        return this._sourceEventId
    }
    get toggleVisibility()
    {
        return this._toggleVisibility
    }
}
class sa extends Bs {
    constructor(e)
    {
        super(null, null),
        this._type = e
    }
    get type()
    {
        return this._type
    }
}
sa.ENABLED = "ROVUM_ENABLED";
sa.DISABLED = "ROVUM_DISABLED";
const hf = class  extends Ad{
    constructor()
    {
        super(),
        this._liftAmount = 0,
        this._location = new w,
        this._locationDelta = new w,
        this._lastUpdateTime = 0,
        this._changeTime = 0,
        this._updateInterval = hf.DEFAULT_UPDATE_INTERVAL
    }
    onDispose()
    {
        this._liftAmount = 0,
        super.onDispose()
    }
    update(s)
    {
        super.update(s);
        const e = this.getLocationOffset(),
            t = this.object && this.object.model;
        if (t && (e ? this._liftAmount !== e.z && (this._liftAmount = e.z, t.setValue(C.FURNITURE_LIFT_AMOUNT, this._liftAmount)) : this._liftAmount !== 0 && (this._liftAmount = 0, t.setValue(C.FURNITURE_LIFT_AMOUNT, this._liftAmount))), this._locationDelta.length > 0 || e) {
            const r = hf.TEMP_VECTOR;
            let i = this.time - this._changeTime;
            i === this._updateInterval >> 1 && i++,
            i > this._updateInterval && (i = this._updateInterval),
            this._locationDelta.length > 0 ? (r.assign(this._locationDelta), r.multiply(i / this._updateInterval), r.add(this._location)) : r.assign(this._location),
            e && r.add(e),
            this.object.setLocation(r),
            i === this._updateInterval && (this._locationDelta.x = 0, this._locationDelta.y = 0, this._locationDelta.z = 0)
        }
        this._lastUpdateTime = this.time
    }
    setObject(s)
    {
        super.setObject(s),
        s && this._location.assign(s.getLocation())
    }
    processUpdateMessage(s)
    {
        if (s && (super.processUpdateMessage(s), s.location && this._location.assign(s.location), s instanceof ka))
            return this.processMoveMessage(s)
    }
    processMoveMessage(s)
    {
        !s || !this.object || !s.location || (this._changeTime = this._lastUpdateTime, this._locationDelta.assign(s.targetLocation), this._locationDelta.subtract(this._location))
    }
    getLocationOffset()
    {
        return null
    }
    get lastUpdateTime()
    {
        return this._lastUpdateTime
    }
    set updateInterval(s)
    {
        s <= 0 && (s = 1),
        this._updateInterval = s
    }
}
;
let Va = hf;
Va.DEFAULT_UPDATE_INTERVAL = 500;
Va.TEMP_VECTOR = new w;
const Ar = class  extends Va{
    constructor()
    {
        super(),
        this._selected = !1,
        this._reportedLocation = null,
        this._effectChangeTimeStamp = 0,
        this._newEffect = 0,
        this._blinkingStartTimestamp = Pe() + this.randomBlinkStartTimestamp(),
        this._blinkingEndTimestamp = 0,
        this._talkingEndTimestamp = 0,
        this._talkingPauseStartTimestamp = 0,
        this._talkingPauseEndTimestamp = 0,
        this._carryObjectStartTimestamp = 0,
        this._carryObjectEndTimestamp = 0,
        this._allowUseCarryObject = !1,
        this._animationEndTimestamp = 0,
        this._signEndTimestamp = 0,
        this._gestureEndTimestamp = 0,
        this._numberValueEndTimestamp = 0
    }
    getEventTypes()
    {
        const s = [De.CLICK, De.DOUBLE_CLICK, pr.POSITION_CHANGED, De.MOUSE_ENTER, De.MOUSE_LEAVE, ce.MOUSE_BUTTON, ce.MOUSE_ARROW];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    dispose()
    {
        this._selected && this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new pr(pr.OBJECT_REMOVED, this.object)),
        super.dispose(),
        this._reportedLocation = null
    }
    update(s)
    {
        if (super.update(s), this._selected && this.object && this.eventDispatcher) {
            const t = this.object.getLocation();
            (!this._reportedLocation || this._reportedLocation.x !== t.x || this._reportedLocation.y !== t.y || this._reportedLocation.z !== t.z) && (this._reportedLocation || (this._reportedLocation = new w), this._reportedLocation.assign(t), this.eventDispatcher.dispatchEvent(new pr(pr.POSITION_CHANGED, this.object)))
        }
        const e = this.object && this.object.model;
        e && this.updateModel(this.time, e)
    }
    updateModel(s, e)
    {
        this._talkingEndTimestamp > 0 && (s > this._talkingEndTimestamp ? (e.setValue(C.FIGURE_TALK, 0), this._talkingEndTimestamp = 0, this._talkingPauseStartTimestamp = 0, this._talkingPauseEndTimestamp = 0) : !this._talkingPauseEndTimestamp && !this._talkingPauseStartTimestamp ? (this._talkingPauseStartTimestamp = s + this.randomTalkingPauseStartTimestamp(), this._talkingPauseEndTimestamp = this._talkingPauseStartTimestamp + this.randomTalkingPauseEndTimestamp()) : this._talkingPauseStartTimestamp > 0 && s > this._talkingPauseStartTimestamp ? (e.setValue(C.FIGURE_TALK, 0), this._talkingPauseStartTimestamp = 0) : this._talkingPauseEndTimestamp > 0 && s > this._talkingPauseEndTimestamp && (e.setValue(C.FIGURE_TALK, 1), this._talkingPauseEndTimestamp = 0)),
        this._animationEndTimestamp > 0 && s > this._animationEndTimestamp && (e.setValue(C.FIGURE_EXPRESSION, 0), this._animationEndTimestamp = 0),
        this._gestureEndTimestamp > 0 && s > this._gestureEndTimestamp && (e.setValue(C.FIGURE_GESTURE, 0), this._gestureEndTimestamp = 0),
        this._signEndTimestamp > 0 && s > this._signEndTimestamp && (e.setValue(C.FIGURE_SIGN, -1), this._signEndTimestamp = 0),
        this._carryObjectEndTimestamp > 0 && s > this._carryObjectEndTimestamp && (e.setValue(C.FIGURE_CARRY_OBJECT, 0), e.setValue(C.FIGURE_USE_OBJECT, 0), this._carryObjectStartTimestamp = 0, this._carryObjectEndTimestamp = 0, this._allowUseCarryObject = !1),
        this._allowUseCarryObject && s - this._carryObjectStartTimestamp > 5e3 && ((s - this._carryObjectStartTimestamp) % 1e4 < 1e3 ? e.setValue(C.FIGURE_USE_OBJECT, 1) : e.setValue(C.FIGURE_USE_OBJECT, 0)),
        this._blinkingStartTimestamp > -1 && s > this._blinkingStartTimestamp && (e.setValue(C.FIGURE_BLINK, 1), this._blinkingStartTimestamp = s + this.randomBlinkStartTimestamp(), this._blinkingEndTimestamp = s + this.randomBlinkEndTimestamp()),
        this._blinkingEndTimestamp > 0 && s > this._blinkingEndTimestamp && (e.setValue(C.FIGURE_BLINK, 0), this._blinkingEndTimestamp = 0),
        this._effectChangeTimeStamp > 0 && s > this._effectChangeTimeStamp && (e.setValue(C.FIGURE_EFFECT, this._newEffect), this._effectChangeTimeStamp = 0),
        this._numberValueEndTimestamp > 0 && s > this._numberValueEndTimestamp && (e.setValue(C.FIGURE_NUMBER_VALUE, 0), this._numberValueEndTimestamp = 0)
    }
    processUpdateMessage(s)
    {
        if (!s || !this.object)
            return;
        super.processUpdateMessage(s);
        const e = this.object && this.object.model;
        if (e) {
            if (s instanceof mE) {
                e.setValue(C.FIGURE_POSTURE, s.postureType),
                e.setValue(C.FIGURE_POSTURE_PARAMETER, s.parameter);
                return
            }
            if (s instanceof fE) {
                e.setValue(C.FIGURE_TALK, 1),
                this._talkingEndTimestamp = this.time + s.numberOfWords * 1e3;
                return
            }
            if (s instanceof yD) {
                e.setValue(C.FIGURE_IS_TYPING, s.isTyping ? 1 : 0);
                return
            }
            if (s instanceof RD) {
                e.setValue(C.FIGURE_IS_MUTED, s.isMuted ? 1 : 0);
                return
            }
            if (s instanceof AD) {
                e.setValue(C.FIGURE_IS_PLAYING_GAME, s.isPlayingGame ? 1 : 0);
                return
            }
            if (s instanceof $h) {
                e.setValue(C.HEAD_DIRECTION, s.headDirection),
                e.setValue(C.FIGURE_CAN_STAND_UP, s.canStandUp),
                e.setValue(C.FIGURE_VERTICAL_OFFSET, s.baseY);
                return
            }
            if (s instanceof TD) {
                e.setValue(C.FIGURE_GESTURE, s.gesture),
                this._gestureEndTimestamp = this.time + 3e3;
                return
            }
            if (s instanceof pD) {
                e.setValue(C.FIGURE_EXPRESSION, s.expressionType),
                this._animationEndTimestamp = ie.getExpressionTimeout(e.getValue(C.FIGURE_EXPRESSION)),
                this._animationEndTimestamp > -1 && (this._animationEndTimestamp += this.time);
                return
            }
            if (s instanceof fD) {
                e.setValue(C.FIGURE_DANCE, s.danceStyle);
                return
            }
            if (s instanceof EE) {
                e.setValue(C.FIGURE_SLEEP, s.isSleeping ? 1 : 0),
                s.isSleeping ? this._blinkingStartTimestamp = -1 : this._blinkingStartTimestamp = this.time + this.randomBlinkStartTimestamp();
                return
            }
            if (s instanceof CD) {
                e.setValue(C.FIGURE_NUMBER_VALUE, s.value),
                this._numberValueEndTimestamp = this.time + 3e3;
                return
            }
            if (s instanceof mD) {
                this.updateAvatarEffect(s.effect, s.delayMilliseconds, e);
                return
            }
            if (s instanceof gD) {
                e.setValue(C.FIGURE_CARRY_OBJECT, s.itemType),
                e.setValue(C.FIGURE_USE_OBJECT, 0),
                s.itemType === 0 ? (this._carryObjectStartTimestamp = 0, this._carryObjectEndTimestamp = 0, this._allowUseCarryObject = !1) : (this._carryObjectStartTimestamp = this.time, s.itemType < Ar.MAX_HAND_ID ? (this._carryObjectEndTimestamp = 0, this._allowUseCarryObject = s.itemType <= Ar.MAX_HAND_USE_ID) : (this._carryObjectEndTimestamp = this._carryObjectStartTimestamp + 1500, this._allowUseCarryObject = !1));
                return
            }
            if (s instanceof MD) {
                e.setValue(C.FIGURE_USE_OBJECT, s.itemType);
                return
            }
            if (s instanceof ND) {
                e.setValue(C.FIGURE_SIGN, s.signType),
                this._signEndTimestamp = this.time + 5e3;
                return
            }
            if (s instanceof ID) {
                e.setValue(C.FIGURE_FLAT_CONTROL, s.level);
                return
            }
            if (s instanceof Jh) {
                e.setValue(C.FIGURE, s.figure),
                e.setValue(C.GENDER, s.gender);
                return
            }
            if (s instanceof Zh) {
                this._selected = s.selected,
                this._reportedLocation = null;
                return
            }
            if (s instanceof OD) {
                e.setValue(C.OWN_USER, 1);
                return
            }
        }
    }
    updateAvatarEffect(s, e, t)
    {
        if (s === Ar.EFFECT_TYPE_SPLASH)
            this._effectChangeTimeStamp = Pe() + Ar.EFFECT_SPLASH_LENGTH,
            this._newEffect = Ar.EFFECT_TYPE_SWIM;
        else if (s === Ar.EFFECT_TYPE_SPLASH_DARK)
            this._effectChangeTimeStamp = Pe() + Ar.EFFECT_SPLASH_LENGTH,
            this._newEffect = Ar.EFFECT_TYPE_SWIM_DARK;
        else if (t.getValue(C.FIGURE_EFFECT) === Ar.EFFECT_TYPE_SWIM)
            this._effectChangeTimeStamp = Pe() + Ar.EFFECT_SPLASH_LENGTH,
            this._newEffect = s,
            s = Ar.EFFECT_TYPE_SPLASH;
        else if (t.getValue(C.FIGURE_EFFECT) === Ar.EFFECT_TYPE_SWIM_DARK)
            this._effectChangeTimeStamp = Pe() + Ar.EFFECT_SPLASH_LENGTH,
            this._newEffect = s,
            s = Ar.EFFECT_TYPE_SPLASH_DARK;
        else if (e === 0)
            this._effectChangeTimeStamp = 0;
        else {
            this._effectChangeTimeStamp = Pe() + e,
            this._newEffect = s;
            return
        }
        t.setValue(C.FIGURE_EFFECT, s)
    }
    mouseEvent(s, e)
    {
        let t = null;
        switch (s.type) {
        case le.MOUSE_CLICK:
            t = De.CLICK;
            break;
        case le.DOUBLE_CLICK:
            t = De.DOUBLE_CLICK;
            break;
        case le.ROLL_OVER:
            t = De.MOUSE_ENTER,
            this.object.model && this.object.model.setValue(C.FIGURE_HIGHLIGHT, 1),
            this.eventDispatcher && this.eventDispatcher.dispatchEvent(new ce(ce.MOUSE_BUTTON, this.object));
            break;
        case le.ROLL_OUT:
            t = De.MOUSE_LEAVE,
            this.object.model && this.object.model.setValue(C.FIGURE_HIGHLIGHT, 0),
            this.eventDispatcher && this.eventDispatcher.dispatchEvent(new ce(ce.MOUSE_ARROW, this.object));
            break
        }
        t && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new De(t, this.object, s.eventId, s.altKey, s.ctrlKey, s.shiftKey, s.buttonDown))
    }
    randomTalkingPauseStartTimestamp()
    {
        return 100 + Math.random() * 200
    }
    randomTalkingPauseEndTimestamp()
    {
        return 75 + Math.random() * 75
    }
    randomBlinkStartTimestamp()
    {
        return 4500 + Math.random() * 1e3
    }
    randomBlinkEndTimestamp()
    {
        return 50 + Math.random() * 200
    }
}
;
let $a = Ar;
$a.MAX_HAND_ID = 999999999;
$a.MAX_HAND_USE_ID = 999;
$a.EFFECT_TYPE_SPLASH = 28;
$a.EFFECT_SPLASH_LENGTH = 500;
$a.EFFECT_TYPE_SWIM = 29;
$a.EFFECT_TYPE_SPLASH_DARK = 184;
$a.EFFECT_TYPE_SWIM_DARK = 185;
const Hi = class  extends Va{
    constructor()
    {
        super(),
        this._sizeX = 0,
        this._sizeY = 0,
        this._sizeZ = 0,
        this._centerX = 0,
        this._centerY = 0,
        this._centerZ = 0,
        this._directions = [],
        this._mouseOver = !1,
        this._locationOffset = new w,
        this._bouncingStep = 0,
        this._storedRotateMessage = null,
        this._directionInitialized = !1,
        Hi.BOUNCING_STEPS === -1 && (Hi.BOUNCING_STEPS = ye.getValue("furni.rotation.bounce.steps", 8)),
        Hi.BOUNCING_Z === -1 && (Hi.BOUNCING_Z = ye.getValue("furni.rotation.bounce.height", .0625))
    }
    getEventTypes()
    {
        const s = [ht.STATE_CHANGE, De.CLICK, De.MOUSE_DOWN, De.MOUSE_DOWN_LONG, kt.ROOM_AD_TOOLTIP_SHOW, kt.ROOM_AD_TOOLTIP_HIDE, kt.ROOM_AD_FURNI_DOUBLE_CLICK, kt.ROOM_AD_FURNI_CLICK];
        return this.widget && s.push(Y.OPEN_WIDGET, Y.CLOSE_WIDGET), this.contextMenu && s.push(Y.OPEN_FURNI_CONTEXT_MENU, Y.CLOSE_FURNI_CONTEXT_MENU), this.mergeTypes(super.getEventTypes(), s)
    }
    initialize(s)
    {
        if (!s)
            return;
        const e = this.object && this.object.model;
        if (e) {
            if (s.logic) {
                if (s.logic.model) {
                    const t = s.logic.model.dimensions;
                    t && (this._sizeX = t.x, this._sizeY = t.y, this._sizeZ = t.z, this._centerX = this._sizeX / 2, this._centerY = this._sizeY / 2, this._centerZ = this._sizeZ / 2);
                    const r = s.logic.model.directions;
                    if (r && r.length) {
                        for (const i of r)
                            this._directions.push(i);
                        this._directions.sort((i, n) => i - n)
                    }
                }
                if (s.logic.customVars) {
                    const t = s.logic.customVars.variables;
                    t && t.length && e.setValue(C.FURNITURE_CUSTOM_VARIABLES, t)
                }
            }
            e.setValue(C.FURNITURE_SIZE_X, this._sizeX),
            e.setValue(C.FURNITURE_SIZE_Y, this._sizeY),
            e.setValue(C.FURNITURE_SIZE_Z, this._sizeZ),
            e.setValue(C.FURNITURE_CENTER_X, this._centerX),
            e.setValue(C.FURNITURE_CENTER_Y, this._centerY),
            e.setValue(C.FURNITURE_CENTER_Z, this._centerZ),
            e.setValue(C.FURNITURE_ALLOWED_DIRECTIONS, this._directions),
            e.setValue(C.FURNITURE_ALPHA_MULTIPLIER, 1)
        }
    }
    onDispose()
    {
        this._storedRotateMessage = null,
        this._directions = null,
        super.onDispose()
    }
    setObject(s)
    {
        super.setObject(s),
        s && s.getLocation().length && (this._directionInitialized = !0)
    }
    getAdClickUrl(s)
    {
        return s.getValue(C.FURNITURE_AD_URL)
    }
    handleAdClick(s, e, t)
    {
        this.eventDispatcher && this.eventDispatcher.dispatchEvent(new kt(kt.ROOM_AD_FURNI_CLICK, this.object))
    }
    update(s)
    {
        super.update(s),
        this._bouncingStep > 0 && (this._bouncingStep++, this._bouncingStep > Hi.BOUNCING_STEPS && (this._bouncingStep = 0))
    }
    processUpdateMessage(s)
    {
        if (s instanceof Gt) {
            this.processDataUpdateMessage(s);
            return
        }
        if (s instanceof bD) {
            this.processObjectHeightUpdateMessage(s);
            return
        }
        if (s instanceof pE) {
            this.processItemDataUpdateMessage(s);
            return
        }
        if (this._mouseOver = !1, s.location && s.direction) {
            if (!(s instanceof ka)) {
                const e = this.object.getDirection(),
                    t = this.object.getLocation();
                e.x !== s.direction.x && this._directionInitialized && t.x === s.location.x && t.y === s.location.y && t.z === s.location.z && (this._bouncingStep = 1, this._storedRotateMessage = new Bs(s.location, s.direction), s = null)
            }
            this._directionInitialized = !0
        }
        if (s instanceof zc && this.contextMenu && this.eventDispatcher && this.object) {
            const e = s.selected ? Y.OPEN_FURNI_CONTEXT_MENU : Y.CLOSE_FURNI_CONTEXT_MENU;
            this.eventDispatcher.dispatchEvent(new Y(e, this.object))
        }
        super.processUpdateMessage(s)
    }
    processDataUpdateMessage(s)
    {
        s && (this.object.setState(s.state, 0), s.data && s.data.writeRoomObjectModel(this.object.model), s.extra !== null && this.object.model.setValue(C.FURNITURE_EXTRAS, s.extra.toString()), this.object.model.setValue(C.FURNITURE_STATE_UPDATE_TIME, this.lastUpdateTime))
    }
    processObjectHeightUpdateMessage(s)
    {
        s && this.object.model.setValue(C.FURNITURE_SIZE_Z, s.height)
    }
    processItemDataUpdateMessage(s)
    {
        s && this.object.model.setValue(C.FURNITURE_ITEMDATA, s.data)
    }
    mouseEvent(s, e)
    {
        const t = this.getAdClickUrl(this.object.model);
        switch (s.type) {
        case le.MOUSE_MOVE:
            if (this.eventDispatcher) {
                const r = new De(De.MOUSE_MOVE, this.object, s.eventId, s.altKey, s.ctrlKey, s.shiftKey, s.buttonDown);
                r.localX = s.localX,
                r.localY = s.localY,
                r.spriteOffsetX = s.spriteOffsetX,
                r.spriteOffsetY = s.spriteOffsetY,
                this.eventDispatcher.dispatchEvent(r)
            }
            return;
        case le.ROLL_OVER:
            if (!this._mouseOver) {
                if (this.eventDispatcher) {
                    t && t.indexOf("http") === 0 && this.eventDispatcher.dispatchEvent(new kt(kt.ROOM_AD_TOOLTIP_SHOW, this.object));
                    const r = new De(De.MOUSE_ENTER, this.object, s.eventId, s.altKey, s.ctrlKey, s.shiftKey, s.buttonDown);
                    r.localX = s.localX,
                    r.localY = s.localY,
                    r.spriteOffsetX = s.spriteOffsetX,
                    r.spriteOffsetY = s.spriteOffsetY,
                    this.eventDispatcher.dispatchEvent(r)
                }
                this._mouseOver = !0
            }
            return;
        case le.ROLL_OUT:
            if (this._mouseOver) {
                if (this.eventDispatcher) {
                    t && t.indexOf("http") === 0 && this.eventDispatcher.dispatchEvent(new kt(kt.ROOM_AD_TOOLTIP_HIDE, this.object));
                    const r = new De(De.MOUSE_LEAVE, this.object, s.eventId, s.altKey, s.ctrlKey, s.shiftKey, s.buttonDown);
                    r.localX = s.localX,
                    r.localY = s.localY,
                    r.spriteOffsetX = s.spriteOffsetX,
                    r.spriteOffsetY = s.spriteOffsetY,
                    this.eventDispatcher.dispatchEvent(r)
                }
                this._mouseOver = !1
            }
            return;
        case le.DOUBLE_CLICK:
            this.useObject();
            return;
        case le.MOUSE_CLICK:
            if (this.eventDispatcher) {
                const r = new De(De.CLICK, this.object, s.eventId, s.altKey, s.ctrlKey, s.shiftKey, s.buttonDown);
                r.localX = s.localX,
                r.localY = s.localY,
                r.spriteOffsetX = s.spriteOffsetX,
                r.spriteOffsetY = s.spriteOffsetY,
                this.eventDispatcher.dispatchEvent(r),
                t && t.indexOf("http") === 0 && this.eventDispatcher.dispatchEvent(new kt(kt.ROOM_AD_TOOLTIP_HIDE, this.object)),
                t && t.length && this.handleAdClick(this.object.id, this.object.type, t)
            }
            return;
        case le.MOUSE_DOWN:
            if (this.eventDispatcher) {
                const r = new De(De.MOUSE_DOWN, this.object, s.eventId, s.altKey, s.ctrlKey, s.shiftKey, s.buttonDown);
                this.eventDispatcher.dispatchEvent(r)
            }
            return;
        case le.MOUSE_DOWN_LONG:
            if (this.eventDispatcher) {
                const r = new De(De.MOUSE_DOWN_LONG, this.object, s.eventId, s.altKey, s.ctrlKey, s.shiftKey, s.buttonDown);
                this.eventDispatcher.dispatchEvent(r)
            }
            return
        }
    }
    getLocationOffset()
    {
        return this._bouncingStep <= 0 ? null : (this._locationOffset.x = 0, this._locationOffset.y = 0, this._bouncingStep <= Hi.BOUNCING_STEPS / 2 ? this._locationOffset.z = Hi.BOUNCING_Z * this._bouncingStep : this._bouncingStep <= Hi.BOUNCING_STEPS && (this._storedRotateMessage && (super.processUpdateMessage(this._storedRotateMessage), this._storedRotateMessage = null), this._locationOffset.z = Hi.BOUNCING_Z * (Hi.BOUNCING_STEPS - this._bouncingStep)), this._locationOffset)
    }
    useObject()
    {
        if (!this.object || !this.eventDispatcher)
            return;
        const s = this.getAdClickUrl(this.object.model);
        s && s.length && this.eventDispatcher.dispatchEvent(new kt(kt.ROOM_AD_FURNI_DOUBLE_CLICK, this.object, null, s)),
        this.widget && this.eventDispatcher.dispatchEvent(new Y(Y.OPEN_WIDGET, this.object)),
        this.eventDispatcher.dispatchEvent(new ht(ht.STATE_CHANGE, this.object))
    }
    tearDown()
    {
        this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && (this.widget && this.eventDispatcher.dispatchEvent(new Y(Y.CLOSE_WIDGET, this.object)), this.contextMenu && this.eventDispatcher.dispatchEvent(new Y(Y.CLOSE_FURNI_CONTEXT_MENU, this.object))),
        super.tearDown()
    }
}
;
let Rt = Hi;
Rt.BOUNCING_STEPS = -1;
Rt.BOUNCING_Z = -1;
class PD extends Rt {
    getEventTypes()
    {
        const e = [Y.BADGE_DISPLAY_ENGRAVING, Sn.LOAD_BADGE];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    processUpdateMessage(e)
    {
        if (super.processUpdateMessage(e), !!this.object) {
            if (e instanceof Gt) {
                const t = e.data;
                t instanceof en && this.updateBadge(t.getValue(1));
                return
            }
            if (e instanceof kl) {
                e.assetName !== "loading_icon" && (this.object.model.setValue(C.FURNITURE_BADGE_ASSET_NAME, e.assetName), this.object.model.setValue(C.FURNITURE_BADGE_IMAGE_STATUS, 1), this.update(Pe()));
                return
            }
        }
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.BADGE_DISPLAY_ENGRAVING, this.object))
    }
    updateBadge(e)
    {
        e !== "" && this.eventDispatcher && (this.object.model.setValue(C.FURNITURE_BADGE_IMAGE_STATUS, -1), this.eventDispatcher.dispatchEvent(new Sn(Sn.LOAD_BADGE, this.object, e, !1)))
    }
}
const po = class  extends PD{
    getEventTypes()
    {
        const s = [Y.ACHIEVEMENT_RESOLUTION_OPEN, Y.ACHIEVEMENT_RESOLUTION_ENGRAVING, Y.ACHIEVEMENT_RESOLUTION_FAILED, Sn.LOAD_BADGE];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    processUpdateMessage(s)
    {
        if (super.processUpdateMessage(s), s instanceof kl && s.assetName !== "loading_icon" && this.object.model.setValue(C.FURNITURE_BADGE_VISIBLE_IN_STATE, po.BADGE_VISIBLE_IN_STATE), s instanceof zc) {
            if (!this.eventDispatcher || !this.object)
                return;
            this.eventDispatcher.dispatchEvent(new Y(Y.CLOSE_FURNI_CONTEXT_MENU, this.object))
        }
    }
    useObject()
    {
        if (!this.object || !this.eventDispatcher)
            return;
        let s = null;
        switch (this.object.getState(0)) {
        case po.STATE_RESOLUTION_NOT_STARTED:
        case po.STATE_RESOLUTION_IN_PROGRESS:
            s = new Y(Y.ACHIEVEMENT_RESOLUTION_OPEN, this.object);
            break;
        case po.STATE_RESOLUTION_ACHIEVED:
            s = new Y(Y.ACHIEVEMENT_RESOLUTION_ENGRAVING, this.object);
            break;
        case po.STATE_RESOLUTION_FAILED:
            s = new Y(Y.ACHIEVEMENT_RESOLUTION_FAILED, this.object);
            break
        }
        s && this.eventDispatcher.dispatchEvent(s)
    }
    updateBadge(s)
    {
        s !== po.ACH_NOT_SET && super.updateBadge(s)
    }
}
;
let Yo = po;
Yo.STATE_RESOLUTION_NOT_STARTED = 0;
Yo.STATE_RESOLUTION_IN_PROGRESS = 1;
Yo.STATE_RESOLUTION_ACHIEVED = 2;
Yo.STATE_RESOLUTION_FAILED = 3;
Yo.ACH_NOT_SET = "ach_0";
Yo.BADGE_VISIBLE_IN_STATE = 2;
class Wz extends Rt {
    constructor()
    {
        super(),
        this.onRoomToObjectOwnAvatarMoveEvent = this.onRoomToObjectOwnAvatarMoveEvent.bind(this)
    }
    initialize(e)
    {
        super.initialize(e),
        this.eventDispatcher && this.eventDispatcher.addEventListener(Hc.ROAME_MOVE_TO, this.onRoomToObjectOwnAvatarMoveEvent)
    }
    tearDown()
    {
        this.eventDispatcher && this.eventDispatcher.removeEventListener(Hc.ROAME_MOVE_TO, this.onRoomToObjectOwnAvatarMoveEvent),
        super.tearDown()
    }
    onRoomToObjectOwnAvatarMoveEvent(e)
    {
        if (!e || !this.object)
            return;
        const t = this.object.getLocation(),
            r = e.targetLocation;
        if (!r)
            return;
        let i = this.object.model.getValue(C.FURNITURE_SIZE_X),
            n = this.object.model.getValue(C.FURNITURE_SIZE_Y);
        const o = (Math.floor(this.object.getDirection().x) + 45) % 360 / 90;
        (o === 1 || o === 3) && ([i, n] = [n, i]),
        r.x >= t.x && r.x < t.x + i && r.y >= t.y && r.y < t.y + n ? this.object.setState(1, 0) : this.object.setState(0, 0)
    }
}
class Yz extends Rt {
    getEventTypes()
    {
        const e = [Y.CLOTHING_CHANGE];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    initialize(e)
    {
        super.initialize(e);
        const t = this.object.model.getValue(C.FURNITURE_DATA);
        this.updateClothingData(t)
    }
    processUpdateMessage(e)
    {
        super.processUpdateMessage(e),
        e instanceof Gt && e.data && this.updateClothingData(e.data.getLegacyString())
    }
    updateClothingData(e)
    {
        if (!e || !e.length)
            return;
        const [t, r] = e.split(",");
        t && t.length && this.object.model.setValue(C.FURNITURE_CLOTHING_BOY, t),
        r && r.length && this.object.model.setValue(C.FURNITURE_CLOTHING_GIRL, r)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.CLOTHING_CHANGE, this.object))
    }
}
class zz extends Rt {
    getEventTypes()
    {
        const e = [ht.STATE_CHANGE];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    mouseEvent(e, t)
    {
        if (!e || !t || !this.object)
            return;
        let r = null;
        switch (e.type) {
        case le.DOUBLE_CLICK:
            switch (e.spriteTag) {
            case "start_stop":
                r = new ht(ht.STATE_CHANGE, this.object, 1);
                break;
            case "reset":
                r = new ht(ht.STATE_CHANGE, this.object, 2);
                break
            }
            if (this.eventDispatcher && r) {
                this.eventDispatcher.dispatchEvent(r);
                return
            }
            break
        }
        super.mouseEvent(e, t)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ht(ht.STATE_CHANGE, this.object, 1))
    }
}
class Kz extends Rt {
    processUpdateMessage(e)
    {
        super.processUpdateMessage(e),
        this.object && this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && this.object.model.setValue(Zt.INFOSTAND_EXTRA_PARAM, Zt.CRACKABLE_FURNI)
    }
}
class qz extends Rt {
    get widget()
    {
        return ve.CRAFTING
    }
}
class Xz extends Rt {
    getEventTypes()
    {
        const e = [Y.CREDITFURNI];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    initialize(e)
    {
        super.initialize(e);
        let t = 0;
        e.logic && e.logic.credits && e.logic.credits !== "" && e.logic.credits.length > 0 && (t = parseInt(e.logic.credits)),
        this.object.model.setValue(C.FURNITURE_CREDIT_VALUE, t)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || (this.eventDispatcher.dispatchEvent(new Y(Y.CREDITFURNI, this.object)), super.useObject())
    }
}
class Ss extends Rt {
    getEventTypes()
    {
        const e = [ce.MOUSE_BUTTON, ce.MOUSE_ARROW];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    mouseEvent(e, t)
    {
        if (!(!e || !t || !this.object)) {
            switch (e.type) {
            case le.ROLL_OVER:
                this.eventDispatcher && this.eventDispatcher.dispatchEvent(new ce(ce.MOUSE_BUTTON, this.object));
                break;
            case le.ROLL_OUT:
                this.eventDispatcher && this.eventDispatcher.dispatchEvent(new ce(ce.MOUSE_ARROW, this.object));
                break
            }
            super.mouseEvent(e, t)
        }
    }
}
class Qz extends Ss {
    constructor()
    {
        super(...arguments),
        this._state = 1
    }
    getEventTypes()
    {
        const e = [Jn.PLAY_SOUND_AT_PITCH];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    processUpdateMessage(e)
    {
        super.processUpdateMessage(e),
        e instanceof Gt && (this._state !== -1 && e.state !== this._state && this.dispatchSoundEvent(this.object.location.z), this._state = e.state)
    }
    dispatchSoundEvent(e)
    {
        const t = Math.pow(2, e - 1.2);
        this.eventDispatcher.dispatchEvent(new Jn(Jn.PLAY_SOUND_AT_PITCH, this.object, "FURNITURE_cuckoo_clock", t))
    }
}
class Jz extends Ss {
    getEventTypes()
    {
        const e = [Y.STACK_HEIGHT];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    initialize(e)
    {
        super.initialize(e),
        this.object && this.object.model && this.object.model.setValue(C.FURNITURE_ALWAYS_STACKABLE, 1)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || (this.eventDispatcher.dispatchEvent(new Y(Y.STACK_HEIGHT, this.object)), super.useObject())
    }
}
class Zz extends Rt {
    constructor()
    {
        super(),
        this._noTags = !1,
        this._noTagsLastStateActivate = !1
    }
    getEventTypes()
    {
        const e = [ce.DICE_ACTIVATE, ce.DICE_OFF];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    mouseEvent(e, t)
    {
        if (!e || !t || !this.object)
            return;
        let r = null;
        switch (e.type) {
        case le.DOUBLE_CLICK:
            this._noTags ? !this._noTagsLastStateActivate || this.object.getState(0) === 0 || this.object.getState(0) === 100 ? (r = new ce(ce.DICE_ACTIVATE, this.object), this._noTagsLastStateActivate = !0) : (r = new ce(ce.DICE_OFF, this.object), this._noTagsLastStateActivate = !1) : e.spriteTag === "activate" || this.object.getState(0) === 0 || this.object.getState(0) === 100 ? r = new ce(ce.DICE_ACTIVATE, this.object) : e.spriteTag === "deactivate" && (r = new ce(ce.DICE_OFF, this.object)),
            r && this.eventDispatcher && this.eventDispatcher.dispatchEvent(r);
            return
        }
        super.mouseEvent(e, t)
    }
}
class $z extends Rt {
    getEventTypes()
    {
        const e = [Y.ECOTRONBOX];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.ECOTRONBOX, this.object))
    }
}
class e5 extends Rt {
    constructor()
    {
        super(),
        this._showStateOnceRendered = !1,
        this._updateCount = 0
    }
    getEventTypes()
    {
        const e = [Y.INERNAL_LINK];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    initialize(e)
    {
        super.initialize(e),
        e.logic && e.logic.action && e.logic.action.startState === 1 && (this._showStateOnceRendered = !0)
    }
    update(e)
    {
        super.update(e),
        this._showStateOnceRendered && (this._updateCount++, this._showStateOnceRendered && this._updateCount > 20 && (this.setAutomaticStateIndex(1), this._showStateOnceRendered = !1))
    }
    setAutomaticStateIndex(e)
    {
        this.object && this.object.model && this.object.model.setValue(C.FURNITURE_AUTOMATIC_STATE_INDEX, e)
    }
    mouseEvent(e, t)
    {
        !e || !t || (e.type === le.DOUBLE_CLICK && this.setAutomaticStateIndex(0), super.mouseEvent(e, t))
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.INERNAL_LINK, this.object))
    }
}
class t5 extends Rt {
    getEventTypes()
    {
        const e = [Y.ROOM_LINK];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    initialize(e)
    {
        super.initialize(e),
        e.logic && e.logic.action && e.logic.action.link && e.logic.action.link !== "" && e.logic.action.link.length > 0 && this.object && this.object.model && this.object.model.setValue(C.FURNITURE_INTERNAL_LINK, e.logic.action.link)
    }
    onDispose()
    {
        this._timer && (clearTimeout(this._timer), this._timer = null),
        super.onDispose()
    }
    setAutomaticStateIndex(e)
    {
        this.object && this.object.model && this.object.model.setValue(C.FURNITURE_AUTOMATIC_STATE_INDEX, e)
    }
    useObject()
    {
        this.setAutomaticStateIndex(1),
        this._timer && (clearTimeout(this._timer), this._timer = null),
        this._timer = setTimeout(() => {
            this.setAutomaticStateIndex(0),
            this._timer = null
        }, 2500),
        !(!this.object || !this.eventDispatcher) && this.eventDispatcher.dispatchEvent(new Y(Y.ROOM_LINK, this.object))
    }
}
class s5 extends Rt {
    getEventTypes()
    {
        const e = [Y.EFFECTBOX_OPEN_DIALOG];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.EFFECTBOX_OPEN_DIALOG, this.object))
    }
    get contextMenu()
    {
        return xt.EFFECT_BOX
    }
}
class r5 extends Ss {
    getEventTypes()
    {
        const e = [Y.EXTERNAL_IMAGE];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    initialize(e)
    {
        if (super.initialize(e), !!e && this.object && this.object.model) {
            let t = "";
            e.logic && e.logic.maskType && e.logic.maskType !== "" && e.logic.maskType.length > 0 && (t = e.logic.maskType),
            this.object.model.setValue(C.FURNITURE_USES_PLANE_MASK, 0),
            this.object.model.setValue(C.FURNITURE_PLANE_MASK_TYPE, t)
        }
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || (this.eventDispatcher.dispatchEvent(new Y(Y.EXTERNAL_IMAGE, this.object)), super.useObject())
    }
}
class i5 extends Rt {
    getEventTypes()
    {
        const e = [ht.STATE_CHANGE];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    initialize(e)
    {
        super.initialize(e),
        e.logic && e.logic.particleSystems && e.logic.particleSystems.length && this.object.model.setValue(C.FURNITURE_FIREWORKS_DATA, e.logic.particleSystems)
    }
    mouseEvent(e, t)
    {
        if (!e || !t || !this.object)
            return;
        let r = null;
        switch (e.type) {
        case le.DOUBLE_CLICK:
            switch (e.spriteTag) {
            case "start_stop":
                r = new ht(ht.STATE_CHANGE, this.object, 1);
                break;
            case "reset":
                r = new ht(ht.STATE_CHANGE, this.object, 2);
                break
            }
            if (this.eventDispatcher && r) {
                this.eventDispatcher.dispatchEvent(r);
                return
            }
            break
        }
        super.mouseEvent(e, t)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ht(ht.STATE_CHANGE, this.object, 0))
    }
}
const Oc = class  extends Ss{
    constructor()
    {
        super(),
        this._currentState = -1,
        this._currentLocation = null
    }
    getEventTypes()
    {
        const s = [fr.ADD_HOLE, fr.REMOVE_HOLE];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    onDispose()
    {
        this._currentState === Oc.STATE_HOLE && this.eventDispatcher.dispatchEvent(new fr(fr.REMOVE_HOLE, this.object)),
        super.onDispose()
    }
    update(s)
    {
        super.update(s),
        this.handleAutomaticStateUpdate()
    }
    processUpdateMessage(s)
    {
        if (super.processUpdateMessage(s), !this.object)
            return;
        s instanceof Gt && this.handleStateUpdate(this.object.getState(0));
        const e = this.object.getLocation();
        this._currentLocation ? (e.x !== this._currentLocation.x || e.y !== this._currentLocation.y) && this._currentState === Oc.STATE_HOLE && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new fr(fr.ADD_HOLE, this.object)) : this._currentLocation = new w,
        this._currentLocation.assign(e)
    }
    handleStateUpdate(s)
    {
        s !== this._currentState && (this.eventDispatcher && (s === Oc.STATE_HOLE ? this.eventDispatcher.dispatchEvent(new fr(fr.ADD_HOLE, this.object)) : this._currentState === Oc.STATE_HOLE && this.eventDispatcher.dispatchEvent(new fr(fr.REMOVE_HOLE, this.object))), this._currentState = s)
    }
    handleAutomaticStateUpdate()
    {
        if (!this.object)
            return;
        const s = this.object.model;
        if (!s)
            return;
        const e = s.getValue(C.FURNITURE_AUTOMATIC_STATE_INDEX);
        isNaN(e) || this.handleStateUpdate(e % 2)
    }
}
;
let LD = Oc;
LD.STATE_HOLE = 0;
const df = class  extends Ss{
    constructor()
    {
        super(...arguments),
        this._state = -1
    }
    initialize(s)
    {
        super.initialize(s),
        this.object && this.object.model.setValue(C.FURNITURE_FRIENDFURNI_ENGRAVING, this.engravingDialogType)
    }
    processUpdateMessage(s)
    {
        if (s instanceof Gt) {
            const e = s.data;
            e ? this._state = e.state : this._state = s.state
        }
        super.processUpdateMessage(s)
    }
    getEventTypes()
    {
        const s = [Y.FRIEND_FURNITURE_ENGRAVING];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || (this._state === df.STATE_LOCKED ? this.eventDispatcher.dispatchEvent(new Y(Y.FRIEND_FURNITURE_ENGRAVING, this.object)) : super.useObject())
    }
    get engravingDialogType()
    {
        return 0
    }
    get contextMenu()
    {
        return this._state === df.STATE_UNLOCKED ? xt.FRIEND_FURNITURE : xt.DUMMY
    }
}
;
let _u = df;
_u.STATE_UNINITIALIZED = -1;
_u.STATE_UNLOCKED = 0;
_u.STATE_LOCKED = 1;
const Sc = class  extends Ss{
    getEventTypes()
    {
        const s = [Sn.LOAD_BADGE, Y.GUILD_FURNI_CONTEXT_MENU, Y.CLOSE_FURNI_CONTEXT_MENU];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    processUpdateMessage(s)
    {
        if (super.processUpdateMessage(s), s instanceof Gt) {
            const e = s.data;
            e instanceof en && (this.updateGroupId(e.getValue(Sc.GROUPID_KEY)), this.updateBadge(e.getValue(Sc.BADGE_KEY)), this.updateColors(e.getValue(Sc.COLOR1_KEY), e.getValue(Sc.COLOR2_KEY)))
        } else
            s instanceof kl ? s.assetName !== "loading_icon" && (this.object.model.setValue(C.FURNITURE_GUILD_CUSTOMIZED_ASSET_NAME, s.assetName), this.update(Pe())) : s instanceof zc && (s.selected || this.eventDispatcher.dispatchEvent(new Y(Y.CLOSE_FURNI_CONTEXT_MENU, this.object)))
    }
    updateGroupId(s)
    {
        this.object.model.setValue(C.FURNITURE_GUILD_CUSTOMIZED_GUILD_ID, parseInt(s))
    }
    updateBadge(s)
    {
        this.eventDispatcher.dispatchEvent(new Sn(Sn.LOAD_BADGE, this.object, s, !0))
    }
    updateColors(s, e)
    {
        this.object.model.setValue(C.FURNITURE_GUILD_CUSTOMIZED_COLOR_1, parseInt(s, 16)),
        this.object.model.setValue(C.FURNITURE_GUILD_CUSTOMIZED_COLOR_2, parseInt(e, 16))
    }
    mouseEvent(s, e)
    {
        if (!(!s || !e || !this.object)) {
            switch (s.type) {
            case le.MOUSE_CLICK:
                this.openContextMenu()
            }
            super.mouseEvent(s, e)
        }
    }
    openContextMenu()
    {
        this.eventDispatcher.dispatchEvent(new Y(Y.GUILD_FURNI_CONTEXT_MENU, this.object))
    }
}
;
let sc = Sc;
sc.GROUPID_KEY = 1;
sc.BADGE_KEY = 2;
sc.COLOR1_KEY = 3;
sc.COLOR2_KEY = 4;
class n5 extends sc {
    getEventTypes()
    {
        const e = [Y.INERNAL_LINK];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    updateGroupId(e)
    {
        super.updateGroupId(e),
        this.object.model.setValue(C.FURNITURE_INTERNAL_LINK, `groupforum/${e}`)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || (this.eventDispatcher.dispatchEvent(new Y(Y.INERNAL_LINK, this.object)), super.useObject())
    }
}
class a5 extends Rt {
    getEventTypes()
    {
        const e = [ce.USE_HABBOWHEEL];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ce(ce.USE_HABBOWHEEL, this.object))
    }
}
const UD = class  extends Rt{
    constructor()
    {
        super(...arguments),
        this._state = -1
    }
    getEventTypes()
    {
        return [Y.HIGH_SCORE_DISPLAY, Y.HIDE_HIGH_SCORE_DISPLAY]
    }
    tearDown()
    {
        this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && this.eventDispatcher.dispatchEvent(new Y(Y.HIDE_HIGH_SCORE_DISPLAY, this.object)),
        super.tearDown()
    }
    processUpdateMessage(s)
    {
        super.processUpdateMessage(s),
        this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && s instanceof Gt && (s.state === UD.SHOW_WIDGET_IN_STATE ? this.eventDispatcher.dispatchEvent(new Y(Y.HIGH_SCORE_DISPLAY, this.object)) : this.eventDispatcher.dispatchEvent(new Y(Y.HIDE_HIGH_SCORE_DISPLAY, this.object)), this._state = s.state)
    }
}
;
let wD = UD;
wD.SHOW_WIDGET_IN_STATE = 1;
class o5 extends Rt {
    getEventTypes()
    {
        const e = [ht.STATE_CHANGE];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    mouseEvent(e, t)
    {
        if (!e || !t || !this.object)
            return;
        let r = null;
        switch (e.type) {
        case le.DOUBLE_CLICK:
            switch (e.spriteTag) {
            case "off":
                r = new ht(ht.STATE_CHANGE, this.object, 3);
                break
            }
            break;
        case le.MOUSE_CLICK:
            switch (e.spriteTag) {
            case "inc":
                r = new ht(ht.STATE_CHANGE, this.object, 2);
                break;
            case "dec":
                r = new ht(ht.STATE_CHANGE, this.object, 1);
                break
            }
            break
        }
        if (this.eventDispatcher && r) {
            this.eventDispatcher.dispatchEvent(r);
            return
        }
        super.mouseEvent(e, t)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ht(ht.STATE_CHANGE, this.object, 3))
    }
}
class l5 extends _u {
    get engravingDialogType()
    {
        return Vo.HABBOWEEN
    }
}
class c5 extends Ss {
    constructor()
    {
        super(),
        this._nextState = 0,
        this._nextStateTimestamp = 0
    }
    update(e)
    {
        if (this._nextStateTimestamp > 0 && e >= this._nextStateTimestamp) {
            this._nextStateTimestamp = 0;
            const t = new Lr;
            t.setString(this._nextState.toString()),
            super.processUpdateMessage(new Gt(this._nextState, t, this._nextStateExtra))
        }
        super.update(e)
    }
    processUpdateMessage(e)
    {
        if (e instanceof Gt) {
            this.processUpdate(e);
            return
        }
        super.processUpdateMessage(e)
    }
    processUpdate(e)
    {
        if (!e)
            return;
        const t = ~~(e.state / 1e3),
            r = ~~(e.state % 1e3);
        if (r)
            this._nextState = t,
            this._nextStateExtra = e.extra,
            this._nextStateTimestamp = this.time + r;
        else {
            this._nextStateTimestamp = 0;
            const i = new Lr;
            i.setString(t.toString()),
            super.processUpdateMessage(new Gt(t, i, e.extra))
        }
    }
}
class u5 extends Rt {
    constructor()
    {
        super(...arguments),
        this._showStateOnceRendered = !1,
        this._updateCount = 0
    }
    getEventTypes()
    {
        const e = [Y.INERNAL_LINK];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    initialize(e)
    {
        super.initialize(e),
        e.logic && e.logic.action && (this.object.model.setValue(C.FURNITURE_INTERNAL_LINK, e.logic.action.link), e.logic.action.startState === 1 && (this._showStateOnceRendered = !0))
    }
    update(e)
    {
        super.update(e),
        this._showStateOnceRendered && (this._updateCount++, this._showStateOnceRendered && this._updateCount === 20 && (this.setAutomaticStateIndex(1), this._showStateOnceRendered = !1))
    }
    setAutomaticStateIndex(e)
    {
        this.object && this.object.model && this.object.model.setValue(C.FURNITURE_AUTOMATIC_STATE_INDEX, e)
    }
    mouseEvent(e, t)
    {
        !e || !t || (e.type === le.DOUBLE_CLICK && this._showStateOnceRendered && this.setAutomaticStateIndex(0), super.mouseEvent(e, t))
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.INERNAL_LINK, this.object))
    }
}
class h5 extends Ss {
    constructor()
    {
        super(...arguments),
        this._disposeEventsAllowed = !1,
        this._isInitialized = !1,
        this._currentState = -1
    }
    getEventTypes()
    {
        const e = [ce.JUKEBOX_START, ce.JUKEBOX_MACHINE_STOP, ce.JUKEBOX_DISPOSE, ce.JUKEBOX_INIT, Y.JUKEBOX_PLAYLIST_EDITOR];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    onDispose()
    {
        this.requestDispose(),
        super.onDispose()
    }
    processUpdateMessage(e)
    {
        if (super.processUpdateMessage(e), this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && (this._isInitialized || this.requestInit(), this.object.model.setValue(Zt.INFOSTAND_EXTRA_PARAM, Zt.JUKEBOX), e instanceof Gt)) {
            const t = this.object.getState(0);
            t !== this._currentState && (this._currentState = t, t === 1 ? this.requestPlayList() : t === 0 && this.requestStopPlaying())
        }
    }
    requestInit()
    {
        !this.object || !this.eventDispatcher || (this._disposeEventsAllowed = !0, this.eventDispatcher.dispatchEvent(new ce(ce.JUKEBOX_INIT, this.object)), this._isInitialized = !0)
    }
    requestPlayList()
    {
        !this.object || !this.eventDispatcher || (this._disposeEventsAllowed = !0, this.eventDispatcher.dispatchEvent(new ce(ce.JUKEBOX_START, this.object)))
    }
    requestStopPlaying()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ce(ce.JUKEBOX_MACHINE_STOP, this.object))
    }
    requestDispose()
    {
        !this._disposeEventsAllowed || !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ce(ce.JUKEBOX_DISPOSE, this.object))
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || (this.eventDispatcher.dispatchEvent(new Y(Y.JUKEBOX_PLAYLIST_EDITOR, this.object)), this.eventDispatcher.dispatchEvent(new ht(ht.STATE_CHANGE, this.object, -1)))
    }
}
class d5 extends _u {
    get engravingDialogType()
    {
        return Vo.LOVE_LOCK
    }
}
const _h = class  extends Rt{
    getEventTypes()
    {
        const s = [Y.MANNEQUIN];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    processUpdateMessage(s)
    {
        super.processUpdateMessage(s),
        s instanceof Gt && (s.data.writeRoomObjectModel(this.object.model), this.processObjectData())
    }
    processObjectData()
    {
        if (!this.object || !this.object.model)
            return;
        const s = new Ka;
        s.initializeFromRoomObjectModel(this.object.model),
        this.object.model.setValue(C.FURNITURE_MANNEQUIN_GENDER, s.getValue(_h.GENDER)),
        this.object.model.setValue(C.FURNITURE_MANNEQUIN_FIGURE, s.getValue(_h.FIGURE)),
        this.object.model.setValue(C.FURNITURE_MANNEQUIN_NAME, s.getValue(_h.OUTFIT_NAME))
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.MANNEQUIN, this.object))
    }
}
;
let Wd = _h;
Wd.GENDER = "GENDER";
Wd.FIGURE = "FIGURE";
Wd.OUTFIT_NAME = "OUTFIT_NAME";
class _5 extends Ss {
    getEventTypes()
    {
        const e = [Y.MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG, this.object))
    }
    get contextMenu()
    {
        return xt.MONSTERPLANT_SEED
    }
}
class g5 extends Ss {
    initialize(e)
    {
        super.initialize(e),
        this.object && this.object.model && this.object.model.setValue(C.FURNITURE_IS_VARIABLE_HEIGHT, 1)
    }
}
class f5 extends Ss {
    getEventTypes()
    {
        const e = [Y.MYSTERYBOX_OPEN_DIALOG];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.MYSTERYBOX_OPEN_DIALOG, this.object))
    }
    get contextMenu()
    {
        return xt.MYSTERY_BOX
    }
}
class m5 extends Ss {
    getEventTypes()
    {
        const e = [Y.MYSTERYTROPHY_OPEN_DIALOG];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.MYSTERYTROPHY_OPEN_DIALOG, this.object))
    }
    get contextMenu()
    {
        return xt.MYSTERY_TROPHY
    }
}
class E5 extends Rt {
    getEventTypes()
    {
        const e = [ce.ENTER_ONEWAYDOOR];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ce(ce.ENTER_ONEWAYDOOR, this.object))
    }
}
class p5 extends Rt {
    getEventTypes()
    {
        const e = [Y.PET_PRODUCT_MENU];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    processUpdateMessage(e)
    {
        super.processUpdateMessage(e),
        this.object && this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && this.object.model.setValue(Zt.INFOSTAND_EXTRA_PARAM, Zt.USABLE_PRODUCT)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.PET_PRODUCT_MENU, this.object))
    }
}
class I5 extends Rt {
    getEventTypes()
    {
        const e = [Y.PLACEHOLDER];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.PLACEHOLDER, this.object))
    }
}
class T5 extends Rt {
    initialize(e)
    {
        super.initialize(e),
        e.logic && e.logic.planetSystems && this.object.model.setValue(C.FURNITURE_PLANETSYSTEM_DATA, e.logic.planetSystems)
    }
}
const ll = class  extends Rt{
    getEventTypes()
    {
        const s = [Y.PRESENT];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    initialize(s)
    {
        super.initialize(s),
        s.logic && s.logic.particleSystems && s.logic.particleSystems.length && this.object.model.setValue(C.FURNITURE_FIREWORKS_DATA, s.logic.particleSystems)
    }
    processUpdateMessage(s)
    {
        super.processUpdateMessage(s),
        s instanceof Gt && (s.data.writeRoomObjectModel(this.object.model), this.updateStuffData()),
        s instanceof DD && s.numberKey === C.FURNITURE_DISABLE_PICKING_ANIMATION && this.object.model.setValue(C.FURNITURE_DISABLE_PICKING_ANIMATION, s.numberValue)
    }
    updateStuffData()
    {
        if (!this.object || !this.object.model)
            return;
        const s = new Ka;
        s.initializeFromRoomObjectModel(this.object.model);
        const e = s.getValue(ll.MESSAGE),
            t = this.object.model.getValue(C.FURNITURE_DATA);
        !e && typeof t == "string" ? this.object.model.setValue(C.FURNITURE_DATA, t.substr(1)) : this.object.model.setValue(C.FURNITURE_DATA, s.getValue(ll.MESSAGE)),
        this.writeToModel(C.FURNITURE_TYPE_ID, s.getValue(ll.PRODUCT_CODE)),
        this.writeToModel(C.FURNITURE_PURCHASER_NAME, s.getValue(ll.PURCHASER_NAME)),
        this.writeToModel(C.FURNITURE_PURCHASER_FIGURE, s.getValue(ll.PURCHASER_FIGURE))
    }
    writeToModel(s, e)
    {
        e && this.object.model.setValue(s, e)
    }
    mouseEvent(s, e)
    {
        if (!(!s || !e || !this.object)) {
            switch (s.type) {
            case le.ROLL_OVER:
                this.eventDispatcher.dispatchEvent(new ce(ce.MOUSE_BUTTON, this.object));
                break;
            case le.ROLL_OUT:
                this.eventDispatcher.dispatchEvent(new ce(ce.MOUSE_ARROW, this.object));
                break
            }
            super.mouseEvent(s, e)
        }
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.PRESENT, this.object))
    }
}
;
let rc = ll;
rc.MESSAGE = "MESSAGE";
rc.PRODUCT_CODE = "PRODUCT_CODE";
rc.EXTRA_PARAM = "EXTRA_PARAM";
rc.PURCHASER_NAME = "PURCHASER_NAME";
rc.PURCHASER_FIGURE = "PURCHASER_FIGURE";
class R5 extends Ss {
    getEventTypes()
    {
        const e = [Y.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG, this.object))
    }
    get contextMenu()
    {
        return xt.PURCHASABLE_CLOTHING
    }
}
const Cc = class  extends Ss{
    constructor()
    {
        super(),
        this.updateInterval = Va.DEFAULT_UPDATE_INTERVAL,
        this._oldLocation = new w
    }
    processUpdateMessage(s)
    {
        if (!s)
            return;
        const e = s instanceof ka;
        if (this.object && !e && s.location) {
            const t = this.object.getLocation(),
                r = w.dif(s.location, t);
            if (r && Math.abs(r.x) < 2 && Math.abs(r.y) < 2) {
                let i = t;
                (Math.abs(r.x) > 1 || Math.abs(r.y) > 1) && (i = w.sum(t, w.product(r, .5))),
                super.processUpdateMessage(new ka(i, s.location, s.direction));
                return
            }
        }
        if (s.location && !e && super.processUpdateMessage(new ka(s.location, s.location, s.direction)), s instanceof Gt) {
            s.state > 0 ? this.updateInterval = Va.DEFAULT_UPDATE_INTERVAL / this.getUpdateIntervalValue(s.state) : this.updateInterval = 1,
            this.handleDataUpdate(s);
            return
        }
        e && s.isSlide && (this.updateInterval = Va.DEFAULT_UPDATE_INTERVAL),
        super.processUpdateMessage(s)
    }
    getUpdateIntervalValue(s)
    {
        return s / Cc.MAX_ANIMATION_COUNT
    }
    getAnimationValue(s)
    {
        return s % Cc.MAX_ANIMATION_COUNT
    }
    handleDataUpdate(s)
    {
        const e = this.getAnimationValue(s.state);
        if (e !== s.state) {
            const t = new Lr;
            t.setString(e.toString()),
            s = new Gt(e, t, s.extra)
        }
        super.processUpdateMessage(s)
    }
    update(s)
    {
        this.object && (this._oldLocation.assign(this.object.getLocation()), super.update(s), w.dif(this.object.getLocation(), this._oldLocation).length === 0 && this.object.getState(0) !== Cc.ANIMATION_NOT_MOVING && this.object.setState(Cc.ANIMATION_NOT_MOVING, 0))
    }
}
;
let Yd = Cc;
Yd.ANIMATION_NOT_MOVING = 0;
Yd.ANIMATION_MOVING = 1;
Yd.MAX_ANIMATION_COUNT = 10;
class O5 extends Rt {
    getEventTypes()
    {
        const e = [ht.STATE_RANDOM];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ht(ht.STATE_RANDOM, this.object))
    }
}
class S5 extends Ss {
    get contextMenu()
    {
        return xt.RANDOM_TELEPORT
    }
}
class C5 extends Rt {
    getEventTypes()
    {
        const e = [vi.RODRE_CURRENT_USER_ID];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    update(e)
    {
        if (super.update(e), this.object && this.object.model) {
            this.object.model.getValue(C.SESSION_CURRENT_USER_ID) || this.eventDispatcher.dispatchEvent(new vi(vi.RODRE_CURRENT_USER_ID, this.object));
            const t = this.object.model.getValue(C.FURNITURE_DATA).renterId,
                r = this.object.model.getValue(C.SESSION_CURRENT_USER_ID);
            t ? parseInt(t) === r ? this.object.setState(2, 0) : this.object.setState(1, 0) : this.object.setState(0, 0)
        }
    }
    get widget()
    {
        return ve.RENTABLESPACE
    }
}
class A5 extends Ss {
    constructor()
    {
        super(),
        this._roomColorUpdated = !1
    }
    getEventTypes()
    {
        const e = [Y.BACKGROUND_COLOR, Ma.ROOM_BACKGROUND_COLOR];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    onDispose()
    {
        this._roomColorUpdated && (this.eventDispatcher && this.object && this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && this.eventDispatcher.dispatchEvent(new Ma(Ma.ROOM_BACKGROUND_COLOR, this.object, !1, 0, 0, 0)), this._roomColorUpdated = !1),
        super.onDispose()
    }
    processUpdateMessage(e)
    {
        super.processUpdateMessage(e),
        e instanceof Gt && (e.data.writeRoomObjectModel(this.object.model), this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && this.processColorUpdate())
    }
    processColorUpdate()
    {
        if (!this.object || !this.object.model)
            return;
        const e = new kc;
        e.initializeFromRoomObjectModel(this.object.model);
        const t = e.getValue(0),
            r = e.getValue(1),
            i = e.getValue(2),
            n = e.getValue(3);
        t > -1 && r > -1 && i > -1 && n > -1 && (this.object.model.setValue(C.FURNITURE_ROOM_BACKGROUND_COLOR_HUE, r), this.object.model.setValue(C.FURNITURE_ROOM_BACKGROUND_COLOR_SATURATION, i), this.object.model.setValue(C.FURNITURE_ROOM_BACKGROUND_COLOR_LIGHTNESS, n), this.object.setState(t, 0), this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Ma(Ma.ROOM_BACKGROUND_COLOR, this.object, t === 1, r, i, n)), this._roomColorUpdated = !0)
    }
    mouseEvent(e, t)
    {
        if (!(!e || !t || !this.object)) {
            switch (e.type) {
            case le.DOUBLE_CLICK:
                this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Y(Y.BACKGROUND_COLOR, this.object));
                return
            }
            super.mouseEvent(e, t)
        }
    }
}
const Oi = class  extends Rt{
    constructor()
    {
        super(),
        this._disableFurnitureSelection = !0,
        this._hasClickUrl = !1
    }
    getEventTypes()
    {
        const s = [kt.ROOM_AD_LOAD_IMAGE];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    initialize(s)
    {
        super.initialize(s),
        this._disableFurnitureSelection && this.object.model.setValue(C.FURNITURE_SELECTION_DISABLED, 1)
    }
    processUpdateMessage(s)
    {
        super.processUpdateMessage(s),
        s instanceof Gt && this.processAdDataUpdateMessage(s),
        s instanceof Nr && this.processAdUpdate(s)
    }
    processAdDataUpdateMessage(s)
    {
        if (!s)
            return;
        const e = new Ka;
        e.initializeFromRoomObjectModel(this.object.model);
        const t = parseInt(e.getValue(Oi.STATE));
        !isNaN(t) && this.object.getState(0) !== t && this.object.setState(t, 0);
        const r = e.getValue(Oi.IMAGEURL_KEY),
            i = this.object.model.getValue(C.FURNITURE_BRANDING_IMAGE_URL);
        (!i || i !== r) && (this.object.model.setValue(C.FURNITURE_BRANDING_IMAGE_URL, r), this.object.model.setValue(C.FURNITURE_BRANDING_IMAGE_STATUS, 0), this.downloadBackground());
        const n = e.getValue(Oi.CLICKURL_KEY);
        if (n) {
            const h = this.object.model.getValue(C.FURNITURE_BRANDING_URL);
            (!h || h !== n) && this.object.model && this.object.model.setValue(C.FURNITURE_BRANDING_URL, n)
        }
        const o = parseInt(e.getValue(Oi.OFFSETX_KEY)),
            l = parseInt(e.getValue(Oi.OFFSETY_KEY)),
            c = parseInt(e.getValue(Oi.OFFSETZ_KEY));
        isNaN(o) || this.object.model.setValue(C.FURNITURE_BRANDING_OFFSET_X, o),
        isNaN(l) || this.object.model.setValue(C.FURNITURE_BRANDING_OFFSET_Y, l),
        isNaN(c) || this.object.model.setValue(C.FURNITURE_BRANDING_OFFSET_Z, c);
        let u = Oi.IMAGEURL_KEY + "=" + (r !== null ? r : "") + "   ";
        this._hasClickUrl && (u = u + (Oi.CLICKURL_KEY + "=" + (n !== null ? n : "") + "    ")),
        u = u + (Oi.OFFSETX_KEY + "=" + o + "   "),
        u = u + (Oi.OFFSETY_KEY + "=" + l + "   "),
        u = u + (Oi.OFFSETZ_KEY + "=" + c + "   "),
        this.object.model.setValue(Zt.INFOSTAND_EXTRA_PARAM, Zt.BRANDING_OPTIONS + u)
    }
    processAdUpdate(s)
    {
        if (!(!s || !this.object))
            switch (s.type) {
            case Nr.IMAGE_LOADED:
                this.object.model.setValue(C.FURNITURE_BRANDING_IMAGE_STATUS, 1);
                break;
            case Nr.IMAGE_LOADING_FAILED:
                this.object.model.setValue(C.FURNITURE_BRANDING_IMAGE_STATUS, -1);
                break
            }
    }
    mouseEvent(s, e)
    {
        !s || !e || s.type === le.MOUSE_MOVE || s.type === le.DOUBLE_CLICK || super.mouseEvent(s, e)
    }
    async downloadBackground()
    {
        const s = this.object && this.object.model;
        if (!s)
            return;
        const e = s.getValue(C.FURNITURE_BRANDING_IMAGE_URL),
            t = s.getValue(C.FURNITURE_BRANDING_IMAGE_STATUS);
        if (!(!e || e === "" || t === 1))
            if (e.endsWith(".gif"))
                this.object.model.setValue(C.FURNITURE_BRANDING_IS_ANIMATED, !0),
                fetch(e).then(r => r.arrayBuffer()).then(r => eL(r)).then(r => {
                    const i = r.lsd.width,
                        n = r.lsd.height,
                        o = i * n,
                        l = tL(r, !1),
                        c = [],
                        u = [];
                    let h = new Uint8Array(o * 4);
                    for (let d = 0; d < l.length; d++) {
                        d > 0 && (h = h.slice(0));
                        const m = l[d].pixels,
                            p = l[d].colorTable,
                            E = l[d].transparentIndex,
                            T = l[d].dims;
                        for (let S = 0; S < T.height; S++)
                            for (let A = 0; A < T.width; A++) {
                                const N = m[S * T.width + A],
                                    b = (S + T.top) * i + (A + T.left);
                                if (E !== N) {
                                    const v = p[N];
                                    h[4 * b] = v[0],
                                    h[4 * b + 1] = v[1],
                                    h[4 * b + 2] = v[2],
                                    h[4 * b + 3] = 255
                                }
                            }
                        const I = Ed.fromBuffer(h, i, n);
                        c.push(new cs(I)),
                        u.push(l[d].delay)
                    }
                    Ee.instance.roomEngine.roomContentLoader.createGifCollection(e, c, u),
                    this.processUpdateMessage(new Nr(Nr.IMAGE_LOADED))
                }).catch(r => {
                    this.processUpdateMessage(new Nr(Nr.IMAGE_LOADING_FAILED))
                });
            else {
                const r = zr();
                if (!r)
                    return;
                if (!r.getTexture(e)) {
                    await r.downloadAsset(e) ? this.processUpdateMessage(new Nr(Nr.IMAGE_LOADED)) : this.processUpdateMessage(new Nr(Nr.IMAGE_LOADING_FAILED));
                    return
                }
                this.processUpdateMessage(new Nr(Nr.IMAGE_LOADED))
            }
    }
}
;
let eo = Oi;
eo.STATE = "state";
eo.IMAGEURL_KEY = "imageUrl";
eo.CLICKURL_KEY = "clickUrl";
eo.OFFSETX_KEY = "offsetX";
eo.OFFSETY_KEY = "offsetY";
eo.OFFSETZ_KEY = "offsetZ";
class N5 extends eo {
    getAdClickUrl(e)
    {
        return null
    }
}
class y5 extends eo {
    constructor()
    {
        super(),
        this._hasClickUrl = !0
    }
    getAdClickUrl(e)
    {
        return e.getValue(C.FURNITURE_BRANDING_URL)
    }
    handleAdClick(e, t, r)
    {
        if (r.indexOf("http") === 0) {
            Gi.openWebPage(r);
            return
        }
        this.eventDispatcher && this.eventDispatcher.dispatchEvent(new kt(kt.ROOM_AD_FURNI_CLICK, this.object, "", r))
    }
}
class M5 extends Rt {
    constructor()
    {
        super(),
        this._roomColorUpdated = !1
    }
    getEventTypes()
    {
        const e = [Y.DIMMER, Y.WIDGET_REMOVE_DIMMER, bl.DIMMER_STATE];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    onDispose()
    {
        this._roomColorUpdated && this.eventDispatcher && this.object && (this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && (this.eventDispatcher.dispatchEvent(new bl(this.object, 0, 1, 1, 16777215, 255)), this.eventDispatcher.dispatchEvent(new Y(Y.WIDGET_REMOVE_DIMMER, this.object))), this._roomColorUpdated = !1),
        super.onDispose()
    }
    processUpdateMessage(e)
    {
        if (e instanceof Gt) {
            if (e.data) {
                const t = e.data.getLegacyString();
                this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && this.processDimmerData(t),
                super.processUpdateMessage(new Gt(this.getStateFromDimmerData(t), e.data))
            }
            return
        }
        super.processUpdateMessage(e)
    }
    getStateFromDimmerData(e)
    {
        if (!e)
            return 0;
        const t = e.split(",");
        return t.length >= 5 ? parseInt(t[0]) - 1 : 0
    }
    processDimmerData(e)
    {
        if (!e)
            return;
        const t = e.split(",");
        if (t.length >= 5) {
            const r = this.getStateFromDimmerData(e),
                i = parseInt(t[1]),
                n = parseInt(t[2]),
                o = t[3];
            let l = parseInt(o.substr(1), 16),
                c = parseInt(t[4]);
            r || (l = 16777215, c = 255),
            this.eventDispatcher && this.object && (this.eventDispatcher.dispatchEvent(new bl(this.object, r, i, n, l, c)), this._roomColorUpdated = !0)
        }
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.DIMMER, this.object))
    }
    update(e)
    {
        super.update(e)
    }
}
const Ac = class  extends Rt{
    constructor()
    {
        super(),
        this._score = 0,
        this._scoreIncreaser = 50,
        this._scoreTimer = 0
    }
    processUpdateMessage(s)
    {
        if (s instanceof Gt)
            return this.updateScore(s.state);
        super.processUpdateMessage(s)
    }
    updateScore(s)
    {
        this._score = s;
        const e = this.object.getState(0);
        if (this._score !== e) {
            let t = this._score - e;
            t < 0 && (t = -t),
            t * Ac.UPDATE_INTERVAL > Ac.MAX_UPDATE_TIME ? this._scoreIncreaser = Ac.MAX_UPDATE_TIME / t : this._scoreIncreaser = Ac.UPDATE_INTERVAL,
            this._scoreTimer = Pe()
        }
    }
    update(s)
    {
        super.update(s);
        const e = this.object.getState(0);
        if (e !== this._score && s >= this._scoreTimer + this._scoreIncreaser) {
            const t = s - this._scoreTimer;
            let r = t / this._scoreIncreaser,
                i = 1;
            this._score < e && (i = -1),
            r > i * (this._score - e) && (r = i * (this._score - e)),
            this.object.setState(e + i * r, 0),
            this._scoreTimer = s - (t - r * this._scoreIncreaser)
        }
    }
}
;
let TE = Ac;
TE.UPDATE_INTERVAL = 50;
TE.MAX_UPDATE_TIME = 3e3;
class b5 extends Rt {
    processUpdateMessage(e)
    {
        if (super.processUpdateMessage(e), this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1) {
            const t = this.object.model.getValue(C.FURNITURE_EXTRAS),
                r = parseInt(t);
            this.object.model.setValue(Zt.INFOSTAND_EXTRA_PARAM, Zt.SONGDISK + r)
        }
    }
}
const Oa = class  extends Ss{
    constructor()
    {
        super(...arguments),
        this._state = -1,
        this._sampleId = -1,
        this._noPitch = !1,
        this._lastLocZ = 0
    }
    getEventTypes()
    {
        const s = [Es.ROOM_OBJECT_INITIALIZED, Es.ROOM_OBJECT_DISPOSED, Es.PLAY_SAMPLE, Es.CHANGE_PITCH];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    initialize(s)
    {
        super.initialize(s),
        s.logic && s.logic.soundSample && (this._sampleId = s.logic.soundSample.id, this._noPitch = s.logic.soundSample.noPitch),
        this.object.model.setValue(C.FURNITURE_SOUNDBLOCK_RELATIVE_ANIMATION_SPEED, 1)
    }
    onDispose()
    {
        this._state !== Oa.STATE_UNINITIALIZED && this.eventDispatcher.dispatchEvent(new Es(Es.ROOM_OBJECT_DISPOSED, this.object, this._sampleId)),
        super.onDispose()
    }
    processUpdateMessage(s)
    {
        super.processUpdateMessage(s),
        s instanceof Gt && this.updateSoundBlockMessage(s)
    }
    updateSoundBlockMessage(s)
    {
        if (!s)
            return;
        const e = this.object && this.object.model,
            t = this.object && this.object.location;
        !e || !t || (this._state === Oa.STATE_UNINITIALIZED && e.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && (this._lastLocZ = t.z, this.eventDispatcher.dispatchEvent(new Es(Es.ROOM_OBJECT_INITIALIZED, this.object, this._sampleId, this.getPitchForHeight(t.z)))), this._state !== Oa.STATE_UNINITIALIZED && e.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && this._lastLocZ !== t.z && (this._lastLocZ = t.z, this.eventDispatcher.dispatchEvent(new Es(Es.CHANGE_PITCH, this.object, this._sampleId, this.getPitchForHeight(t.z)))), this._state !== Oa.STATE_UNINITIALIZED && s.state !== this._state && this.playSoundAt(t.z), this._state = s.state)
    }
    playSoundAt(s)
    {
        if (!this.object)
            return;
        const e = this.getPitchForHeight(s);
        this.object.model.setValue(C.FURNITURE_SOUNDBLOCK_RELATIVE_ANIMATION_SPEED, e),
        this.eventDispatcher.dispatchEvent(new Es(Es.PLAY_SAMPLE, this.object, this._sampleId, e))
    }
    getPitchForHeight(s)
    {
        if (this._noPitch)
            return 1;
        let e = s * 2;
        return e > Oa.HIGHEST_SEMITONE && (e = Math.min(0, Oa.LOWEST_SEMITONE + (e - Oa.HIGHEST_SEMITONE - 1))), Math.pow(2, e / 12)
    }
}
;
let zd = Oa;
zd.HIGHEST_SEMITONE = 12;
zd.LOWEST_SEMITONE = -12;
zd.STATE_UNINITIALIZED = -1;
class D5 extends Ss {
    constructor()
    {
        super(...arguments),
        this._disposeEventsAllowed = !1,
        this._isInitialized = !1,
        this._currentState = -1
    }
    getEventTypes()
    {
        const e = [ce.SOUND_MACHINE_START, ce.SOUND_MACHINE_STOP, ce.SOUND_MACHINE_DISPOSE, ce.SOUND_MACHINE_INIT];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    onDispose()
    {
        this.requestDispose(),
        super.onDispose()
    }
    processUpdateMessage(e)
    {
        if (super.processUpdateMessage(e), this.object.model.getValue(C.FURNITURE_REAL_ROOM_OBJECT) === 1 && (this._isInitialized || this.requestInit(), this.object.model.setValue(Zt.INFOSTAND_EXTRA_PARAM, Zt.JUKEBOX), e instanceof Gt)) {
            const t = this.object.getState(0);
            t !== this._currentState && (this._currentState = t, t === 1 ? this.requestPlayList() : t === 0 && this.requestStopPlaying())
        }
    }
    requestInit()
    {
        !this.object || !this.eventDispatcher || (this._disposeEventsAllowed = !0, this.eventDispatcher.dispatchEvent(new ce(ce.SOUND_MACHINE_INIT, this.object)), this._isInitialized = !0)
    }
    requestPlayList()
    {
        !this.object || !this.eventDispatcher || (this._disposeEventsAllowed = !0, this.eventDispatcher.dispatchEvent(new ce(ce.SOUND_MACHINE_START, this.object)))
    }
    requestStopPlaying()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ce(ce.SOUND_MACHINE_STOP, this.object))
    }
    requestDispose()
    {
        !this._disposeEventsAllowed || !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ce(ce.SOUND_MACHINE_DISPOSE, this.object))
    }
}
const FD = class  extends Rt{
    getEventTypes()
    {
        const s = [Y.STICKIE, ce.STICKIE];
        return this.mergeTypes(super.getEventTypes(), s)
    }
    initialize(s)
    {
        super.initialize(s),
        this.updateColor(),
        this.object && this.object.model.setValue(C.FURNITURE_IS_STICKIE, "")
    }
    processUpdateMessage(s)
    {
        super.processUpdateMessage(s),
        s instanceof pE && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Y(Y.STICKIE, this.object)),
        this.updateColor()
    }
    updateColor()
    {
        if (!this.object)
            return;
        const s = this.object.model.getValue(C.FURNITURE_DATA);
        let e = FD.STICKIE_COLORS.indexOf(s);
        e < 0 && (e = 3),
        this.object.model.setValue(C.FURNITURE_COLOR, e + 1)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new ce(ce.STICKIE, this.object))
    }
}
;
let xD = FD;
xD.STICKIE_COLORS = ["9CCEFF", "FF9CFF", "9CFF9C", "FFFF33"];
class v5 extends Rt {
    getEventTypes()
    {
        const e = [Y.TROPHY];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.TROPHY, this.object))
    }
}
const Nc = class  extends Ss{
    constructor()
    {
        super(),
        this._total = 0,
        this._lastUpdate = 0,
        this._interval = 33
    }
    processUpdateMessage(s)
    {
        if (super.processUpdateMessage(s), s instanceof Gt) {
            const e = s.data;
            if (!e)
                return;
            this.updateTotal(e.result)
        }
    }
    updateTotal(s)
    {
        if (this._total = s, !this._lastUpdate) {
            this.object.model.setValue(C.FURNITURE_VOTE_COUNTER_COUNT, s),
            this._lastUpdate = Pe();
            return
        }
        if (this._total !== this.currentTotal) {
            const e = Math.abs(this._total - this.currentTotal);
            e * Nc.UPDATE_INTERVAL > Nc.MAX_UPDATE_TIME ? this._interval = Nc.MAX_UPDATE_TIME / e : this._interval = Nc.UPDATE_INTERVAL,
            this._lastUpdate = Pe()
        }
    }
    update(s)
    {
        if (super.update(s), this.object && this.currentTotal !== this._total && s >= this._lastUpdate + this._interval) {
            const e = s - this._lastUpdate;
            let t = e / this._interval,
                r = 1;
            this._total < this.currentTotal && (r = -1),
            t > r * (this._total - this.currentTotal) && (t = r * (this._total - this.currentTotal)),
            this.object.model.setValue(C.FURNITURE_VOTE_COUNTER_COUNT, this.currentTotal + r * t),
            this._lastUpdate = s - (e - t * this._interval)
        }
    }
    get currentTotal()
    {
        return this.object.model.getValue(C.FURNITURE_VOTE_COUNTER_COUNT)
    }
}
;
let RE = Nc;
RE.UPDATE_INTERVAL = 33;
RE.MAX_UPDATE_TIME = 1e3;
class P5 extends Ss {
    processUpdateMessage(e)
    {
        if (super.processUpdateMessage(e), !!this.object && e instanceof Gt) {
            const t = e.data;
            t instanceof Ah && this.object.model.setValue(C.FURNITURE_VOTE_MAJORITY_RESULT, t.result)
        }
    }
}
class L5 extends Ss {
    mouseEvent(e, t)
    {
        !e || !t || (e.type === le.DOUBLE_CLICK && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new ht(ht.STATE_CHANGE, this.object)), super.mouseEvent(e, t))
    }
}
class U5 extends Ss {
    initialize(e)
    {
        super.initialize(e);
        let t = "";
        e.logic && e.logic.maskType && e.logic.maskType !== "" && e.logic.maskType.length > 0 && (t = e.logic.maskType),
        this.object.model.setValue(C.FURNITURE_USES_PLANE_MASK, 1),
        this.object.model.setValue(C.FURNITURE_PLANE_MASK_TYPE, t)
    }
}
class w5 extends Rt {
    getEventTypes()
    {
        const e = [Y.YOUTUBE, vi.RODRE_URL_PREFIX];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    update(e)
    {
        super.update(e),
        this.object.model.getValue(C.SESSION_URL_PREFIX) || this.eventDispatcher.dispatchEvent(new vi(vi.RODRE_URL_PREFIX, this.object))
    }
    useObject()
    {
        !this.object || !this.eventDispatcher || this.eventDispatcher.dispatchEvent(new Y(Y.YOUTUBE, this.object))
    }
}
class F5 extends Va {
    constructor()
    {
        super(),
        this._selected = !1,
        this._reportedLocation = null,
        this._postureIndex = 0,
        this._gestureIndex = 0,
        this._headDirectionDelta = 0,
        this._directions = [],
        this._talkingEndTimestamp = 0,
        this._gestureEndTimestamp = 0,
        this._expressionEndTimestamp = 0
    }
    getEventTypes()
    {
        const e = [De.CLICK, pr.POSITION_CHANGED];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    initialize(e)
    {
        if (!e)
            return;
        const t = this.object && this.object.model;
        if (t) {
            if (e.logic && e.logic.model) {
                const r = e.logic.model.directions;
                if (r && r.length) {
                    for (const i of r)
                        this._directions.push(i);
                    this._directions.sort()
                }
            }
            t.setValue(C.PET_ALLOWED_DIRECTIONS, this._directions)
        }
    }
    dispose()
    {
        this._selected && this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new pr(pr.OBJECT_REMOVED, this.object)),
        this._directions = null,
        this._reportedLocation = null
    }
    update(e)
    {
        if (super.update(e), this._selected && this.object && this.eventDispatcher) {
            const t = this.object.getLocation();
            (!this._reportedLocation || this._reportedLocation.x !== t.x || this._reportedLocation.y !== t.y || this._reportedLocation.z !== t.z) && (this._reportedLocation || (this._reportedLocation = new w), this._reportedLocation.assign(t), this.eventDispatcher.dispatchEvent(new pr(pr.POSITION_CHANGED, this.object)))
        }
        this.object && this.object.model && this.updateModel(e, this.object.model)
    }
    updateModel(e, t)
    {
        this._gestureEndTimestamp > 0 && e > this._gestureEndTimestamp && (t.setValue(C.FIGURE_GESTURE, null), this._gestureEndTimestamp = 0),
        this._talkingEndTimestamp > 0 && e > this._talkingEndTimestamp && (t.setValue(C.FIGURE_TALK, 0), this._talkingEndTimestamp = 0),
        this._expressionEndTimestamp > 0 && e > this._expressionEndTimestamp && (t.setValue(C.FIGURE_EXPRESSION, 0), this._expressionEndTimestamp = 0)
    }
    processUpdateMessage(e)
    {
        if (!e || !this.object)
            return;
        super.processUpdateMessage(e);
        const t = this.object && this.object.model;
        if (t) {
            if (e instanceof $h) {
                t.setValue(C.HEAD_DIRECTION, e.headDirection);
                return
            }
            if (e instanceof Jh) {
                const r = new Nn(e.figure);
                t.setValue(C.FIGURE, e.figure),
                t.setValue(C.RACE, e.subType),
                t.setValue(C.PET_PALETTE_INDEX, r.paletteId),
                t.setValue(C.PET_COLOR, r.color),
                t.setValue(C.PET_TYPE, r.typeId),
                t.setValue(C.PET_CUSTOM_LAYER_IDS, r.customLayerIds),
                t.setValue(C.PET_CUSTOM_PARTS_IDS, r.customPartIds),
                t.setValue(C.PET_CUSTOM_PALETTE_IDS, r.customPaletteIds),
                t.setValue(C.PET_IS_RIDING, e.isRiding ? 1 : 0);
                return
            }
            if (e instanceof mE) {
                t.setValue(C.FIGURE_POSTURE, e.postureType);
                return
            }
            if (e instanceof fE) {
                t.setValue(C.FIGURE_TALK, 1),
                this._talkingEndTimestamp = this.time + e.numberOfWords * 1e3;
                return
            }
            if (e instanceof EE) {
                t.setValue(C.FIGURE_SLEEP, e.isSleeping ? 1 : 0);
                return
            }
            if (e instanceof SD) {
                t.setValue(C.FIGURE_GESTURE, e.gesture),
                this._gestureEndTimestamp = this.time + 3e3;
                return
            }
            if (e instanceof Zh) {
                this._selected = e.selected,
                this._reportedLocation = null;
                return
            }
            if (e instanceof ED) {
                t.setValue(C.FIGURE_EXPERIENCE_TIMESTAMP, this.time),
                t.setValue(C.FIGURE_GAINED_EXPERIENCE, e.gainedExperience);
                return
            }
        }
    }
    mouseEvent(e, t)
    {
        let r = null;
        switch (e.type) {
        case le.MOUSE_CLICK:
            r = De.CLICK;
            break;
        case le.DOUBLE_CLICK:
            break;
        case le.MOUSE_DOWN:
            {
                this.object.model.getValue(C.PET_TYPE) === Le.MONSTERPLANT && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new De(De.MOUSE_DOWN, this.object, e.eventId, e.altKey, e.ctrlKey, e.shiftKey, e.buttonDown));
                break
            }
        }
        r && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new De(r, this.object, e.eventId, e.altKey, e.ctrlKey, e.shiftKey, e.buttonDown))
    }
}
class GD {
    constructor()
    {
        this._width = 0,
        this._height = 0,
        this._wallHeight = 0,
        this._fixedWallsHeight = 0,
        this._tileMap = [],
        this._holeMap = [],
        this._doors = [],
        this._dimensions = {
            minX: 0,
            maxX: 0,
            minY: 0,
            maxY: 0
        },
        this._restrictsDragging = !1,
        this._restrictedScale = 1,
        this._restrictsScaling = !1
    }
    get width()
    {
        return this._width
    }
    set width(e)
    {
        this._width = e
    }
    get height()
    {
        return this._height
    }
    set height(e)
    {
        this._height = e
    }
    get wallHeight()
    {
        return this._wallHeight
    }
    set wallHeight(e)
    {
        this._wallHeight = e
    }
    get fixedWallsHeight()
    {
        return this._fixedWallsHeight
    }
    set fixedWallsHeight(e)
    {
        this._fixedWallsHeight = e
    }
    get tileMap()
    {
        return this._tileMap
    }
    get holeMap()
    {
        return this._holeMap
    }
    get doors()
    {
        return this._doors
    }
    get dimensions()
    {
        return this._dimensions
    }
    get restrictsDragging()
    {
        return this._restrictsDragging
    }
    set restrictsDragging(e)
    {
        this._restrictsDragging = e
    }
    get restrictsScaling()
    {
        return this._restrictsScaling
    }
    set restrictsScaling(e)
    {
        this._restrictsScaling = e
    }
    get restrictedScale()
    {
        return this._restrictedScale
    }
    set restrictedScale(e)
    {
        this._restrictedScale = e
    }
}
class Go {
    constructor(e, t, r)
    {
        this.type = e,
        this.loc = t,
        this.category = r
    }
    get loc()
    {
        return this._loc
    }
    set loc(e)
    {
        this._loc || (this._loc = new w),
        this._loc.assign(e)
    }
    get type()
    {
        return this._type
    }
    set type(e)
    {
        this._type = e
    }
    get category()
    {
        return this._category
    }
    set category(e)
    {
        this._category = e
    }
    dispose()
    {
        this._loc = null
    }
}
Go.WINDOW = "window";
Go.HOLE = "hole";
class x5 {
    constructor()
    {
        this._masks = []
    }
    get masks()
    {
        return this._masks
    }
}
class BD {
    constructor()
    {
        this._masks = new Map
    }
    get maskCount()
    {
        return this._masks.size
    }
    dispose()
    {
        this._masks && (this.reset(), this._masks = null)
    }
    initialize(e)
    {
        if (!e)
            return !1;
        if (this._masks.clear(), e.masks.length)
            for (const t of e.masks) {
                if (!t)
                    continue;
                const r = t.locations.length ? t.locations[0] : null;
                r && this._masks.set(t.id, new Go(t.type, r, t.category))
            }
        return !0
    }
    reset()
    {
        for (const e of this._masks.values())
            e && e.dispose();
        this._masks.clear()
    }
    addMask(e, t, r, i)
    {
        const n = new Go(t, r, i);
        this._masks.delete(e),
        this._masks.set(e, n)
    }
    removeMask(e)
    {
        const t = this._masks.get(e);
        return t ? (this._masks.delete(e), t.dispose(), !0) : !1
    }
    getXML()
    {
        const e = new x5;
        for (const [t, r] of this._masks.entries()) {
            if (!r)
                continue;
            const i = this.getMaskType(r),
                n = this.getMaskCategory(r),
                o = this.getMaskLocation(r);
            if (i && n && o) {
                const l = {
                    id: t,
                    type: i,
                    category: n,
                    locations: [{
                        x: o.x,
                        y: o.y,
                        z: o.z
                    }]
                };
                e.masks.push(l)
            }
        }
        return e
    }
    getMaskLocation(e)
    {
        return e ? e.loc : null
    }
    getMaskType(e)
    {
        return e ? e.type : null
    }
    getMaskCategory(e)
    {
        return e ? e.category : null
    }
    get masks()
    {
        return this._masks
    }
}
class G5 {
    constructor(e, t, r, i)
    {
        this._leftSideLoc = 0,
        this._rightSideLoc = 0,
        this._leftSideLength = 0,
        this._rightSideLength = 0,
        this._leftSideLoc = e,
        this._rightSideLoc = t,
        this._leftSideLength = r,
        this._rightSideLength = i
    }
    get leftSideLoc()
    {
        return this._leftSideLoc
    }
    get rightSideLoc()
    {
        return this._rightSideLoc
    }
    get leftSideLength()
    {
        return this._leftSideLength
    }
    get rightSideLength()
    {
        return this._rightSideLength
    }
}
class Jt {
    constructor(e, t, r, i, n)
    {
        this._type = 0,
        this._loc = null,
        this._leftSide = null,
        this._rightSide = null,
        this._normal = null,
        this._normalDirection = null;
        let o,
            l,
            c,
            u,
            h,
            d,
            m,
            p;
        if (this._secondaryNormals = [], this._masks = [], this._loc = new w, this._loc.assign(t), this._leftSide = new w, this._leftSide.assign(r), this._rightSide = new w, this._rightSide.assign(i), this._type = e, r != null && i != null && (this._normal = w.crossProduct(r, i), o = 0, l = 0, c = 0, u = 0, h = 0, this.normal.x != 0 || this.normal.y != 0 ? (u = this.normal.x, h = this.normal.y, o = 360 + Math.atan2(h, u) / Math.PI * 180, o >= 360 && (o = o - 360), u = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y), h = this.normal.z, l = 360 + Math.atan2(h, u) / Math.PI * 180, l >= 360 && (l = l - 360)) : this.normal.z < 0 ? l = 90 : l = 270, this._normalDirection = new w(o, l, c)), n != null && n.length > 0)
            for (d = 0; d < n.length;)
                m = n[d],
                m != null && m.length > 0 && (p = new w, p.assign(m), p.multiply(1 / p.length), this._secondaryNormals.push(p)),
                d++
    }
    get type()
    {
        return this._type
    }
    get loc()
    {
        return this._loc
    }
    get leftSide()
    {
        return this._leftSide
    }
    get rightSide()
    {
        return this._rightSide
    }
    get normal()
    {
        return this._normal
    }
    get normalDirection()
    {
        return this._normalDirection
    }
    get secondaryNormalCount()
    {
        return this._secondaryNormals.length
    }
    get maskCount()
    {
        return this._masks.length
    }
    getSecondaryNormal(e)
    {
        if (e < 0 || e >= this.secondaryNormalCount)
            return null;
        const t = new w;
        return t.assign(this._secondaryNormals[e]), t
    }
    addMask(e, t, r, i)
    {
        const n = new G5(e, t, r, i);
        this._masks.push(n)
    }
    getMask(e)
    {
        return e < 0 || e >= this.maskCount ? null : this._masks[e]
    }
    getMaskLeftSideLoc(e)
    {
        const t = this.getMask(e);
        return t != null ? t.leftSideLoc : -1
    }
    getMaskRightSideLoc(e)
    {
        const t = this.getMask(e);
        return t != null ? t.rightSideLoc : -1
    }
    getMaskLeftSideLength(e)
    {
        const t = this.getMask(e);
        return t != null ? t.leftSideLength : -1
    }
    getMaskRightSideLength(e)
    {
        const t = this.getMask(e);
        return t != null ? t.rightSideLength : -1
    }
}
Jt.PLANE_UNDEFINED = 0;
Jt.PLANE_FLOOR = 1;
Jt.PLANE_WALL = 2;
Jt.PLANE_LANDSCAPE = 3;
Jt.PLANE_BILLBOARD = 4;
class B5 {
    constructor(e, t, r, i)
    {
        this._x = e,
        this._y = t,
        this._width = r,
        this._height = i
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get width()
    {
        return this._width
    }
    get height()
    {
        return this._height
    }
}
const _f = class {
    constructor()
    {
        this._corners = [],
        this._endPoints = [],
        this._directions = [],
        this._lengths = [],
        this._leftTurns = [],
        this._borders = [],
        this._hideWalls = [],
        this._manuallyLeftCut = [],
        this._manuallyRightCut = [],
        this._addDuplicates = !1,
        this._count = 0
    }
    addWall(s, e, t, r, i)
    {
        (this._addDuplicates || this.checkIsNotDuplicate(s, e, t, r, i)) && (this._corners.push(s), this._directions.push(e), this._lengths.push(t), this._borders.push(r), this._leftTurns.push(i), this._hideWalls.push(!1), this._manuallyLeftCut.push(!1), this._manuallyRightCut.push(!1), this._count++)
    }
    checkIsNotDuplicate(s, e, t, r, i)
    {
        let n = 0;
        for (; n < this._count;) {
            if (this._corners[n].x == s.x && this._corners[n].y == s.y && this._directions[n] == e && this._lengths[n] == t && this._borders[n] == r && this._leftTurns[n] == i)
                return !1;
            n++
        }
        return !0
    }
    get count()
    {
        return this._count
    }
    getCorner(s)
    {
        return this._corners[s]
    }
    getEndPoint(s)
    {
        return this.calculateWallEndPoints(), this._endPoints[s]
    }
    getLength(s)
    {
        return this._lengths[s]
    }
    getDirection(s)
    {
        return this._directions[s]
    }
    getBorder(s)
    {
        return this._borders[s]
    }
    getHideWall(s)
    {
        return this._hideWalls[s]
    }
    getLeftTurn(s)
    {
        return this._leftTurns[s]
    }
    getManuallyLeftCut(s)
    {
        return this._manuallyLeftCut[s]
    }
    getManuallyRightCut(s)
    {
        return this._manuallyRightCut[s]
    }
    setHideWall(s, e)
    {
        this._hideWalls[s] = e
    }
    setLength(s, e)
    {
        e < this._lengths[s] && (this._lengths[s] = e, this._manuallyRightCut[s] = !0)
    }
    moveCorner(s, e)
    {
        let t;
        if (e > 0 && e < this._lengths[s]) {
            const r = this._corners[s];
            t = _f.WALL_DIRECTION_VECTORS[this.getDirection(s)],
            this._corners[s] = new Ge(r.x + e * t.x, r.y + e * t.y),
            this._lengths[s] = this._lengths[s] - e,
            this._manuallyLeftCut[s] = !0
        }
    }
    calculateWallEndPoints()
    {
        let s,
            e,
            t,
            r,
            i;
        if (this._endPoints.length != this.count)
            for (this._endPoints = [], s = 0; s < this.count;)
                e = this.getCorner(s),
                t = new Ge(e.x, e.y),
                r = _f.WALL_DIRECTION_VECTORS[this.getDirection(s)],
                i = this.getLength(s),
                t.x = t.x + r.x * i,
                t.y = t.y + r.y * i,
                this._endPoints.push(t),
                s++
    }
}
;
let mn = _f;
mn.WALL_DIRECTION_VECTORS = [new w(1, 0, 0), new w(0, 1, 0), new w(-1, 0, 0), new w(0, -1, 0)];
mn.WALL_NORMAL_VECTORS = [new w(0, 1, 0), new w(-1, 0, 0), new w(0, -1, 0), new w(1, 0, 0)];
const At = class {
    constructor()
    {
        this._width = 0,
        this._height = 0,
        this._minX = 0,
        this._maxX = 0,
        this._minY = 0,
        this._maxY = 0,
        this._fixedWallHeight = -1,
        this._floorHeight = 0,
        this._restrictsScaling = !1,
        this._restrictedScale = 1,
        this._tileMatrix = [],
        this._tileMatrixOriginal = [],
        this._planes = [],
        this._floorHoleMatrix = [],
        this._wallHeight = 3.6,
        this._wallThicknessMultiplier = 1,
        this._floorThicknessMultiplier = 1,
        this._floorHoles = new Map
    }
    static getFloorHeight(s)
    {
        const e = s.length;
        if (!e)
            return 0;
        let t = 0,
            r = 0;
        for (; r < e;) {
            const i = s[r];
            let n = 0;
            for (; n < i.length;) {
                const o = i[n];
                o > t && (t = o),
                n++
            }
            r++
        }
        return t
    }
    static findEntranceTile(s)
    {
        if (!s)
            return null;
        const e = s.length;
        if (!e)
            return null;
        const t = [];
        let r = 0;
        for (; r < e;) {
            const i = s[r];
            if (!i || !i.length)
                return null;
            let n = 0;
            for (; n < i.length;) {
                if (i[n] >= 0) {
                    t.push(n);
                    break
                }
                n++
            }
            t.length < r + 1 && t.push(i.length + 1),
            r++
        }
        for (r = 1; r < t.length - 1;) {
            if (Math.trunc(t[r]) <= Math.trunc(t[r - 1]) - 1 && Math.trunc(t[r]) <= Math.trunc(t[r + 1]) - 1)
                return new Ge(Math.trunc(t[r] | 0), r);
            r++
        }
        return null
    }
    static expandFloorTiles(s)
    {
        let e,
            t,
            r,
            i,
            n,
            o,
            l,
            c,
            u,
            h,
            d,
            m;
        const p = s.length,
            E = s[0].length,
            T = [];
        for (t = 0; t < p * 4;)
            T[t] = [],
            t++;
        let I = 0;
        for (t = 0; t < p;) {
            for (n = 0, e = 0; e < E;) {
                if (o = s[t][e], o < 0 || o <= 255)
                    for (i = 0; i < 4;) {
                        for (r = 0; r < 4;)
                            T[I + i] === void 0 && (T[I + i] = []),
                            T[I + i][n + r] = o < 0 ? o : o * 4,
                            r++;
                        i++
                    }
                else {
                    for (l = (o & 255) * 4, c = l + (o >> 11 & 1) * 3, u = l + (o >> 10 & 1) * 3, h = l + (o >> 9 & 1) * 3, d = l + (o >> 8 & 1) * 3, r = 0; r < 3;)
                        m = r + 1,
                        T[I][n + r] = (c * (3 - r) + u * r) / 3,
                        T[I + 3][n + m] = (h * (3 - m) + d * m) / 3,
                        T[I + m][n] = (c * (3 - m) + h * m) / 3,
                        T[I + r][n + 3] = (u * (3 - r) + d * r) / 3,
                        r++;
                    T[I + 1][n + 1] = c > l ? l + 2 : l + 1,
                    T[I + 1][n + 2] = u > l ? l + 2 : l + 1,
                    T[I + 2][n + 1] = h > l ? l + 2 : l + 1,
                    T[I + 2][n + 2] = d > l ? l + 2 : l + 1
                }
                n = n + 4,
                e++
            }
            I = I + 4,
            t++
        }
        return T
    }
    static addTileTypes(s)
    {
        let e,
            t,
            r,
            i,
            n,
            o,
            l,
            c,
            u,
            h,
            d,
            m,
            p;
        const E = s.length - 1,
            T = s[0].length - 1;
        for (t = 1; t < E;) {
            for (e = 1; e < T;)
                r = s[t][e],
                r < 0 || (i = s[t - 1][e - 1] & 255, n = s[t - 1][e] & 255, o = s[t - 1][e + 1] & 255, l = s[t][e - 1] & 255, c = s[t][e + 1] & 255, u = s[t + 1][e - 1] & 255, h = s[t + 1][e] & 255, d = s[t + 1][e + 1] & 255, m = r + 1, p = (i == m || n == m || l == m ? 8 : 0) | (o == m || n == m || c == m ? 4 : 0) | (u == m || h == m || l == m ? 2 : 0) | (d == m || h == m || c == m ? 1 : 0), p == 15 && (p = 0), s[t][e] = r | p << 8),
                e++;
            t++
        }
    }
    static unpadHeightMap(s)
    {
        s.shift(),
        s.pop();
        for (const e of s)
            e.shift(),
            e.pop()
    }
    static padHeightMap(s)
    {
        const e = [],
            t = [];
        for (const r of s)
            r.push(At.TILE_BLOCKED),
            r.unshift(At.TILE_BLOCKED);
        for (const r of s[0])
            e.push(At.TILE_BLOCKED),
            t.push(At.TILE_BLOCKED);
        s.push(t),
        s.unshift(e)
    }
    get minX()
    {
        return this._minX
    }
    get maxX()
    {
        return this._maxX
    }
    get minY()
    {
        return this._minY
    }
    get maxY()
    {
        return this._maxY
    }
    get tileMapWidth()
    {
        return this._width
    }
    get tileMapHeight()
    {
        return this._height
    }
    get planeCount()
    {
        return this._planes.length
    }
    get floorHeight()
    {
        return this._fixedWallHeight != -1 ? this._fixedWallHeight : this._floorHeight
    }
    get wallHeight()
    {
        return this._fixedWallHeight != -1 ? this._fixedWallHeight + 3.6 : this._wallHeight
    }
    set wallHeight(s)
    {
        s < 0 && (s = 0),
        this._wallHeight = s
    }
    get wallThicknessMultiplier()
    {
        return this._wallThicknessMultiplier
    }
    set wallThicknessMultiplier(s)
    {
        s < 0 && (s = 0),
        this._wallThicknessMultiplier = s
    }
    get floorThicknessMultiplier()
    {
        return this._floorThicknessMultiplier
    }
    set floorThicknessMultiplier(s)
    {
        s < 0 && (s = 0),
        this._floorThicknessMultiplier = s
    }
    dispose()
    {
        this._planes = null,
        this._tileMatrix = null,
        this._tileMatrixOriginal = null,
        this._floorHoleMatrix = null,
        this._floorHoles != null && (this._floorHoles.clear(), this._floorHoles = null)
    }
    reset()
    {
        this._planes = [],
        this._tileMatrix = [],
        this._tileMatrixOriginal = [],
        this._width = 0,
        this._height = 0,
        this._minX = 0,
        this._maxX = 0,
        this._minY = 0,
        this._maxY = 0,
        this._floorHeight = 0,
        this._floorHoleMatrix = []
    }
    initializeTileMap(s, e)
    {
        s < 0 && (s = 0),
        e < 0 && (e = 0),
        this._tileMatrix = [],
        this._tileMatrixOriginal = [],
        this._floorHoleMatrix = [];
        let t = 0;
        for (; t < e;) {
            const r = [],
                i = [],
                n = [];
            let o = 0;
            for (; o < s;)
                r[o] = At.TILE_BLOCKED,
                i[o] = At.TILE_BLOCKED,
                n[o] = !1,
                o++;
            this._tileMatrix.push(r),
            this._tileMatrixOriginal.push(i),
            this._floorHoleMatrix.push(n),
            t++
        }
        return this._width = s, this._height = e, this._minX = this._width, this._maxX = -1, this._minY = this._height, this._maxY = -1, !0
    }
    setTileHeight(s, e, t)
    {
        let r,
            i,
            n,
            o,
            l;
        if (s >= 0 && s < this._width && e >= 0 && e < this._height) {
            if (r = this._tileMatrix[e], r[s] = t, t >= 0)
                s < this._minX && (this._minX = s),
                s > this._maxX && (this._maxX = s),
                e < this._minY && (this._minY = e),
                e > this._maxY && (this._maxY = e);
            else {
                if (s == this._minX || s == this._maxX) {
                    for (i = !1, n = this._minY; n < this._maxY;) {
                        if (this.getTileHeightInternal(s, n) >= 0) {
                            i = !0;
                            break
                        }
                        n++
                    }
                    i || (s == this._minX && this._minX++, s == this._maxX && this._maxX--)
                }
                if (e == this._minY || e == this._maxY) {
                    for (o = !1, l = this._minX; l < this._maxX;) {
                        if (this.getTileHeight(l, e) >= 0) {
                            o = !0;
                            break
                        }
                        l++
                    }
                    o || (e == this._minY && this._minY++, e == this._maxY && this._maxY--)
                }
            }
            return !0
        }
        return !1
    }
    getTileHeight(s, e)
    {
        if (s < 0 || s >= this._width || e < 0 || e >= this._height)
            return At.TILE_BLOCKED;
        const t = this._tileMatrix[e];
        return t[s] === void 0 ? 0 : Math.abs(t[s])
    }
    getTileHeightOriginal(s, e)
    {
        return s < 0 || s >= this._width || e < 0 || e >= this._height ? At.TILE_BLOCKED : this._floorHoleMatrix[e][s] ? At.TILE_HOLE : this._tileMatrixOriginal[e][s]
    }
    getTileHeightInternal(s, e)
    {
        return s < 0 || s >= this._width || e < 0 || e >= this._height ? At.TILE_BLOCKED : this._tileMatrix[e][s]
    }
    initializeFromTileData(s=-1)
    {
        let e,
            t;
        for (this._fixedWallHeight = s, t = 0; t < this._height;) {
            for (e = 0; e < this._width;)
                this._tileMatrixOriginal[t] === void 0 && (this._tileMatrixOriginal[t] = []),
                this._tileMatrixOriginal[t][e] = this._tileMatrix[t][e],
                e++;
            t++
        }
        const r = At.findEntranceTile(this._tileMatrix);
        for (t = 0; t < this._height;) {
            for (e = 0; e < this._width;)
                this._floorHoleMatrix[t] === void 0 && (this._floorHoleMatrix[t] = []),
                this._floorHoleMatrix[t][e] && this.setTileHeight(e, t, At.TILE_HOLE),
                e++;
            t++
        }
        return this.initialize(r)
    }
    initialize(s)
    {
        let e = 0;
        s != null && (e = this.getTileHeight(s.x, s.y), this.setTileHeight(s.x, s.y, At.TILE_BLOCKED)),
        this._floorHeight = At.getFloorHeight(this._tileMatrix),
        this.createWallPlanes();
        const t = [];
        for (const i of this._tileMatrix)
            t.push(i.concat());
        At.padHeightMap(t),
        At.addTileTypes(t),
        At.unpadHeightMap(t);
        const r = At.expandFloorTiles(t);
        return this.extractPlanes(r), s != null && (this.setTileHeight(s.x, s.y, e), this.addFloor(new w(s.x + .5, s.y + .5, e), new w(-1, 0, 0), new w(0, -1, 0), !1, !1, !1, !1)), !0
    }
    generateWallData(s, e)
    {
        let t,
            r,
            i,
            n,
            o;
        const l = new mn,
            c = [this.extractTopWall.bind(this), this.extractRightWall.bind(this), this.extractBottomWall.bind(this), this.extractLeftWall.bind(this)];
        let u = 0,
            h = new Ge(s.x, s.y),
            d = 0;
        for (; d++ < 1e3;) {
            if (t = !1, r = !1, i = u, (h.x < this.minX || h.x > this.maxX || h.y < this.minY || h.y > this.maxY) && (t = !0), n = c[u](h, e), n == null)
                return null;
            if (o = Math.abs(n.x - h.x) + Math.abs(n.y - h.y), h.x == n.x || h.y == n.y ? (u = (u - 1 + c.length) % c.length, o = o + 1, r = !0) : (u = (u + 1) % c.length, o--), l.addWall(h, i, o, t, r), n.x == s.x && n.y == s.y && (n.x != h.x || n.y != h.y))
                break;
            h = n
        }
        return l.count == 0 ? null : l
    }
    hidePeninsulaWallChains(s)
    {
        let e,
            t,
            r,
            i,
            n = 0;
        const o = s.count;
        for (; n < o;) {
            const l = n;
            for (e = n, t = 0, r = !1; !s.getBorder(n) && n < o;)
                s.getLeftTurn(n) ? t++ : t > 0 && t--,
                t > 1 && (r = !0),
                e = n,
                n++;
            if (r)
                for (i = l; i <= e;)
                    s.setHideWall(i, !0),
                    i++;
            n++
        }
    }
    updateWallsNextToHoles(s)
    {
        let e,
            t,
            r,
            i,
            n,
            o,
            l;
        const c = s.count;
        let u = 0;
        for (; u < c;) {
            if (!s.getHideWall(u)) {
                for (e = s.getCorner(u), t = s.getDirection(u), r = s.getLength(u), i = mn.WALL_DIRECTION_VECTORS[t], n = mn.WALL_NORMAL_VECTORS[t], o = 0, l = 0; l < r;) {
                    if (this.getTileHeightInternal(e.x + l * i.x - n.x, e.y + l * i.y - n.y) == At.TILE_HOLE) {
                        if (l > 0 && o == 0) {
                            s.setLength(u, l);
                            break
                        }
                        o++
                    } else if (o > 0) {
                        s.moveCorner(u, o);
                        break
                    }
                    l++
                }
                o == r && s.setHideWall(u, !0)
            }
            u++
        }
    }
    resolveOriginalWallIndex(s, e, t)
    {
        let r,
            i,
            n,
            o,
            l,
            c;
        const u = Math.min(s.y, e.y),
            h = Math.max(s.y, e.y),
            d = Math.min(s.x, e.x),
            m = Math.max(s.x, e.x),
            p = t.count;
        let E = 0;
        for (; E < p;) {
            if (r = t.getCorner(E), i = t.getEndPoint(E), s.x == e.x) {
                if (r.x == s.x && i.x == s.x && (n = Math.min(r.y, i.y), o = Math.max(r.y, i.y), n <= u && h <= o))
                    return E
            } else if (s.y == e.y && r.y == s.y && i.y == s.y && (l = Math.min(r.x, i.x), c = Math.max(r.x, i.x), l <= d && m <= c))
                return E;
            E++
        }
        return -1
    }
    hideOriginallyHiddenWalls(s, e)
    {
        let t,
            r,
            i,
            n,
            o;
        const l = s.count;
        let c = 0;
        for (; c < l;)
            s.getHideWall(c) || (t = s.getCorner(c), r = new Ge(t.x, t.y), i = mn.WALL_DIRECTION_VECTORS[s.getDirection(c)], n = s.getLength(c), r.x = r.x + i.x * n, r.y = r.y + i.y * n, o = this.resolveOriginalWallIndex(t, r, e), o >= 0 ? e.getHideWall(o) && s.setHideWall(c, !0) : s.setHideWall(c, !0)),
            c++
    }
    checkWallHiding(s, e)
    {
        this.hidePeninsulaWallChains(e),
        this.updateWallsNextToHoles(s),
        this.hideOriginallyHiddenWalls(s, e)
    }
    addWalls(s, e)
    {
        const t = s.count,
            r = e.count;
        let i = 0;
        for (; i < t;) {
            if (!s.getHideWall(i)) {
                const n = s.getCorner(i),
                    o = s.getDirection(i),
                    l = s.getLength(i),
                    c = mn.WALL_DIRECTION_VECTORS[o],
                    u = mn.WALL_NORMAL_VECTORS[o];
                let h = -1,
                    d = 0;
                for (; d < l;) {
                    const U = this.getTileHeightInternal(n.x + d * c.x + u.x, n.y + d * c.y + u.y);
                    U >= 0 && (U < h || h < 0) && (h = U),
                    d++
                }
                const m = h;
                let p = new w(n.x, n.y, m);
                p = w.sum(p, w.product(u, .5)),
                p = w.sum(p, w.product(c, -.5));
                const E = this.wallHeight + Math.min(At.MAX_WALL_ADDITIONAL_HEIGHT, this.floorHeight) - h,
                    T = w.product(c, -l),
                    I = new w(0, 0, E);
                p = w.dif(p, T);
                const S = this.resolveOriginalWallIndex(n, s.getEndPoint(i), e);
                let A = 0,
                    N = 0;
                S >= 0 ? (A = e.getDirection((S + 1) % r), N = e.getDirection((S - 1 + r) % r)) : (A = s.getDirection((i + 1) % t), N = s.getDirection((i - 1 + t) % t));
                let b = null;
                (A - o + 4) % 4 == 3 ? b = mn.WALL_NORMAL_VECTORS[A] : (o - N + 4) % 4 == 3 && (b = mn.WALL_NORMAL_VECTORS[N]);
                const v = s.getLeftTurn(i),
                    D = s.getLeftTurn((i - 1 + t) % t),
                    G = s.getHideWall((i + 1) % t),
                    x = s.getManuallyLeftCut(i),
                    F = s.getManuallyRightCut(i);
                this.addWall(p, T, I, b, !D || x, !v || F, !G)
            }
            i++
        }
    }
    createWallPlanes()
    {
        const s = this._tileMatrix;
        if (s == null)
            return !1;
        let e,
            t,
            r;
        const i = s.length;
        let n = 0;
        if (i == 0)
            return !1;
        for (e = 0; e < i;) {
            if (r = s[e], r == null || r.length == 0)
                return !1;
            n > 0 ? n = Math.min(n, r.length) : n = r.length,
            e++
        }
        const o = Math.min(At.MAX_WALL_ADDITIONAL_HEIGHT, this._fixedWallHeight != -1 ? this._fixedWallHeight : At.getFloorHeight(s)),
            l = this.minX;
        let c = this.minY;
        for (c = this.minY; c <= this.maxY;) {
            if (this.getTileHeightInternal(l, c) > At.TILE_HOLE) {
                c--;
                break
            }
            c++
        }
        if (c > this.maxY)
            return !1;
        const u = new Ge(l, c),
            h = this.generateWallData(u, !0),
            d = this.generateWallData(u, !1);
        for (h != null && (h.count, d.count, this.checkWallHiding(h, d), this.addWalls(h, d)), t = 0; t < this.tileMapHeight;) {
            for (e = 0; e < this.tileMapWidth;)
                this.getTileHeightInternal(e, t) < 0 && this.setTileHeight(e, t, -(o + this.wallHeight)),
                e++;
            t++
        }
        return !0
    }
    extractTopWall(s, e)
    {
        if (s == null)
            return null;
        let t = 1,
            r = At.TILE_HOLE;
        for (e || (r = At.TILE_BLOCKED); t < 1e3;) {
            if (this.getTileHeightInternal(s.x + t, s.y) > r)
                return new Ge(s.x + t - 1, s.y);
            if (this.getTileHeightInternal(s.x + t, s.y + 1) <= r)
                return new Ge(s.x + t, s.y + 1);
            t++
        }
        return null
    }
    extractRightWall(s, e)
    {
        if (s == null)
            return null;
        let t = 1,
            r = At.TILE_HOLE;
        for (e || (r = At.TILE_BLOCKED); t < 1e3;) {
            if (this.getTileHeightInternal(s.x, s.y + t) > r)
                return new Ge(s.x, s.y + (t - 1));
            if (this.getTileHeightInternal(s.x - 1, s.y + t) <= r)
                return new Ge(s.x - 1, s.y + t);
            t++
        }
        return null
    }
    extractBottomWall(s, e)
    {
        if (s == null)
            return null;
        let t = 1,
            r = At.TILE_HOLE;
        for (e || (r = At.TILE_BLOCKED); t < 1e3;) {
            if (this.getTileHeightInternal(s.x - t, s.y) > r)
                return new Ge(s.x - (t - 1), s.y);
            if (this.getTileHeightInternal(s.x - t, s.y - 1) <= r)
                return new Ge(s.x - t, s.y - 1);
            t++
        }
        return null
    }
    extractLeftWall(s, e)
    {
        if (s == null)
            return null;
        let t = 1,
            r = At.TILE_HOLE;
        for (e || (r = At.TILE_BLOCKED); t < 1e3;) {
            if (this.getTileHeightInternal(s.x, s.y - t) > r)
                return new Ge(s.x, s.y - (t - 1));
            if (this.getTileHeightInternal(s.x + 1, s.y - t) <= r)
                return new Ge(s.x + 1, s.y - t);
            t++
        }
        return null
    }
    addWall(s, e, t, r, i, n, o)
    {
        this.addPlane(Jt.PLANE_WALL, s, e, t, [r]),
        this.addPlane(Jt.PLANE_LANDSCAPE, s, e, t, [r]);
        const l = At.WALL_THICKNESS * this._wallThicknessMultiplier,
            c = At.FLOOR_THICKNESS * this._floorThicknessMultiplier,
            u = w.crossProduct(e, t),
            h = w.product(u, 1 / u.length * -l);
        if (this.addPlane(Jt.PLANE_WALL, w.sum(s, t), e, h, [u, r]), i && this.addPlane(Jt.PLANE_WALL, w.sum(w.sum(s, e), t), w.product(t, -(t.length + c) / t.length), h, [u, r]), n && (this.addPlane(Jt.PLANE_WALL, w.sum(s, w.product(t, -c / t.length)), w.product(t, (t.length + c) / t.length), h, [u, r]), o)) {
            const d = w.product(e, l / e.length);
            this.addPlane(Jt.PLANE_WALL, w.sum(w.sum(s, t), w.product(d, -1)), d, h, [u, e, r])
        }
    }
    addFloor(s, e, t, r, i, n, o)
    {
        let l,
            c,
            u;
        this.addPlane(Jt.PLANE_FLOOR, s, e, t) != null && (l = At.FLOOR_THICKNESS * this._floorThicknessMultiplier, c = new w(0, 0, l), u = w.dif(s, c), n && this.addPlane(Jt.PLANE_FLOOR, u, e, c), o && this.addPlane(Jt.PLANE_FLOOR, w.sum(u, w.sum(e, t)), w.product(e, -1), c), r && this.addPlane(Jt.PLANE_FLOOR, w.sum(u, t), w.product(t, -1), c), i && this.addPlane(Jt.PLANE_FLOOR, w.sum(u, e), t, c))
    }
    initializeFromMapData(s)
    {
        if (!s)
            return !1;
        this.reset(),
        this.resetFloorHoles();
        const e = s.width,
            t = s.height,
            r = s.wallHeight,
            i = s.fixedWallsHeight;
        if (this.initializeTileMap(e, t), s.tileMap) {
            let n = 0;
            for (; n < s.tileMap.length;) {
                const o = s.tileMap[n];
                if (o) {
                    let l = 0;
                    for (; l < o.length;) {
                        const c = o[l];
                        c && this.setTileHeight(l, n, c.height),
                        l++
                    }
                }
                n++
            }
        }
        if (s.holeMap && s.holeMap.length) {
            let n = 0;
            for (; n < s.holeMap.length;) {
                const o = s.holeMap[n];
                o && (this.addFloorHole(o.id, o.x, o.y, o.width, o.height), n++)
            }
            this.initializeHoleMap()
        }
        return this.wallHeight = r, this.restrictsDragging = s.restrictsDragging, this.restrictsScaling = s.restrictsScaling, this.restrictedScale = s.restrictedScale, this.initializeFromTileData(i), !0
    }
    addPlane(s, e, t, r, i=null)
    {
        if (t.length == 0 || r.length == 0)
            return null;
        const n = new Jt(s, e, t, r, i);
        return this._planes.push(n), n
    }
    getMapData()
    {
        const s = new GD;
        s.width = this._width,
        s.height = this._height,
        s.wallHeight = this._wallHeight,
        s.fixedWallsHeight = this._fixedWallHeight,
        s.dimensions.minX = this.minX,
        s.dimensions.maxX = this.maxX,
        s.dimensions.minY = this.minY,
        s.dimensions.maxY = this.maxY,
        s.restrictsDragging = this.restrictsDragging,
        s.restrictsScaling = this.restrictsScaling,
        s.restrictedScale = this.restrictedScale;
        let e = 0;
        for (; e < this._height;) {
            const t = [],
                r = this._tileMatrixOriginal[e];
            let i = 0;
            for (; i < this._width;) {
                const n = r[i];
                t.push({
                    height: n
                }),
                i++
            }
            s.tileMap.push(t),
            e++
        }
        for (const [t, r] of this._floorHoles.entries())
            r && s.holeMap.push({
                id: t,
                x: r.x,
                y: r.y,
                width: r.width,
                height: r.height
            });
        return s
    }
    getPlaneLocation(s)
    {
        if (s < 0 || s >= this.planeCount)
            return null;
        const e = this._planes[s];
        return e ? e.loc : null
    }
    getPlaneNormal(s)
    {
        if (s < 0 || s >= this.planeCount)
            return null;
        const e = this._planes[s];
        return e ? e.normal : null
    }
    getPlaneLeftSide(s)
    {
        if (s < 0 || s >= this.planeCount)
            return null;
        const e = this._planes[s];
        return e ? e.leftSide : null
    }
    getPlaneRightSide(s)
    {
        if (s < 0 || s >= this.planeCount)
            return null;
        const e = this._planes[s];
        return e ? e.rightSide : null
    }
    getPlaneNormalDirection(s)
    {
        if (s < 0 || s >= this.planeCount)
            return null;
        const e = this._planes[s];
        return e ? e.normalDirection : null
    }
    getPlaneSecondaryNormals(s)
    {
        let e,
            t;
        if (s < 0 || s >= this.planeCount)
            return null;
        const r = this._planes[s];
        if (r != null) {
            for (e = [], t = 0; t < r.secondaryNormalCount;)
                e.push(r.getSecondaryNormal(t)),
                t++;
            return e
        }
        return null
    }
    getPlaneType(s)
    {
        if (s < 0 || s >= this.planeCount)
            return Jt.PLANE_UNDEFINED;
        const e = this._planes[s];
        return e ? e.type : Jt.PLANE_UNDEFINED
    }
    getPlaneMaskCount(s)
    {
        if (s < 0 || s >= this.planeCount)
            return 0;
        const e = this._planes[s];
        return e ? e.maskCount : 0
    }
    getPlaneMaskLeftSideLoc(s, e)
    {
        if (s < 0 || s >= this.planeCount)
            return -1;
        const t = this._planes[s];
        return t ? t.getMaskLeftSideLoc(e) : -1
    }
    getPlaneMaskRightSideLoc(s, e)
    {
        if (s < 0 || s >= this.planeCount)
            return -1;
        const t = this._planes[s];
        return t ? t.getMaskRightSideLoc(e) : -1
    }
    getPlaneMaskLeftSideLength(s, e)
    {
        if (s < 0 || s >= this.planeCount)
            return -1;
        const t = this._planes[s];
        return t ? t.getMaskLeftSideLength(e) : -1
    }
    getPlaneMaskRightSideLength(s, e)
    {
        if (s < 0 || s >= this.planeCount)
            return -1;
        const t = this._planes[s];
        return t ? t.getMaskRightSideLength(e) : -1
    }
    addFloorHole(s, e, t, r, i)
    {
        this.removeFloorHole(s),
        this._floorHoles.set(s, new B5(e, t, r, i))
    }
    removeFloorHole(s)
    {
        this._floorHoles.delete(s)
    }
    resetFloorHoles()
    {
        this._floorHoles.clear()
    }
    initializeHoleMap()
    {
        let s,
            e,
            t,
            r,
            i,
            n,
            o,
            l;
        for (e = 0; e < this._height;) {
            for (t = this._floorHoleMatrix[e], s = 0; s < this._width;)
                t[s] = !1,
                s++;
            e++
        }
        for (const c of this._floorHoles.values())
            if (r = c, r != null)
                for (i = r.x, n = r.x + r.width - 1, o = r.y, l = r.y + r.height - 1, i = i < 0 ? 0 : i, n = n >= this._width ? this._width - 1 : n, o = o < 0 ? 0 : o, l = l >= this._height ? this._height - 1 : l, e = o; e <= l;) {
                    for (t = this._floorHoleMatrix[e], s = i; s <= n;)
                        t[s] = !0,
                        s++;
                    e++
                }
    }
    extractPlanes(s)
    {
        let e,
            t,
            r,
            i,
            n,
            o,
            l,
            c,
            u,
            h,
            d,
            m,
            p,
            E,
            T;
        const I = s.length,
            S = s[0].length,
            A = [];
        let N = 0;
        for (; N < I;)
            A[N] = [],
            N++;
        let b = 0;
        for (; b < I;) {
            for (e = 0; e < S;) {
                if (t = s[b][e], !(t < 0 || A[b][e])) {
                    for (n = e == 0 || s[b][e - 1] != t, o = b == 0 || s[b - 1][e] != t, r = e + 1; r < S && !(s[b][r] != t || A[b][r] || b > 0 && s[b - 1][r] == t == o);)
                        r++;
                    for (l = r == S || s[b][r] != t, d = !1, i = b + 1; i < I && !d;) {
                        for (c = s[i][e] != t, d = c || e > 0 && s[i][e - 1] == t == n || r < S && s[i][r] == t == l, u = e; u < r;) {
                            if (s[i][u] == t == c) {
                                d = !0,
                                r = u;
                                break
                            }
                            u++
                        }
                        if (d)
                            break;
                        i++
                    }
                    for (c = c || i == I, l = r == S || s[b][r] != t, h = b; h < i;) {
                        for (u = e; u < r;)
                            A[h][u] = !0,
                            u++;
                        h++
                    }
                    m = e / 4 - .5,
                    p = b / 4 - .5,
                    E = (r - e) / 4,
                    T = (i - b) / 4,
                    this.addFloor(new w(m + E, p + T, t / 4), new w(-E, 0, 0), new w(0, -T, 0), l, n, c, o)
                }
                e++
            }
            b++
        }
    }
    get restrictsDragging()
    {
        return this._restrictsDragging
    }
    set restrictsDragging(s)
    {
        this._restrictsDragging = s
    }
    get restrictsScaling()
    {
        return this._restrictsScaling
    }
    set restrictsScaling(s)
    {
        this._restrictsScaling = s
    }
    get restrictedScale()
    {
        return this._restrictedScale
    }
    set restrictedScale(s)
    {
        this._restrictedScale = s
    }
}
;
let ps = At;
ps.FLOOR_THICKNESS = .25;
ps.WALL_THICKNESS = .25;
ps.MAX_WALL_ADDITIONAL_HEIGHT = 20;
ps.TILE_BLOCKED = -110;
ps.TILE_HOLE = -100;
class k5 extends Ad {
    constructor()
    {
        super(),
        this._planeParser = new ps,
        this._planeBitmapMaskParser = new BD,
        this._color = 16777215,
        this._light = 255,
        this._originalColor = 16777215,
        this._originalLight = 255,
        this._targetColor = 16777215,
        this._targetLight = 255,
        this._colorChangedTime = 0,
        this._colorTransitionLength = 1500,
        this._lastHoleUpdate = 0,
        this._needsMapUpdate = !1,
        this._skipColorTransition = !1
    }
    getEventTypes()
    {
        const e = [De.MOUSE_MOVE, De.CLICK];
        return this.mergeTypes(super.getEventTypes(), e)
    }
    dispose()
    {
        super.dispose(),
        this._planeParser && (this._planeParser.dispose(), this._planeParser = null),
        this._planeBitmapMaskParser && (this._planeBitmapMaskParser.dispose(), this._planeBitmapMaskParser = null)
    }
    initialize(e)
    {
        !e || !this.object || e instanceof GD && this._planeParser.initializeFromMapData(e) && (this.object.model.setValue(C.ROOM_MAP_DATA, e), this.object.model.setValue(C.ROOM_BACKGROUND_COLOR, 16777215), this.object.model.setValue(C.ROOM_FLOOR_VISIBILITY, 1), this.object.model.setValue(C.ROOM_WALL_VISIBILITY, 1), this.object.model.setValue(C.ROOM_LANDSCAPE_VISIBILITY, 1), this._skipColorTransition = ye.getValue("room.color.skip.transition") === !0)
    }
    update(e)
    {
        if (super.update(e), this.updateBackgroundColor(e), this._needsMapUpdate) {
            if (this._lastHoleUpdate && e - this._lastHoleUpdate < 5)
                return;
            const t = this.object && this.object.model;
            if (t) {
                const r = this._planeParser.getMapData();
                t.setValue(C.ROOM_MAP_DATA, r),
                t.setValue(C.ROOM_FLOOR_HOLE_UPDATE_TIME, e),
                this._planeParser.initializeFromMapData(r)
            }
            this._lastHoleUpdate = 0,
            this._needsMapUpdate = !1
        }
    }
    updateBackgroundColor(e)
    {
        if (!this.object || !this._colorChangedTime)
            return;
        let t = this._color,
            r = this._light;
        if (e - this._colorChangedTime >= this._colorTransitionLength)
            t = this._targetColor,
            r = this._targetLight,
            this._colorChangedTime = 0;
        else {
            let n = this._originalColor >> 16 & 255,
                o = this._originalColor >> 8 & 255,
                l = this._originalColor & 255;
            const c = this._targetColor >> 16 & 255,
                u = this._targetColor >> 8 & 255,
                h = this._targetColor & 255,
                d = (e - this._colorChangedTime) / this._colorTransitionLength;
            n = n + (c - n) * d,
            o = o + (u - o) * d,
            l = l + (h - l) * d,
            t = (n << 16) + (o << 8) + l,
            r = this._originalLight + (this._targetLight - this._originalLight) * d,
            this._color = t,
            this._light = r
        }
        let i = nr.rgbToHSL(t);
        i = (i & 16776960) + r,
        t = nr.hslToRGB(i),
        this.object.model && this.object.model.setValue(C.ROOM_BACKGROUND_COLOR, t)
    }
    processUpdateMessage(e)
    {
        if (!e || !this.object)
            return;
        const t = this.object.model;
        if (t) {
            if (e instanceof Qs) {
                this.onObjectRoomUpdateMessage(e, t);
                return
            }
            if (e instanceof Js) {
                this.onObjectRoomMaskUpdateMessage(e, t);
                return
            }
            if (e instanceof ta) {
                this.onObjectRoomPlaneVisibilityUpdateMessage(e, t);
                return
            }
            if (e instanceof ea) {
                this.onObjectRoomPlanePropertyUpdateMessage(e, t);
                return
            }
            if (e instanceof $n) {
                this.onObjectRoomFloorHoleUpdateMessage(e, t);
                return
            }
            if (e instanceof ed) {
                this.onObjectRoomColorUpdateMessage(e, t);
                return
            }
            e instanceof IE && this.onObjectRoomMapUpdateMessage(e)
        }
    }
    onObjectRoomUpdateMessage(e, t)
    {
        switch (e.type) {
        case Qs.ROOM_FLOOR_UPDATE:
            t.setValue(C.ROOM_FLOOR_TYPE, e.value);
            return;
        case Qs.ROOM_WALL_UPDATE:
            t.setValue(C.ROOM_WALL_TYPE, e.value);
            return;
        case Qs.ROOM_LANDSCAPE_UPDATE:
            t.setValue(C.ROOM_LANDSCAPE_TYPE, e.value);
            return
        }
    }
    onObjectRoomMaskUpdateMessage(e, t)
    {
        let r = null,
            i = !1;
        switch (e.type) {
        case Js.ADD_MASK:
            r = Go.WINDOW,
            e.maskCategory === Js.HOLE && (r = Go.HOLE),
            this._planeBitmapMaskParser.addMask(e.maskId, e.maskType, e.maskLocation, r),
            i = !0;
            break;
        case Js.REMOVE_MASK:
            i = this._planeBitmapMaskParser.removeMask(e.maskId);
            break
        }
        i && t.setValue(C.ROOM_PLANE_MASK_XML, this._planeBitmapMaskParser.getXML())
    }
    onObjectRoomPlaneVisibilityUpdateMessage(e, t)
    {
        let r = 0;
        switch (e.visible && (r = 1), e.type) {
        case ta.FLOOR_VISIBILITY:
            t.setValue(C.ROOM_FLOOR_VISIBILITY, r);
            return;
        case ta.WALL_VISIBILITY:
            t.setValue(C.ROOM_WALL_VISIBILITY, r),
            t.setValue(C.ROOM_LANDSCAPE_VISIBILITY, r);
            return
        }
    }
    onObjectRoomPlanePropertyUpdateMessage(e, t)
    {
        switch (e.type) {
        case ea.FLOOR_THICKNESS:
            t.setValue(C.ROOM_FLOOR_THICKNESS, e.value);
            return;
        case ea.WALL_THICKNESS:
            t.setValue(C.ROOM_WALL_THICKNESS, e.value);
            return
        }
    }
    onObjectRoomFloorHoleUpdateMessage(e, t)
    {
        switch (e.type) {
        case $n.ADD:
            this._planeParser.addFloorHole(e.id, e.x, e.y, e.width, e.height),
            this._needsMapUpdate = !0;
            return;
        case $n.REMOVE:
            this._planeParser.removeFloorHole(e.id),
            this._needsMapUpdate = !0;
            return
        }
        this._lastHoleUpdate = this.time
    }
    onObjectRoomColorUpdateMessage(e, t)
    {
        !e || !t || (this._originalColor = this._color, this._originalLight = this._light, this._targetColor = e.color, this._targetLight = e.light, this._colorChangedTime = this.time, this._skipColorTransition ? this._colorTransitionLength = 0 : this._colorTransitionLength = 1500, t.setValue(C.ROOM_COLORIZE_BG_ONLY, e.backgroundOnly))
    }
    onObjectRoomMapUpdateMessage(e)
    {
        !e || !e.mapData || (this.object.model.setValue(C.ROOM_MAP_DATA, e.mapData), this.object.model.setValue(C.ROOM_FLOOR_HOLE_UPDATE_TIME, this.time), this._planeParser.initializeFromMapData(e.mapData))
    }
    mouseEvent(e, t)
    {
        if (!e || !t || !this.object || !this.object.model)
            return;
        const r = e.spriteTag;
        let i = 0;
        if (r && r.indexOf("@") >= 0 && (i = parseInt(r.substr(r.indexOf("@") + 1))), i < 1 || i > this._planeParser.planeCount) {
            e.type === le.ROLL_OUT && this.object.model.setValue(C.ROOM_SELECTED_PLANE, 0);
            return
        }
        i--;
        let n = null;
        const o = this._planeParser.getPlaneLocation(i),
            l = this._planeParser.getPlaneLeftSide(i),
            c = this._planeParser.getPlaneRightSide(i),
            u = this._planeParser.getPlaneNormalDirection(i),
            h = this._planeParser.getPlaneType(i);
        if (o == null || l == null || c == null || u == null)
            return;
        const d = l.length,
            m = c.length;
        if (d == 0 || m == 0)
            return;
        const p = e.screenX,
            E = e.screenY,
            T = new Ge(p, E);
        if (n = t.getPlanePosition(T, o, l, c), !n) {
            this.object.model.setValue(C.ROOM_SELECTED_PLANE, 0);
            return
        }
        const I = w.product(l, n.x / d);
        I.add(w.product(c, n.y / m)),
        I.add(o);
        const S = I.x,
            A = I.y,
            N = I.z;
        if (n.x >= 0 && n.x < d && n.y >= 0 && n.y < m)
            this.object.model.setValue(C.ROOM_SELECTED_X, S),
            this.object.model.setValue(C.ROOM_SELECTED_Y, A),
            this.object.model.setValue(C.ROOM_SELECTED_Z, N),
            this.object.model.setValue(C.ROOM_SELECTED_PLANE, i + 1);
        else {
            this.object.model.setValue(C.ROOM_SELECTED_PLANE, 0);
            return
        }
        let b = null;
        switch (e.type === le.MOUSE_MOVE || e.type === le.ROLL_OVER ? b = De.MOUSE_MOVE : e.type === le.MOUSE_CLICK && (b = De.CLICK), e.type) {
        case le.MOUSE_MOVE:
        case le.ROLL_OVER:
        case le.MOUSE_CLICK:
            {
                let v = null;
                if (h === Jt.PLANE_FLOOR)
                    v = new wn(b, this.object, e.eventId, S, A, N, e.altKey, e.ctrlKey, e.shiftKey, e.buttonDown);
                else if (h === Jt.PLANE_WALL || h === Jt.PLANE_LANDSCAPE) {
                    let D = 90;
                    u && (D = u.x + 90, D > 360 && (D -= 360));
                    const G = l.length * n.x / d,
                        x = c.length * n.y / m;
                    v = new nl(b, this.object, e.eventId, o, l, c, G, x, D, e.altKey, e.ctrlKey, e.shiftKey, e.buttonDown)
                }
                this.eventDispatcher && this.eventDispatcher.dispatchEvent(v);
                return
            }
        }
    }
}
class V5 extends Ad {
    initialize(e)
    {
        this.object && (this.object.model.setValue(C.FURNITURE_ALPHA_MULTIPLIER, 1), this.object.setState(1, 0))
    }
    processUpdateMessage(e)
    {
        if (super.processUpdateMessage(e), e instanceof sa && this.object)
            switch (e.type) {
            case sa.ENABLED:
                this.object.setState(0, 0);
                return;
            case sa.DISABLED:
                this.object.setState(1, 0);
                return
            }
    }
}
const cl = class  extends Ad{
    constructor()
    {
        super(),
        this._lastEventId = null,
        this._isHidden = !1
    }
    initialize(s)
    {
        this.object && (this.object.model.setValue(C.FURNITURE_ALPHA_MULTIPLIER, 1), this.object.setState(cl.CURSOR_HIDDEN_STATE, 0))
    }
    processUpdateMessage(s)
    {
        s instanceof ol && (this._lastEventId && this._lastEventId === s.sourceEventId || (s.toggleVisibility && (this._isHidden = !this._isHidden), super.processUpdateMessage(s), this.object && (this._isHidden ? this.object.setState(cl.CURSOR_HIDDEN_STATE, 0) : s.visible ? (this.object.model.setValue(C.TILE_CURSOR_HEIGHT, s.height), this.object.setState(s.height > .8 ? cl.CURSOR_HEIGHT_STATE : cl.CURSOR_VISIBLE_STATE)) : this.object.setState(cl.CURSOR_HIDDEN_STATE, 0)), this._lastEventId = s.sourceEventId))
    }
}
;
let Kd = cl;
Kd.CURSOR_VISIBLE_STATE = 0;
Kd.CURSOR_HIDDEN_STATE = 1;
Kd.CURSOR_HEIGHT_STATE = 6;
class kD {
    constructor(e, t, r)
    {
        this._id = e,
        this._type = t,
        this._visualization = r
    }
    dispose()
    {
        this._visualization = null
    }
    update(e, t) {}
    animate(e)
    {
        return !1
    }
    get id()
    {
        return this._id
    }
    get type()
    {
        return this._type
    }
    get visualization()
    {
        return this._visualization
    }
}
const Sa = class  extends kD{
    constructor(s, e, t)
    {
        super(s, e, t),
        this._asset = null,
        this._startTime = Pe(),
        this._delta = 0,
        this._offsetY = 0,
        this._scale = 0,
        this._state = 0
    }
    update(s, e)
    {
        if (!s)
            return;
        this._scale = e;
        let t = 64,
            r = 0;
        if (e < 48 ? (this._asset = this.visualization.getAvatarRenderAsset("avatar_addition_user_blowkiss_small"), this.visualization.angle === 90 || this.visualization.angle === 270 ? r = 0 : this.visualization.angle === 135 || this.visualization.angle === 180 || this.visualization.angle === 225 ? r = 6 : r = -6, this._offsetY = -38, t = 32) : (this._asset = this.visualization.getAvatarRenderAsset("avatar_addition_user_blowkiss"), this.visualization.angle === 90 || this.visualization.angle === 270 ? r = -3 : this.visualization.angle === 135 || this.visualization.angle === 180 || this.visualization.angle === 225 ? r = 22 : r = -30, this._offsetY = -70), this.visualization.posture === ie.POSTURE_SIT ? this._offsetY += t / 2 : this.visualization.posture === ie.POSTURE_LAY && (this._offsetY += t), this._asset) {
            s.texture = this._asset,
            s.offsetX = r,
            s.offsetY = this._offsetY,
            s.relativeDepth = -.02,
            s.alpha = 0;
            const i = this._delta;
            this.animate(s),
            this._delta = i
        }
    }
    animate(s)
    {
        if (!s)
            return !1;
        if (this._asset && (s.texture = this._asset), this._state === Sa.STATE_DELAY)
            return Pe() - this._startTime < Sa.DELAY_BEFORE_ANIMATION ? !1 : (this._state = Sa.STATE_FADE_IN, s.alpha = 0, s.visible = !0, this._delta = 0, !0);
        if (this._state === Sa.STATE_FADE_IN)
            return this._delta += .1, s.offsetY = this._offsetY, s.alpha = Math.pow(this._delta, .9) * 255, this._delta >= 1 && (s.alpha = 255, this._delta = 0, this._state = Sa.STATE_FLOAT), !0;
        if (this._state === Sa.STATE_FLOAT) {
            const e = Math.pow(this._delta, .9);
            this._delta += .05;
            const t = this._scale < 48 ? -30 : -40;
            return s.offsetY = this._offsetY + (this._delta < 1 ? e : 1) * t, s.alpha = (1 - e) * 255, s.alpha <= 0 && (s.visible = !1, this._state = Sa.STATE_COMPLETE), !0
        }
        return !1
    }
}
;
let ic = Sa;
ic.DELAY_BEFORE_ANIMATION = 300;
ic.STATE_DELAY = 0;
ic.STATE_FADE_IN = 1;
ic.STATE_FLOAT = 2;
ic.STATE_COMPLETE = 3;
class nc {
    static getExpressionAddition(e, t, r)
    {
        switch (t) {
        case this.BLOW:
            return new ic(e, this.BLOW, r);
        default:
            return new kD(e, t, r)
        }
    }
}
nc.WAVE = 1;
nc.BLOW = 2;
nc.LAUGH = 3;
nc.CRY = 4;
nc.IDLE = 5;
const ji = class {
    constructor(s, e)
    {
        this._id = s,
        this._visualization = e,
        this._asset = null,
        this._startTime = Pe(),
        this._offsetY = 0,
        this._scale = 0,
        this._state = 0
    }
    dispose()
    {
        this._visualization = null,
        this._asset = null
    }
    getSpriteAssetName(s)
    {
        let e = "left";
        return (this._visualization.angle === 135 || this._visualization.angle === 180 || this._visualization.angle === 225 || this._visualization.angle === 270) && (e = "right"), "avatar_addition_user_idle_" + e + "_" + s + (this._scale < 48 ? "_small" : "")
    }
    update(s, e)
    {
        if (!s)
            return;
        this._scale = e,
        this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(this._state === ji.STATE_FRAME_A ? 1 : 2));
        let t = 64,
            r = 0;
        e < 48 ? (this._visualization.angle === 135 || this._visualization.angle === 180 || this._visualization.angle === 225 || this._visualization.angle === 270 ? r = 10 : r = -16, this._offsetY = -38, t = 32) : (this._visualization.angle === 135 || this._visualization.angle === 180 || this._visualization.angle === 225 || this._visualization.angle === 270 ? r = 22 : r = -30, this._offsetY = -70),
        this._visualization.posture === ie.POSTURE_SIT ? this._offsetY += t / 2 : this._visualization.posture === ie.POSTURE_LAY && (this._offsetY += t - .3 * t),
        this._asset && (s.texture = this._asset, s.offsetX = r, s.offsetY = this._offsetY, s.relativeDepth = -.02, s.alpha = 0)
    }
    animate(s)
    {
        if (!s)
            return !1;
        const e = Pe();
        return this._state === ji.STATE_DELAY && e - this._startTime >= ji.DELAY_BEFORE_ANIMATION && (this._state = ji.STATE_FRAME_A, this._startTime = e, this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(1))), this._state === ji.STATE_FRAME_A && e - this._startTime >= ji.DELAY_PER_FRAME && (this._state = ji.STATE_FRAME_B, this._startTime = e, this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(2))), this._state === ji.STATE_FRAME_B && e - this._startTime >= ji.DELAY_PER_FRAME && (this._state = ji.STATE_FRAME_A, this._startTime = e, this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(1))), this._asset ? (s.texture = this._asset, s.alpha = 255, s.visible = !0) : s.visible = !1, !1
    }
    get id()
    {
        return this._id
    }
}
;
let ac = ji;
ac.DELAY_BEFORE_ANIMATION = 2e3;
ac.DELAY_PER_FRAME = 2e3;
ac.STATE_DELAY = 0;
ac.STATE_FRAME_A = 1;
ac.STATE_FRAME_B = 2;
const yc = class {
    constructor(s)
    {
        this._id = s,
        this._asset = null,
        this._disposed = !1
    }
    dispose()
    {
        this._asset = null
    }
    update(s, e)
    {
        if (s) {
            if (!this._asset) {
                const t = new ls(cs.WHITE);
                t.alpha = 0,
                t.width = yc.WIDTH,
                t.height = yc.HEIGHT,
                this._asset = pt.generateTexture(t)
            }
            s.visible = !0,
            s.texture = this._asset,
            s.offsetX = yc.OFFSET_X,
            s.offsetY = yc.OFFSET_Y,
            s.alphaTolerance = Fi.MATCH_ALL_PIXELS
        }
    }
    animate(s)
    {
        return !1
    }
    get id()
    {
        return this._id
    }
}
;
let gu = yc;
gu.WIDTH = 46;
gu.HEIGHT = 60;
gu.OFFSET_X = -23;
gu.OFFSET_Y = -48;
class H5 {
    constructor(e, t, r)
    {
        this._id = e,
        this._visualization = t,
        this._asset = null,
        this._relativeDepth = 0,
        this._status = r
    }
    dispose()
    {
        this._visualization = null,
        this._asset = null
    }
    update(e, t)
    {
        if (!e)
            return;
        e.visible = !0,
        e.relativeDepth = this._relativeDepth,
        e.alpha = 255;
        let r = 64,
            i = 0,
            n = 0;
        this._asset = this._visualization.getAvatarRenderAsset(this._status === zi.GUIDE ? "avatar_addition_user_guide_bubble" : "avatar_addition_user_guide_requester_bubble"),
        t < 48 ? (i = -19, n = -80, r = 32) : (i = -19, n = -120),
        this._visualization.posture === ie.POSTURE_SIT ? n += r / 2 : this._visualization.posture === ie.POSTURE_LAY && (n += t),
        this._asset && (e.texture = this._asset, e.offsetX = i, e.offsetY = n, e.relativeDepth = -.02 + 0)
    }
    animate(e)
    {
        return this._asset && e && (e.texture = this._asset), !1
    }
    get id()
    {
        return this._id
    }
    get relativeDepth()
    {
        return this._relativeDepth
    }
    set relativeDepth(e)
    {
        this._relativeDepth = e
    }
}
class j5 {
    constructor(e, t)
    {
        this._id = e,
        this._visualization = t,
        this._asset = null
    }
    dispose()
    {
        this._visualization = null,
        this._asset = null
    }
    update(e, t)
    {
        if (!e)
            return;
        let r = 64,
            i = 0,
            n = 0;
        t < 48 ? (this._asset = this._visualization.getAvatarRenderAsset("avatar_addition_user_muted_small"), r = 32, i = -12, n = -66) : (this._asset = this._visualization.getAvatarRenderAsset("avatar_addition_user_muted"), i = -15, n = -110),
        this._visualization.posture === ie.POSTURE_SIT ? n += r / 2 : this._visualization.posture === ie.POSTURE_LAY && (n += t),
        this._asset ? (e.visible = !0, e.texture = this._asset, e.offsetX = i, e.offsetY = n, e.relativeDepth = -.02) : e.visible = !1
    }
    animate(e)
    {
        return this._asset && e && (e.texture = this._asset), !1
    }
    get id()
    {
        return this._id
    }
}
class W5 {
    constructor(e, t, r)
    {
        this._id = e,
        this._visualization = r,
        this._asset = null,
        this._scale = 0,
        this._number = t,
        this._numberValueFadeDirection = 0,
        this._numberValueMoving = !1,
        this._numberValueMoveCounter = 0
    }
    dispose()
    {
        this._visualization = null,
        this._asset = null
    }
    update(e, t)
    {
        if (!e)
            return;
        this._scale = t;
        let r = 64,
            i = 0,
            n = 0;
        this._number > 0 ? (t < 48 ? (this._asset = this._visualization.getAvatarRenderAsset("avatar_addition_number_" + this._number + "_small"), r = 32, i = -6, n = -52) : (this._asset = this._visualization.getAvatarRenderAsset("avatar_addition_number_" + this._number), i = -8, n = -105), this._visualization.posture === ie.POSTURE_SIT ? n += r / 2 : this._visualization.posture === ie.POSTURE_LAY && (n += t), this._asset ? (e.visible = !0, e.texture = this._asset, e.offsetX = i, e.offsetY = n, e.relativeDepth = -.01, e.alpha = 0, this._numberValueFadeDirection = 1, this._numberValueMoving = !0, this._numberValueMoveCounter = 0) : e.visible = !1) : e.visible && (this._numberValueFadeDirection = -1)
    }
    animate(e)
    {
        if (!e)
            return !1;
        this._asset && (e.texture = this._asset);
        let t = e.alpha,
            r = !1;
        if (this._numberValueMoving) {
            if (this._numberValueMoveCounter++, this._numberValueMoveCounter < 10)
                return !1;
            if (this._numberValueFadeDirection < 0)
                this._scale < 48 ? e.offsetY -= 2 : e.offsetY -= 4;
            else {
                let i = 4;
                this._scale < 48 && (i = 8),
                this._numberValueMoveCounter % i || (e.offsetY--, r = !0)
            }
        }
        return this._numberValueFadeDirection > 0 ? (t < 255 && (t += 32), t >= 255 && (t = 255, this._numberValueFadeDirection = 0), e.alpha = t, !0) : this._numberValueFadeDirection < 0 ? (t >= 0 && (t -= 32), t <= 0 && (this._numberValueFadeDirection = 0, this._numberValueMoving = !1, t = 0, e.visible = !1), e.alpha = t, !0) : r
    }
    get id()
    {
        return this._id
    }
}
class Y5 {
    constructor(e, t)
    {
        this._id = e,
        this._visualization = t,
        this._asset = null,
        this._relativeDepth = 0
    }
    dispose()
    {
        this._visualization = null,
        this._asset = null
    }
    update(e, t)
    {
        if (!e)
            return;
        e.visible = !0,
        e.relativeDepth = this._relativeDepth,
        e.alpha = 255;
        let r = 64,
            i = 0,
            n = 0;
        t < 48 ? (this._asset = this._visualization.getAvatarRenderAsset("avatar_addition_user_typing_small"), i = 3, n = -42, r = 32) : (this._asset = this._visualization.getAvatarRenderAsset("avatar_addition_user_typing"), i = 14, n = -83),
        this._visualization.posture === ie.POSTURE_SIT ? n += r / 2 : this._visualization.posture === ie.POSTURE_LAY && (n += t),
        this._asset && (e.texture = this._asset, e.offsetX = i, e.offsetY = n, e.relativeDepth = -.02 + 0)
    }
    animate(e)
    {
        return this._asset && e && (e.texture = this._asset), !1
    }
    get id()
    {
        return this._id
    }
    get relativeDepth()
    {
        return this._relativeDepth
    }
    set relativeDepth(e)
    {
        this._relativeDepth = e
    }
}
class td extends ei {
    constructor()
    {
        super()
    }
    initialize(e)
    {
        return !0
    }
    onDispose()
    {
        this._avatarRenderer = null
    }
    createAvatarImage(e, t, r=null, i=null, n=null)
    {
        let o = null;
        return t > 48 ? o = this._avatarRenderer.createAvatarImage(e, li.LARGE, r, i, n) : o = this._avatarRenderer.createAvatarImage(e, li.SMALL, r, i, n), o
    }
    getAvatarRendererAsset(e)
    {
        return this._avatarRenderer ? this._avatarRenderer.assets.getTexture(e) : null
    }
    get avatarManager()
    {
        return this._avatarRenderer
    }
    set avatarManager(e)
    {
        this._avatarRenderer = e
    }
    get layerCount()
    {
        return 0
    }
}
const Be = class  extends iu{
    constructor()
    {
        super(),
        this._data = null,
        this._avatarImage = null,
        this._cachedAvatars = new as,
        this._cachedAvatarEffects = new as,
        this._shadow = null,
        this._lastUpdate = -1e3,
        this._disposed = !1,
        this._figure = null,
        this._gender = null,
        this._direction = -1,
        this._headDirection = -1,
        this._posture = "",
        this._postureParameter = "",
        this._canStandUp = !1,
        this._postureOffset = 0,
        this._verticalOffset = 0,
        this._angle = -1,
        this._headAngle = -1,
        this._talk = !1,
        this._expression = 0,
        this._sleep = !1,
        this._blink = !1,
        this._gesture = 0,
        this._sign = -1,
        this._highlightEnabled = !1,
        this._highlight = !1,
        this._dance = 0,
        this._effect = 0,
        this._carryObject = 0,
        this._useObject = 0,
        this._ownUser = !1,
        this._isLaying = !1,
        this._layInside = !1,
        this._isAnimating = !1,
        this._extraSpritesStartIndex = 2,
        this._forcedAnimFrames = 0,
        this._updatesUntilFrameUpdate = 0,
        this._isAvatarReady = !1,
        this._needsUpdate = !1,
        this._geometryUpdateCounter = -1,
        this._additions = new Map
    }
    initialize(s)
    {
        return s instanceof td ? (this._data = s, this.createSprites(Be.INITIAL_RESERVED_SPRITES), super.initialize(s), !0) : !1
    }
    dispose()
    {
        this._disposed || (super.dispose(), this._avatarImage && this._avatarImage.dispose(), this._shadow = null, this._disposed = !0)
    }
    update(s, e, t, r)
    {
        if (!this.object || !s || !this._data || e < this._lastUpdate + Be.UPDATE_TIME_INCREASER)
            return;
        this._lastUpdate += Be.UPDATE_TIME_INCREASER,
        this._lastUpdate + Be.UPDATE_TIME_INCREASER < e && (this._lastUpdate = e - Be.UPDATE_TIME_INCREASER);
        const i = this.object.model,
            n = s.scale,
            o = this._effect;
        let l = !1,
            c = !1,
            u = !1,
            h = !1;
        const d = this.updateModel(i, n);
        if (d || n !== this._scale || !this._avatarImage) {
            if (n !== this._scale && (l = !0, this.updateScale(n)), o !== this._effect && (c = !0), l || !this._avatarImage || c) {
                if (this._avatarImage = this.createAvatarImage(n, this._effect), !this._avatarImage)
                    return;
                u = !0;
                const E = this.getSprite(Be.AVATAR_LAYER_ID);
                E && this._avatarImage && this._avatarImage.isPlaceholder() ? E.alpha = 150 : E && (E.alpha = 255)
            }
            if (!this._avatarImage)
                return;
            if (c && this._avatarImage.animationHasResetOnToggle && this._avatarImage.resetAnimationFrameCounter(), this.updateShadow(n), h = this.updateObject(this.object, s, t, !0), this.processActionsForAvatar(this._avatarImage), this._additions) {
                let E = this._extraSpritesStartIndex;
                for (const T of this._additions.values())
                    T.update(this.getSprite(E++), n)
            }
            this._scale = n
        } else
            h = this.updateObject(this.object, s, t);
        if (this._additions) {
            let E = this._extraSpritesStartIndex;
            for (const T of this._additions.values())
                T.animate(this.getSprite(E++)) && this.updateSpriteCounter++
        }
        const m = h || d || l,
            p = (this._isAnimating || this._forcedAnimFrames > 0) && t;
        if (m && (this._forcedAnimFrames = Be.ANIMATION_FRAME_UPDATE_INTERVAL), m || p) {
            if (this.updateSpriteCounter++, this._forcedAnimFrames--, this._updatesUntilFrameUpdate--, this._updatesUntilFrameUpdate <= 0 || l || d || u)
                this._avatarImage.updateAnimationByFrames(1),
                this._updatesUntilFrameUpdate = Be.ANIMATION_FRAME_UPDATE_INTERVAL;
            else
                return;
            let E = this._avatarImage.getCanvasOffsets();
            (!E || E.length < 3) && (E = Be.DEFAULT_CANVAS_OFFSETS);
            const T = this.getSprite(Be.SPRITE_INDEX_AVATAR);
            if (T) {
                const N = this.object.model.getValue(C.FIGURE_HIGHLIGHT_ENABLE) === 1 && this.object.model.getValue(C.FIGURE_HIGHLIGHT) === 1,
                    b = this._avatarImage.getImage(Ys.FULL, N);
                b && (T.texture = b, N || (T.filters = [])),
                T.texture && (T.offsetX = -1 * n / 2 + E[0] - (T.texture.width - n) / 2, T.offsetY = -T.texture.height + n / 4 + E[1] + this._postureOffset),
                this._isLaying ? this._layInside ? T.relativeDepth = -.5 : T.relativeDepth = Be.AVATAR_SPRITE_LAYING_DEPTH + E[2] : T.relativeDepth = Be.AVATAR_SPRITE_DEFAULT_DEPTH + E[2],
                this._ownUser ? (T.relativeDepth -= Be.AVATAR_OWN_DEPTH_ADJUST, T.spriteType = Dr.AVATAR_OWN) : T.spriteType = Dr.AVATAR
            }
            const I = this.getAddition(Be.TYPING_BUBBLE_ID);
            I && (this._isLaying ? I.relativeDepth = Be.AVATAR_SPRITE_LAYING_DEPTH - .01 + E[2] : I.relativeDepth = Be.AVATAR_SPRITE_DEFAULT_DEPTH - .01 + E[2]),
            this._isAnimating = this._avatarImage.isAnimating();
            let S = Be.INITIAL_RESERVED_SPRITES;
            const A = this._avatarImage.getDirection();
            for (const N of this._avatarImage.getSprites())
                if (N.id === Be.AVATAR) {
                    const b = this.getSprite(Be.SPRITE_INDEX_AVATAR);
                    if (b) {
                        const v = this._avatarImage.getLayerData(N);
                        let D = N.getDirectionOffsetX(A),
                            G = N.getDirectionOffsetY(A);
                        v && (D += v.dx, G += v.dy),
                        n < 48 && (D /= 2, G /= 2),
                        this._canStandUp || (b.offsetX += D, b.offsetY += G)
                    }
                } else {
                    const b = this.getSprite(S);
                    if (b) {
                        b.alphaTolerance = Fi.MATCH_NOTHING,
                        b.visible = !0;
                        const v = this._avatarImage.getLayerData(N);
                        let D = 0,
                            G = N.getDirectionOffsetX(A),
                            x = N.getDirectionOffsetY(A);
                        const F = N.getDirectionOffsetZ(A);
                        let U = 0;
                        N.hasDirections && (U = A),
                        v && (D = v.animationFrame, G += v.dx, x += v.dy, U += v.dd),
                        n < 48 && (G /= 2, x /= 2),
                        U < 0 ? U += 8 : U > 7 && (U -= 8);
                        const z = this._avatarImage.getScale() + "_" + N.member + "_" + U + "_" + D,
                            Q = this._avatarImage.getAsset(z);
                        if (!Q)
                            continue;
                        b.texture = Q.texture,
                        b.offsetX = Q.offsetX - n / 2 + G,
                        b.offsetY = Q.offsetY + x,
                        b.flipH = Q.flipH,
                        N.hasStaticY ? b.offsetY += this._verticalOffset * n / (2 * Be.BASE_Y_SCALE) : b.offsetY += this._postureOffset,
                        this._isLaying ? b.relativeDepth = Be.AVATAR_SPRITE_LAYING_DEPTH - .001 * this.totalSprites * F : b.relativeDepth = Be.AVATAR_SPRITE_DEFAULT_DEPTH - .001 * this.totalSprites * F,
                        N.ink === 33 ? b.blendMode = Qn.ADD : b.blendMode = Qn.NORMAL
                    }
                    S++
                }
        }
    }
    createAvatarImage(s, e)
    {
        let t = null,
            r = "avatarImage" + s.toString();
        if (e ? (r += "-" + e, t = this._cachedAvatarEffects.getValue(r)) : t = this._cachedAvatars.getValue(r), !t && (t = this._data.createAvatarImage(this._figure, s, this._gender, this, this), t))
            if (!e)
                this._cachedAvatars.add(r, t);
            else {
                if (this._cachedAvatarEffects.length >= Be.MAX_EFFECT_CACHE) {
                    const i = this._cachedAvatarEffects.remove(this._cachedAvatarEffects.getKey(0));
                    i && i.dispose()
                }
                this._cachedAvatarEffects.add(r, t)
            }
        return t
    }
    updateObject(s, e, t, r=!1)
    {
        if (!r && this.updateObjectCounter === s.updateCounter && this._geometryUpdateCounter === e.updateId)
            return !1;
        let i = s.getDirection().x - e.direction.x,
            n = this._headDirection - e.direction.x;
        return this._posture === "float" && (n = i), i = (i % 360 + 360) % 360, n = (n % 360 + 360) % 360, this._posture === "sit" && this._canStandUp && (i -= i % 90 - 45, n -= n % 90 - 45), (i !== this._angle || r) && (t = !0, this._angle = i, i = i - (135 - 22.5), i = (i + 360) % 360, this._avatarImage.setDirectionAngle(Ys.FULL, i)), (n !== this._headAngle || r) && (t = !0, this._headAngle = n, this._headAngle !== this._angle && (n = n - (135 - 22.5), n = (n + 360) % 360, this._avatarImage.setDirectionAngle(Ys.HEAD, n))), this._geometryUpdateCounter = e.updateId, this.updateObjectCounter = this.object.updateCounter, t
    }
    updateModel(s, e)
    {
        if (!s || this.updateModelCounter === s.updateCounter)
            return !1;
        let t = !1;
        const r = s.getValue(C.FIGURE_TALK) > 0;
        r !== this._talk && (this._talk = r, t = !0);
        const i = s.getValue(C.FIGURE_EXPRESSION);
        i !== this._expression && (this._expression = i, t = !0);
        const n = s.getValue(C.FIGURE_SLEEP) > 0;
        n !== this._sleep && (this._sleep = n, t = !0);
        const o = s.getValue(C.FIGURE_BLINK) > 0;
        o !== this._blink && (this._blink = o, t = !0);
        const l = s.getValue(C.FIGURE_GESTURE) || 0;
        l !== this._gesture && (this._gesture = l, t = !0);
        const c = s.getValue(C.FIGURE_POSTURE);
        c !== this._posture && (this._posture = c, t = !0);
        const u = s.getValue(C.FIGURE_POSTURE_PARAMETER);
        u !== this._postureParameter && (this._postureParameter = u, t = !0);
        const h = s.getValue(C.FIGURE_CAN_STAND_UP);
        h !== this._canStandUp && (this._canStandUp = h, t = !0);
        const d = s.getValue(C.FIGURE_VERTICAL_OFFSET) * Be.BASE_Y_SCALE;
        d !== this._verticalOffset && (this._verticalOffset = d, t = !0);
        const m = s.getValue(C.FIGURE_DANCE) || 0;
        m !== this._dance && (this._dance = m, t = !0);
        const p = s.getValue(C.FIGURE_EFFECT) || 0;
        p !== this._effect && (this._effect = p, t = !0);
        const E = s.getValue(C.FIGURE_CARRY_OBJECT) || 0;
        E !== this._carryObject && (this._carryObject = E, t = !0);
        const T = s.getValue(C.FIGURE_USE_OBJECT) || 0;
        T !== this._useObject && (this._useObject = T, t = !0);
        const I = s.getValue(C.HEAD_DIRECTION);
        I !== this._headDirection && (this._headDirection = I, t = !0),
        this._carryObject > 0 && T > 0 ? this._useObject !== this._carryObject && (this._useObject = this._carryObject, t = !0) : this._useObject !== 0 && (this._useObject = 0, t = !0);
        let S = this.getAddition(Be.FLOATING_IDLE_Z_ID);
        this._sleep ? (S || (S = this.addAddition(new ac(Be.FLOATING_IDLE_Z_ID, this))), t = !0) : S && this.removeAddition(Be.FLOATING_IDLE_Z_ID);
        const A = s.getValue(C.FIGURE_IS_MUTED) > 0;
        let N = this.getAddition(Be.MUTED_BUBBLE_ID);
        if (A)
            N || (N = this.addAddition(new j5(Be.MUTED_BUBBLE_ID, this))),
            t = !0;
        else {
            N && (this.removeAddition(Be.MUTED_BUBBLE_ID), t = !0);
            const J = s.getValue(C.FIGURE_IS_TYPING) > 0;
            let X = this.getAddition(Be.TYPING_BUBBLE_ID);
            J ? (X || (X = this.addAddition(new Y5(Be.TYPING_BUBBLE_ID, this))), t = !0) : X && (this.removeAddition(Be.TYPING_BUBBLE_ID), t = !0)
        }
        const b = s.getValue(C.FIGURE_GUIDE_STATUS) || 0;
        b !== zi.NONE ? (this.removeAddition(Be.GUIDE_BUBBLE_ID), this.addAddition(new H5(Be.GUIDE_BUBBLE_ID, this, b)), t = !0) : this.getAddition(Be.GUIDE_BUBBLE_ID) && (this.removeAddition(Be.GUIDE_BUBBLE_ID), t = !0);
        const v = s.getValue(C.FIGURE_IS_PLAYING_GAME) > 0;
        let D = this.getAddition(Be.GAME_CLICK_TARGET_ID);
        v ? (D || (D = this.addAddition(new gu(Be.GAME_CLICK_TARGET_ID))), t = !0) : D && this.removeAddition(Be.GAME_CLICK_TARGET_ID);
        const G = s.getValue(C.FIGURE_NUMBER_VALUE);
        let x = this.getAddition(Be.NUMBER_BUBBLE_ID);
        G > 0 ? (x || (x = this.addAddition(new W5(Be.NUMBER_BUBBLE_ID, G, this))), t = !0) : x && this.removeAddition(Be.NUMBER_BUBBLE_ID);
        let F = this.getAddition(Be.EXPRESSION_ID);
        this._expression > 0 ? F || (F = nc.getExpressionAddition(Be.EXPRESSION_ID, this._expression, this), F && this.addAddition(F)) : F && this.removeAddition(Be.EXPRESSION_ID),
        this.updateScale(e);
        const U = s.getValue(C.GENDER);
        U !== this._gender && (this._gender = U, t = !0),
        this.updateFigure(s.getValue(C.FIGURE)) && (t = !0);
        let z = s.getValue(C.FIGURE_SIGN);
        z === null && (z = -1),
        this._sign !== z && (this._sign = z, t = !0);
        const Q = s.getValue(C.FIGURE_HIGHLIGHT_ENABLE) > 0;
        if (Q !== this._highlightEnabled && (this._highlightEnabled = Q, t = !0), this._highlightEnabled) {
            const J = s.getValue(C.FIGURE_HIGHLIGHT) > 0;
            J !== this._highlight && (this._highlight = J, t = !0)
        }
        const j = s.getValue(C.OWN_USER) > 0;
        return j !== this._ownUser && (this._ownUser = j, t = !0), this.updateModelCounter = s.updateCounter, t
    }
    setDirection(s)
    {
        this._direction !== s && (this._direction = s, this._needsUpdate = !0)
    }
    updateScale(s)
    {
        s < 48 && (this._blink = !1),
        this._posture === "sit" || this._posture === "lay" ? this._postureOffset = s / 2 : this._postureOffset = 0,
        this._layInside = !1,
        this._isLaying = !1,
        this._posture === "lay" && (this._isLaying = !0, parseInt(this._postureParameter) < 0 && (this._layInside = !0))
    }
    processActionsForAvatar(s)
    {
        if (!s)
            return;
        if (s.initActionAppends(), s.appendAction(ie.POSTURE, this._posture, this._postureParameter), this._gesture > 0 && this._avatarImage.appendAction(ie.GESTURE, ie.getGesture(this._gesture)), this._dance > 0 && this._avatarImage.appendAction(ie.DANCE, this._dance), this._sign > -1 && this._avatarImage.appendAction(ie.SIGN, this._sign), this._carryObject > 0 && this._avatarImage.appendAction(ie.CARRY_OBJECT, this._carryObject), this._useObject > 0 && this._avatarImage.appendAction(ie.USE_OBJECT, this._useObject), this._talk && this._avatarImage.appendAction(ie.TALK), (this._sleep || this._blink) && this._avatarImage.appendAction(ie.SLEEP), this._expression > 0) {
            const t = ie.getExpression(this._expression);
            if (t !== "")
                switch (t) {
                case ie.DANCE:
                    this._avatarImage.appendAction(ie.DANCE, 2);
                    break;
                default:
                    this._avatarImage.appendAction(t);
                    break
                }
        }
        this._effect > 0 && this._avatarImage.appendAction(ie.EFFECT, this._effect),
        s.endActionAppends(),
        this._isAnimating = s.isAnimating();
        let e = Be.INITIAL_RESERVED_SPRITES;
        for (const t of this._avatarImage.getSprites())
            t.id !== Be.AVATAR && e++;
        if (e !== this.totalSprites && this.createSprites(e), this._extraSpritesStartIndex = e, this._additions)
            for (const t of this._additions.values())
                this.createSprite()
    }
    updateFigure(s)
    {
        return this._figure === s ? !1 : (this._figure = s, this.clearAvatar(), !0)
    }
    resetFigure(s)
    {
        this.clearAvatar()
    }
    resetEffect(s)
    {
        this.clearAvatar()
    }
    clearAvatar()
    {
        for (const e of this._cachedAvatars.getValues())
            e && e.dispose();
        for (const e of this._cachedAvatarEffects.getValues())
            e && e.dispose();
        this._cachedAvatars.reset(),
        this._cachedAvatarEffects.reset(),
        this._avatarImage = null;
        const s = this.getSprite(Be.AVATAR_LAYER_ID);
        s && (s.texture = cs.EMPTY, s.alpha = 255)
    }
    getAddition(s)
    {
        if (!this._additions)
            return null;
        const e = this._additions.get(s);
        return e || null
    }
    addAddition(s)
    {
        if (!this.getAddition(s.id))
            return this._additions.set(s.id, s), s
    }
    removeAddition(s)
    {
        const e = this.getAddition(s);
        e && (this._additions.delete(e.id), e.dispose())
    }
    updateShadow(s)
    {
        this._shadow = null;
        const e = this.getSprite(Be.SHADOW_LAYER_ID);
        if (!e)
            return;
        let t = this._posture === "mv" || this._posture === "std" || this._posture === "sit" && this._canStandUp;
        if (this._effect === Be.SNOWBOARDING_EFFECT && (t = !1), t) {
            if (e.visible = !0, !this._shadow || s !== this._scale) {
                let r = 0,
                    i = 0;
                s < 48 ? (e.libraryAssetName = "sh_std_sd_1_0_0", this._shadow = this._avatarImage.getAsset(e.libraryAssetName), r = -8, i = this._canStandUp ? 6 : -3) : (e.libraryAssetName = "h_std_sd_1_0_0", this._shadow = this._avatarImage.getAsset(e.libraryAssetName), r = -17, i = this._canStandUp ? 10 : -7),
                this._shadow ? (e.texture = this._shadow.texture, e.offsetX = r, e.offsetY = i, e.alpha = 50, e.relativeDepth = 1) : e.visible = !1
            }
        } else
            this._shadow = null,
            e.visible = !1
    }
    getAvatarRenderAsset(s)
    {
        return this._data ? this._data.getAvatarRendererAsset(s) : null
    }
    get direction()
    {
        return this._direction
    }
    get posture()
    {
        return this._posture
    }
    get angle()
    {
        return this._angle
    }
    get disposed()
    {
        return this._disposed
    }
}
;
let Cs = Be;
Cs.AVATAR = "avatar";
Cs.FLOATING_IDLE_Z_ID = 1;
Cs.TYPING_BUBBLE_ID = 2;
Cs.EXPRESSION_ID = 3;
Cs.NUMBER_BUBBLE_ID = 4;
Cs.GAME_CLICK_TARGET_ID = 5;
Cs.MUTED_BUBBLE_ID = 6;
Cs.GUIDE_BUBBLE_ID = 7;
Cs.OWN_USER_ID = 4;
Cs.UPDATE_TIME_INCREASER = 41;
Cs.AVATAR_LAYER_ID = 0;
Cs.SHADOW_LAYER_ID = 1;
Cs.SNOWBOARDING_EFFECT = 97;
Cs.INITIAL_RESERVED_SPRITES = 2;
Cs.ANIMATION_FRAME_UPDATE_INTERVAL = 2;
Cs.DEFAULT_CANVAS_OFFSETS = [0, 0, 0];
Cs.MAX_EFFECT_CACHE = 2;
Cs.SPRITE_INDEX_AVATAR = 0;
Cs.BASE_Y_SCALE = 1e3;
Cs.AVATAR_SPRITE_DEFAULT_DEPTH = -.01;
Cs.AVATAR_OWN_DEPTH_ADJUST = .001;
Cs.AVATAR_SPRITE_LAYING_DEPTH = -.409;
const Bn = class {
    static allocate(s, e, t, r, i, n, o=-1, l=0)
    {
        const c = Bn.POOL.length ? Bn.POOL.pop() : new Bn;
        return r < 1 && (r = 1), i < 0 && (i = Bn.FRAME_REPEAT_FOREVER), c._id = s, c._x = e || 0, c._y = t || 0, c._repeats = r, c._frameRepeats = i, c._remainingFrameRepeats = i, c._isLastFrame = n, c._isRecycled = !1, o >= 0 ? (c._activeSequence = o, c._activeSequenceOffset = l) : (c._activeSequence = -1, c._activeSequenceOffset = 0), c
    }
    get id()
    {
        return this._id >= 0 ? this._id : -this._id * Math.random()
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._y
    }
    get repeats()
    {
        return this._repeats
    }
    get frameRepeats()
    {
        return this._frameRepeats
    }
    get isLastFrame()
    {
        return this._isLastFrame
    }
    get remainingFrameRepeats()
    {
        return this._frameRepeats < 0 ? Bn.FRAME_REPEAT_FOREVER : this._remainingFrameRepeats
    }
    set remainingFrameRepeats(s)
    {
        s < 0 && (s = 0),
        this._frameRepeats > 0 && s > this._frameRepeats && (s = this._frameRepeats),
        this._remainingFrameRepeats = s
    }
    get activeSequence()
    {
        return this._activeSequence
    }
    get activeSequenceOffset()
    {
        return this._activeSequenceOffset
    }
    recycle()
    {
        this._isRecycled || (this._isRecycled = !0, Bn.POOL.length < Bn.POOL_SIZE_LIMIT && Bn.POOL.push(this))
    }
}
;
let Cn = Bn;
Cn.FRAME_REPEAT_FOREVER = -1;
Cn.SEQUENCE_NOT_DEFINED = -1;
Cn.POOL_SIZE_LIMIT = 3e3;
Cn.POOL = [];
class VD {
    constructor(e, t, r, i, n, o)
    {
        this._id = 0,
        this._x = 0,
        this._y = 0,
        this._randomX = 0,
        this._randomY = 0,
        this._repeats = 1,
        this._id = e,
        this._x = t,
        this._y = r,
        this._randomX = i,
        this._randomY = n,
        this._repeats = o
    }
    get id()
    {
        return this._id
    }
    hasDirectionalOffsets()
    {
        return !1
    }
    getX(e)
    {
        return this._x
    }
    getY(e)
    {
        return this._y
    }
    get x()
    {
        return this._x
    }
    get y()
    {
        return this._x
    }
    get randomX()
    {
        return this._randomX
    }
    get randomY()
    {
        return this._randomY
    }
    get repeats()
    {
        return this._repeats
    }
}
class z5 extends VD {
    constructor(e, t, r, i, n, o, l)
    {
        super(e, t, r, i, n, l),
        this._directionalOffsets = o
    }
    hasDirectionalOffsets()
    {
        return this._directionalOffsets !== null
    }
    getX(e)
    {
        return this._directionalOffsets ? this._directionalOffsets.getXOffset(e, super.getX(e)) : super.getX(e)
    }
    getY(e)
    {
        return this._directionalOffsets ? this._directionalOffsets.getYOffset(e, super.getY(e)) : super.getY(e)
    }
}
class K5 {
    constructor(e, t)
    {
        this._frames = [],
        this._frameIndexes = [],
        this._frameRepeats = [],
        this._isRandom = t,
        this._loopCount = e < 1 ? 1 : e
    }
    get isRandom()
    {
        return this._isRandom
    }
    get frameCount()
    {
        return this._frameIndexes.length * this._loopCount
    }
    dispose()
    {
        this._frames = []
    }
    initialize()
    {
        let e = this._frameIndexes.length - 1,
            t = -1,
            r = 1;
        for (; e >= 0;)
            this._frameIndexes[e] === t ? r++ : (t = this._frameIndexes[e], r = 1),
            this._frameRepeats[e] = r,
            e--
    }
    addFrame(e, t, r, i, n, o)
    {
        let l = 1;
        if (this._frames.length > 0) {
            const u = this._frames[this._frames.length - 1];
            u.id === e && !u.hasDirectionalOffsets() && u.x === t && u.y === r && u.randomX === i && i === 0 && u.randomY === n && n === 0 && (l += u.repeats, this._frames.pop())
        }
        const c = o ? new z5(e, t, r, i, n, o, l) : new VD(e, t, r, i, n, l);
        this._frames.push(c),
        this._frameIndexes.push(this._frames.length - 1),
        this._frameRepeats.push(1)
    }
    getFrame(e)
    {
        return !this._frames.length || e < 0 || e >= this.frameCount ? null : this._frames[this._frameIndexes[e % this._frameIndexes.length]]
    }
    getFrameIndex(e)
    {
        return e < 0 || e >= this.frameCount ? -1 : (this._isRandom && (e = Math.round(Math.random() * this._frameIndexes.length), e === this._frameIndexes.length && e--), e)
    }
    getRepeats(e)
    {
        return e < 0 || e >= this.frameCount ? 0 : this._frameRepeats[e % this._frameRepeats.length]
    }
}
class q5 {
    constructor(e, t, r)
    {
        this._frameSequences = [],
        this._frameCount = -1,
        this._loopCount = e < 0 ? 0 : e,
        this._frameRepeat = t < 1 ? 1 : t,
        this._isRandom = r
    }
    get frameCount()
    {
        return this._frameCount < 0 && this.calculateLength(), this._frameCount
    }
    dispose()
    {
        if (!(!this._frameSequences || !this._frameSequences.length)) {
            for (const e of this._frameSequences)
                e && e.dispose();
            this._frameSequences = []
        }
    }
    addFrameSequence(e, t)
    {
        const r = new K5(e, t);
        return this._frameSequences.push(r), r
    }
    calculateLength()
    {
        this._frameCount = 0;
        for (const e of this._frameSequences)
            e && (this._frameCount += e.frameCount)
    }
    getFrame(e, t)
    {
        if (this._frameCount < 1)
            return null;
        if (t = t / this._frameRepeat, !this._isRandom) {
            const n = Math.floor(t / this._frameCount);
            t = Math.floor(t % this._frameCount);
            let o = !1,
                l = null;
            (this._loopCount > 0 && n >= this._loopCount || this._loopCount <= 0 && this._frameCount === 1) && (t = this._frameCount - 1, o = !0);
            let c = 0,
                u = 0;
            for (; u < this._frameSequences.length;) {
                if (l = this._frameSequences[u], l) {
                    if (t < c + l.frameCount)
                        break;
                    c += l.frameCount
                }
                u++
            }
            return this.getFrameFromSpecificSequence(e, l, u, t - c, o)
        }
        const r = Math.trunc(this._frameSequences.length * Math.random()),
            i = this._frameSequences[r];
        return i.frameCount < 1 ? null : this.getFrameFromSpecificSequence(e, i, r, 0, !1)
    }
    getFrameFromSequence(e, t, r, i)
    {
        if (t < 0 || t >= this._frameSequences.length)
            return null;
        const n = this._frameSequences[t];
        return n ? r >= n.frameCount ? this.getFrame(e, i) : this.getFrameFromSpecificSequence(e, n, t, r, !1) : null
    }
    getFrameFromSpecificSequence(e, t, r, i, n)
    {
        if (!t)
            return null;
        const o = t.getFrameIndex(i),
            l = t.getFrame(o);
        if (!l)
            return null;
        let c = l.getX(e),
            u = l.getY(e);
        const h = l.randomX,
            d = l.randomY;
        let m = l.repeats,
            p = !1;
        h && (c = Math.trunc(c + h * Math.random())),
        d && (u = Math.trunc(u + d * Math.random())),
        m > 1 && (m = t.getRepeats(o));
        let E = this._frameRepeat * m;
        return n && (E = Cn.FRAME_REPEAT_FOREVER), !this._isRandom && !t.isRandom && r === this._frameSequences.length - 1 && i === t.frameCount - 1 && (p = !0), Cn.allocate(l.id, c, u, m, E, p, r, i)
    }
}
class HD {
    constructor()
    {
        this._offsetX = new Map,
        this._offsetY = new Map
    }
    getXOffset(e, t)
    {
        const r = this._offsetX.get(e);
        return r ?? t
    }
    getYOffset(e, t)
    {
        const r = this._offsetY.get(e);
        return r ?? t
    }
    setDirection(e, t, r)
    {
        this._offsetX.set(e, t),
        this._offsetY.set(e, r)
    }
}
const ul = class {
    constructor()
    {
        this._layers = new Map,
        this._frameCount = -1,
        this._randomStart = !1,
        this._immediateChanges = null
    }
    static getTransitionToAnimationId(s)
    {
        return ul.TRANSITION_TO_ANIMATION_OFFSET + s
    }
    static getTransitionFromAnimationId(s)
    {
        return ul.TRANSITION_FROM_ANIMATION_OFFSET + s
    }
    static isTransitionToAnimation(s)
    {
        return s >= ul.TRANSITION_TO_ANIMATION_OFFSET && s < ul.TRANSITION_FROM_ANIMATION_OFFSET
    }
    static isTransitionFromAnimation(s)
    {
        return s >= ul.TRANSITION_FROM_ANIMATION_OFFSET
    }
    dispose()
    {
        for (const s of this._layers.values())
            s && s.dispose();
        this._layers.clear(),
        this._immediateChanges = null
    }
    setImmediateChanges(s)
    {
        this._immediateChanges = s
    }
    isImmediateChange(s)
    {
        return !(!this._immediateChanges || this._immediateChanges.indexOf(s) === -1)
    }
    getStartFrame(s)
    {
        return this._randomStart ? Math.random() * this._frameCount : 0
    }
    initialize(s)
    {
        if (s.randomStart && (this._randomStart = !0), s.layers)
            for (const e in s.layers) {
                const t = s.layers[e];
                if (!t)
                    return !1;
                const r = parseInt(e),
                    i = t.loopCount !== void 0 ? t.loopCount : 1,
                    n = t.frameRepeat !== void 0 ? t.frameRepeat : 1,
                    o = t.random !== void 0 && t.random !== 0;
                if (!this.addLayer(r, i, n, o, t))
                    return !1
            }
        return !0
    }
    addLayer(s, e, t, r, i)
    {
        const n = new q5(e, t, r);
        if (i.frameSequences)
            for (const l in i.frameSequences) {
                const c = i.frameSequences[l];
                if (!c)
                    continue;
                const u = c.loopCount !== void 0 ? c.loopCount : 1,
                    h = c.random !== void 0 && c.random !== 0,
                    d = n.addFrameSequence(u, h);
                if (c.frames)
                    for (const m in c.frames) {
                        const p = c.frames[m];
                        if (!p)
                            return n.dispose(), !1;
                        d.addFrame(p.id, p.x || 0, p.y || 0, p.randomX || 0, p.randomY || 0, this.readDirectionalOffsets(p))
                    }
                d.initialize()
            }
        n.calculateLength(),
        this._layers.set(s, n);
        const o = n.frameCount;
        return o > this._frameCount && (this._frameCount = o), !0
    }
    readDirectionalOffsets(s)
    {
        let e = null;
        if (s && s.offsets)
            for (const t in s.offsets) {
                const r = s.offsets[t];
                r && (e || (e = new HD), e.setDirection(r.direction, r.x, r.y))
            }
        return e
    }
    getFrame(s, e, t)
    {
        const r = this._layers.get(e);
        return r ? r.getFrame(s, t) : null
    }
    getFrameFromSequence(s, e, t, r, i)
    {
        const n = this._layers.get(e);
        return n ? n.getFrameFromSequence(s, t, r, i) : null
    }
}
;
let Ls = ul;
Ls.TRANSITION_TO_ANIMATION_OFFSET = 1e6;
Ls.TRANSITION_FROM_ANIMATION_OFFSET = 2e6;
Ls.DEFAULT_FRAME_NUMBER = 0;
const gf = class {
    constructor(s)
    {
        this._colors = [],
        this.createColors(s)
    }
    createColors(s)
    {
        if (s)
            for (let e = 0; e < s; e++)
                this._colors.push(gf.DEFAULT_COLOR)
    }
    dispose()
    {
        this._colors = []
    }
    getLayerColor(s)
    {
        const e = this._colors[s];
        return e || gf.DEFAULT_COLOR
    }
    setColorLayer(s, e)
    {
        this._colors[s] && (this._colors[s] = e)
    }
}
;
let Vl = gf;
Vl.DEFAULT_COLOR = 16777215;
const Ca = class {
    constructor()
    {
        this._tag = Ca.DEFAULT_TAG,
        this._ink = Ca.DEFAULT_INK,
        this._alpha = Ca.DEFAULT_ALPHA,
        this._ignoreMouse = Ca.DEFAULT_IGNORE_MOUSE,
        this._xOffset = Ca.DEFAULT_XOFFSET,
        this._yOffset = Ca.DEFAULT_YOFFSET,
        this._zOffset = Ca.DEFAULT_ZOFFSET
    }
    setFromLayer(s)
    {
        s && (this._tag = s.tag, this._ink = s.ink, this._alpha = s.alpha, this._ignoreMouse = s.ignoreMouse, this._xOffset = s.xOffset, this._yOffset = s.yOffset, this._zOffset = s.zOffset)
    }
    get tag()
    {
        return this._tag
    }
    set tag(s)
    {
        this._tag = s
    }
    get ink()
    {
        return this._ink
    }
    set ink(s)
    {
        this._ink = s
    }
    get alpha()
    {
        return this._alpha
    }
    set alpha(s)
    {
        this._alpha = s
    }
    get ignoreMouse()
    {
        return this._ignoreMouse
    }
    set ignoreMouse(s)
    {
        this._ignoreMouse = s
    }
    get xOffset()
    {
        return this._xOffset
    }
    set xOffset(s)
    {
        this._xOffset = s
    }
    get yOffset()
    {
        return this._yOffset
    }
    set yOffset(s)
    {
        this._yOffset = s
    }
    get zOffset()
    {
        return this._zOffset
    }
    set zOffset(s)
    {
        this._zOffset = s
    }
}
;
let ot = Ca;
ot.DEFAULT_COUNT = 0;
ot.DEFAULT_DIRECTION = 0;
ot.DEFAULT_TAG = "";
ot.DEFAULT_INK = Qn.NORMAL;
ot.DEFAULT_ALPHA = 255;
ot.DEFAULT_IGNORE_MOUSE = !1;
ot.DEFAULT_XOFFSET = 0;
ot.DEFAULT_YOFFSET = 0;
ot.DEFAULT_ZOFFSET = 0;
class No {
    constructor(e)
    {
        this._layers = [],
        this.createLayers(e)
    }
    createLayers(e)
    {
        if (e)
            for (let t = 0; t < e; t++)
                this._layers.push(new ot)
    }
    dispose()
    {
        this._layers = []
    }
    setFromDirection(e)
    {
        if (!e)
            return;
        const t = this.layerCount;
        if (t === e.layerCount)
            for (let r = 0; r < t; r++) {
                const i = this.getLayer(r),
                    n = e.getLayer(r);
                i && i.setFromLayer(n)
            }
    }
    getLayer(e)
    {
        const t = this._layers[e];
        return t || null
    }
    getLayerTag(e)
    {
        const t = this.getLayer(e);
        return t ? t.tag : ot.DEFAULT_TAG
    }
    setLayerTag(e, t)
    {
        const r = this.getLayer(e);
        r && (r.tag = t)
    }
    getLayerInk(e)
    {
        const t = this.getLayer(e);
        return t ? t.ink : ot.DEFAULT_INK
    }
    setLayerInk(e, t)
    {
        const r = this.getLayer(e);
        r && (isNaN(t) || (r.ink = t))
    }
    getLayerAlpha(e)
    {
        const t = this.getLayer(e);
        return t ? t.alpha : ot.DEFAULT_ALPHA
    }
    setLayerAlpha(e, t)
    {
        const r = this.getLayer(e);
        r && (isNaN(t) || (r.alpha = t))
    }
    getLayerIgnoreMouse(e)
    {
        const t = this.getLayer(e);
        return t ? t.ignoreMouse : ot.DEFAULT_IGNORE_MOUSE
    }
    setLayerIgnoreMouse(e, t)
    {
        const r = this.getLayer(e);
        r && (r.ignoreMouse = t || !1)
    }
    getLayerXOffset(e)
    {
        const t = this.getLayer(e);
        return t ? t.xOffset : ot.DEFAULT_XOFFSET
    }
    setLayerXOffset(e, t)
    {
        const r = this.getLayer(e);
        r && (isNaN(t) || (r.xOffset = t))
    }
    getLayerYOffset(e)
    {
        const t = this.getLayer(e);
        return t ? t.yOffset : ot.DEFAULT_YOFFSET
    }
    setLayerYOffset(e, t)
    {
        const r = this.getLayer(e);
        r && (isNaN(t) || (r.yOffset = t))
    }
    getLayerZOffset(e)
    {
        const t = this.getLayer(e);
        return t ? t.zOffset : ot.DEFAULT_ZOFFSET
    }
    setLayerZOffset(e, t)
    {
        const r = this.getLayer(e);
        r && (isNaN(t) || (r.zOffset = t))
    }
    get layerCount()
    {
        return this._layers.length
    }
}
No.USE_DEFAULT_DIRECTION = -1;
const ff = class {
    constructor(s, e)
    {
        this._layerCount = s < 0 ? 0 : s > ff.MAX_LAYERS ? ff.MAX_LAYERS : s,
        this._angle = e < 1 ? 1 : e > 360 ? 360 : e,
        this._defaultDirection = new No(this._layerCount),
        this._directions = new Map,
        this._colors = [],
        this._lastDirectionData = null,
        this._lastDirection = -1
    }
    dispose()
    {
        this._defaultDirection && this._defaultDirection.dispose();
        for (const s of this._directions.values())
            s && s.dispose();
        for (const s of this._colors)
            s && s.dispose();
        this.reset()
    }
    reset()
    {
        this._defaultDirection = null,
        this._colors = [],
        this._lastDirectionData = null,
        this._lastDirection = -1,
        this._directions.clear()
    }
    processLayers(s)
    {
        return s ? this.setDirectionLayers(this._defaultDirection, s) : !1
    }
    processDirections(s)
    {
        if (!s)
            return !1;
        for (const e in s) {
            const t = s[e];
            if (!t)
                continue;
            const r = parseInt(e);
            if (this._directions.get(r))
                return !1;
            const i = new No(this._layerCount);
            i.setFromDirection(this._defaultDirection),
            this.setDirectionLayers(i, t.layers),
            this._directions.set(r, i),
            this._lastDirectionData = null,
            this._lastDirection = -1
        }
        return !0
    }
    processColors(s)
    {
        if (!s)
            return !1;
        for (const e in s) {
            const t = s[e];
            if (!t)
                continue;
            const r = parseInt(e);
            if (this._colors[r])
                return !1;
            const i = new Vl(this._layerCount);
            for (const n in t.layers) {
                const o = t.layers[n];
                if (!o)
                    continue;
                const l = parseInt(n),
                    c = o.color;
                i.setColorLayer(l, c)
            }
            this._colors[r] = i
        }
        return !0
    }
    setDirectionLayers(s, e)
    {
        if (!s || !e)
            return !1;
        for (const t in e) {
            const r = e[t];
            if (!r)
                continue;
            const i = parseInt(t);
            if (i < 0 || i >= this._layerCount)
                return !1;
            r.ink !== void 0 && s.setLayerInk(i, DU.inkToBlendMode(r.ink)),
            r.tag !== void 0 && s.setLayerTag(i, r.tag),
            r.alpha !== void 0 && s.setLayerAlpha(i, r.alpha),
            r.ignoreMouse !== void 0 && s.setLayerIgnoreMouse(i, r.ignoreMouse),
            r.x !== void 0 && s.setLayerXOffset(i, r.x),
            r.y !== void 0 && s.setLayerYOffset(i, r.y),
            r.z !== void 0 && s.setLayerZOffset(i, r.z / -1e3)
        }
        return !0
    }
    getValidDirection(s)
    {
        if (this._directions.get(s))
            return s;
        s = (s % 360 + 360) % 360;
        let t = -1,
            r = -1;
        for (const i of this._directions.keys()) {
            let n = (i * this._angle - s + 360) % 360;
            n > 180 && (n = 360 - n),
            (n < t || t < 0) && (t = n, r = i)
        }
        return r >= 0 ? Math.trunc(r) : 0
    }
    getDirectionData(s)
    {
        if (s === this._lastDirection && this._lastDirectionData)
            return this._lastDirectionData;
        let e = this._directions.get(s);
        return e || (e = this._defaultDirection), this._lastDirection = s, this._lastDirectionData = e, this._lastDirectionData
    }
    getLayerTag(s, e)
    {
        const t = this.getDirectionData(s);
        return t ? t.getLayerTag(e) : ot.DEFAULT_TAG
    }
    getLayerInk(s, e)
    {
        const t = this.getDirectionData(s);
        return t ? t.getLayerInk(e) : ot.DEFAULT_INK
    }
    getLayerAlpha(s, e)
    {
        const t = this.getDirectionData(s);
        return t ? t.getLayerAlpha(e) : ot.DEFAULT_ALPHA
    }
    getLayerColor(s, e)
    {
        const t = this._colors[e];
        return t ? t.getLayerColor(s) : Vl.DEFAULT_COLOR
    }
    getLayerIgnoreMouse(s, e)
    {
        const t = this.getDirectionData(s);
        return t ? t.getLayerIgnoreMouse(e) : ot.DEFAULT_IGNORE_MOUSE
    }
    getLayerXOffset(s, e)
    {
        const t = this.getDirectionData(s);
        return t ? t.getLayerXOffset(e) : ot.DEFAULT_XOFFSET
    }
    getLayerYOffset(s, e)
    {
        const t = this.getDirectionData(s);
        return t ? t.getLayerYOffset(e) : ot.DEFAULT_YOFFSET
    }
    getLayerZOffset(s, e)
    {
        const t = this.getDirectionData(s);
        return t ? t.getLayerZOffset(e) : ot.DEFAULT_ZOFFSET
    }
    get layerCount()
    {
        return this._layerCount
    }
}
;
let OE = ff;
OE.MAX_LAYERS = 26;
class sd extends OE {
    constructor(e, t)
    {
        super(e, t),
        this._animations = new Map,
        this._animationIds = []
    }
    dispose()
    {
        super.dispose();
        for (const e of this._animations.values())
            e && e.dispose();
        this._animations.clear(),
        this._animationIds = []
    }
    defineAnimations(e)
    {
        if (!e)
            return !0;
        for (const t in e) {
            const r = e[t];
            if (!r)
                return !1;
            let i = parseInt(t.split("_")[0]),
                n = !1;
            const o = r.transitionTo,
                l = r.transitionFrom;
            o !== void 0 && (i = Ls.getTransitionToAnimationId(o), n = !0),
            l !== void 0 && (i = Ls.getTransitionFromAnimationId(l), n = !0);
            const c = this.createAnimationData();
            if (!c.initialize(r))
                return c.dispose(), !1;
            const u = r.immediateChangeFrom;
            if (u !== void 0) {
                const h = u.split(","),
                    d = [];
                for (const m of h) {
                    const p = parseInt(m);
                    d.indexOf(p) === -1 && d.push(p)
                }
                c.setImmediateChanges(d)
            }
            this._animations.set(i, c),
            n || this._animationIds.push(i)
        }
        return !0
    }
    createAnimationData()
    {
        return new Ls
    }
    hasAnimation(e)
    {
        return !!this._animations.get(e)
    }
    getAnimationCount()
    {
        return this._animationIds.length || 0
    }
    getAnimationId(e)
    {
        const t = this.getAnimationCount();
        return e < 0 || t <= 0 ? 0 : this._animationIds[e % t]
    }
    isImmediateChange(e, t)
    {
        const r = this._animations.get(e);
        return r ? r.isImmediateChange(t) : !1
    }
    getStartFrame(e, t)
    {
        const r = this._animations.get(e);
        return r ? r.getStartFrame(t) : 0
    }
    getFrame(e, t, r, i)
    {
        const n = this._animations.get(e);
        return n ? n.getFrame(t, r, i) : null
    }
    getFrameFromSequence(e, t, r, i, n, o)
    {
        const l = this._animations.get(e);
        return l ? l.getFrameFromSequence(t, r, i, n, o) : null
    }
}
class jD {
    constructor()
    {
        this._animationId = -1,
        this._animationAfterTransitionId = 0,
        this._animationOver = !1,
        this._frameCounter = 0,
        this._frames = [],
        this._lastFramePlayed = [],
        this._animationPlayed = [],
        this._layerCount = 0
    }
    get animationOver()
    {
        return this._animationOver
    }
    set animationOver(e)
    {
        this._animationOver = e
    }
    get frameCounter()
    {
        return this._frameCounter
    }
    set frameCounter(e)
    {
        this._frameCounter = e
    }
    get animationId()
    {
        return this._animationId
    }
    set animationId(e)
    {
        e !== this._animationId && (this._animationId = e, this.resetAnimationFrames(!1))
    }
    get animationAfterTransitionId()
    {
        return this._animationAfterTransitionId
    }
    set animationAfterTransitionId(e)
    {
        this._animationAfterTransitionId = e
    }
    dispose()
    {
        this.recycleFrames(),
        this._frames = null,
        this._lastFramePlayed = null,
        this._animationPlayed = null
    }
    setLayerCount(e)
    {
        this._layerCount = e,
        this.resetAnimationFrames()
    }
    resetAnimationFrames(e=!0)
    {
        (e || !this._frames) && (this.recycleFrames(), this._frames = []),
        this._lastFramePlayed = [],
        this._animationPlayed = [],
        this._animationOver = !1,
        this._frameCounter = 0;
        let t = 0;
        for (; t < this._layerCount;) {
            if (e || this._frames.length <= t)
                this._frames[t] = null;
            else {
                const r = this._frames[t];
                r && (r.recycle(), this._frames[t] = Cn.allocate(r.id, r.x, r.y, r.repeats, 0, r.isLastFrame))
            }
            this._lastFramePlayed[t] = !1,
            this._animationPlayed[t] = !1,
            t++
        }
    }
    recycleFrames()
    {
        if (!(!this._frames || !this._frames.length))
            for (const e of this._frames)
                e && e.recycle()
    }
    getFrame(e)
    {
        return e < 0 || e >= this._layerCount ? null : this._frames[e]
    }
    setFrame(e, t)
    {
        if (e < 0 || e >= this._layerCount)
            return;
        const r = this._frames[e];
        r && r.recycle(),
        this._frames[e] = t
    }
    getAnimationPlayed(e)
    {
        return e < 0 || e >= this._layerCount ? !0 : this._animationPlayed[e]
    }
    setAnimationPlayed(e, t)
    {
        e < 0 || e >= this._layerCount || (this._animationPlayed[e] = t)
    }
    getLastFramePlayed(e)
    {
        return e < 0 || e >= this._layerCount ? !0 : this._lastFramePlayed[e]
    }
    setLastFramePlayed(e, t)
    {
        e < 0 || e >= this._layerCount || (this._lastFramePlayed[e] = t)
    }
}
const WD = class  extends sd{
    constructor(s, e)
    {
        super(s, e),
        this._posturesToAnimations = new Map,
        this._gesturesToAnimations = new Map,
        this._defaultPosture = null
    }
    processPostures(s)
    {
        if (!s || (s.defaultPosture && s.defaultPosture.length && (this._defaultPosture = s.defaultPosture), !s.postures))
            return !1;
        for (const e of s.postures)
            this._posturesToAnimations.get(e.id) || (this._defaultPosture === null && (this._defaultPosture = e.id), this._posturesToAnimations.set(e.id, e.animationId));
        return this._posturesToAnimations.get(this._defaultPosture) !== void 0
    }
    processGestures(s)
    {
        if (!s)
            return !1;
        for (const e of s)
            this._gesturesToAnimations.get(e.id) || this._gesturesToAnimations.set(e.id, e.animationId);
        return !0
    }
    postureToAnimation(s)
    {
        return this._posturesToAnimations.get(s) || (s = this._defaultPosture), this._posturesToAnimations.get(s)
    }
    getGestureDisabled(s)
    {
        return s === "ded"
    }
    gestureToAnimation(s)
    {
        return this._gesturesToAnimations.get(s) ? this._gesturesToAnimations.get(s) : WD.DEFAULT
    }
    animationToPosture(s, e)
    {
        if (s >= 0 && s < this._posturesToAnimations.size) {
            const t = this._posturesToAnimations.keys();
            for (;;) {
                const r = t.next();
                if (r.done)
                    return null;
                if (s <= 0)
                    return r.value;
                --s
            }
        }
        return e ? this._defaultPosture : null
    }
    animationToGesture(s)
    {
        if (s >= 0 && s < this._gesturesToAnimations.size) {
            const e = this._gesturesToAnimations.keys();
            for (;;) {
                const t = e.next();
                if (t.done)
                    return null;
                if (s <= 0)
                    return t.value;
                --s
            }
        }
        return null
    }
    getGestureForAnimationId(s)
    {
        for (const e of this._gesturesToAnimations.keys())
            if (this._gesturesToAnimations.get(e) === s)
                return e;
        return null
    }
    get totalPostures()
    {
        return this._posturesToAnimations.size
    }
    get totalGestures()
    {
        return this._gesturesToAnimations.size
    }
}
;
let hl = WD;
hl.DEFAULT = -1;
class ra {
    constructor()
    {
        this._type = "",
        this._sizes = [],
        this._sizeDatas = new Map,
        this._lastSize = -1,
        this._lastSizeScale = -1,
        this._lastSizeData = null,
        this._lastSizeDataScale = -1
    }
    initialize(e)
    {
        return this.reset(), e ? (this._type = e.name, this.defineVisualizations(e.visualizations) ? !0 : (this.reset(), !1)) : !1
    }
    dispose()
    {
        if (this._sizeDatas && this._sizeDatas.size) {
            for (const e of this._sizeDatas.values())
                e && e.dispose();
            this._sizeDatas = null
        }
        this._lastSizeData = null,
        this._sizes = null
    }
    reset()
    {
        if (this._type = "", this._sizeDatas && this._sizeDatas.size)
            for (const e of this._sizeDatas.values())
                e && e.dispose();
        this._sizeDatas.clear(),
        this._sizes = [],
        this._lastSizeData = null,
        this._lastSizeDataScale = -1
    }
    createSizeData(e, t, r)
    {
        return new OE(t, r)
    }
    defineVisualizations(e)
    {
        if (!e)
            return !1;
        for (const t in e) {
            const r = e[t],
                i = r.layerCount,
                n = r.angle;
            let o = r.size;
            if (o < 1 && (o = 1), this._sizeDatas.get(o))
                return !1;
            const l = this.createSizeData(o, i, n);
            if (!l)
                return !1;
            for (const c in r) {
                const u = r[c];
                if (!this.processVisualElement(l, c, u))
                    return l.dispose(), !1
            }
            this._sizeDatas.set(o, l),
            this._sizes.push(o)
        }
        return this._sizes.sort(), !0
    }
    processVisualElement(e, t, r)
    {
        if (!e || !t || !r)
            return !1;
        switch (t) {
        case "layers":
            if (!e.processLayers(r))
                return !1;
            break;
        case "directions":
            if (!e.processDirections(r))
                return !1;
            break;
        case "colors":
            if (!e.processColors(r))
                return !1;
            break
        }
        return !0
    }
    getValidSize(e)
    {
        if (e === this._lastSizeScale)
            return this._lastSize;
        const t = this.getSizeIndex(e);
        let r = -1;
        return t < this._sizes.length && (r = this._sizes[t]), this._lastSizeScale = e, this._lastSize = r, r
    }
    getSizeIndex(e)
    {
        if (e <= 0)
            return 0;
        let t = 0,
            r = 1;
        for (; r < this._sizes.length;) {
            if (this._sizes[r] > e) {
                this._sizes[r] / e < e / this._sizes[r - 1] && (t = r);
                break
            }
            t = r,
            r++
        }
        return t
    }
    getSizeData(e)
    {
        if (e === this._lastSizeDataScale)
            return this._lastSizeData;
        const t = this.getSizeIndex(e);
        return t < this._sizes.length ? this._lastSizeData = this._sizeDatas.get(this._sizes[t]) : this._lastSizeData = null, this._lastSizeDataScale = e, this._lastSizeData
    }
    getLayerCount(e)
    {
        const t = this.getSizeData(e);
        return t ? t.layerCount : ot.DEFAULT_COUNT
    }
    getValidDirection(e, t)
    {
        const r = this.getSizeData(e);
        return r ? r.getValidDirection(t) : ot.DEFAULT_DIRECTION
    }
    getLayerTag(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.getLayerTag(t, r) : ot.DEFAULT_TAG
    }
    getLayerInk(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.getLayerInk(t, r) : ot.DEFAULT_INK
    }
    getLayerAlpha(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.getLayerAlpha(t, r) : ot.DEFAULT_ALPHA
    }
    getLayerColor(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.getLayerColor(t, r) : Vl.DEFAULT_COLOR
    }
    getLayerIgnoreMouse(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.getLayerIgnoreMouse(t, r) : ot.DEFAULT_IGNORE_MOUSE
    }
    getLayerXOffset(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.getLayerXOffset(t, r) : ot.DEFAULT_XOFFSET
    }
    getLayerYOffset(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.getLayerYOffset(t, r) : ot.DEFAULT_YOFFSET
    }
    getLayerZOffset(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.getLayerZOffset(t, r) : ot.DEFAULT_ZOFFSET
    }
    get type()
    {
        return this._type
    }
}
ra.LAYER_LETTERS = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
class SE extends ra {
    createSizeData(e, t, r)
    {
        return new sd(t, r)
    }
    processVisualElement(e, t, r)
    {
        if (!e || !t || !r)
            return !1;
        switch (t) {
        case "animations":
            if (!(e instanceof sd) || !e.defineAnimations(r))
                return !1;
            break;
        default:
            if (!super.processVisualElement(e, t, r))
                return !1;
            break
        }
        return !0
    }
    hasAnimation(e, t)
    {
        const r = this.getSizeData(e);
        return r ? r.hasAnimation(t) : null
    }
    getAnimationCount(e)
    {
        const t = this.getSizeData(e);
        return t ? t.getAnimationCount() : null
    }
    getAnimationId(e, t)
    {
        const r = this.getSizeData(e);
        return r ? r.getAnimationId(t) : null
    }
    isImmediateChange(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.isImmediateChange(t, r) : null
    }
    getStartFrame(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.getStartFrame(t, r) : null
    }
    getFrame(e, t, r, i, n)
    {
        const o = this.getSizeData(e);
        return o ? o.getFrame(t, r, i, n) : null
    }
    getFrameFromSequence(e, t, r, i, n, o, l)
    {
        const c = this.getSizeData(e);
        return c ? c.getFrameFromSequence(t, r, i, n, o, l) : null
    }
}
const YD = class  extends iu{
    constructor()
    {
        super(),
        this._data = null,
        this._type = null,
        this._direction = 0,
        this._lastCameraAngle = NaN,
        this._selectedColor = 0,
        this._furnitureLift = 0,
        this._alphaMultiplier = 1,
        this._alphaChanged = !1,
        this._clickUrl = null,
        this._clickHandling = !1,
        this._cacheDirection = -1,
        this._cacheScale = 0,
        this._cacheSize = -1,
        this._layerCount = 0,
        this._shadowLayerIndex = -1,
        this._updatedLayers = [],
        this._assetNames = [],
        this._spriteTags = [],
        this._spriteInks = [],
        this._spriteAlphas = [],
        this._spriteColors = [],
        this._spriteMouseCaptures = [],
        this._spriteXOffsets = [],
        this._spriteYOffsets = [],
        this._spriteZOffsets = [],
        this._animationNumber = 0
    }
    initialize(s)
    {
        return this.reset(), s instanceof ra ? (this._type = s.type, this._data = s, !0) : !1
    }
    dispose()
    {
        super.dispose(),
        this._data = null,
        this._updatedLayers = null,
        this._assetNames = null,
        this._spriteTags = null,
        this._spriteInks = null,
        this._spriteAlphas = null,
        this._spriteColors = null,
        this._spriteMouseCaptures = null,
        this._spriteXOffsets = null,
        this._spriteYOffsets = null,
        this._spriteZOffsets = null
    }
    reset()
    {
        super.reset(),
        this.setDirection(-1),
        this._data = null,
        this._updatedLayers = [],
        this._assetNames = [],
        this._spriteTags = [],
        this._spriteInks = [],
        this._spriteAlphas = [],
        this._spriteColors = [],
        this._spriteMouseCaptures = [],
        this._spriteXOffsets = [],
        this._spriteYOffsets = [],
        this._spriteZOffsets = [],
        this.createSprites(0)
    }
    resetLayers(s, e)
    {
        this._cacheDirection === e && this._cacheScale === s || (this._updatedLayers = [], this._assetNames = [], this._spriteTags = [], this._spriteInks = [], this._spriteAlphas = [], this._spriteColors = [], this._spriteMouseCaptures = [], this._spriteXOffsets = [], this._spriteYOffsets = [], this._spriteZOffsets = [], this._cacheDirection = e, this._cacheScale = s, this._cacheSize = this.getValidSize(s), this.setLayerCount((this._data && this._data.getLayerCount(s) || 0) + this.getAdditionalLayerCount()))
    }
    update(s, e, t, r)
    {
        if (!s)
            return;
        const i = s.scale;
        let n = !1;
        this.updateObject(i, s.direction.x) && (n = !0),
        this.updateModel(i) && (n = !0);
        let o = 0;
        r ? this._animationNumber = this._animationNumber | this.updateAnimation(i) : (o = this.updateAnimation(i) | this._animationNumber, this._animationNumber = 0),
        (n || o !== 0) && (this.updateSprites(i, n, o), this._scale = i, this.updateSpriteCounter++)
    }
    updateObject(s, e)
    {
        if (!this.object || this.updateObjectCounter === this.object.updateCounter && s === this._scale && this._lastCameraAngle === e)
            return !1;
        let t = this.object.getDirection().x - (e + 135);
        if (t = (t % 360 + 360) % 360, this._data) {
            const r = this._data.getValidDirection(s, t);
            this.setDirection(r)
        }
        return this._lastCameraAngle = e, this._scale = s, this.updateObjectCounter = this.object.updateCounter, this.resetLayers(s, this._direction), !0
    }
    updateModel(s)
    {
        const e = this.object && this.object.model;
        if (!e || this.updateModelCounter === e.updateCounter)
            return !1;
        this._selectedColor = e.getValue(C.FURNITURE_COLOR),
        this._clickUrl = e.getValue(C.FURNITURE_AD_URL),
        this._clickHandling = this._clickUrl && this._clickUrl !== "" && this._clickUrl.indexOf("http") === 0 || !1,
        this._furnitureLift = e.getValue(C.FURNITURE_LIFT_AMOUNT) || 0;
        let t = e.getValue(C.FURNITURE_ALPHA_MULTIPLIER);
        return isNaN(t) && (t = 1), this._alphaMultiplier !== t && (this._alphaMultiplier = t, this._alphaChanged = !0), this.updateModelCounter = e.updateCounter, !0
    }
    updateSprites(s, e, t)
    {
        if (this._layerCount !== this.totalSprites && this.createSprites(this._layerCount), e) {
            let r = this.totalSprites - 1;
            for (; r >= 0;)
                this.updateSprite(s, r),
                r--
        } else {
            let r = 0;
            for (; t > 0;)
                t && this.updateSprite(s, r),
                r++,
                t = t >> 1
        }
        this._alphaChanged = !1
    }
    updateSprite(s, e)
    {
        const t = this.getSpriteAssetName(s, e),
            r = this.getSprite(e);
        if (t && r) {
            const i = this.getAsset(t, e);
            if (i && i.texture) {
                r.visible = !0,
                r.type = this._type,
                r.texture = i.texture,
                r.flipH = i.flipH,
                r.flipV = i.flipV,
                r.direction = this._direction;
                let n = 0;
                e !== this._shadowLayerIndex ? (r.tag = this.getLayerTag(s, this._direction, e), r.alpha = this.getLayerAlpha(s, this._direction, e), r.color = this.getLayerColor(s, e, this._selectedColor), r.offsetX = i.offsetX + this.getLayerXOffset(s, this._direction, e), r.offsetY = i.offsetY + this.getLayerYOffset(s, this._direction, e), r.blendMode = this.getLayerInk(s, this._direction, e), r.alphaTolerance = this.getLayerIgnoreMouse(s, this._direction, e) ? Fi.MATCH_NOTHING : Fi.MATCH_OPAQUE_PIXELS, n = this.getLayerZOffset(s, this._direction, e), n = n - e * .001) : (r.offsetX = i.offsetX, r.offsetY = i.offsetY + this.getLayerYOffset(s, this._direction, e), r.alpha = 48 * this._alphaMultiplier, r.alphaTolerance = Fi.MATCH_NOTHING, n = 1),
                r.relativeDepth = n * YD.DEPTH_MULTIPLIER,
                r.name = t,
                r.libraryAssetName = this.getLibraryAssetNameForSprite(i, r),
                r.posture = this.getPostureForAsset(s, i.source),
                r.clickHandling = this._clickHandling
            } else
                this.resetSprite(r)
        } else
            r && this.resetSprite(r)
    }
    getLibraryAssetNameForSprite(s, e)
    {
        return s.source
    }
    getPostureForAssetFile(s, e)
    {
        return null
    }
    resetSprite(s)
    {
        s && (s.texture = null, s.libraryAssetName = "", s.posture = "", s.tag = "", s.offsetX = 0, s.offsetY = 0, s.flipH = !1, s.flipV = !1, s.relativeDepth = 0, s.clickHandling = !1)
    }
    getSpriteAssetName(s, e)
    {
        if (!this._data || e >= ra.LAYER_LETTERS.length)
            return "";
        let t = this._assetNames[e],
            r = this._updatedLayers[e];
        return (!t || !t.length) && (t = this.cacheSpriteAssetName(s, e, !0), r = this._cacheSize !== 1), r && (t += this.getFrameNumber(s, e)), t
    }
    cacheSpriteAssetName(s, e, t)
    {
        this._type;
        const r = t ? this._cacheSize : this.getValidSize(s);
        let i = "";
        const n = r !== 1;
        if (e !== this._shadowLayerIndex ? i = ra.LAYER_LETTERS[e] || "" : i = "sd", i === "")
            return null;
        const o = this._type + (n ? "_" + r + "_" + i + "_" + this._direction + "_" : "_icon_" + i);
        return t && (this._assetNames[e] = o, this._updatedLayers[e] = n), o
    }
    getLayerTag(s, e, t)
    {
        const r = this._spriteTags[t];
        if (r !== void 0)
            return r;
        if (!this._data)
            return ot.DEFAULT_TAG;
        const i = this._data.getLayerTag(s, e, t);
        return this._spriteTags[t] = i, i
    }
    getLayerInk(s, e, t)
    {
        const r = this._spriteInks[t];
        if (r !== void 0)
            return r;
        if (!this._data)
            return ot.DEFAULT_INK;
        const i = this._data.getLayerInk(s, e, t);
        return this._spriteInks[t] = i, i
    }
    getLayerAlpha(s, e, t)
    {
        if (!this._alphaChanged) {
            const i = this._spriteAlphas[t];
            if (i !== void 0)
                return i
        }
        if (!this._data)
            return ot.DEFAULT_ALPHA;
        let r = this._data.getLayerAlpha(s, e, t);
        return this._alphaMultiplier !== null && (r = r * this._alphaMultiplier), this._spriteAlphas[t] = r, r
    }
    getLayerColor(s, e, t)
    {
        const r = this._spriteColors[e];
        if (r !== void 0)
            return r;
        if (!this._data)
            return Vl.DEFAULT_COLOR;
        const i = this._data.getLayerColor(s, e, t);
        return this._spriteColors[e] = i, i
    }
    getLayerIgnoreMouse(s, e, t)
    {
        const r = this._spriteMouseCaptures[t];
        if (r !== void 0)
            return r;
        if (!this._data)
            return ot.DEFAULT_IGNORE_MOUSE;
        const i = this._data.getLayerIgnoreMouse(s, e, t);
        return this._spriteMouseCaptures[t] = i, i
    }
    getLayerXOffset(s, e, t)
    {
        const r = this._spriteXOffsets[t];
        if (r !== void 0)
            return r;
        if (!this._data)
            return ot.DEFAULT_XOFFSET;
        const i = this._data.getLayerXOffset(s, e, t);
        return this._spriteXOffsets[t] = i, i
    }
    getLayerYOffset(s, e, t)
    {
        if (t === this._shadowLayerIndex)
            return Math.ceil(this._furnitureLift * (s / 2));
        const r = this._spriteYOffsets[t];
        if (r !== void 0)
            return r;
        if (!this._data)
            return ot.DEFAULT_YOFFSET;
        const i = this._data.getLayerYOffset(s, e, t);
        return this._spriteYOffsets[t] = i, i
    }
    getLayerZOffset(s, e, t)
    {
        const r = this._spriteZOffsets[t];
        if (r !== void 0)
            return r;
        if (!this._data)
            return ot.DEFAULT_ZOFFSET;
        const i = this._data.getLayerZOffset(s, e, t);
        return this._spriteZOffsets[t] = i, i
    }
    getValidSize(s)
    {
        return this._data ? this._data.getValidSize(s) : s
    }
    setLayerCount(s)
    {
        this._layerCount = s,
        this._shadowLayerIndex = s - this.getAdditionalLayerCount()
    }
    setDirection(s)
    {
        this._direction !== s && (this._direction = s)
    }
    getAdditionalLayerCount()
    {
        return 1
    }
    updateAnimation(s)
    {
        return 0
    }
    getFrameNumber(s, e)
    {
        return 0
    }
    getPostureForAsset(s, e)
    {
        return null
    }
    getAsset(s, e=-1)
    {
        return this.asset ? this.asset.getAsset(s) : null
    }
    get direction()
    {
        return this._direction
    }
    get data()
    {
        return this._data
    }
}
;
let da = YD;
da.DEPTH_MULTIPLIER = Math.sqrt(.5);
da.TYPE = ae.FURNITURE_STATIC;
const mf = class  extends da{
    constructor()
    {
        super(),
        this._state = -1,
        this._frameIncrease = 1,
        this._animationData = new jD,
        this._animationScale = 0,
        this._animationChangeTime = 0,
        this._animatedLayerCount = 0,
        this._directionChanged = !1
    }
    initialize(s)
    {
        return s instanceof SE ? super.initialize(s) : !1
    }
    dispose()
    {
        super.dispose(),
        this._animationData && (this._animationData.dispose(), this._animationData = null)
    }
    get animatedLayerCount()
    {
        return this._animatedLayerCount
    }
    get animationId()
    {
        return this._animationData.animationId
    }
    getAnimationId(s)
    {
        return this.animationId !== mf.DEFAULT_ANIMATION_ID && this.data.hasAnimation(this._animationScale, this.animationId) ? this.animationId : mf.DEFAULT_ANIMATION_ID
    }
    updateObject(s, e)
    {
        if (super.updateObject(s, e)) {
            const t = this.object.getState(0);
            return t !== this._state && (this.setAnimation(t), this._state = t, this._animationChangeTime = this.object.model.getValue(C.FURNITURE_STATE_UPDATE_TIME) || 0), !0
        }
        return !1
    }
    updateModel(s)
    {
        if (super.updateModel(s)) {
            if (this.usesAnimationResetting()) {
                const t = this.object.model.getValue(C.FURNITURE_STATE_UPDATE_TIME);
                t > this._animationChangeTime && (this._animationChangeTime = t, this.setAnimation(this._state))
            }
            const e = this.object.model.getValue(C.FURNITURE_AUTOMATIC_STATE_INDEX);
            if (!isNaN(e)) {
                const t = this.data.getAnimationId(this._animationScale, e);
                this.setAnimation(t)
            }
            return !0
        }
        return !1
    }
    isPlayingTransition(s, e)
    {
        return !(!Ls.isTransitionFromAnimation(s.animationId) && !Ls.isTransitionToAnimation(s.animationId) || e !== s.animationAfterTransitionId || s.animationOver)
    }
    getCurrentState(s)
    {
        const e = s.animationId;
        return !Ls.isTransitionFromAnimation(e) && !Ls.isTransitionToAnimation(e) ? e : s.animationAfterTransitionId
    }
    setAnimation(s)
    {
        this.data && this.setSubAnimation(this._animationData, s, this._state >= 0)
    }
    setSubAnimation(s, e, t=!0)
    {
        const r = s.animationId;
        if (t) {
            if (this.isPlayingTransition(s, e))
                return !1;
            const i = this.getCurrentState(s);
            if (e !== i) {
                if (!this.data.isImmediateChange(this._animationScale, e, i)) {
                    let n = Ls.getTransitionFromAnimationId(i);
                    this.data.hasAnimation(this._animationScale, n) ? (s.animationAfterTransitionId = e, e = n) : (n = Ls.getTransitionToAnimationId(e), this.data.hasAnimation(this._animationScale, n) && (s.animationAfterTransitionId = e, e = n))
                }
            } else if (Ls.isTransitionFromAnimation(s.animationId)) {
                const n = Ls.getTransitionToAnimationId(e);
                this.data.hasAnimation(this._animationScale, n) && (s.animationAfterTransitionId = e, e = n)
            } else if (!Ls.isTransitionToAnimation(s.animationId) && this.usesAnimationResetting()) {
                const n = Ls.getTransitionFromAnimationId(i);
                if (this.data.hasAnimation(this._animationScale, n))
                    s.animationAfterTransitionId = e,
                    e = n;
                else {
                    const o = Ls.getTransitionToAnimationId(e);
                    this.data.hasAnimation(this._animationScale, o) && (s.animationAfterTransitionId = e, e = o)
                }
            }
        }
        return r !== e ? (s.animationId = e, !0) : !1
    }
    getLastFramePlayed(s)
    {
        return this._animationData.getLastFramePlayed(s)
    }
    resetAllAnimationFrames()
    {
        this._animationData && this._animationData.setLayerCount(this._animatedLayerCount)
    }
    updateAnimation(s)
    {
        if (!this.data)
            return 0;
        s !== this._animationScale && (this._animationScale = s, this._animatedLayerCount = this.data.getLayerCount(s), this.resetAllAnimationFrames());
        const e = this.updateAnimations(s);
        return this._directionChanged = !1, e
    }
    updateAnimations(s)
    {
        if (this._animationData.animationOver && !this._directionChanged)
            return 0;
        const e = this.updateFramesForAnimation(this._animationData, s);
        return this._animationData.animationOver && (Ls.isTransitionFromAnimation(this._animationData.animationId) || Ls.isTransitionToAnimation(this._animationData.animationId)) && (this.setAnimation(this._animationData.animationAfterTransitionId), this._animationData.animationOver = !1), e
    }
    updateFramesForAnimation(s, e)
    {
        if (s.animationOver && !this._directionChanged)
            return 0;
        const t = this.getAnimationId(s);
        let r = s.frameCounter;
        r || (r = this.data.getStartFrame(e, t, this._direction)),
        r += this.frameIncrease,
        s.frameCounter = r,
        s.animationOver = !0;
        let i = !1,
            n = this._animatedLayerCount - 1,
            o = 0,
            l = 1 << this._animatedLayerCount - 1;
        for (; n >= 0;) {
            let c = 0;
            if (i = s.getAnimationPlayed(n), !i || this._directionChanged) {
                let u = s.getLastFramePlayed(n),
                    h = s.getFrame(n);
                h && h.isLastFrame && h.remainingFrameRepeats <= this.frameIncrease && (u = !0),
                (this._directionChanged || !h || h.remainingFrameRepeats >= 0 && (h.remainingFrameRepeats = h.remainingFrameRepeats - this.frameIncrease) <= 0) && (c = Cn.SEQUENCE_NOT_DEFINED, h && (c = h.activeSequence), c === Cn.SEQUENCE_NOT_DEFINED ? h = this.data.getFrame(e, t, this._direction, n, r) : h = this.data.getFrameFromSequence(e, t, this._direction, n, c, h.activeSequenceOffset + h.repeats, r), s.setFrame(n, h), o = o | l),
                !h || h.remainingFrameRepeats == Cn.FRAME_REPEAT_FOREVER ? (u = !0, i = !0) : s.animationOver = !1,
                s.setLastFramePlayed(n, u),
                s.setAnimationPlayed(n, i)
            }
            l = l >> 1,
            n--
        }
        return o
    }
    getFrameNumber(s, e)
    {
        const t = this._animationData.getFrame(e);
        return t ? t.id : super.getFrameNumber(s, e)
    }
    getLayerXOffset(s, e, t)
    {
        const r = super.getLayerXOffset(s, e, t),
            i = this._animationData.getFrame(t);
        return i ? r + i.x : r
    }
    getLayerYOffset(s, e, t)
    {
        const r = super.getLayerYOffset(s, e, t),
            i = this._animationData.getFrame(t);
        return i ? r + i.y : r
    }
    usesAnimationResetting()
    {
        return !1
    }
    setDirection(s)
    {
        this._direction !== s && (super.setDirection(s), this._directionChanged = !0)
    }
    get frameIncrease()
    {
        return this._frameIncrease
    }
    get data()
    {
        return this._data
    }
}
;
let As = mf;
As.TYPE = ae.FURNITURE_ANIMATED;
As.DEFAULT_ANIMATION_ID = 0;
const gh = class  extends As{
    constructor()
    {
        super(),
        this._badgeId = "",
        this._badgeAssetNameNormalScale = "",
        this._badgeAssetNameSmallScale = "",
        this._badgeVisibleInState = -1
    }
    updateModel(s)
    {
        let e = super.updateModel(s);
        const t = this.object.model.getValue(C.FURNITURE_BADGE_IMAGE_STATUS),
            r = this.object.model.getValue(C.FURNITURE_BADGE_ASSET_NAME);
        if (t === -1)
            this._badgeAssetNameNormalScale = "",
            this._badgeAssetNameSmallScale = "";
        else if (t === 1 && r !== this._badgeId) {
            this._badgeId = r,
            this._badgeAssetNameNormalScale = this._badgeId,
            this._badgeAssetNameSmallScale === "" && (this._badgeAssetNameSmallScale = this._badgeAssetNameNormalScale + "_32");
            const i = this.object.model.getValue(C.FURNITURE_BADGE_VISIBLE_IN_STATE);
            isNaN(i) || (this._badgeVisibleInState = i),
            e = !0
        }
        return e
    }
    getSpriteAssetName(s, e)
    {
        return this.getLayerTag(s, this.direction, e) !== gh.BADGE || this._badgeVisibleInState !== -1 && this.object.getState(0) !== this._badgeVisibleInState ? super.getSpriteAssetName(s, e) : s === 32 ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale
    }
    getLayerXOffset(s, e, t)
    {
        let r = super.getLayerXOffset(s, e, t);
        if (this.getLayerTag(s, e, t) === gh.BADGE) {
            const i = this.getAsset(s === 32 ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale, t);
            i && (s === 64 ? r += (40 - i.width) / 2 : r += (20 - i.width) / 2)
        }
        return r
    }
    getLayerYOffset(s, e, t)
    {
        let r = super.getLayerYOffset(s, e, t);
        if (this.getLayerTag(s, e, t) === gh.BADGE) {
            const i = this.getAsset(s === 32 ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale, t);
            i && (s === 64 ? r += (40 - i.height) / 2 : r += (20 - i.height) / 2)
        }
        return r
    }
}
;
let zD = gh;
zD.BADGE = "BADGE";
const Io = class  extends da{
    constructor()
    {
        super(),
        this._imageUrl = null,
        this._shortUrl = null,
        this._imageReady = !1,
        this._isAnimated = !1,
        this._gifCollection = null,
        this._offsetX = 0,
        this._offsetY = 0,
        this._offsetZ = 0,
        this._currentFrame = -1,
        this._totalFrames = -1
    }
    dispose()
    {
        super.dispose(),
        this._imageUrl && this.asset && this.asset.disposeAsset(this._imageUrl)
    }
    updateObject(s, e)
    {
        return super.updateObject(s, e) ? (this._imageReady && this.checkAndCreateImageForCurrentState(), !0) : !1
    }
    updateModel(s)
    {
        const e = super.updateModel(s);
        if (e && (this._offsetX = this.object.model.getValue(C.FURNITURE_BRANDING_OFFSET_X) || 0, this._offsetY = this.object.model.getValue(C.FURNITURE_BRANDING_OFFSET_Y) || 0, this._offsetZ = this.object.model.getValue(C.FURNITURE_BRANDING_OFFSET_Z) || 0, this._isAnimated = this.object.model.getValue(C.FURNITURE_BRANDING_IS_ANIMATED) || !1), this._imageReady) {
            if (this.checkIfImageChanged())
                return this._imageReady = !1, this._imageUrl = null, !0
        } else if (this._imageReady = this.checkIfImageReady(), this._imageReady)
            return this.checkAndCreateImageForCurrentState(), !0;
        return e
    }
    checkIfImageChanged()
    {
        const s = this.object.model.getValue(C.FURNITURE_BRANDING_IMAGE_URL);
        return s && s === this._imageUrl ? !1 : (this._gifCollection, this.asset && this.asset.disposeAsset(this._imageUrl), !0)
    }
    checkIfImageReady()
    {
        if (!(this.object && this.object.model))
            return !1;
        const e = this.object.model.getValue(C.FURNITURE_BRANDING_IMAGE_URL);
        if (!e || this._imageUrl && this._imageUrl === e)
            return !1;
        if (this.object.model.getValue(C.FURNITURE_BRANDING_IMAGE_STATUS) === 1) {
            let r = null;
            if (this._isAnimated) {
                const i = Ee.instance.roomEngine.roomContentLoader.getGifCollection(e);
                i && (this._gifCollection = i, r = i.textures[0])
            } else
                r = zr().getTexture(e);
            return r ? (this.imageReady(r, e), !0) : !1
        }
        return !1
    }
    imageReady(s, e)
    {
        if (!s) {
            this._imageUrl = null;
            return
        }
        this._imageUrl = e
    }
    checkAndCreateImageForCurrentState()
    {
        if (this._isAnimated) {
            this.buildAssetsForGif();
            return
        }
        if (!this._imageUrl)
            return;
        const s = zr().getTexture(this._imageUrl);
        if (!s)
            return;
        const e = this.object.getState(0);
        this.addBackgroundAsset(s, e, 0)
    }
    buildAssetsForGif()
    {
        if (!this._gifCollection)
            return;
        const s = this._gifCollection.textures,
            e = this._gifCollection.durations;
        if (!s.length || !e.length || s.length !== e.length)
            return;
        const t = this.object.getState(0);
        for (let r = 0; r < s.length; r++) {
            const i = s[r];
            e[r],
            i && this.addBackgroundAsset(i, t, r)
        }
        this._currentFrame = -1,
        this._totalFrames = s.length
    }
    addBackgroundAsset(s, e, t)
    {
        let r = 0,
            i = 0,
            n = !1,
            o = !1;
        switch (e) {
        case Io.STATE_0:
            r = 0,
            i = 0,
            n = !1,
            o = !1;
            break;
        case Io.STATE_1:
            r = -s.width,
            i = 0,
            n = !0,
            o = !1;
            break;
        case Io.STATE_2:
            r = -s.width,
            i = -s.height,
            n = !0,
            o = !0;
            break;
        case Io.STATE_3:
            r = 0,
            i = -s.height,
            n = !1,
            o = !0;
            break
        }
        this.asset.addAsset(`${this._imageUrl}_${t}`, s, !0, r, i, n, o)
    }
    getSpriteAssetName(s, e)
    {
        return this.getLayerTag(s, this._direction, e) === Io.BRANDED_IMAGE && this._imageUrl ? `${this._imageUrl}_${this.getFrameNumber(s, e)}` : super.getSpriteAssetName(s, e)
    }
    updateAnimation(s)
    {
        return !this._imageReady || !this._isAnimated || this._totalFrames <= 0 ? 0 : 1
    }
    getFrameNumber(s, e)
    {
        if (!this._imageReady || !this._isAnimated || this._totalFrames <= 0)
            return 0;
        if (this.getLayerTag(s, this._direction, e) === Io.BRANDED_IMAGE && this._imageUrl) {
            let r = this._currentFrame;
            return r < 0 ? r = 0 : r += 1, r === this._totalFrames && (r = 0), this._currentFrame = r, this._currentFrame
        }
        return 0
    }
}
;
let to = Io;
to.BRANDED_IMAGE = "branded_image";
to.STATE_0 = 0;
to.STATE_1 = 1;
to.STATE_2 = 2;
to.STATE_3 = 3;
class KD extends to {
    getLayerXOffset(e, t, r)
    {
        return super.getLayerXOffset(e, t, r) + this._offsetX
    }
    getLayerYOffset(e, t, r)
    {
        return super.getLayerYOffset(e, t, r) + this._offsetY
    }
    getLayerZOffset(e, t, r)
    {
        return super.getLayerZOffset(e, t, r) + this._offsetZ
    }
}
const fh = class  extends As{
    constructor()
    {
        super(),
        this._stateQueue = [],
        this._running = !1
    }
    setAnimation(s)
    {
        if (s === -1 && !this._running) {
            this._running = !0,
            this._stateQueue = [],
            this._stateQueue.push(fh.ANIMATION_ID_ROLL);
            return
        }
        if (s >= 0 && s <= 7) {
            if (this._running) {
                this._running = !1,
                this._stateQueue = [],
                this._stateQueue.push(fh.ANIMATION_ID_OFFSET_SLOW1),
                this._stateQueue.push(fh.ANIMATION_ID_OFFSET_SLOW2 + s),
                this._stateQueue.push(s);
                return
            }
            super.setAnimation(s)
        }
    }
    updateAnimation(s)
    {
        return this.getLastFramePlayed(0) && this._stateQueue.length && super.setAnimation(this._stateQueue.shift()), super.updateAnimation(s)
    }
}
;
let qd = fh;
qd.ANIMATION_ID_OFFSET_SLOW1 = 20;
qd.ANIMATION_ID_OFFSET_SLOW2 = 9;
qd.ANIMATION_ID_ROLL = -1;
class X5 extends da {}
const Mc = class  extends As{
    getFrameNumber(s, e)
    {
        const t = this.getLayerTag(s, this.direction, e),
            r = this.object.getState(0);
        switch (t) {
        case Mc.SECONDS_SPRITE:
            return Math.floor(r % 60 % 10);
        case Mc.TEN_SECONDS_SPRITE:
            return Math.floor(r % 60 / 10);
        case Mc.MINUTES_SPRITE:
            return Math.floor(r / 60 % 10);
        case Mc.TEN_MINUTES_SPRITE:
            return Math.floor(r / 60 / 10 % 10);
        default:
            return super.getFrameNumber(s, e)
        }
    }
    get animationId()
    {
        return 0
    }
}
;
let fu = Mc;
fu.SECONDS_SPRITE = "seconds_sprite";
fu.TEN_SECONDS_SPRITE = "ten_seconds_sprite";
fu.MINUTES_SPRITE = "minutes_sprite";
fu.TEN_MINUTES_SPRITE = "ten_minutes_sprite";
class Q5 extends iu {}
const Ef = class  extends As{
    constructor()
    {
        super(),
        this._thumbnailAssetNameNormal = null,
        this._thumbnailImageNormal = null,
        this._thumbnailDirection = -1,
        this._thumbnailChanged = !1,
        this._hasOutline = !1
    }
    get hasThumbnailImage()
    {
        return this._thumbnailImageNormal != null
    }
    setThumbnailImages(s)
    {
        this._thumbnailImageNormal = s,
        this._thumbnailChanged = !0
    }
    updateModel(s)
    {
        const e = super.updateModel(s);
        return !this._thumbnailChanged && this._thumbnailDirection === this.direction ? e : (this.refreshThumbnail(), !0)
    }
    refreshThumbnail()
    {
        this.asset != null && (this._thumbnailImageNormal ? this.addThumbnailAsset(this._thumbnailImageNormal, 64) : this.asset.disposeAsset(this.getThumbnailAssetName(64)), this._thumbnailChanged = !1, this._thumbnailDirection = this.direction)
    }
    addThumbnailAsset(s, e)
    {
        let t = 0;
        for (; t < this.totalSprites;) {
            if (this.getLayerTag(e, this.direction, t) === Ef.THUMBNAIL) {
                const r = this.cacheSpriteAssetName(e, t, !1) + this.getFrameNumber(e, t),
                    i = this.getAsset(r, t);
                if (i) {
                    const n = this.generateTransformedThumbnail(s, i),
                        o = this.getThumbnailAssetName(e);
                    this.asset.disposeAsset(o),
                    this.asset.addAsset(o, n, !0, i.offsetX, i.offsetY, !1, !1)
                }
                return
            }
            t++
        }
    }
    generateTransformedThumbnail(s, e)
    {
        if (this._hasOutline) {
            const o = new qt,
                l = new qt(jf.WHITE);
            l.tint = 0,
            l.width = s.width + 40,
            l.height = s.height + 40;
            const c = new qt(s),
                u = (l.width - c.width) / 2,
                h = (l.height - c.height) / 2;
            c.position.set(u, h),
            o.addChild(l, c),
            s = pt.generateTexture(o)
        }
        const t = 1.1,
            r = new Pr,
            i = e.width / s.width;
        switch (this.direction) {
        case 2:
            r.a = i,
            r.b = -.5 * i,
            r.c = 0,
            r.d = i * t,
            r.tx = 0,
            r.ty = .5 * i * s.width;
            break;
        case 0:
        case 4:
            r.a = i,
            r.b = .5 * i,
            r.c = 0,
            r.d = i * t,
            r.tx = 0,
            r.ty = 0;
            break;
        default:
            r.a = i,
            r.b = 0,
            r.c = 0,
            r.d = i,
            r.tx = 0,
            r.ty = 0
        }
        const n = new qt(s);
        return n.transform.setFromMatrix(r), pt.generateTexture(n)
    }
    getSpriteAssetName(s, e)
    {
        return this._thumbnailImageNormal && this.getLayerTag(s, this.direction, e) === Ef.THUMBNAIL ? this.getThumbnailAssetName(s) : super.getSpriteAssetName(s, e)
    }
    getThumbnailAssetName(s)
    {
        return this._thumbnailAssetNameNormal = this.getFullThumbnailAssetName(this.object.id, 64), this._thumbnailAssetNameNormal
    }
    getFullThumbnailAssetName(s, e)
    {
        return [this._type, s, "thumb", e].join("_")
    }
}
;
let CE = Ef;
CE.THUMBNAIL = "THUMBNAIL";
class qD extends CE {
    constructor()
    {
        super(),
        this._cachedUrl = null,
        this._hasOutline = !0
    }
    updateModel(e)
    {
        if (this.object) {
            const t = this.getThumbnailURL();
            if (this._cachedUrl !== t)
                if (this._cachedUrl = t, this._cachedUrl && this._cachedUrl !== "") {
                    const r = new Image;
                    r.src = t,
                    r.crossOrigin = "*",
                    r.onload = () => {
                        const i = cs.from(r);
                        i.baseTexture.scaleMode = Z_.LINEAR,
                        this.setThumbnailImages(i)
                    }
                } else
                    this.setThumbnailImages(null)
        }
        return super.updateModel(e)
    }
    getThumbnailURL()
    {
        throw new Error("This method must be overridden!")
    }
}
class J5 extends qD {
    constructor()
    {
        super(),
        this._url = null,
        this._typePrefix = null
    }
    getThumbnailURL() {
    if (!this.object)
        return null;
    if (this._url)
        return this._url;

    const e = this.object.model.getValue(C.FURNITURE_DATA);
    if (!e || e === "")
        return null;

    this.object.type.indexOf("") >= 0 && (this._typePrefix = this.object.type.indexOf("") >= 0 ? "" : "postcards/selfie/");

    let r = JSON.parse(e).w || "";
    r = this.buildThumbnailUrl(r);
    this._url = r;

    // Ensure _url does not already contain the base URL
    if (!this._url.startsWith('http://') && !this._url.startsWith('https://')) {
        return "//localhost:8080/camera/" + this._url;
    }
    return this._url;
}
    buildThumbnailUrl(e)
    {
        return e = e.replace(".png", "_small.png"), e.indexOf(".png") === -1 && (e = e + "_small.png"), e
    }
}
class Ip {
    constructor()
    {
        this._hasMoved = !1,
        this._age = 0,
        this._isEmitter = !1,
        this._fade = !1,
        this._alphaMultiplier = 1
    }
    init(e, t, r, i, n, o, l, c=!1, u=null, h=!1)
    {
        this._x = e,
        this._y = t,
        this._z = r,
        this._particleDirection = new ui(i.x, i.y, i.z),
        this._particleDirection.scaleBy(n),
        this._lastX = this._x - this._particleDirection.x * o,
        this._lastY = this._y - this._particleDirection.y * o,
        this._lastZ = this._z - this._particleDirection.z * o,
        this._age = 0,
        this._hasMoved = !1,
        this._lifeTime = l,
        this._isEmitter = c,
        this._frames = u,
        this._fade = h,
        this._alphaMultiplier = 1,
        this._fadeTime = .5 + Math.random() * .5
    }
    dispose()
    {
        this._particleDirection = null
    }
    update()
    {
        this._age++,
        this._age === this._lifeTime && this.ignite(),
        this._fade && this._age / this._lifeTime > this._fadeTime && (this._alphaMultiplier = (this._lifeTime - this._age) / (this._lifeTime * (1 - this._fadeTime)))
    }
    getAsset()
    {
        return this._frames && this._frames.length > 0 ? this._frames[this._age % this._frames.length] : null
    }
    ignite() {}
    get fade()
    {
        return this._fade
    }
    get alphaMultiplier()
    {
        return this._alphaMultiplier
    }
    get direction()
    {
        return this._particleDirection
    }
    get age()
    {
        return this._age
    }
    get isEmitter()
    {
        return this._isEmitter
    }
    get isAlive()
    {
        return this._age <= this._lifeTime
    }
    get x()
    {
        return this._x
    }
    set x(e)
    {
        this._x = e
    }
    get y()
    {
        return this._y
    }
    set y(e)
    {
        this._y = e
    }
    get z()
    {
        return this._z
    }
    set z(e)
    {
        this._z = e
    }
    get lastX()
    {
        return this._lastX
    }
    set lastX(e)
    {
        this._hasMoved = !0,
        this._lastX = e
    }
    get lastY()
    {
        return this._lastY
    }
    set lastY(e)
    {
        this._hasMoved = !0,
        this._lastY = e
    }
    get lastZ()
    {
        return this._lastZ
    }
    set lastZ(e)
    {
        this._hasMoved = !0,
        this._lastZ = e
    }
    get hasMoved()
    {
        return this._hasMoved
    }
    toString()
    {
        return [this._x, this._y, this._z].toString()
    }
    copy(e, t)
    {
        this._x = e._x * t,
        this._y = e._y * t,
        this._z = e._z * t,
        this._lastX = e._lastX * t,
        this._lastY = e._lastY * t,
        this._lastZ = e._lastZ * t,
        this._hasMoved = e.hasMoved,
        this._particleDirection = e._particleDirection,
        this._age = e._age,
        this._lifeTime = e._lifeTime,
        this._isEmitter = e._isEmitter,
        this._fade = e._fade,
        this._fadeTime = e._fadeTime,
        this._alphaMultiplier = e._alphaMultiplier
    }
}
const mh = class  extends Ip{
    constructor(s="", e=-1)
    {
        super(),
        this._roomObjectSpriteId = -1,
        this._timeStep = .1,
        this._fuseTime = 10,
        this._energy = 1,
        this._hasIgnited = !1,
        this._burstPulse = 1,
        this._particles = [],
        this._name = s,
        this._roomObjectSpriteId = e,
        this._particleConfigurations = []
    }
    dispose()
    {
        for (const s of this._particles)
            s.dispose();
        this._particles = null,
        this._particleConfigurations = null,
        super.dispose()
    }
    setup(s, e, t, r, i, n, o, l, c, u)
    {
        this._maxNumberOfParticles = s,
        this._particlesPerFrame = e,
        this._force = t,
        this._emitterDirection = r,
        this._emitterDirection.normalize(),
        this._gravity = i,
        this._airFriction = n,
        this._explosionShape = o,
        this._fuseTime = c,
        this._energy = l,
        this._burstPulse = u,
        this.reset()
    }
    reset()
    {
        for (const s of this._particles)
            s.dispose();
        this._particles = [],
        this._emittedParticles = 0,
        this._hasIgnited = !1,
        this.init(0, 0, 0, this._emitterDirection, this._force, this._timeStep, this._fuseTime, !0)
    }
    copyStateFrom(s, e)
    {
        super.copy(s, e),
        this._force = s._force,
        this._emitterDirection = s._emitterDirection,
        this._gravity = s._gravity,
        this._airFriction = s._airFriction,
        this._explosionShape = s._explosionShape,
        this._fuseTime = s._fuseTime,
        this._energy = s._energy,
        this._burstPulse = s._burstPulse,
        this._timeStep = s._timeStep,
        this._hasIgnited = s._hasIgnited
    }
    configureParticle(s, e, t, r)
    {
        const i = {};
        i.lifeTime = s,
        i.isEmitter = e,
        i.frames = t,
        i.fade = r,
        this._particleConfigurations.push(i)
    }
    ignite()
    {
        this._hasIgnited = !0,
        this._emittedParticles < this._maxNumberOfParticles && this.age > 1 && this.releaseParticles(this, this.direction)
    }
    releaseParticles(s, e=null)
    {
        e || (e = new ui);
        const t = new ui,
            r = this.getRandomParticleConfiguration();
        let i = 0;
        for (; i < this._particlesPerFrame;) {
            switch (this._explosionShape) {
            case mh.CONE:
                t.x = this.randomBoolean(.5) ? Math.random() : -Math.random(),
                t.y = -(Math.random() + 1),
                t.z = this.randomBoolean(.5) ? Math.random() : -Math.random();
                break;
            case mh.PLANE:
                t.x = this.randomBoolean(.5) ? Math.random() : -Math.random(),
                t.y = 0,
                t.z = this.randomBoolean(.5) ? Math.random() : -Math.random();
                break;
            case mh.SPHERE:
                t.x = this.randomBoolean(.5) ? Math.random() : -Math.random(),
                t.y = this.randomBoolean(.5) ? Math.random() : -Math.random(),
                t.z = this.randomBoolean(.5) ? Math.random() : -Math.random();
                break
            }
            t.normalize();
            const n = new Ip;
            let o = 0,
                l = !1,
                c = !1,
                u = [];
            r ? (o = Math.floor(Math.random() * r.lifeTime + 10), l = r.isEmitter, u = r.frames, c = r.fade) : (o = Math.trunc(Math.floor(Math.random() * 20 + 10)), l = !1, u = []),
            n.init(s.x, s.y, s.z, t, this._energy, this._timeStep, o, l, u, c),
            this._particles.push(n),
            this._emittedParticles++,
            i++
        }
    }
    getRandomParticleConfiguration()
    {
        const s = Math.trunc(Math.floor(Math.random() * this._particleConfigurations.length));
        return this._particleConfigurations[s]
    }
    update()
    {
        super.update(),
        this.accumulateForces(),
        this.verlet(),
        this.satisfyConstraints(),
        !this.isAlive && this._emittedParticles < this._maxNumberOfParticles && this.age % this._burstPulse === 0 && this.releaseParticles(this, this.direction)
    }
    verlet()
    {
        if (this.isAlive || this._emittedParticles < this._maxNumberOfParticles) {
            const e = this.x,
                t = this.y,
                r = this.z;
            this.x = (2 - this._airFriction) * this.x - (1 - this._airFriction) * this.lastX,
            this.y = (2 - this._airFriction) * this.y - (1 - this._airFriction) * this.lastY + this._gravity * this._timeStep * this._timeStep,
            this.z = (2 - this._airFriction) * this.z - (1 - this._airFriction) * this.lastZ,
            this.lastX = e,
            this.lastY = t,
            this.lastZ = r
        }
        const s = [];
        for (const e of this._particles) {
            e.update();
            const t = e.x,
                r = e.y,
                i = e.z;
            e.x = (2 - this._airFriction) * e.x - (1 - this._airFriction) * e.lastX,
            e.y = (2 - this._airFriction) * e.y - (1 - this._airFriction) * e.lastY + this._gravity * this._timeStep * this._timeStep,
            e.z = (2 - this._airFriction) * e.z - (1 - this._airFriction) * e.lastZ,
            e.lastX = t,
            e.lastY = r,
            e.lastZ = i,
            (e.y > 10 || !e.isAlive) && s.push(e)
        }
        for (const e of s)
            e.isEmitter,
            this._particles.splice(this._particles.indexOf(e), 1),
            e.dispose()
    }
    satisfyConstraints() {}
    accumulateForces()
    {
        for (const s of this._particles)
            ;
    }
    get particles()
    {
        return this._particles
    }
    get hasIgnited()
    {
        return this._hasIgnited
    }
    randomBoolean(s)
    {
        return Math.random() < s
    }
    get roomObjectSpriteId()
    {
        return this._roomObjectSpriteId
    }
}
;
let Xd = mh;
Xd.CONE = "cone";
Xd.PLANE = "plane";
Xd.SPHERE = "sphere";
class Z5 {
    constructor(e)
    {
        this._canvasId = -1,
        this._hasIgnited = !1,
        this._centerX = 0,
        this._centerY = 0,
        this._scaleMultiplier = 1,
        this._blend = 1,
        this._bgColor = 4278190080,
        this._isDone = !1,
        this._emitters = new as,
        this._visualization = e,
        this._blackOverlayAlphaTransform = new Q_,
        this._blackOverlayAlphaTransform.alpha = 1,
        this._particleColorTransform = new Q_,
        this._identityMatrix = new Pr,
        this._translationMatrix = new Pr
    }
    dispose()
    {
        for (const e of this._emitters.getValues())
            e.dispose();
        this._emitters = null,
        this._canvasTexture && (this._canvasTexture.destroy(), this._canvasTexture = null),
        this._blackOverlay && (this._blackOverlay.destroy(), this._blackOverlay = null),
        this._emptySprite && (this._emptySprite.destroy(), this._emptySprite = null),
        this._blackOverlayAlphaTransform = null,
        this._particleColorTransform = null,
        this._identityMatrix = null,
        this._translationMatrix = null
    }
    reset()
    {
        this._currentEmitter && this._currentEmitter.reset(),
        this._currentEmitter = null,
        this._hasIgnited = !1,
        this._isDone = !1,
        this.updateCanvas()
    }
    setAnimation(e)
    {
        this._currentEmitter && this._currentEmitter.reset(),
        this._currentEmitter = this._emitters.getValue(e),
        this._hasIgnited = !1,
        this._isDone = !1,
        this.updateCanvas()
    }
    updateCanvas()
    {
        if (!(!this._currentEmitter || this._canvasId === -1) && (this._roomSprite = this._visualization.getSprite(this._canvasId), this._roomSprite && this._roomSprite.texture)) {
            if (this._roomSprite.width <= 1 || this._roomSprite.height <= 1)
                return;
            this._canvasTexture && (this._canvasTexture.width !== this._roomSprite.width || this._canvasTexture.height !== this._roomSprite.height) && (this._canvasTexture = null),
            this.clearCanvas(),
            this._centerX = -this._roomSprite.offsetX,
            this._centerY = -this._roomSprite.offsetY,
            this._roomSprite.texture = this._canvasTexture
        }
    }
    getLayerYOffset(e, t, r)
    {
        return this._currentEmitter && this._currentEmitter.roomObjectSpriteId === r ? this._currentEmitter.y * this._scaleMultiplier : 0
    }
    controlsSprite(e)
    {
        return this._currentEmitter ? this._currentEmitter.roomObjectSpriteId == e : !1
    }
    updateSprites()
    {
        !this._currentEmitter || !this._roomSprite || (this._canvasTexture && this._roomSprite.texture !== this._canvasTexture && (this._roomSprite.texture = this._canvasTexture), this._hasIgnited && this._currentEmitter.roomObjectSpriteId >= 0 && (this._visualization.getSprite(this._currentEmitter.roomObjectSpriteId).visible = !1))
    }
    updateAnimation()
    {
        if (!this._currentEmitter || !this._roomSprite || this._isDone)
            return;
        const e = 10;
        !this._hasIgnited && this._currentEmitter.hasIgnited && (this._hasIgnited = !0);
        const t = this._offsetY * this._scaleMultiplier;
        if (this._currentEmitter.update(), this._hasIgnited) {
            this._currentEmitter.roomObjectSpriteId >= 0 && (this._visualization.getSprite(this._currentEmitter.roomObjectSpriteId).visible = !1),
            this._canvasTexture || this.updateCanvas(),
            this.clearCanvas();
            for (const r of this._currentEmitter.particles) {
                const i = this._centerX + (r.x - r.z) * e / 10 * this._scaleMultiplier,
                    n = this._centerY - t + (r.y + (r.x + r.z) / 2) * e / 10 * this._scaleMultiplier,
                    o = r.getAsset();
                if (o && o.texture)
                    if (r.fade && r.alphaMultiplier < 1) {
                        this._translationMatrix.identity(),
                        this._translationMatrix.translate(i + o.offsetX, n + o.offsetY);
                        const l = new qt(o.texture);
                        this._particleColorTransform.alpha = r.alphaMultiplier,
                        l.filters = [this._particleColorTransform],
                        Gs.instance.renderer.render(l, {
                            renderTexture: this._canvasTexture,
                            transform: this._translationMatrix,
                            clear: !1
                        })
                    } else {
                        const l = new wi(i + o.offsetX, n + o.offsetY),
                            c = new qt(o.texture);
                        c.x = l.x,
                        c.y = l.y,
                        Gs.instance.renderer.render(c, {
                            renderTexture: this._canvasTexture,
                            clear: !1
                        })
                    }
                else {
                    const l = new qt(cs.WHITE);
                    l.tint = 16777215,
                    l.x = i - 1,
                    l.y = n - 1,
                    l.width = 2,
                    l.height = 2,
                    Gs.instance.renderer.render(l, {
                        renderTexture: this._canvasTexture,
                        clear: !1
                    })
                }
            }
            if (!this._currentEmitter.particles.length) {
                this._isDone = !0;
                return
            }
        }
    }
    parseData(e)
    {
        this._size = e.size,
        this._canvasId = e.canvasId !== void 0 ? e.canvasId : -1,
        this._offsetY = e.offsetY !== void 0 ? e.offsetY : 10,
        this._scaleMultiplier = this._size / 64,
        this._blend = e.blend !== void 0 ? e.blend : 1,
        this._blend = Math.min(this._blend, 1),
        this._blackOverlayAlphaTransform.alpha = this._blend;
        const t = e.bgColor !== void 0 ? e.bgColor : "0";
        if (this._bgColor = parseInt(t, 16) || 0, !(!e.emitters || !e.emitters.length))
            for (const r of e.emitters) {
                const i = r.id,
                    n = r.name,
                    o = r.spriteId,
                    l = new Xd(n, o);
                this._emitters.add(i, l);
                const c = r.maxNumParticles,
                    u = r.particlesPerFrame,
                    h = r.burstPulse !== void 0 ? r.burstPulse : 1,
                    d = r.fuseTime,
                    m = r.simulation.force,
                    p = r.simulation.direction,
                    E = r.simulation.gravity,
                    T = r.simulation.airFriction,
                    I = r.simulation.shape,
                    S = r.simulation.energy;
                for (const A of r.particles) {
                    const N = A.lifeTime,
                        b = A.isEmitter || !1,
                        v = A.fade || !1,
                        D = [];
                    for (const G of A.frames)
                        D.push(this._visualization.asset.getAsset(G));
                    l.configureParticle(N, b, D, v)
                }
                l.setup(c, u, m, new ui(0, p, 0), E, T, I, S, d, h)
            }
    }
    copyStateFrom(e)
    {
        let t = 0;
        e._emitters && e._currentEmitter && (t = e._emitters.getKey(e._emitters.getValues().indexOf(e._currentEmitter))),
        this.setAnimation(t),
        this._currentEmitter && this._currentEmitter.copyStateFrom(e._currentEmitter, e._size / this._size),
        this._canvasTexture = null
    }
    clearCanvas()
    {
        this._emptySprite || (this._emptySprite = new qt(cs.EMPTY), this._emptySprite.alpha = 0),
        this._canvasTexture ? Gs.instance.renderer.render(this._emptySprite, {
            renderTexture: this._canvasTexture,
            clear: !0
        }) : this._canvasTexture = $i.create({
            width: this._roomSprite.width,
            height: this._roomSprite.height
        })
    }
}
class XD extends As {
    dispose()
    {
        if (super.dispose(), this._currentParticleSystem = null, this._particleSystems) {
            for (const e of this._particleSystems.getValues())
                e.dispose();
            this._particleSystems = null
        }
    }
    updateObject(e, t)
    {
        if (super.updateObject(e, t)) {
            if (!this._particleSystems)
                this.readDefinition(),
                this._particleSystems ? this._currentParticleSystem = this._particleSystems.getValue(e) : pe.log("ERROR Particle systems could not be read!", this.object.type);
            else if (e !== this._scale || this._particleSystems.getValue(e) !== this._currentParticleSystem) {
                const r = this._particleSystems.getValue(e);
                r.copyStateFrom(this._currentParticleSystem),
                this._currentParticleSystem && this._currentParticleSystem.reset(),
                this._currentParticleSystem = r
            }
            return !0
        }
        return !1
    }
    updateSprites(e, t, r)
    {
        super.updateSprites(e, t, r),
        this._currentParticleSystem && this._currentParticleSystem.updateSprites()
    }
    updateAnimation(e)
    {
        return this._currentParticleSystem && this._currentParticleSystem.updateAnimation(), super.updateAnimation(e)
    }
    setAnimation(e)
    {
        this._currentParticleSystem && this._currentParticleSystem.setAnimation(e),
        super.setAnimation(e)
    }
    getLayerYOffset(e, t, r)
    {
        return this._currentParticleSystem && this._currentParticleSystem.controlsSprite(r) ? this._currentParticleSystem.getLayerYOffset(e, t, r) : super.getLayerYOffset(e, t, r)
    }
    readDefinition()
    {
        if (!this.object || !this.object.model)
            return !1;
        const e = this.object.model.getValue(C.FURNITURE_FIREWORKS_DATA);
        if (!e || !e.length)
            return !1;
        this._particleSystems = new as;
        for (const t of e) {
            const r = t.size,
                i = new Z5(this);
            i.parseData(t),
            this._particleSystems.add(r, i)
        }
        return !0
    }
}
const Eh = class  extends XD{
    constructor()
    {
        super(...arguments),
        this._packetType = 0,
        this._ribbonType = 0,
        this._lastAnimationId = 0
    }
    update(s, e, t, r)
    {
        this.updatePresentWrap(),
        super.update(s, e, t, r)
    }
    updatePresentWrap()
    {
        if (!this.object)
            return;
        const s = 1e3,
            e = this.object.model.getValue(C.FURNITURE_EXTRAS),
            t = parseInt(e),
            r = Math.floor(t / s),
            i = t % s;
        this._packetType = r > Eh.MAX_PACKET_TYPE_VALUE ? 0 : r,
        this._ribbonType = i > Eh.MAX_RIBBON_TYPE_VALUE ? 0 : i
    }
    getFrameNumber(s, e)
    {
        if (this._lastAnimationId === Eh.PRESENT_DEFAULT_STATE) {
            if (e <= 1)
                return this._packetType;
            if (e === 2)
                return this._ribbonType
        }
        return super.getFrameNumber(s, e)
    }
    getSpriteAssetName(s, e)
    {
        const t = this.getValidSize(s);
        let r = this._type,
            i = "";
        e < this.spriteCount - 1 ? i = String.fromCharCode("a".charCodeAt(0) + e) : i = "sd";
        const n = this.getFrameNumber(s, e);
        return r = r + ("_" + t + "_" + i + "_" + this.direction), r = r + ("_" + n), r
    }
    setAnimation(s)
    {
        this._lastAnimationId = s,
        super.setAnimation(s)
    }
}
;
let Qd = Eh;
Qd.PRESENT_DEFAULT_STATE = 0;
Qd.MAX_PACKET_TYPE_VALUE = 9;
Qd.MAX_RIBBON_TYPE_VALUE = 11;
class $5 extends da {
    constructor()
    {
        super(...arguments),
        this._packetType = 0,
        this._ribbonType = 0
    }
    update(e, t, r, i)
    {
        this.updatePresentWrap(),
        super.update(e, t, r, i)
    }
    updatePresentWrap()
    {
        if (!this.object)
            return;
        const e = this.object.model.getValue(C.FURNITURE_EXTRAS),
            t = 1e3,
            r = parseInt(e);
        this._packetType = Math.floor(r / t),
        this._ribbonType = r % t
    }
    getFrameNumber(e, t)
    {
        return t <= 1 ? this._packetType : this._ribbonType
    }
    getSpriteAssetName(e, t)
    {
        const r = this.getValidSize(e);
        let i = this._type,
            n = "";
        t < this.spriteCount - 1 ? n = String.fromCharCode("a".charCodeAt(0) + t) : n = "sd";
        const o = this.getFrameNumber(e, t);
        return i = i + ("_" + r + "_" + n + "_" + this.direction), i = i + ("_" + o), i
    }
}
const kn = class  extends As{
    constructor()
    {
        super(),
        this._color1 = kn.DEFAULT_COLOR_1,
        this._color2 = kn.DEFAULT_COLOR_2,
        this._badgeAssetNameNormalScale = "",
        this._badgeAssetNameSmallScale = ""
    }
    updateModel(s)
    {
        const e = super.updateModel(s);
        if (this._badgeAssetNameNormalScale === "") {
            const i = this.object.model.getValue(C.FURNITURE_GUILD_CUSTOMIZED_ASSET_NAME);
            i && (this._badgeAssetNameNormalScale = i, this._badgeAssetNameSmallScale = this._badgeAssetNameNormalScale + "_32")
        }
        const t = this.object.model.getValue(C.FURNITURE_GUILD_CUSTOMIZED_COLOR_1);
        this._color1 = t || kn.DEFAULT_COLOR_1;
        const r = this.object.model.getValue(C.FURNITURE_GUILD_CUSTOMIZED_COLOR_2);
        return this._color2 = r || kn.DEFAULT_COLOR_2, e
    }
    getLayerColor(s, e, t)
    {
        switch (this.getLayerTag(s, this._direction, e)) {
        case kn.PRIMARY_COLOUR_SPRITE_TAG:
            return this._color1;
        case kn.SECONDARY_COLOUR_SPRITE_TAG:
            return this._color2
        }
        return super.getLayerColor(s, e, t)
    }
    getSpriteAssetName(s, e)
    {
        return this.getLayerTag(s, this._direction, e) === kn.BADGE ? s === 32 ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale : super.getSpriteAssetName(s, e)
    }
    getLibraryAssetNameForSprite(s, e)
    {
        return e.tag === kn.BADGE ? "%group.badge.url%" + e.libraryAssetName.replace("badge_", "") : super.getLibraryAssetNameForSprite(s, e)
    }
}
;
let oc = kn;
oc.PRIMARY_COLOUR_SPRITE_TAG = "COLOR1";
oc.SECONDARY_COLOUR_SPRITE_TAG = "COLOR2";
oc.BADGE = "BADGE";
oc.DEFAULT_COLOR_1 = 15658734;
oc.DEFAULT_COLOR_2 = 4934475;
const dl = class  extends CE{
    updateModel(s)
    {
        const e = super.updateModel(s);
        if (!this.hasThumbnailImage) {
            const i = this.object.model.getValue(C.FURNITURE_GUILD_CUSTOMIZED_ASSET_NAME);
            i && i.length && this.setThumbnailImages(this.getBitmapAsset(i))
        }
        const t = this.object.model.getValue(C.FURNITURE_GUILD_CUSTOMIZED_COLOR_1);
        this._color1 = t || dl.DEFAULT_COLOR_1;
        const r = this.object.model.getValue(C.FURNITURE_GUILD_CUSTOMIZED_COLOR_2);
        return this._color2 = r || dl.DEFAULT_COLOR_2, e
    }
    generateTransformedThumbnail(s, e)
    {
        const r = new Pr,
            i = e.width / s.width;
        switch (this.direction) {
        case 2:
            r.a = i,
            r.b = -.5 * i,
            r.c = 0,
            r.d = i * 1.1,
            r.tx = 0,
            r.ty = .5 * i * s.width;
            break;
        case 0:
        case 4:
            r.a = i,
            r.b = .5 * i,
            r.c = 0,
            r.d = i * 1.1,
            r.tx = 0,
            r.ty = 0;
            break;
        default:
            r.a = i,
            r.b = 0,
            r.c = 0,
            r.d = i,
            r.tx = 0,
            r.ty = 0
        }
        const n = new qt(s);
        return n.transform.setFromMatrix(r), n.position.set(0), pt.generateTexture(n)
    }
    getLayerColor(s, e, t)
    {
        switch (this.getLayerTag(s, this._direction, e)) {
        case dl.PRIMARY_COLOUR_SPRITE_TAG:
            return this._color1;
        case dl.SECONDARY_COLOUR_SPRITE_TAG:
            return this._color2
        }
        return super.getLayerColor(s, e, t)
    }
    getLibraryAssetNameForSprite(s, e)
    {
        return e.tag === dl.THUMBNAIL && this.object && this.object.model.getValue(C.FURNITURE_GUILD_CUSTOMIZED_ASSET_NAME) ? "%group.badge.url%" + this.object.model.getValue(C.FURNITURE_GUILD_CUSTOMIZED_ASSET_NAME) : super.getLibraryAssetNameForSprite(s, e)
    }
    getBitmapAsset(s)
    {
        const e = this.asset.getAsset(s);
        return !e || !e.texture ? null : e.texture
    }
}
;
let mu = dl;
mu.PRIMARY_COLOUR_SPRITE_TAG = "COLOR1";
mu.SECONDARY_COLOUR_SPRITE_TAG = "COLOR2";
mu.DEFAULT_COLOR_1 = 15658734;
mu.DEFAULT_COLOR_2 = 4934475;
const _l = class  extends As{
    constructor()
    {
        super(),
        this._stateQueue = [],
        this._running = !1
    }
    setAnimation(s)
    {
        if (s === -1 && !this._running) {
            this._running = !0,
            this._stateQueue = [],
            this._stateQueue.push(_l.ANIMATION_ID_START_ROLL),
            this._stateQueue.push(_l.ANIMATION_ID_ROLL);
            return
        }
        if (s > 0 && s <= _l.ANIMATION_ID_OFFSET_SLOW1) {
            if (this._running) {
                this._running = !1,
                this._stateQueue = [],
                this._stateQueue.push(_l.ANIMATION_ID_OFFSET_SLOW1 + s),
                this._stateQueue.push(_l.ANIMATION_ID_OFFSET_SLOW2 + s),
                this._stateQueue.push(s);
                return
            }
            super.setAnimation(s)
        }
    }
    updateAnimation(s)
    {
        return this.getLastFramePlayed(1) && this.getLastFramePlayed(2) && this.getLastFramePlayed(3) && this._stateQueue.length && super.setAnimation(this._stateQueue.shift()), super.updateAnimation(s)
    }
}
;
let Eu = _l;
Eu.ANIMATION_ID_OFFSET_SLOW1 = 10;
Eu.ANIMATION_ID_OFFSET_SLOW2 = 20;
Eu.ANIMATION_ID_START_ROLL = 31;
Eu.ANIMATION_ID_ROLL = 32;
class e3 extends KD {
    constructor()
    {
        super(...arguments),
        this._needsTransform = !0
    }
    transformGifTextures(e)
    {
        if (!this._gifCollection)
            return;
        const t = this._gifCollection.textures;
        if (t.length) {
            for (let r = 0; r < t.length; r++) {
                const i = t[r];
                if (!i || !this.getAsset(`${this._imageUrl}_${r}`))
                    continue;
                const o = 1.1,
                    l = new Pr,
                    c = e.width / i.width;
                switch (this.direction) {
                case 2:
                    l.a = c,
                    l.b = -.5 * c,
                    l.c = 0,
                    l.d = c * o,
                    l.tx = 0,
                    l.ty = .5 * c * i.width;
                    break;
                case 0:
                case 4:
                    l.a = c,
                    l.b = .5 * c,
                    l.c = 0,
                    l.d = c * o,
                    l.tx = 0,
                    l.ty = 0;
                    break;
                default:
                    l.a = c,
                    l.b = 0,
                    l.c = 0,
                    l.d = c,
                    l.tx = 0,
                    l.ty = 0
                }
                const u = new qt(i),
                    h = $i.create({
                        width: e.width + l.tx,
                        height: e.height + l.ty
                    });
                Gs.instance.renderer.render(u, {
                    renderTexture: h,
                    clear: !0,
                    transform: l
                }),
                this.asset.disposeAsset(`${this._imageUrl}_${r}`),
                this.asset.addAsset(`${this._imageUrl}_${r}`, h, !0, e.x, e.y, e.flipH, e.flipV)
            }
            this._needsTransform = !1
        }
    }
    generateTransformedImage(e, t)
    {
        const i = new Pr,
            n = t.width / e.width;
        switch (this.direction) {
        case 2:
            i.a = n,
            i.b = -.5 * n,
            i.c = 0,
            i.d = n * 1.1,
            i.tx = 0,
            i.ty = .5 * n * e.width;
            break;
        case 0:
        case 4:
            i.a = n,
            i.b = .5 * n,
            i.c = 0,
            i.d = n * 1.1,
            i.tx = 0,
            i.ty = 0;
            break;
        default:
            i.a = n,
            i.b = 0,
            i.c = 0,
            i.d = n,
            i.tx = 0,
            i.ty = 0
        }
        const o = new qt(e),
            l = $i.create({
                width: t.width + i.tx,
                height: t.height + i.ty
            });
        Gs.instance.renderer.render(o, {
            renderTexture: l,
            clear: !0,
            transform: i
        }),
        this.asset.disposeAsset(`${this._imageUrl}_0`),
        this.asset.addAsset(`${this._imageUrl}_0`, l, !0, o.x, o.y, t.flipH, t.flipV),
        this._needsTransform = !1
    }
    checkAndCreateImageForCurrentState()
    {
        super.checkAndCreateImageForCurrentState(),
        this._needsTransform = !0
    }
    getSpriteAssetName(e, t)
    {
        return this.getLayerTag(e, this._direction, t) === to.BRANDED_IMAGE && this._imageUrl ? (this._needsTransform && (this._isAnimated ? this.transformGifTextures(this.getAsset(super.getSpriteAssetName(e, t))) : this.generateTransformedImage(zr().getTexture(this._imageUrl), this.getAsset(super.getSpriteAssetName(e, t)))), `${this._imageUrl}_${this.getFrameNumber(e, t)}`) : super.getSpriteAssetName(e, t)
    }
}
class pf extends ra {
    constructor()
    {
        super(),
        this._avatarData = new td
    }
    dispose()
    {
        super.dispose(),
        this._avatarData && (this._avatarData.dispose(), this._avatarData = null)
    }
    createAvatarImage(e, t, r=null, i=null, n=null)
    {
        return this._avatarData.createAvatarImage(e, t, r, i, n)
    }
    set avatarManager(e)
    {
        this._avatarData.avatarManager = e
    }
}
const ph = class  extends da{
    constructor()
    {
        super(),
        this._mannequinScale = -1,
        this._figure = null,
        this._gender = null,
        this._dynamicAssetName = null,
        this._needsUpdate = !1,
        this._placeHolderFigure = "hd-99999-99998",
        this._disposed = !1
    }
    initialize(s)
    {
        return s instanceof pf ? super.initialize(s) : !1
    }
    dispose()
    {
        this._disposed || (this._disposed = !0, this._dynamicAssetName && this.asset && (this.asset.disposeAsset(this._dynamicAssetName), this._dynamicAssetName = null), super.dispose())
    }
    updateObject(s, e)
    {
        const t = super.updateObject(s, e);
        return t && this._mannequinScale !== s && (this._mannequinScale = s, this.updateAvatar()), t
    }
    updateModel(s)
    {
        let e = super.updateModel(s);
        if (e) {
            const t = this.object.model.getValue(C.FURNITURE_MANNEQUIN_FIGURE) || null;
            t && (this._figure = t + "." + this._placeHolderFigure, this._gender = this.object.model.getValue(C.FURNITURE_MANNEQUIN_GENDER) || null, this.updateAvatar())
        }
        return e = e || this._needsUpdate, this._needsUpdate = !1, e
    }
    updateAvatar(s=!1)
    {
        if (!this.avatarExists() || s) {
            const e = this.data.createAvatarImage(this._figure, this._mannequinScale, this._gender, this);
            e && (e.setDirection(Ys.FULL, this.direction), this._dynamicAssetName && this.asset.disposeAsset(this._dynamicAssetName), this.asset.addAsset(this.getAvatarAssetName(), e.getImage(Ys.FULL, !1, 1, !1), !0), this._dynamicAssetName = this.getAvatarAssetName(), this._needsUpdate = !0, e.dispose())
        }
    }
    avatarExists()
    {
        return this._figure && this.getAsset(this.getAvatarAssetName()) !== null
    }
    getAvatarAssetName()
    {
        return "mannequin_" + this._figure + "_" + this._mannequinScale + "_" + this.direction + "_" + this.object.id
    }
    resetFigure(s)
    {
        s === this._figure && this.updateAvatar(!0)
    }
    getSpriteAssetName(s, e)
    {
        const t = this.getLayerTag(s, this.direction, e);
        return this._figure && t === ph.AVATAR_IMAGE_SPRITE_TAG && this.avatarExists() ? this.getAvatarAssetName() : super.getSpriteAssetName(s, e)
    }
    getLayerXOffset(s, e, t)
    {
        return this.getLayerTag(s, e, t) === ph.AVATAR_IMAGE_SPRITE_TAG && this.avatarExists() ? -this.getSprite(t).width / 2 : super.getLayerXOffset(s, e, t)
    }
    getLayerYOffset(s, e, t)
    {
        return this.getLayerTag(s, e, t) === ph.AVATAR_IMAGE_SPRITE_TAG && this.avatarExists() ? -this.getSprite(t).height : super.getLayerYOffset(s, e, t)
    }
    get disposed()
    {
        return this._disposed
    }
    get data()
    {
        return this._data
    }
}
;
let QD = ph;
QD.AVATAR_IMAGE_SPRITE_TAG = "avatar_image";
const To = class  extends As{
    constructor()
    {
        super(),
        this._animOffsetIndex = []
    }
    updateAnimation(s)
    {
        this._animSpeedIndex || this.initItems(s);
        let e = this.getSprite(2);
        return e && (this._animOffsetIndex[0] = this.getNewPoint(s, 0)), e = this.getSprite(3), e && (this._animOffsetIndex[1] = this.getNewPoint(s, 1)), super.updateAnimation(s)
    }
    getNewPoint(s, e)
    {
        let t = 0,
            r = this._animPhaseIndex[e],
            i = this._animDirectionIndex[e];
        const n = this._animSpeedIndex[e],
            o = this._animFactorIndex[e];
        let l = 1;
        s == 32 ? (t = To.AREA_DIAMETER_SMALL, l = .5) : t = To.AREA_DIAMETER_LARGE;
        const c = r + i * n;
        Math.abs(c) >= t && (i > 0 ? r = r - (c - t) : r = r + (-t - c), i = -i, this._animDirectionIndex[e] = i);
        const u = (t - Math.abs(r)) * o;
        let h = i * Math.sin(Math.abs(r / 4)) * u;
        return i > 0 ? h = h - u : h = h + u, r = r + i * n * l, this._animPhaseIndex[e] = r, Math.trunc(h) == 0 && (this._animFactorIndex[e] = this.getRandomAmplitudeFactor()), new wi(r, h)
    }
    initItems(s)
    {
        let e;
        s === 32 ? e = To.AREA_DIAMETER_SMALL : e = To.AREA_DIAMETER_LARGE,
        this._animPhaseIndex = [],
        this._animPhaseIndex.push(Math.random() * e * 1.5),
        this._animPhaseIndex.push(Math.random() * e * 1.5),
        this._animDirectionIndex = [],
        this._animDirectionIndex.push(1),
        this._animDirectionIndex.push(-1),
        this._animSpeedIndex = [],
        this._animSpeedIndex.push(To.ANIM_SPEED_FAST),
        this._animSpeedIndex.push(To.ANIM_SPEED_SLOW),
        this._animFactorIndex = [],
        this._animFactorIndex.push(this.getRandomAmplitudeFactor()),
        this._animFactorIndex.push(this.getRandomAmplitudeFactor())
    }
    getLayerXOffset(s, e, t)
    {
        return (t === 2 || t === 3) && this._animOffsetIndex.length == 2 ? this._animOffsetIndex[t - 2].x : super.getLayerXOffset(s, e, t)
    }
    getLayerYOffset(s, e, t)
    {
        return (t === 2 || t === 3) && this._animOffsetIndex.length == 2 ? this._animOffsetIndex[t - 2].y : super.getLayerYOffset(s, e, t)
    }
    getRandomAmplitudeFactor()
    {
        return Math.random() * 30 / 100 + .15
    }
}
;
let lc = To;
lc.UPDATE_INTERVAL = 2;
lc.AREA_DIAMETER_SMALL = 15;
lc.AREA_DIAMETER_LARGE = 31;
lc.ANIM_SPEED_FAST = 2;
lc.ANIM_SPEED_SLOW = 1;
const JD = class {
    constructor(s, e, t, r, i, n)
    {
        this._name = s,
        this._index = e,
        this._radius = t,
        this._arcSpeed = r * Math.PI * 2 / 360,
        this._arcOffset = i * Math.PI * 2 / 360,
        this._height = n,
        this._position = 0,
        this._positionVector = new w(0, 0, 0),
        this._children = []
    }
    dispose()
    {
        for (; this._children.length > 0;)
            this._children.shift().dispose()
    }
    update(s, e, t)
    {
        this._position = this._position + this._arcSpeed / JD.SYSTEM_TEMPO,
        s[this._index] = this.getPositionVector(e, t);
        for (const r of this._children)
            r.update(s, this._positionVector, t)
    }
    getPositionVector(s, e)
    {
        const t = this._radius * Math.cos(this._position + this._arcOffset),
            r = this._radius * Math.sin(this._position + this._arcOffset);
        return this._positionVector.x = (t - r) * (e / 2), this._positionVector.y = (r + t) * (e / 2) * .5 - this._height * (e / 2), this._positionVector.z = -Math.trunc(4 * (t + r) - .7), s && this._positionVector.add(s), this._positionVector
    }
    addChild(s)
    {
        this._children.indexOf(s) >= 0 || this._children.push(s)
    }
    hasChild(s)
    {
        return !!this.getChild(s)
    }
    getChild(s)
    {
        for (const e of this._children) {
            if (e.name === s)
                return e;
            if (e.hasChild(s))
                return e.getChild(s)
        }
        return null
    }
    get name()
    {
        return this._name
    }
}
;
let ZD = JD;
ZD.SYSTEM_TEMPO = 30;
class t3 extends As {
    constructor()
    {
        super(),
        this._offsetArray = [],
        this._rootPosition = new w
    }
    dispose()
    {
        if (this._planetIndex)
            for (; this._planetIndex.length > 0;)
                this._planetIndex.shift().dispose();
        this._planetIndex = null,
        this._planetNameIndex = null
    }
    updateAnimation(e)
    {
        if (!this._planetIndex && this.spriteCount > 0 && !this.processPlanets())
            return 0;
        if (this._planetIndex) {
            for (const t of this._planetIndex)
                t.update(this._offsetArray, this._rootPosition, e);
            return super.updateAnimation(e)
        }
        return 0
    }
    getLayerXOffset(e, t, r)
    {
        return this._offsetArray[r] ? this._offsetArray[r].x : super.getLayerXOffset(e, t, r)
    }
    getLayerYOffset(e, t, r)
    {
        return this._offsetArray[r] ? this._offsetArray[r].y : super.getLayerYOffset(e, t, r)
    }
    getLayerZOffset(e, t, r)
    {
        return this._offsetArray[r] ? this._offsetArray[r].z : super.getLayerZOffset(e, t, r)
    }
    processPlanets()
    {
        if (!this.object || !this.object.model)
            return;
        const e = this.object.model.getValue(C.FURNITURE_PLANETSYSTEM_DATA);
        if (!e)
            return !1;
        this._planetIndex = [],
        this._planetNameIndex = [];
        for (const t of e)
            this.getSprite(t.id) && this.addPlanet(t.name, t.id, t.parent, t.radius || 0, t.arcSpeed || 0, t.arcOffset || 0, t.height || 0);
        return !0
    }
    addPlanet(e, t, r, i, n, o, l)
    {
        if (!this._planetIndex)
            return;
        const c = new ZD(e, t, i, n, o, l),
            u = this.getPlanet(r);
        u ? u.addChild(c) : (this._planetIndex.push(c), this._planetNameIndex.push(e))
    }
    getPlanet(e)
    {
        for (const t of this._planetIndex) {
            if (t.name === e)
                return t;
            if (t.hasChild(e))
                return t.getChild(e)
        }
        return null
    }
}
class s3 extends As {}
const Ih = class  extends As{
    constructor()
    {
        super(),
        this._stateQueue = [],
        this._animationCounter = -1
    }
    setAnimation(s)
    {
        return s === Ih.ANIMATION_ID_ROLL_ONCE && (this._stateQueue = [], this._stateQueue.push(Ih.ANIMATION_ID_NORMAL), this._animationCounter = Ih.ANIMATION_DURATION), super.setAnimation(s)
    }
    updateAnimation(s)
    {
        return this._animationCounter > 0 && this._animationCounter--, this._animationCounter || this._stateQueue.length && super.setAnimation(this._stateQueue.shift()), super.updateAnimation(s)
    }
    usesAnimationResetting()
    {
        return !0
    }
}
;
let pu = Ih;
pu.ANIMATION_ID_ROLL = 3;
pu.ANIMATION_ID_ROLL_ONCE = 2;
pu.ANIMATION_ID_NORMAL = 1;
pu.ANIMATION_DURATION = 15;
class r3 extends As {
    usesAnimationResetting()
    {
        return !0
    }
}
class i3 extends to {
    imageReady(e, t)
    {
        super.imageReady(e, t),
        e && this.setImageOffset(e.width, e.height)
    }
    setImageOffset(e, t)
    {
        const r = new HD;
        r.setDirection(1, 0, -t),
        r.setDirection(3, 0, 0),
        r.setDirection(5, -e, 0),
        r.setDirection(7, -e, -t),
        r.setDirection(4, -e / 2, -t / 2),
        this._imageOffset = r
    }
    getLayerXOffset(e, t, r)
    {
        if (this._imageOffset) {
            const i = this._imageOffset.getXOffset(t, 0);
            if (i !== void 0)
                return i + this._offsetX
        }
        return super.getLayerXOffset(e, t, r) + this._offsetX
    }
    getLayerYOffset(e, t, r)
    {
        if (this._imageOffset) {
            const i = this._imageOffset.getYOffset(t, 0);
            if (i !== void 0)
                return i + this._offsetY
        }
        return super.getLayerYOffset(e, t, r) + this._offsetY
    }
    getLayerZOffset(e, t, r)
    {
        return super.getLayerZOffset(e, t, r) + -this._offsetZ
    }
    getLayerIgnoreMouse(e, t, r)
    {
        return !0
    }
}
const bc = class  extends As{
    getFrameNumber(s, e)
    {
        const t = this.getLayerTag(s, this.direction, e),
            r = this.object.getState(0);
        switch (t) {
        case bc.ONES_SPRITE:
            return Math.floor(r % 10);
        case bc.TENS_SPRITE:
            return Math.floor(r / 10 % 10);
        case bc.HUNDREDS_SPRITE:
            return Math.floor(r / 100 % 10);
        case bc.THOUSANDS_SPRITE:
            return Math.floor(r / 1e3 % 10);
        default:
            return super.getFrameNumber(s, e)
        }
    }
}
;
let Iu = bc;
Iu.ONES_SPRITE = "ones_sprite";
Iu.TENS_SPRITE = "tens_sprite";
Iu.HUNDREDS_SPRITE = "hundreds_sprite";
Iu.THOUSANDS_SPRITE = "thousands_sprite";
class n3 extends As {
    constructor()
    {
        super(...arguments),
        this._internalFrameIncreaseCounter = 0
    }
    updateAnimations(e)
    {
        return this._internalFrameIncreaseCounter = this._internalFrameIncreaseCounter + this.object.model.getValue(C.FURNITURE_SOUNDBLOCK_RELATIVE_ANIMATION_SPEED), this._frameIncrease = this._internalFrameIncreaseCounter, this._internalFrameIncreaseCounter = this._internalFrameIncreaseCounter - this._frameIncrease, super.updateAnimations(e)
    }
}
class a3 extends da {
    getLayerColor(e, t, r)
    {
        return this._data ? this._data.getLayerColor(e, t, r) : Vl.DEFAULT_COLOR
    }
}
const Wi = class  extends As{
    constructor()
    {
        super(),
        this._stateQueue = [],
        this._running = !1,
        super.setAnimation(Wi.ANIMATION_ID_OFF)
    }
    setAnimation(s)
    {
        if (s === 0 && !this._running) {
            this._running = !0,
            this._stateQueue = [],
            this._stateQueue.push(Wi.ANIMATION_ID_START_ROLL),
            this._stateQueue.push(Wi.ANIMATION_ID_ROLL);
            return
        }
        if (s > 0 && s <= Wi.ANIMATION_ID_OFFSET_SLOW2) {
            if (this._running) {
                this._running = !1,
                this._stateQueue = [],
                this.direction === 2 ? (this._stateQueue.push(Wi.ANIMATION_ID_OFFSET_SLOW1 + 5), this._stateQueue.push(Wi.ANIMATION_ID_OFFSET_SLOW2 + 5)) : (this._stateQueue.push(Wi.ANIMATION_ID_OFFSET_SLOW1 + s), this._stateQueue.push(Wi.ANIMATION_ID_OFFSET_SLOW2 + s)),
                this._stateQueue.push(Wi.ANIMATION_ID_OFF);
                return
            }
            super.setAnimation(Wi.ANIMATION_ID_OFF)
        }
    }
    updateAnimation(s)
    {
        return this.getLastFramePlayed(11) && this._stateQueue.length && super.setAnimation(this._stateQueue.shift()), super.updateAnimation(s)
    }
}
;
let cc = Wi;
cc.ANIMATION_ID_OFFSET_SLOW1 = 20;
cc.ANIMATION_ID_OFFSET_SLOW2 = 10;
cc.ANIMATION_ID_START_ROLL = 31;
cc.ANIMATION_ID_ROLL = 32;
cc.ANIMATION_ID_OFF = 30;
const Aa = class  extends As{
    updateObject(s, e)
    {
        return super.updateObject(s, e), !0
    }
    getFrameNumber(s, e)
    {
        const t = this.object.model.getValue(C.FURNITURE_VOTE_COUNTER_COUNT);
        switch (this.getLayerTag(s, this.direction, e)) {
        case Aa.ONES_SPRITE:
            return t % 10;
        case Aa.TENS_SPRITE:
            return t / 10 % 10;
        case Aa.HUNDREDS_SPRITE:
            return t / 100 % 10;
        default:
            return super.getFrameNumber(s, e)
        }
    }
    getLayerAlpha(s, e, t)
    {
        if (this.object.model.getValue(C.FURNITURE_VOTE_COUNTER_COUNT) === Aa.HIDE_COUNTER_SCORE)
            switch (this.getLayerTag(s, e, t)) {
            case Aa.ONES_SPRITE:
            case Aa.TENS_SPRITE:
            case Aa.HUNDREDS_SPRITE:
                return 0
            }
        return super.getLayerAlpha(s, e, t)
    }
}
;
let Tu = Aa;
Tu.ONES_SPRITE = "ones_sprite";
Tu.TENS_SPRITE = "tens_sprite";
Tu.HUNDREDS_SPRITE = "hundreds_sprite";
Tu.HIDE_COUNTER_SCORE = -1;
const Vn = class  extends As{
    getFrameNumber(s, e)
    {
        const t = this.object.model.getValue(C.FURNITURE_VOTE_MAJORITY_RESULT);
        switch (this.getLayerTag(s, this.direction, e)) {
        case Vn.ONES_SPRITE:
            return t % 10;
        case Vn.TENS_SPRITE:
            return t / 10 % 10;
        case Vn.HUNDREDS_SPRITE:
            return t / 100 % 10;
        default:
            return super.getFrameNumber(s, e)
        }
    }
    getLayerAlpha(s, e, t)
    {
        const r = this.object.model.getValue(C.FURNITURE_VOTE_MAJORITY_RESULT);
        if (Vn.HIDE_RESULTS_STATES.indexOf(this.object.getState(0)) !== -1 || r === Vn.HIDE_RESULTS_VALUE)
            switch (this.getLayerTag(s, e, t)) {
            case Vn.ONES_SPRITE:
            case Vn.TENS_SPRITE:
            case Vn.HUNDREDS_SPRITE:
                return 0
            }
        return super.getLayerAlpha(s, e, t)
    }
}
;
let uc = Vn;
uc.ONES_SPRITE = "ones_sprite";
uc.TENS_SPRITE = "tens_sprite";
uc.HUNDREDS_SPRITE = "hundreds_sprite";
uc.HIDE_RESULTS_STATES = [-1, 1];
uc.HIDE_RESULTS_VALUE = -1;
class o3 extends As {}
const $D = class  extends qD{
    getThumbnailURL()
    {
        if (!this.object)
            return null;
        const s = this.object.model.getValue(C.FURNITURE_DATA);
        return s && s[$D.THUMBNAIL_URL] || null
    }
}
;
let ev = $D;
ev.THUMBNAIL_URL = "THUMBNAIL_URL";
class l3 {
    constructor(e)
    {
        this._sprite = new qt(e),
        this._texture = null,
        this._amount = -1,
        this._alpha = 0
    }
    renderBubble(e)
    {
        if (!this._sprite || this._amount === e)
            return null;
        const t = new Mi;
        t.addChild(this._sprite);
        const r = new sL("+" + e, {
            fontFamily: "Arial",
            fontSize: 9,
            fill: 16777215,
            align: "center"
        });
        return r.anchor.x = .5, r.x = this._sprite.width / 2, r.y = 19, t.addChild(r), this._texture ? Gs.instance.renderer.render(t, {
            renderTexture: this._texture,
            clear: !0
        }) : this._texture = pt.generateTexture(t), this._texture
    }
    get amount()
    {
        return this._amount
    }
    set amount(e)
    {
        this._amount = e
    }
    get alpha()
    {
        return this._alpha
    }
    set alpha(e)
    {
        this._alpha = e
    }
}
class tv extends SE {
    constructor()
    {
        super(),
        this._isAllowedToTurnHead = !0
    }
    createSizeData(e, t, r)
    {
        return e > 1 ? new hl(t, r) : new sd(t, r)
    }
    defineVisualizations(e)
    {
        return this._isAllowedToTurnHead = !0, super.defineVisualizations(e)
    }
    processVisualElement(e, t, r)
    {
        if (!e || !t || !r)
            return !1;
        switch (t) {
        case "postures":
            if (!(e instanceof hl) || !e.processPostures(r))
                return !1;
            break;
        case "gestures":
            if (!(e instanceof hl) || !e.processGestures(r))
                return !1;
            break;
        default:
            if (!super.processVisualElement(e, t, r))
                return !1;
            break
        }
        return !0
    }
    postureToAnimation(e, t)
    {
        const r = this.getSizeData(e);
        return r ? r.postureToAnimation(t) : hl.DEFAULT
    }
    getGestureDisabled(e, t)
    {
        const r = this.getSizeData(e);
        return r ? r.getGestureDisabled(t) : !1
    }
    gestureToAnimation(e, t)
    {
        const r = this.getSizeData(e);
        return r ? r.gestureToAnimation(t) : hl.DEFAULT
    }
    animationToPosture(e, t, r)
    {
        const i = this.getSizeData(e);
        return i ? i.animationToPosture(t, r) : null
    }
    animationToGesture(e, t)
    {
        const r = this.getSizeData(e);
        return r ? r.animationToGesture(t) : null
    }
    getGestureForAnimationId(e, t)
    {
        const r = this.getSizeData(e);
        return r ? r.getGestureForAnimationId(t) : null
    }
    totalPostures(e)
    {
        const t = this.getSizeData(e);
        return t ? t.totalPostures : 0
    }
    totalGestures(e)
    {
        const t = this.getSizeData(e);
        return t ? t.totalGestures : 0
    }
    get isAllowedToTurnHead()
    {
        return this._isAllowedToTurnHead
    }
}
const or = class  extends As{
    constructor()
    {
        for (super(), this._posture = "", this._gesture = "", this._isSleeping = !1, this._headDirection = -1, this._headOnly = !1, this._nonHeadSprites = [], this._headSprites = [], this._saddleSprites = [], this._animationOver = !1, this._paletteIndex = -1, this._paletteName = "", this._customLayerIds = [], this._customPartIds = [], this._customPaletteIds = [], this._isRiding = !1, this._color = 16777215, this._experience = 0, this._experienceTimestamp = 0, this._experienceData = null, this._previousAnimationDirection = -1, this._animationStates = []; this._animationStates.length < or.ANIMATION_INDEX_COUNT;)
            this._animationStates.push(new jD)
    }
    initialize(s)
    {
        if (!(s instanceof tv))
            return !1;
        const e = this.getPetAdditionAsset(or.PET_EXPERIENCE_BUBBLE);
        return e && (this._experienceData = new l3(e)), super.initialize(s)
    }
    dispose()
    {
        if (super.dispose(), this._animationStates) {
            for (; this._animationStates.length;) {
                const s = this._animationStates[0];
                s && s.dispose(),
                this._animationStates.pop()
            }
            this._animationStates = null
        }
    }
    getAnimationId(s)
    {
        return s.animationId
    }
    update(s, e, t, r)
    {
        super.update(s, e, t, r),
        this.updateExperienceBubble(e)
    }
    updateExperienceBubble(s)
    {
        if (this._experienceData && (this._experienceData.alpha = 0, this._experienceTimestamp)) {
            const e = s - this._experienceTimestamp;
            e < or.EXPERIENCE_BUBBLE_VISIBLE_IN_MS ? this._experienceData.alpha = Math.sin(e / or.EXPERIENCE_BUBBLE_VISIBLE_IN_MS * Math.PI) * 255 : this._experienceTimestamp = 0;
            const t = this.getSprite(this.totalSprites - 1);
            if (t) {
                if (this._experienceData.alpha > 0) {
                    const r = this._experienceData.renderBubble(this._experience);
                    if (r) {
                        t.texture = r,
                        t.offsetX = -20,
                        t.offsetY = -80,
                        t.alpha = this._experienceData.alpha,
                        t.visible = !0,
                        t.relativeDepth = -.2;
                        return
                    }
                }
                t.texture = null,
                t.visible = !1
            }
        }
    }
    updateModel(s)
    {
        const e = this.object && this.object.model;
        if (!e || this.updateModelCounter === e.updateCounter)
            return !1;
        const t = e.getValue(C.FIGURE_POSTURE),
            r = e.getValue(C.FIGURE_GESTURE);
        this.setPostureAndGesture(t, r);
        let i = e.getValue(C.FURNITURE_ALPHA_MULTIPLIER) || null;
        (i === null || isNaN(i)) && (i = 1),
        this._alphaMultiplier !== i && (this._alphaMultiplier = i, this._alphaChanged = !0),
        this._isSleeping = e.getValue(C.FIGURE_SLEEP) > 0;
        const n = e.getValue(C.HEAD_DIRECTION);
        !isNaN(n) && this.data.isAllowedToTurnHead ? this._headDirection = n : this._headDirection = this.object.getDirection().x,
        this._experience = e.getValue(C.FIGURE_GAINED_EXPERIENCE),
        this._experienceTimestamp = e.getValue(C.FIGURE_EXPERIENCE_TIMESTAMP);
        const o = e.getValue(C.PET_PALETTE_INDEX),
            l = e.getValue(C.PET_CUSTOM_LAYER_IDS),
            c = e.getValue(C.PET_CUSTOM_PARTS_IDS),
            u = e.getValue(C.PET_CUSTOM_PALETTE_IDS),
            h = e.getValue(C.PET_IS_RIDING),
            d = e.getValue(C.PET_HEAD_ONLY),
            m = e.getValue(C.PET_COLOR);
        return o !== this._paletteIndex && (this._paletteIndex = o, this._paletteName = this._paletteIndex.toString()), this._customLayerIds = l || [], this._customPartIds = c || [], this._customPaletteIds = u || [], this._isRiding = !isNaN(h) && h > 0, this._headOnly = !isNaN(d) && d > 0, !isNaN(m) && this._color !== m && (this._color = m), this.updateModelCounter = e.updateCounter, !0
    }
    updateAnimation(s)
    {
        if (this.object) {
            const e = this.object.getDirection().x;
            e !== this._previousAnimationDirection && (this._previousAnimationDirection = e, this.resetAllAnimationFrames())
        }
        return super.updateAnimation(s)
    }
    setPostureAndGesture(s, e)
    {
        this.data && (s !== this._posture && (this._posture = s, this.setAnimationForIndex(or.POSTURE_ANIMATION_INDEX, this.data.postureToAnimation(this._scale, s))), this.data.getGestureDisabled(this._scale, s) && (e = null), e !== this._gesture && (this._gesture = e, this.setAnimationForIndex(or.GESTURE_ANIMATION_INDEX, this.data.gestureToAnimation(this._scale, e))))
    }
    getAnimationStateData(s)
    {
        return s >= 0 && s < this._animationStates.length ? this._animationStates[s] : null
    }
    setAnimationForIndex(s, e)
    {
        const t = this.getAnimationStateData(s);
        t && this.setSubAnimation(t, e) && (this._animationOver = !1)
    }
    resetAllAnimationFrames()
    {
        this._animationOver = !1;
        let s = this._animationStates.length - 1;
        for (; s >= 0;) {
            const e = this._animationStates[s];
            e && e.setLayerCount(this.animatedLayerCount),
            s--
        }
    }
    updateAnimations(s)
    {
        if (this._animationOver)
            return 0;
        let e = !0,
            t = 0,
            r = 0;
        for (; r < this._animationStates.length;) {
            const i = this._animationStates[r];
            if (i && !i.animationOver) {
                const n = this.updateFramesForAnimation(i, s);
                t = t | n,
                i.animationOver ? (Ls.isTransitionFromAnimation(i.animationId) || Ls.isTransitionToAnimation(i.animationId)) && (this.setAnimationForIndex(r, i.animationAfterTransitionId), e = !1) : e = !1
            }
            r++
        }
        return this._animationOver = e, t
    }
    getSpriteAssetName(s, e)
    {
        if (this._headOnly && this.isNonHeadSprite(e) || this._isRiding && this._parser3(e))
            return null;
        const t = this.totalSprites;
        if (e < t - or.ADDITIONAL_SPRITE_COUNT) {
            const r = this.getValidSize(s);
            if (e < t - (1 + or.ADDITIONAL_SPRITE_COUNT)) {
                if (e >= ra.LAYER_LETTERS.length)
                    return null;
                const i = ra.LAYER_LETTERS[e];
                return r === 1 ? this._type + "_icon_" + i : this._type + "_" + r + "_" + i + "_" + this.getDirection(s, e) + "_" + this.getFrameNumber(r, e)
            }
            return this._type + "_" + r + "_sd_" + this.getDirection(s, e) + "_0"
        }
        return null
    }
    getLayerColor(s, e, t)
    {
        return e < this.totalSprites - or.ADDITIONAL_SPRITE_COUNT ? this._color : 16777215
    }
    getLayerXOffset(s, e, t)
    {
        let r = super.getLayerXOffset(s, e, t),
            i = this._animationStates.length - 1;
        for (; i >= 0;) {
            const n = this._animationStates[i];
            if (n) {
                const o = n.getFrame(t);
                o && (r += o.x)
            }
            i--
        }
        return r
    }
    getLayerYOffset(s, e, t)
    {
        let r = super.getLayerYOffset(s, e, t),
            i = this._animationStates.length - 1;
        for (; i >= 0;) {
            const n = this._animationStates[i];
            if (n) {
                const o = n.getFrame(t);
                o && (r += o.y)
            }
            i--
        }
        return r
    }
    getLayerZOffset(s, e, t)
    {
        return this.data ? this.data.getLayerZOffset(s, this.getDirection(s, t), t) : ot.DEFAULT_ZOFFSET
    }
    getDirection(s, e)
    {
        return this.isHeadSprite(e) ? this.data.getValidDirection(s, this._headDirection) : this._direction
    }
    getFrameNumber(s, e)
    {
        let t = this._animationStates.length - 1;
        for (; t >= 0;) {
            const r = this._animationStates[t];
            if (r) {
                const i = r.getFrame(e);
                if (i)
                    return i.id
            }
            t--
        }
        return super.getFrameNumber(s, e)
    }
    isHeadSprite(s)
    {
        if (this._headSprites[s] === void 0) {
            const e = this.data.getLayerTag(this._scale, No.USE_DEFAULT_DIRECTION, s) === or.HEAD,
                t = this.data.getLayerTag(this._scale, No.USE_DEFAULT_DIRECTION, s) === or.HAIR;
            e || t ? this._headSprites[s] = !0 : this._headSprites[s] = !1
        }
        return this._headSprites[s]
    }
    isNonHeadSprite(s)
    {
        if (this._nonHeadSprites[s] === void 0)
            if (s < this.totalSprites - (1 + or.ADDITIONAL_SPRITE_COUNT)) {
                const e = this.data.getLayerTag(this._scale, No.USE_DEFAULT_DIRECTION, s);
                e && e.length > 0 && e !== or.HEAD && e !== or.HAIR ? this._nonHeadSprites[s] = !0 : this._nonHeadSprites[s] = !1
            } else
                this._nonHeadSprites[s] = !0;
        return this._nonHeadSprites[s]
    }
    _parser3(s)
    {
        return this._saddleSprites[s] === void 0 && (this.data.getLayerTag(this._scale, No.USE_DEFAULT_DIRECTION, s) === or.SADDLE ? this._saddleSprites[s] = !0 : this._saddleSprites[s] = !1), this._saddleSprites[s]
    }
    getAsset(s, e=-1)
    {
        if (!this.asset)
            return null;
        const t = this._customLayerIds.indexOf(e);
        let r = this._paletteName,
            i = -1,
            n = -1;
        return t > -1 && (i = this._customPartIds[t], n = this._customPaletteIds[t], r = n > -1 ? n.toString() : this._paletteName), !isNaN(i) && i > -1 && (s = s + "_" + i), this.asset.getAssetWithPalette(s, r)
    }
    getAdditionalLayerCount()
    {
        return super.getAdditionalLayerCount() + or.ADDITIONAL_SPRITE_COUNT
    }
    setLayerCount(s)
    {
        super.setLayerCount(s),
        this._headSprites = []
    }
    getPostureForAsset(s, e)
    {
        const t = e.split("_");
        let r = t.length,
            i = 0;
        for (; i < t.length;) {
            if (t[i] === "64" || t[i] === "32") {
                r = i + 3;
                break
            }
            i++
        }
        let n = null;
        if (r < t.length) {
            let o = t[r];
            o = o.split("@")[0],
            n = this.data.animationToPosture(s, parseInt(o) / 100, !1),
            n || (n = this.data.getGestureForAnimationId(s, parseInt(o) / 100))
        }
        return n
    }
    getPetAdditionAsset(s)
    {
        return zr().getTexture(s)
    }
    get data()
    {
        return this._data
    }
}
;
let on = or;
on.TYPE = ae.PET_ANIMATED;
on.HEAD = "head";
on.SADDLE = "saddle";
on.HAIR = "hair";
on.ADDITIONAL_SPRITE_COUNT = 1;
on.EXPERIENCE_BUBBLE_VISIBLE_IN_MS = 1e3;
on.PET_EXPERIENCE_BUBBLE = "avatar_addition_pet_experience_bubble";
on.POSTURE_ANIMATION_INDEX = 0;
on.GESTURE_ANIMATION_INDEX = 1;
on.ANIMATION_INDEX_COUNT = 2;
class AE {
    constructor(e, t=-1, r=1, i=-1, n=1)
    {
        this._normalMinX = t,
        this._normalMaxX = r,
        this._normalMinY = i,
        this._normalMaxY = n,
        this._asset = e
    }
    get asset()
    {
        return this._asset
    }
    get normalMinX()
    {
        return this._normalMinX
    }
    get normalMaxX()
    {
        return this._normalMaxX
    }
    get normalMinY()
    {
        return this._normalMinY
    }
    get normalMaxY()
    {
        return this._normalMaxY
    }
    dispose()
    {
        this._asset = null
    }
}
AE.MIN_NORMAL_COORDINATE_VALUE = -1;
AE.MAX_NORMAL_COORDINATE_VALUE = 1;
class yo {
    constructor()
    {
        this._bitmaps = []
    }
    dispose()
    {
        for (const e of this._bitmaps)
            e && e.dispose();
        this._bitmaps = null
    }
    addBitmap(e, t=-1, r=1, i=-1, n=1)
    {
        this._bitmaps.push(new AE(e, t, r, i, n))
    }
    getAsset(e)
    {
        if (!e)
            return null;
        for (const t of this._bitmaps)
            if (t && e.x >= t.normalMinX && e.x <= t.normalMaxX && e.y >= t.normalMinY && e.y <= t.normalMaxY)
                return t.asset;
        return null
    }
}
yo.MIN_NORMAL_COORDINATE_VALUE = -1;
yo.MAX_NORMAL_COORDINATE_VALUE = 1;
class c3 {
    constructor()
    {
        this._sizes = [],
        this._maskVisualizations = new Map,
        this._assetNames = new Map,
        this._lastMaskVisualization = null,
        this._lastSize = -1
    }
    dispose()
    {
        if (this._maskVisualizations) {
            for (const e of this._maskVisualizations.values())
                e && e.dispose();
            this._maskVisualizations = null
        }
        this._lastMaskVisualization = null,
        this._sizes = null
    }
    createMaskVisualization(e)
    {
        if (this._maskVisualizations.get(e))
            return null;
        const r = new yo;
        return this._maskVisualizations.set(e, r), this._sizes.push(e), this._sizes.sort(), r
    }
    getSizeIndex(e)
    {
        let t = 0,
            r = 1;
        for (; r < this._sizes.length;) {
            if (this._sizes[r] > e) {
                this._sizes[r] - e < e - this._sizes[r - 1] && (t = r);
                break
            }
            t = r,
            r++
        }
        return t
    }
    getMaskVisualization(e)
    {
        if (e === this._lastSize)
            return this._lastMaskVisualization;
        const t = this.getSizeIndex(e);
        return t < this._sizes.length ? this._lastMaskVisualization = this._maskVisualizations.get(this._sizes[t]) : this._lastMaskVisualization = null, this._lastSize = e, this._lastMaskVisualization
    }
    getGraphicAsset(e, t)
    {
        const r = this.getMaskVisualization(e);
        return r ? r.getAsset(t) : null
    }
    getAssetName(e)
    {
        return this._assetNames && this._assetNames.get(e) || null
    }
    setAssetName(e, t)
    {
        this._assetNames && this._assetNames.set(e, t)
    }
}
class u3 {
    constructor()
    {
        this._assetCollection = null,
        this._masks = new Map,
        this._data = null
    }
    get data()
    {
        return this._data
    }
    dispose()
    {
        if (this._assetCollection = null, this._data = null, this._masks && this._masks.size) {
            for (const e of this._masks.values())
                e && e.dispose();
            this._masks.clear()
        }
    }
    initialize(e)
    {
        this._data = e
    }
    initializeAssetCollection(e)
    {
        this.data && (this._assetCollection = e, this.parseMasks(this.data, e))
    }
    parseMasks(e, t)
    {
        if (!(!e || !t) && e.masks && e.masks.length) {
            let r = 0;
            for (; r < e.masks.length;) {
                const i = e.masks[r];
                if (i) {
                    const n = i.id;
                    if (this._masks.get(n))
                        continue;
                    const l = new c3;
                    if (i.visualizations && i.visualizations.length) {
                        let c = 0;
                        for (; c < i.visualizations.length;) {
                            const u = i.visualizations[c];
                            if (u) {
                                const h = u.size,
                                    d = l.createMaskVisualization(h);
                                if (d) {
                                    const m = this.parseMaskBitmaps(u.bitmaps, d, t);
                                    l.setAssetName(h, m)
                                }
                            }
                            c++
                        }
                    }
                    this._masks.set(n, l)
                }
                r++
            }
        }
    }
    parseMaskBitmaps(e, t, r)
    {
        if (!e || !e.length)
            return null;
        let i = null;
        for (const n of e) {
            if (!n)
                continue;
            const o = n.assetName,
                l = r.getAsset(o);
            if (!l)
                continue;
            let c = yo.MIN_NORMAL_COORDINATE_VALUE,
                u = yo.MAX_NORMAL_COORDINATE_VALUE,
                h = yo.MIN_NORMAL_COORDINATE_VALUE,
                d = yo.MAX_NORMAL_COORDINATE_VALUE;
            n.normalMinX !== void 0 && (c = n.normalMinX),
            n.normalMaxX !== void 0 && (u = n.normalMaxX),
            n.normalMinY !== void 0 && (h = n.normalMinY),
            n.normalMaxY !== void 0 && (d = n.normalMaxY),
            l.flipH || (i = o),
            t.addBitmap(l, c, u, h, d)
        }
        return i
    }
    updateMask(e, t, r, i, n, o)
    {
        const l = this._masks.get(t);
        if (!l)
            return !0;
        const c = l.getGraphicAsset(r, i);
        if (!c)
            return !0;
        const u = c.texture;
        if (!u)
            return !0;
        const h = new Ge(n + c.offsetX, o + c.offsetY),
            d = new Pr;
        let m = 1,
            p = 1,
            E = 0,
            T = 0,
            I = h.x + E,
            S = h.y + T;
        return c.flipH && (m = -1, E = u.width, I = h.x + E - u.width), c.flipV && (p = -1, T = u.height, S = h.y + T - u.height), d.scale(m, p), d.translate(I, S), Gs.instance.renderer.render(new ls(u), {
            renderTexture: e,
            clear: !1,
            transform: d
        }), !0
    }
    getMask(e)
    {
        return !this._masks || !this._masks.size ? null : this._masks.get(e) || null
    }
}
class Dc {
    constructor(e=null, t=0, r=!1)
    {
        this._assetNames = [],
        this._maskAssetNames = [],
        this._maskAssetLocations = [],
        this._maskAssetFlipHs = [],
        this._maskAssetFlipVs = [],
        e != null && (this._maskAssetNames = e._maskAssetNames, this._maskAssetLocations = e._maskAssetLocations, this._maskAssetFlipHs = e._maskAssetFlipHs, this._maskAssetFlipVs = e._maskAssetFlipVs),
        this._color = t,
        this._alignBottom = r
    }
    addMask(e, t, r, i)
    {
        this._maskAssetNames.push(e),
        this._maskAssetLocations.push(t),
        this._maskAssetFlipHs.push(r),
        this._maskAssetFlipVs.push(i)
    }
    addAssetColumn(e)
    {
        this._assetNames.push(e)
    }
    set z(e)
    {
        this._z = e
    }
    get z()
    {
        return this._z
    }
    set cornerPoints(e)
    {
        this._points = e
    }
    get cornerPoints()
    {
        return this._points
    }
    get color()
    {
        return this._color
    }
    get maskAssetNames()
    {
        return this._maskAssetNames
    }
    get maskAssetLocations()
    {
        return this._maskAssetLocations
    }
    get maskAssetFlipHs()
    {
        return this._maskAssetFlipHs
    }
    get maskAssetFlipVs()
    {
        return this._maskAssetFlipVs
    }
    isBottomAligned()
    {
        return this._alignBottom
    }
    get assetNameColumns()
    {
        return this._assetNames
    }
}
class h3 {
    constructor(e, t, r, i, n)
    {
        this._x = e,
        this._y = t,
        this._speedX = r,
        this._speedY = i,
        this._asset = n,
        isNaN(this._x) && (this._x = 0),
        isNaN(this._y) && (this._y = 0),
        isNaN(this._speedX) && (this._speedX = 0),
        isNaN(this._speedY) && (this._speedY = 0)
    }
    get bitmapData()
    {
        return this._asset
    }
    dispose()
    {
        this._asset = null
    }
    getPosition(e, t, r, i, n)
    {
        let o = this._x,
            l = this._y;
        r > 0 && (o = o + this._speedX / r * n / 1e3),
        i > 0 && (l = l + this._speedY / i * n / 1e3);
        const c = Math.trunc(o % 1 * e),
            u = Math.trunc(l % 1 * t);
        return new Ge(c, u)
    }
}
const NE = class {
    constructor(s, e, t, r=0)
    {
        this._material = s,
        this._offset = r,
        this._align = t,
        this._color = e,
        this._isDisposed = !1
    }
    get offset()
    {
        return this._offset
    }
    get align()
    {
        return this._align
    }
    get disposed()
    {
        return this._isDisposed
    }
    dispose()
    {
        this._isDisposed = !0,
        this._material = null,
        this.clearCache()
    }
    clearCache() {}
    render(s, e, t, r, i, n, o, l, c)
    {
        const u = this._color >> 16,
            h = this._color >> 8 & 255,
            d = this._color & 255,
            m = u < 255 || h < 255 || d < 255;
        if (this._material) {
            const p = this._material.render(s, e, m ? null : t, r, i, n, o, l, c + this.offset, this.align === NE.ALIGN_TOP);
            if (p && m) {
                const E = new ls(p);
                m && (E.tint = this._color),
                e.writeToRenderTexture(E, t, !1)
            }
        } else {
            const p = e.createAndFillRenderTexture(r, i, s, this._color);
            e.writeToRenderTexture(new ls(p), t, !1)
        }
        return t
    }
    getMaterial()
    {
        return this._material
    }
    getColor()
    {
        return this._color
    }
}
;
let qr = NE;
qr.DEFAULT_OFFSET = 0;
qr.ALIGN_TOP = 1;
qr.ALIGN_BOTTOM = 2;
qr.ALIGN_DEFAULT = NE.ALIGN_TOP;
class d3 {
    constructor(e, t, r)
    {
        this._layers = [],
        this._geometry = r,
        this._cachedBitmapNormal = new w,
        this._isCached = !1,
        this._hasAnimationLayers = !1,
        t < 0 && (t = 0);
        let i = 0;
        for (; i < t;)
            this._layers.push(null),
            i++
    }
    get geometry()
    {
        return this._geometry
    }
    get hasAnimationLayers()
    {
        return this._hasAnimationLayers
    }
    dispose()
    {
        if (this._layers && this._layers.length) {
            for (const e of this._layers)
                e && e.dispose();
            this._layers = null
        }
        this._geometry = null,
        this._cachedBitmapNormal && (this._cachedBitmapNormal = null)
    }
    clearCache()
    {
        if (this._isCached) {
            if (this._cachedBitmapNormal && this._cachedBitmapNormal.assign(new w), this._layers && this._layers.length)
                for (const e of this._layers) {
                    if (!e)
                        continue;
                    e.clearCache()
                }
            this._isCached = !1
        }
    }
    setLayer(e, t, r, i, n=0)
    {
        if (e < 0 || e > this._layers.length)
            return !1;
        let o = this._layers[e];
        return o && o.dispose(), o = new qr(t, r, i, n), this._layers[e] = o, !0
    }
    setAnimationLayer(e, t, r)
    {
        if (e < 0 || e > this._layers.length)
            return !1;
        let i = this._layers[e];
        return i && i.dispose(), i = new Tp(t, r), this._layers[e] = i, this._hasAnimationLayers = !0, !0
    }
    getLayers()
    {
        return this._layers
    }
    render(e, t, r, i, n, o, l, c=0, u=0, h=0, d=0, m=0, p=0, E=0)
    {
        i < 1 && (i = 1),
        n < 1 && (n = 1),
        (!r || r.width !== i || r.height !== n) && (r = null),
        this._isCached = !0;
        const T = t.createAndFillRenderTexture(i, n, e);
        if (this._cachedBitmapNormal.assign(o), this._layers && this._layers.length)
            for (const I of this._layers)
                I && (I instanceof qr ? I.render(`${e}:${this._layers.indexOf(I)}`, t, T, i, n, o, l, c, u) : I instanceof Tp && I.render(t, T, i, n, o, c, u, h, d, m, p, E));
        return T
    }
}
class yE {
    constructor()
    {
        this._planeVisualizations = new Map,
        this._sizes = [],
        this._lastPlaneVisualization = null,
        this._lastSize = -1
    }
    isStatic(e)
    {
        return !0
    }
    dispose()
    {
        for (const e of this._planeVisualizations.values())
            e && e.dispose();
        this._planeVisualizations = null,
        this._lastPlaneVisualization = null,
        this._sizes = null,
        this._lastSize = -1
    }
    clearCache()
    {
        for (const e of this._planeVisualizations.values())
            e && e.clearCache()
    }
    createPlaneVisualization(e, t, r)
    {
        if (this._planeVisualizations.get(e.toString()))
            return null;
        const n = new d3(e, t, r);
        return this._planeVisualizations.set(e.toString(), n), this._sizes.push(e), this._sizes.sort(), n
    }
    getSizeIndex(e)
    {
        let t = 0,
            r = 1;
        for (; r < this._sizes.length;) {
            if (this._sizes[r] > e) {
                this._sizes[r] - e < e - this._sizes[r - 1] && (t = r);
                break
            }
            t = r,
            r++
        }
        return t
    }
    getPlaneVisualization(e)
    {
        if (e === this._lastSize)
            return this._lastPlaneVisualization;
        const t = this.getSizeIndex(e);
        return t < this._sizes.length ? this._lastPlaneVisualization = this._planeVisualizations.get(this._sizes[t].toString()) : this._lastPlaneVisualization = null, this._lastSize = e, this._lastPlaneVisualization
    }
    getLayers()
    {
        return this.getPlaneVisualization(this._lastSize).getLayers()
    }
}
class Uo extends yE {
    render(e, t, r, i, n, o, l, c, u, h)
    {
        const d = this.getPlaneVisualization(o);
        if (!d || !d.geometry)
            return null;
        const m = d.geometry.getScreenPoint(new w(0, 0, 0)),
            p = d.geometry.getScreenPoint(new w(0, n / d.geometry.scale, 0)),
            E = d.geometry.getScreenPoint(new w(i / d.geometry.scale, 0, 0));
        let T = 0,
            I = 0;
        if (m && p && E) {
            i = Math.round(Math.abs(m.x - E.x)),
            n = Math.round(Math.abs(m.x - p.x));
            const S = m.x - d.geometry.getScreenPoint(new w(1, 0, 0)).x;
            T = u * Math.trunc(Math.abs(S)),
            I = h * Math.trunc(Math.abs(S))
        }
        return d.render(e, t, r, i, n, l, c, T, I)
    }
}
Uo.DEFAULT_COLOR = 16777215;
Uo.HORIZONTAL_ANGLE_DEFAULT = 45;
Uo.VERTICAL_ANGLE_DEFAULT = 30;
class rd {
    constructor(e, t)
    {
        this._texture = e,
        this._timeStamp = t
    }
    dispose()
    {
        this._texture = null
    }
    get texture()
    {
        return this._texture
    }
    get timeStamp()
    {
        return this._timeStamp
    }
}
const lr = class {
    constructor()
    {
        this._seed = 1,
        this._modulus = 16777216,
        this._multiplier = 69069,
        this._increment = 5
    }
    static setSeed(s=1)
    {
        lr._randomizer || (lr._randomizer = new lr),
        lr._randomizer.seed = s
    }
    static setModulus(s=16777216)
    {
        lr._randomizer || (lr._randomizer = new lr),
        lr._randomizer.modulus = s
    }
    static getValues(s, e, t)
    {
        return lr._randomizer || (lr._randomizer = new lr), lr._randomizer.getRandomValues(s, e, t)
    }
    static getArray(s, e)
    {
        return lr._randomizer || (lr._randomizer = new lr), lr._randomizer.getRandomArray(s, e)
    }
    set seed(s)
    {
        this._seed = s
    }
    set modulus(s)
    {
        s < 1 && (s = 1),
        this._modulus = s
    }
    dispose() {}
    getRandomValues(s, e, t)
    {
        const r = [];
        let i = 0;
        for (; i < s;)
            r.push(this.iterateScaled(e, t - e)),
            i++;
        return r
    }
    getRandomArray(s, e)
    {
        if (s > e || e > 1e3)
            return null;
        const t = [];
        let r = 0;
        for (; r <= e;)
            t.push(r),
            r++;
        const i = [];
        let n = 0;
        for (; n < s;) {
            const o = this.iterateScaled(0, t.length - 1);
            i.push(t[o]),
            t.splice(o, 1),
            n++
        }
        return i
    }
    iterate()
    {
        let s = _v(Math.trunc(this._multiplier * this._seed) + this._increment);
        return s < 0 && (s = -s), s = s % this._modulus, this._seed = s, s
    }
    iterateScaled(s, e)
    {
        let t = this.iterate();
        return e < 1 ? s : (t = Math.trunc(s + t / this._modulus * e), t)
    }
}
;
let aa = lr;
aa.DEFAULT_SEED = 1;
aa.DEFAULT_MODULUS = 16777216;
aa._randomizer = null;
const Na = class {
    constructor(s, e, t=1)
    {
        if (this._cells = [], this._repeatMode = t, this._width = s < 1 ? 1 : s, this._cachedBitmapData = null, this._cachedBitmapNormal = null, this._cachedBitmapDataOffsetX = 0, this._cachedBitmapDataOffsetY = 0, this._isCached = !1, this._isStatic = !0, e && e.length) {
            let r = 0;
            for (; r < e.length;) {
                const i = e[r];
                i && (this._cells.push(i), i.isStatic || (this._isStatic = !1)),
                r++
            }
        }
    }
    get isStatic()
    {
        return this._isStatic
    }
    isRepeated()
    {
        return this._repeatMode !== Na.REPEAT_MODE_NONE
    }
    get width()
    {
        return this._width
    }
    dispose()
    {
        if (this._cells && this._cells.length) {
            for (const s of this._cells)
                s && s.dispose();
            this._cells = null
        }
        this._cachedBitmapData = null,
        this._cachedBitmapNormal && (this._cachedBitmapNormal = null)
    }
    clearCache()
    {
        if (this._isCached) {
            if (this._cachedBitmapData && (this._cachedBitmapData = null), this._cachedBitmapNormal && (this._cachedBitmapNormal.x = 0, this._cachedBitmapNormal.y = 0, this._cachedBitmapNormal.z = 0), this._cells && this._cells.length)
                for (const s of this._cells)
                    s && s.clearCache();
            this._isCached = !1
        }
    }
    render(s, e, t, r, i, n)
    {
        if (this._repeatMode === Na.REPEAT_MODE_NONE && (t = this.getCellsHeight(this._cells, r)), this._cachedBitmapNormal || (this._cachedBitmapNormal = new w), this.isStatic) {
            if (this._cachedBitmapData) {
                if (this._cachedBitmapData.height === t && w.isEqual(this._cachedBitmapNormal, r) && this._cachedBitmapDataOffsetX === i && this._cachedBitmapDataOffsetY === n)
                    return this._cachedBitmapData;
                this._cachedBitmapData = null
            }
        } else
            this._cachedBitmapData = null;
        if (this._isCached = !0, this._cachedBitmapData || (this._cachedBitmapData = e.createRenderTexture(this._width, t, `${s}:column`)), this._cachedBitmapNormal.assign(r), this._cachedBitmapDataOffsetX = i, this._cachedBitmapDataOffsetY = n, !this._cells.length)
            return this._cachedBitmapData;
        switch (this._repeatMode) {
        case Na.REPEAT_MODE_NONE:
            this.renderRepeatNone(r);
            break;
        case Na.REPEAT_MODE_BORDERS:
            this.renderRepeatBorders(r);
            break;
        case Na.REPEAT_MODE_CENTER:
            this.renderRepeatCenter(r);
            break;
        case Na.REPEAT_MODE_FIRST:
            this.renderRepeatFirst(r);
            break;
        case Na.REPEAT_MODE_LAST:
            this.renderRepeatLast(r);
            break;
        default:
            this.renderRepeatAll(r, i, n);
            break
        }
        return this._cachedBitmapData
    }
    getCellsHeight(s, e)
    {
        if (!s || !s.length)
            return 0;
        let t = 0,
            r = 0;
        for (; r < s.length;) {
            const i = s[r];
            i && (t += i.getHeight(e)),
            r++
        }
        return t
    }
    renderCells(s, e, t, r, i=0, n=0)
    {
        if (!s || !s.length || !this._cachedBitmapData)
            return e;
        let o = 0;
        for (; o < s.length;) {
            let l = null;
            if (t ? l = s[o] : l = s[s.length - 1 - o], l) {
                const c = l.render(r, i, n);
                if (c && (t || (e -= c.height), c.y = e, pt.writeToRenderTexture(c, this._cachedBitmapData, !1), t && (e = e + c.height), t && e >= this._cachedBitmapData.height || !t && e <= 0))
                    return e
            }
            o++
        }
        return e
    }
    renderRepeatNone(s)
    {
        !this._cells.length || !this._cachedBitmapData || this.renderCells(this._cells, 0, !0, s)
    }
    renderRepeatAll(s, e, t)
    {
        if (!this._cells.length || !this._cachedBitmapData)
            return;
        let r = 0;
        for (; r < this._cachedBitmapData.height;)
            if (r = this.renderCells(this._cells, r, !0, s, e, t), !r)
                return
    }
    renderRepeatBorders(s)
    {
        if (!this._cells.length || !this._cachedBitmapData)
            return;
        const e = [];
        let t = 0,
            r = 1;
        for (; r < this._cells.length - 1;) {
            const l = this._cells[r];
            if (l) {
                const c = l.getHeight(s);
                c > 0 && (t = t + c, e.push(l))
            }
            r++
        }
        if (this._cells.length == 1) {
            const l = this._cells[0];
            if (l) {
                const c = l.getHeight(s);
                c > 0 && (t = t + c, e.push(l))
            }
        }
        let i = this._cachedBitmapData.height - t >> 1,
            n = this.renderCells(e, i, !0, s),
            o = this._cells[0];
        if (o) {
            const l = [o];
            for (; i >= 0;)
                i = this.renderCells(l, i, !1, s)
        }
        if (o = this._cells[this._cells.length - 1], o) {
            const l = [o];
            for (; n < this._cachedBitmapData.height;)
                n = this.renderCells(l, n, !0, s)
        }
    }
    renderRepeatCenter(s)
    {
        if (!this._cells.length || !this._cachedBitmapData)
            return;
        const e = [],
            t = [];
        let r = 0,
            i = 0,
            n = 0;
        for (; n < this._cells.length >> 1;) {
            const c = this._cells[n];
            if (c) {
                const u = c.getHeight(s);
                u > 0 && (r = r + u, e.push(c))
            }
            n++
        }
        for (n = (this._cells.length >> 1) + 1; n < this._cells.length;) {
            const c = this._cells[n];
            if (c) {
                const u = c.getHeight(s);
                u > 0 && (i = i + u, t.push(c))
            }
            n++
        }
        let o = 0,
            l = this._cachedBitmapData.height;
        if (r + i > this._cachedBitmapData.height && (o = r + i - this._cachedBitmapData.height, l = l + (o - (o >> 1))), o == 0) {
            const c = this._cells[this._cells.length >> 1];
            if (c) {
                const u = c.getHeight(s);
                if (u > 0) {
                    const h = this._cachedBitmapData.height - (r + i),
                        d = Math.ceil(h / u) * u;
                    let m = r - (d - h >> 1);
                    const p = m + d,
                        E = [c];
                    for (; m < p;)
                        m = this.renderCells(E, m, !0, s)
                }
            }
        }
        this.renderCells(e, 0, !0, s),
        this.renderCells(t, l, !1, s)
    }
    renderRepeatFirst(s)
    {
        if (!this._cells.length || !this._cachedBitmapData)
            return;
        let e = this.renderCells(this._cells, this._cachedBitmapData.height, !1, s);
        const t = this._cells[0];
        if (!t)
            return;
        const r = [t];
        for (; e >= 0;)
            e = this.renderCells(r, e, !1, s)
    }
    renderRepeatLast(s)
    {
        if (!this._cells.length || !this._cachedBitmapData)
            return;
        let e = this.renderCells(this._cells, 0, !0, s);
        const t = this._cells[this._cells.length - 1];
        if (!t)
            return;
        const r = [t];
        for (; e < this._cachedBitmapData.height;)
            e = this.renderCells(r, e, !0, s)
    }
    getCells()
    {
        return this._cells
    }
}
;
let jr = Na;
jr.REPEAT_MODE_NONE = 0;
jr.REPEAT_MODE_ALL = 1;
jr.REPEAT_MODE_BORDERS = 2;
jr.REPEAT_MODE_CENTER = 3;
jr.REPEAT_MODE_FIRST = 4;
jr.REPEAT_MODE_LAST = 5;
const yr = class {
    constructor(s, e=1, t=1, r=-1, i=1, n=-1, o=1)
    {
        this._repeatMode = 1,
        this._align = 1,
        this._cachedBitmapNormal = null,
        this._cachedBitmapHeight = 0,
        this._isCached = !1,
        this._isStatic = !0,
        this._normalMinX = -1,
        this._normalMaxX = 1,
        this._normalMinY = -1,
        this._normalMaxY = 1,
        this._columns = [],
        s < 1 && (s = 1);
        let l = 0;
        for (; l < s;)
            this._columns.push(null),
            l++;
        this._repeatMode = e,
        this._align = t,
        this._normalMinX = r,
        this._normalMaxX = i,
        this._normalMinY = n,
        this._normalMaxY = o,
        this._repeatMode === yr.REPEAT_MODE_RANDOM && (this._isStatic = !1)
    }
    static nextRandomColumnIndex(s)
    {
        return aa.getValues(1, 0, s * 17631)[0] % s
    }
    get normalMinX()
    {
        return this._normalMinX
    }
    get normalMaxX()
    {
        return this._normalMaxX
    }
    get normalMinY()
    {
        return this._normalMinY
    }
    get normalMaxY()
    {
        return this._normalMaxY
    }
    isBottomAligned()
    {
        return this._align === yr.ALIGN_BOTTOM
    }
    get isStatic()
    {
        return this._isStatic
    }
    dispose()
    {
        this._cachedBitmapNormal && (this._cachedBitmapNormal = null)
    }
    clearCache()
    {
        if (this._isCached) {
            if (this._cachedBitmapNormal && (this._cachedBitmapNormal.x = 0, this._cachedBitmapNormal.y = 0, this._cachedBitmapNormal.z = 0), this._columns && this._columns.length)
                for (const s of this._columns)
                    s && s.clearCache();
            this._isCached = !1
        }
    }
    createColumn(s, e, t, r=1)
    {
        if (s < 0 || s >= this._columns.length)
            return !1;
        const i = new jr(e, t, r),
            n = this._columns[s];
        return n && n.dispose(), this._columns[s] = i, i && !i.isStatic && (this._isStatic = !1), !0
    }
    render(s, e, t, r, i, n, o, l, c, u)
    {
        if (r < 1 && (r = 1), i < 1 && (i = 1), this._cachedBitmapNormal || (this._cachedBitmapNormal = new w), this.isStatic) {
            if (this._cachedBitmapData) {
                if (this._cachedBitmapData.baseTexture && this._cachedBitmapData.width === r && this._cachedBitmapData.height === i && w.isEqual(this._cachedBitmapNormal, n))
                    return t ? (this.copyCachedBitmapOnCanvas(t, this._cachedBitmapHeight, c, u), t) : this._cachedBitmapData;
                this._cachedBitmapData = null
            }
        } else
            this._cachedBitmapData = null;
        if (this._isCached = !0, this._cachedBitmapNormal.assign(n), !o)
            return this._cachedBitmapHeight = i, this._cachedBitmapData ? e.clearAndFillRenderTexture(this._cachedBitmapData) : this._cachedBitmapData = e.createAndFillRenderTexture(r, i, `${s}:matrix`), this._cachedBitmapData;
        this._cachedBitmapData || (this._cachedBitmapHeight = i, this._cachedBitmapData = e.createRenderTexture(r, i, `${s}:matrix`), e.clearRenderTexture(this._cachedBitmapData));
        const h = [];
        let d = 0;
        for (; d < this._columns.length;) {
            const p = this._columns[d];
            if (p) {
                const E = p.render(s, e, i, n, l, c);
                E && h.push(E)
            }
            d++
        }
        if (!h.length)
            return t || this._cachedBitmapData;
        let m = 0;
        switch (this._repeatMode) {
        case yr.REPEAT_MODE_BORDERS:
            pe.log("REPEAT_MODE_BORDERS");
            break;
        case yr.REPEAT_MODE_CENTER:
            pe.log("REPEAT_MODE_CENTER");
            break;
        case yr.REPEAT_MODE_FIRST:
            pe.log("REPEAT_MODE_FIRST");
            break;
        case yr.REPEAT_MODE_LAST:
            pe.log("REPEAT_MODE_LAST");
            break;
        case yr.REPEAT_MODE_RANDOM:
            m = this.renderRepeatRandom(this._cachedBitmapData, h);
            break;
        default:
            m = this.renderRepeatAll(this._cachedBitmapData, h);
            break
        }
        return this._cachedBitmapHeight = m, t ? (this.copyCachedBitmapOnCanvas(t, m, c, u), t) : this._cachedBitmapData
    }
    copyCachedBitmapOnCanvas(s, e, t, r)
    {
        if (!s || !this._cachedBitmapData || s === this._cachedBitmapData)
            return;
        r || (t = s.height - e - t);
        let i = null;
        this._align === yr.ALIGN_TOP ? i = new Qr(0, 0, this._cachedBitmapData.width, this._cachedBitmapHeight) : i = new Qr(0, this._cachedBitmapData.height - this._cachedBitmapHeight, this._cachedBitmapData.width, this._cachedBitmapHeight);
        const n = new $i(this._cachedBitmapData.baseTexture, i),
            o = new ls(n);
        o.position.set(0, t),
        pt.writeToRenderTexture(o, s, !1)
    }
    getColumnsWidth(s)
    {
        if (!s || !s.length)
            return 0;
        let e = 0;
        for (const t of s)
            t && (e += t.width);
        return e
    }
    renderColumns(s, e, t, r)
    {
        if (!s || !e || !e.length)
            return new Ge(t, 0);
        let i = 0,
            n = 0;
        for (; n < e.length;) {
            const o = r ? e[n] : e[e.length - 1 - n];
            if (o) {
                r || (t = t - o.width);
                let l = 0;
                this._align == yr.ALIGN_BOTTOM && (l = s.height - o.height);
                const c = new ls(o);
                if (c.position.set(t, l), pt.writeToRenderTexture(c, s, !1), o.height > i && (i = o.height), r && (t = t + o.width), r && t >= s.width || !r && t <= 0)
                    return new Ge(t, i)
            }
            n++
        }
        return new Ge(t, i)
    }
    renderRepeatAll(s, e)
    {
        if (!s || !e || !e.length)
            return 0;
        this.getColumnsWidth(e);
        let t = 0,
            r = 0;
        for (; t < s.width;) {
            const i = this.renderColumns(s, e, t, !0);
            if (t = i.x, i.y > r && (r = i.y), !i.x)
                return r
        }
        return r
    }
    renderRepeatRandom(s, e)
    {
        if (!s || !e || !e.length)
            return 0;
        let t = 0,
            r = 0;
        for (; r < s.width;) {
            const i = e[yr.nextRandomColumnIndex(e.length)];
            if (i != null) {
                const n = this.renderColumns(s, [i], r, !0);
                r = n.x,
                n.y > t && (t = n.y)
            } else
                return t
        }
        return t
    }
    getColumns(s)
    {
        if (this._repeatMode === yr.REPEAT_MODE_RANDOM) {
            const e = [];
            let t = 0;
            for (; t < s;) {
                const r = this._columns[yr.nextRandomColumnIndex(this._columns.length)];
                if (r)
                    if (e.push(r), r.width > 1)
                        t += r.width;
                    else
                        break;
                else
                    break
            }
            return e
        }
        return this._columns
    }
}
;
let Qt = yr;
Qt.REPEAT_MODE_ALL = 1;
Qt.REPEAT_MODE_BORDERS = 2;
Qt.REPEAT_MODE_CENTER = 3;
Qt.REPEAT_MODE_FIRST = 4;
Qt.REPEAT_MODE_LAST = 5;
Qt.REPEAT_MODE_RANDOM = 6;
Qt.REPEAT_MODE_DEFAULT = yr.REPEAT_MODE_ALL;
Qt.MIN_NORMAL_COORDINATE_VALUE = -1;
Qt.MAX_NORMAL_COORDINATE_VALUE = 1;
Qt.ALIGN_TOP = 1;
Qt.ALIGN_BOTTOM = 2;
Qt.ALIGN_DEFAULT = yr.ALIGN_TOP;
class ME {
    constructor()
    {
        this._planeMaterialItems = [],
        this._isCached = !1
    }
    dispose()
    {
        if (this._planeMaterialItems && this._planeMaterialItems.length) {
            for (const e of this._planeMaterialItems)
                e && e.dispose();
            this._planeMaterialItems = null
        }
        this._isCached = !1
    }
    clearCache()
    {
        if (this._isCached) {
            if (this._planeMaterialItems && this._planeMaterialItems.length)
                for (const e of this._planeMaterialItems)
                    e && e.clearCache();
            this._isCached = !1
        }
    }
    addMaterialCellMatrix(e, t, r, i=-1, n=1, o=-1, l=1)
    {
        const c = new Qt(e, t, r, i, n, o, l);
        return this._planeMaterialItems.push(c), c
    }
    getMaterialCellMatrix(e)
    {
        if (!e)
            return null;
        if (this._planeMaterialItems && this._planeMaterialItems.length) {
            for (const t of this._planeMaterialItems)
                if (t && e.x >= t.normalMinX && e.x <= t.normalMaxX && e.y >= t.normalMinY && e.y <= t.normalMaxY)
                    return t
        }
        return null
    }
    render(e, t, r, i, n, o, l, c, u, h)
    {
        i < 1 && (i = 1),
        n < 1 && (n = 1);
        const d = this.getMaterialCellMatrix(o);
        return d ? (this._isCached = !0, d.render(e, t, r, i, n, o, l, c, u, h)) : null
    }
}
ME.MIN_NORMAL_COORDINATE_VALUE = -1;
ME.MAX_NORMAL_COORDINATE_VALUE = 1;
class _3 {
    constructor(e, t=null, r=null, i=0)
    {
        if (this._extraItemCount = 0, this._texture = e, this._extraItemOffsets = [], this._extraItemAssets = [], this._extraItemCount = 0, t && t.length && i > 0) {
            let n = 0;
            for (; n < t.length;) {
                const o = t[n];
                o && this._extraItemAssets.push(o),
                n++
            }
            if (this._extraItemAssets.length) {
                if (r) {
                    let o = 0;
                    for (; o < r.length;) {
                        const l = r[o];
                        l && this._extraItemOffsets.push(new Ge(l.x, l.y)),
                        o++
                    }
                }
                this._extraItemCount = i
            }
        }
    }
    get isStatic()
    {
        return this._extraItemCount === 0
    }
    dispose()
    {
        this._texture && (this._texture.dispose(), this._texture = null),
        this._extraItemAssets = null,
        this._extraItemOffsets = null,
        this._extraItemCount = 0
    }
    clearCache() {}
    getHeight(e)
    {
        if (this._texture) {
            const t = this._texture.getBitmap(e);
            if (t)
                return t.height
        }
        return 0
    }
    render(e, t, r)
    {
        if (!this._texture)
            return null;
        const i = this._texture.getBitmap(e);
        if (!i)
            return null;
        const n = new rL(i, i.width, i.height);
        if (t !== 0 || r !== 0) {
            for (; t < 0;)
                t += i.width;
            for (; r < 0;)
                r += i.height;
            n.tilePosition.set(t % i.width, r % i.height),
            n.uvRespectAnchor = !0,
            t && (n.anchor.x = 1, n.scale.x = -1),
            r && (n.anchor.y = 1, n.scale.y = -1)
        }
        if (!this.isStatic) {
            const o = Math.min(this._extraItemCount, this._extraItemOffsets.length),
                l = Math.max(this._extraItemCount, this._extraItemOffsets.length),
                c = aa.getArray(this._extraItemCount, l);
            let u = 0;
            for (; u < o;) {
                const h = this._extraItemOffsets[c[u]],
                    d = this._extraItemAssets[u % this._extraItemAssets.length];
                if (h && d) {
                    const m = d.texture;
                    if (m) {
                        let p = d.offsetX,
                            E = d.offsetY,
                            T = 1,
                            I = 1,
                            S = 0,
                            A = 0;
                        d.flipH && (T = -1, S = m.width, p = -(d.width + d.x)),
                        d.flipV && (I = -1, A = m.height, E = -(d.height + d.y));
                        const N = new Ge(h.x + p, h.y + E),
                            b = new Pr;
                        let v = N.x + S;
                        v = v >> 1 << 1,
                        b.scale(T, I),
                        b.translate(v, N.y + A);
                        const D = new ls(m);
                        D.transform.setFromMatrix(b),
                        n.addChild(D)
                    }
                }
                u++
            }
        }
        return n
    }
    getAssetName(e)
    {
        return this._texture == null ? null : this._texture.getAssetName(e)
    }
}
class bE {
    constructor(e, t=-1, r=1, i=-1, n=1, o=null)
    {
        this._bitmap = e,
        this._normalMinX = t,
        this._normalMaxX = r,
        this._normalMinY = i,
        this._normalMaxY = n,
        this._assetName = o
    }
    get bitmap()
    {
        return this._bitmap
    }
    get normalMinX()
    {
        return this._normalMinX
    }
    get normalMaxX()
    {
        return this._normalMaxX
    }
    get normalMinY()
    {
        return this._normalMinY
    }
    get normalMaxY()
    {
        return this._normalMaxY
    }
    get assetName()
    {
        return this._assetName
    }
    dispose()
    {
        this._bitmap = null
    }
}
bE.MIN_NORMAL_COORDINATE_VALUE = -1;
bE.MAX_NORMAL_COORDINATE_VALUE = 1;
class So {
    constructor()
    {
        this._bitmaps = []
    }
    dispose()
    {
        if (this._bitmaps) {
            for (const e of this._bitmaps)
                e && e.dispose();
            this._bitmaps = null
        }
    }
    addBitmap(e, t=-1, r=1, i=-1, n=1, o=null)
    {
        this._bitmaps.push(new bE(e, t, r, i, n, o))
    }
    getBitmap(e)
    {
        const t = this.getPlaneTextureBitmap(e);
        return t ? t.bitmap : null
    }
    getPlaneTextureBitmap(e)
    {
        if (!e)
            return null;
        for (const t of this._bitmaps)
            if (t && e.x >= t.normalMinX && e.x <= t.normalMaxX && e.y >= t.normalMinY && e.y <= t.normalMaxY)
                return t;
        return null
    }
    getAssetName(e)
    {
        const t = this.getPlaneTextureBitmap(e);
        return t ? t.assetName : null
    }
}
So.MIN_NORMAL_COORDINATE_VALUE = -1;
So.MAX_NORMAL_COORDINATE_VALUE = 1;
const sv = class {
    constructor()
    {
        this._assetCollection = null,
        this._textures = new Map,
        this._materials = new Map,
        this._planes = new Map,
        this._geometries = new Map,
        this._data = null
    }
    get data()
    {
        return this._data
    }
    get assetCollection()
    {
        return this._assetCollection
    }
    initializeDimensions(s, e)
    {
        return !0
    }
    dispose()
    {
        if (this._planes) {
            for (const s of this._planes.values())
                s && s.dispose();
            this._planes = null
        }
        if (this._materials && (this.resetMaterials(), this._materials = null), this._textures && (this.resetTextures(), this._textures = null), this._geometries) {
            for (const s of this._geometries.values())
                s && s.dispose();
            this._geometries = null
        }
        this._data = null,
        this._assetCollection = null
    }
    clearCache()
    {
        for (const s of this._planes.values())
            s && s.clearCache();
        for (const s of this._materials.values())
            s && s.clearCache()
    }
    initialize(s)
    {
        this._data = s
    }
    reinitialize()
    {
        this.resetTextures(),
        this.resetMaterials(),
        this.initializeAll()
    }
    resetMaterials()
    {
        for (const s of this._materials.values())
            s && s.dispose();
        this._materials.clear()
    }
    resetTextures()
    {
        for (const s of this._textures.values())
            s && s.dispose();
        this._textures.clear()
    }
    getTexture(s)
    {
        return this._textures.get(s)
    }
    getMaterial(s)
    {
        return this._materials.get(s)
    }
    getPlane(s)
    {
        return this._planes.get(s)
    }
    addPlane(s, e)
    {
        return e ? this._planes.get(s) ? !1 : (this._planes.set(s, e), !0) : !1
    }
    initializeAssetCollection(s)
    {
        this._data && (this._assetCollection = s, this.initializeAll())
    }
    initializeAll()
    {
        this._data && (this.initializeTexturesAndMaterials(), this.initializePlanes())
    }
    initializeTexturesAndMaterials()
    {
        this._data.textures && this._data.textures.length && this.parseTextures(this._data.textures, this.assetCollection),
        this._data.materials && this._data.materials.length && this.parsePlaneMaterials(this._data.materials)
    }
    initializePlanes() {}
    parseTextures(s, e)
    {
        if (!(!s || !e) && s.length)
            for (const t of s) {
                if (!t)
                    continue;
                const r = t.id;
                if (!this._textures.get(r)) {
                    const i = new So;
                    if (t.bitmaps && t.bitmaps.length)
                        for (const n of t.bitmaps) {
                            if (!n)
                                continue;
                            const o = n.assetName;
                            let l = So.MIN_NORMAL_COORDINATE_VALUE,
                                c = So.MAX_NORMAL_COORDINATE_VALUE,
                                u = So.MIN_NORMAL_COORDINATE_VALUE,
                                h = So.MAX_NORMAL_COORDINATE_VALUE;
                            n.normalMinX !== void 0 && (l = n.normalMinX),
                            n.normalMaxX !== void 0 && (c = n.normalMaxX),
                            n.normalMinY !== void 0 && (u = n.normalMinY),
                            n.normalMaxY !== void 0 && (h = n.normalMaxY);
                            const d = e.getAsset(o);
                            if (d) {
                                const m = d.texture;
                                if (m) {
                                    let p = m;
                                    d.flipH ? p = bU.getFlipHBitmapData(m) : p = p.clone(),
                                    i.addBitmap(p, l, c, u, h, o)
                                }
                            }
                        }
                    this._textures.set(r, i)
                }
            }
    }
    parsePlaneMaterials(s)
    {
        if (!(!s || !s.length))
            for (const e of s) {
                if (!e)
                    continue;
                const t = e.id,
                    r = new ME;
                if (e.matrices && e.matrices.length)
                    for (const i of e.matrices) {
                        if (!i)
                            continue;
                        let n = Qt.REPEAT_MODE_DEFAULT,
                            o = Qt.ALIGN_DEFAULT,
                            l = Qt.MIN_NORMAL_COORDINATE_VALUE,
                            c = Qt.MAX_NORMAL_COORDINATE_VALUE,
                            u = Qt.MIN_NORMAL_COORDINATE_VALUE,
                            h = Qt.MAX_NORMAL_COORDINATE_VALUE;
                        switch (i.normalMinX !== void 0 && (l = i.normalMinX), i.normalMaxX !== void 0 && (c = i.normalMaxX), i.normalMinY !== void 0 && (u = i.normalMinY), i.normalMaxY !== void 0 && (h = i.normalMaxY), i.repeatMode) {
                        case "borders":
                            n = Qt.REPEAT_MODE_BORDERS;
                            break;
                        case "center":
                            n = Qt.REPEAT_MODE_CENTER;
                            break;
                        case "first":
                            n = Qt.REPEAT_MODE_FIRST;
                            break;
                        case "last":
                            n = Qt.REPEAT_MODE_LAST;
                            break;
                        case "random":
                            n = Qt.REPEAT_MODE_RANDOM;
                            break;
                        default:
                            n = Qt.REPEAT_MODE_DEFAULT;
                            break
                        }
                        switch (i.align) {
                        case "top":
                            o = Qt.ALIGN_TOP;
                            break;
                        case "bottom":
                            o = Qt.ALIGN_BOTTOM;
                            break;
                        default:
                            o = Qt.ALIGN_DEFAULT;
                            break
                        }
                        if (i.columns && i.columns.length) {
                            const d = r.addMaterialCellMatrix(i.columns.length, n, o, l, c, u, h);
                            let m = 0;
                            for (; m < i.columns.length;) {
                                const p = i.columns[m];
                                p && this.parsePlaneMaterialCellColumn(p, d, m),
                                m++
                            }
                        }
                    }
                this._materials.set(t, r)
            }
    }
    parsePlaneMaterialCellColumn(s, e, t)
    {
        if (!s || !e)
            return;
        let r = jr.REPEAT_MODE_ALL;
        const i = s.width,
            n = this.parsePlaneMaterialCells(s);
        switch (s.repeatMode) {
        case "borders":
            r = jr.REPEAT_MODE_BORDERS;
            break;
        case "center":
            r = jr.REPEAT_MODE_CENTER;
            break;
        case "first":
            r = jr.REPEAT_MODE_FIRST;
            break;
        case "last":
            r = jr.REPEAT_MODE_LAST;
            break;
        case "none":
            r = jr.REPEAT_MODE_NONE;
            break;
        default:
            r = jr.REPEAT_MODE_ALL;
            break
        }
        e.createColumn(t, i, n, r)
    }
    parsePlaneMaterialCells(s)
    {
        if (!s || !s.cells || !s.cells.length)
            return null;
        const e = [];
        let t = 0;
        for (; t < s.cells.length;) {
            const r = s.cells[t];
            if (r) {
                const i = r.textureId;
                let n = null,
                    o = null,
                    l = null,
                    c = 0;
                if (r.extraData) {
                    const d = r.extraData.extraItemTypes,
                        m = r.extraData.offsets;
                    d && m && d.length && m.length && (n = this.parseExtraItemTypes(d), o = this.parseExtraItemOffsets(m), c = o.length, r.extraData.limitMax !== void 0 && (c = r.extraData.limitMax))
                }
                if (n && n.length) {
                    l = [];
                    for (const d of n) {
                        if (!d)
                            continue;
                        const m = this._assetCollection.getAsset(d);
                        m && l.push(m)
                    }
                }
                const u = this.getTexture(i),
                    h = new _3(u, l, o, c);
                e.push(h)
            }
            t++
        }
        return !e || !e.length ? null : e
    }
    parseExtraItemTypes(s)
    {
        const e = [];
        if (s && s.length) {
            let t = 0;
            for (; t < s.length;) {
                const r = s[t];
                r && e.push(r),
                t++
            }
        }
        return e
    }
    parseExtraItemOffsets(s)
    {
        const e = [];
        if (s && s.length) {
            let t = 0;
            for (; t < s.length;) {
                const [r, i] = s[t];
                e.push(new Ge(r, i)),
                t++
            }
        }
        return e
    }
    getGeometry(s, e, t)
    {
        e = Math.abs(e),
        e > 90 && (e = 90),
        t = Math.abs(t),
        t > 90 && (t = 90);
        const r = `${s}_${Math.round(e)}_${Math.round(t)}`;
        let i = this._geometries.get(r);
        return i || (i = new qa(s, new w(e, t), new w(-10, 0, 0)), this._geometries.set(r, i), i)
    }
    parseVisualizations(s, e)
    {
        if (!(!s || !e) && e && e.length)
            for (const t of e) {
                if (!t)
                    continue;
                const r = t.size;
                let i = Uo.HORIZONTAL_ANGLE_DEFAULT,
                    n = Uo.VERTICAL_ANGLE_DEFAULT;
                t.horizontalAngle !== void 0 && (i = t.horizontalAngle),
                t.verticalAngle !== void 0 && (n = t.verticalAngle);
                const o = t.allLayers,
                    l = s.createPlaneVisualization(r, o && o.length || 0, this.getGeometry(r, i, n));
                if (l && o && o.length) {
                    let c = 0;
                    for (; c < o.length;) {
                        const u = o[c];
                        if (u) {
                            let h = null,
                                d = qr.ALIGN_DEFAULT,
                                m = Uo.DEFAULT_COLOR,
                                p = qr.DEFAULT_OFFSET;
                            u.materialId && (h = this.getMaterial(u.materialId)),
                            u.color && (m = u.color),
                            u.offset && (p = u.offset),
                            u.align && (u.align === "bottom" ? d = qr.ALIGN_BOTTOM : u.align == "top" && (d = qr.ALIGN_TOP)),
                            l.setLayer(c, h, m, d, p)
                        }
                        c++
                    }
                }
            }
    }
    render(s, e, t, r, i, n, o, l, c, u=0, h=0, d=0, m=0, p=0)
    {
        return null
    }
    getTextureIdentifier(s, e)
    {
        return s.toString()
    }
    getLayers(s)
    {
        let e = this.getPlane(s);
        return e || (e = this.getPlane(sv.DEFAULT)), e.getLayers()
    }
}
;
let Hl = sv;
Hl.DEFAULT = "default";
class g3 extends Hl {
    initializePlanes()
    {
        if (!this.data)
            return;
        const e = this.data.planes;
        e && e.length && this.parseFloors(e)
    }
    parseFloors(e)
    {
        if (e)
            for (const t in e) {
                const r = e[t];
                if (!r)
                    continue;
                const i = r.id,
                    n = r.visualizations,
                    o = new Uo;
                this.parseVisualizations(o, n),
                this.addPlane(i, o) || o.dispose()
            }
    }
    render(e, t, r, i, n, o, l, c, u, h=0, d=0, m=0, p=0, E=0)
    {
        let T = this.getPlane(i);
        if (T || (T = this.getPlane(Hl.DEFAULT)), !T)
            return null;
        r && t.clearAndFillRenderTexture(r);
        let I = T.render(e, t, r, n, o, l, c, u, h, d);
        return I && I !== r && (I = new $i(I.baseTexture), !I) ? null : new rd(I, -1)
    }
}
class Jd extends yE {
    render(e, t, r, i, n, o, l, c)
    {
        const u = this.getPlaneVisualization(o);
        if (!u || !u.geometry)
            return null;
        const h = u.geometry.getScreenPoint(new w(0, 0, 0)),
            d = u.geometry.getScreenPoint(new w(0, 0, n / u.geometry.scale)),
            m = u.geometry.getScreenPoint(new w(0, i / u.geometry.scale, 0));
        return h && d && m && (i = Math.round(Math.abs(h.x - m.x)), n = Math.round(Math.abs(h.y - d.y))), u.render(e, t, r, i, n, l, c)
    }
}
Jd.DEFAULT_COLOR = 16777215;
Jd.HORIZONTAL_ANGLE_DEFAULT = 45;
Jd.VERTICAL_ANGLE_DEFAULT = 30;
class f3 extends Hl {
    initializePlanes()
    {
        if (!this.data)
            return;
        const e = this.data.planes;
        e && e.length && this.parseWalls(e)
    }
    parseWalls(e)
    {
        if (e)
            for (const t in e) {
                const r = e[t];
                if (!r)
                    continue;
                const i = r.id,
                    n = r.visualizations,
                    o = new Jd;
                this.parseVisualizations(o, n),
                this.addPlane(i, o) || o.dispose()
            }
    }
    render(e, t, r, i, n, o, l, c, u, h=0, d=0, m=0, p=0, E=0)
    {
        let T = this.getPlane(i);
        if (T || (T = this.getPlane(Hl.DEFAULT)), !T)
            return null;
        r && t.clearAndFillRenderTexture(r);
        let I = T.render(e, t, r, n, o, l, c, u);
        return I && I !== r && (I = new $i(I.baseTexture), !I) ? null : new rd(I, -1)
    }
    getTextureIdentifier(e, t)
    {
        return t ? `${e}_${t.x}_${t.y}_${t.z}` : super.getTextureIdentifier(e, t)
    }
}
class Mo extends yE {
    constructor()
    {
        super(...arguments),
        this._width = 0,
        this._height = 0
    }
    isStatic(e)
    {
        const t = this.getPlaneVisualization(e);
        return t ? !t.hasAnimationLayers : super.isStatic(e)
    }
    initializeDimensions(e, t)
    {
        e < 0 && (e = 0),
        t < 0 && (t = 0),
        (e !== this._width || t !== this._height) && (this._width = e, this._height = t)
    }
    render(e, t, r, i, n, o, l, c, u, h, d, m, p)
    {
        const E = this.getPlaneVisualization(o);
        if (!E || !E.geometry)
            return null;
        const T = E.geometry.getScreenPoint(new w(0, 0, 0)),
            I = E.geometry.getScreenPoint(new w(0, 0, 1)),
            S = E.geometry.getScreenPoint(new w(0, 1, 0));
        if (T && I && S) {
            i = Math.round(Math.abs((T.x - S.x) * i / E.geometry.scale)),
            n = Math.round(Math.abs((T.y - I.y) * n / E.geometry.scale));
            const A = Math.trunc(u * Math.abs(T.x - S.x)),
                N = Math.trunc(h * Math.abs(T.y - I.y)),
                b = Math.trunc(d * Math.abs(T.x - S.x)),
                v = Math.trunc(m * Math.abs(T.y - I.y));
            return E.render(e, t, r, i, n, l, c, A, N, b, v, d, m, p)
        }
        return null
    }
}
Mo.DEFAULT_COLOR = 16777215;
Mo.HORIZONTAL_ANGLE_DEFAULT = 45;
Mo.VERTICAL_ANGLE_DEFAULT = 30;
const gl = class  extends Hl{
    constructor()
    {
        super(...arguments),
        this._landscapeWidth = 0,
        this._landscapeHeight = 0,
        this._cachedBitmap = null
    }
    initializeDimensions(s, e)
    {
        return s < 0 && (s = 0), e < 0 && (e = 0), this._landscapeWidth = s, this._landscapeHeight = e, !0
    }
    initializePlanes()
    {
        if (!this.data)
            return;
        const s = this.data.planes;
        s && s.length && this.parseLandscapes(s)
    }
    parseLandscapes(s)
    {
        if (!s)
            return;
        const e = Math.trunc(Math.random() * 654321);
        for (const t in s) {
            const r = s[t];
            if (!r)
                continue;
            const i = r.id,
                n = r.animatedVisualization,
                o = new Mo;
            for (const l of n) {
                if (!l)
                    continue;
                const c = l.size;
                let u = Mo.HORIZONTAL_ANGLE_DEFAULT,
                    h = Mo.VERTICAL_ANGLE_DEFAULT;
                l.horizontalAngle !== void 0 && (u = l.horizontalAngle),
                l.verticalAngle !== void 0 && (h = l.verticalAngle);
                const d = l.allLayers.length ?? 0,
                    m = o.createPlaneVisualization(c, d || 0, this.getGeometry(c, u, h));
                if (m) {
                    aa.setSeed(e);
                    let p = 0;
                    for (; p < d;) {
                        const E = l.allLayers[p];
                        if (E) {
                            if (E.items === void 0) {
                                const T = E;
                                let I = null,
                                    S = qr.ALIGN_DEFAULT,
                                    A = Mo.DEFAULT_COLOR,
                                    N = qr.DEFAULT_OFFSET;
                                T.materialId && (I = this.getMaterial(T.materialId)),
                                T.color && (A = T.color),
                                T.offset && (N = T.offset),
                                T.align && (T.align === "bottom" ? S = qr.ALIGN_BOTTOM : T.align === "top" && (S = qr.ALIGN_TOP)),
                                m.setLayer(p, I, A, S, N)
                            } else {
                                const I = E.items,
                                    S = [];
                                if (I && I.length) {
                                    for (const A of I)
                                        if (A) {
                                            A.id;
                                            const N = A.assetId,
                                                b = this.getCoordinateValue(A.x || "", A.randomX || ""),
                                                v = this.getCoordinateValue(A.y || "", A.randomY || ""),
                                                D = A.speedX,
                                                G = A.speedY;
                                            S.push({
                                                asset: N,
                                                x: b,
                                                y: v,
                                                speedX: D,
                                                speedY: G
                                            })
                                        }
                                }
                                m.setAnimationLayer(p, S, this.assetCollection)
                            }
                            p++
                        }
                    }
                }
            }
            this.addPlane(i, o) || o.dispose()
        }
    }
    getCoordinateValue(s, e)
    {
        let t = 0;
        if (s.length > 0 && s.charAt(s.length - 1) === "%" && (s = s.substr(0, s.length - 1), t = parseFloat(s) / 100), e.length > 0) {
            const n = aa.getValues(1, 0, 1e4)[0] / 1e4;
            e.charAt(e.length - 1) === "%" && (e = e.substr(0, e.length - 1), t = t + n * parseFloat(e) / 100)
        }
        return t
    }
    render(s, e, t, r, i, n, o, l, c, u=0, h=0, d=0, m=0, p=0)
    {
        let E = this.getPlane(r);
        if (E || (E = this.getPlane(gl.DEFAULT)), !E)
            return null;
        t && e.clearRenderTexture(t);
        let T = E.render(s, e, t, i, n, o, l, c, u, h, d, m, p);
        if (T && T !== t && (T = new $i(T.baseTexture), !T))
            return null;
        let I = null;
        return !E.isStatic(o) && gl.UPDATE_INTERVAL > 0 ? I = new rd(T, Math.round(p / gl.UPDATE_INTERVAL) * gl.UPDATE_INTERVAL + gl.UPDATE_INTERVAL) : I = new rd(T, -1), I
    }
    getTextureIdentifier(s, e)
    {
        return e ? e.x < 0 ? s + "_0" : s + "_1" : super.getTextureIdentifier(s, e)
    }
}
;
let Ru = gl;
Ru.LANDSCAPES_ENABLED = !0;
Ru.LANDSCAPE_DEFAULT_COLOR = 8828617;
Ru.UPDATE_INTERVAL = 500;
class Tp {
    constructor(e, t)
    {
        if (this._color = 0, this._isDisposed = !1, this._color = 0, this._isDisposed = !1, this._items = [], e && t)
            for (const r of e) {
                if (!r)
                    continue;
                const i = r.asset;
                if (i) {
                    const n = t.getAsset(i);
                    n && this._items.push(new h3(r.x, r.y, r.speedX, r.speedY, n))
                }
            }
    }
    get disposed()
    {
        return this._isDisposed
    }
    dispose()
    {
        if (this._isDisposed = !0, this._items) {
            for (const e of this._items)
                e && e.dispose();
            this._items = []
        }
    }
    clearCache() {}
    render(e, t, r, i, n, o, l, c, u, h, d, m)
    {
        if (c > 0 && u > 0) {
            let p = 0;
            for (; p < this._items.length;) {
                const E = this._items[p];
                if (E) {
                    const T = E.getPosition(c, u, h, d, m);
                    if (T.x = Math.trunc(T.x - o), T.y = Math.trunc(T.y - l), E.bitmapData) {
                        if (T.x > -E.bitmapData.width && T.x < t.width && T.y > -E.bitmapData.height && T.y < t.height) {
                            const I = new ls(E.bitmapData.texture);
                            I.position.set(T.x, T.y),
                            e.writeToRenderTexture(I, t, !1)
                        }
                        if (T.x - c > -E.bitmapData.width && T.x - c < t.width && T.y > -E.bitmapData.height && T.y < t.height) {
                            const I = new ls(E.bitmapData.texture);
                            I.position.set(T.x - c, T.y),
                            e.writeToRenderTexture(I, t, !1)
                        }
                        if (T.x > -E.bitmapData.width && T.x < t.width && T.y - u > -E.bitmapData.height && T.y - u < t.height) {
                            const I = new ls(E.bitmapData.texture);
                            I.position.set(T.x, T.y - u),
                            e.writeToRenderTexture(I, t, !1)
                        }
                        if (T.x - c > -E.bitmapData.width && T.x - c < t.width && T.y - u > -E.bitmapData.height && T.y - u < t.height) {
                            const I = new ls(E.bitmapData.texture);
                            I.position.set(T.x - c, T.y - u),
                            e.writeToRenderTexture(I, t, !1)
                        }
                    }
                }
                p++
            }
        }
        return t
    }
}
class Rp {
    constructor(e, t, r)
    {
        this._type = e,
        this._leftSideLoc = t,
        this._rightSideLoc = r
    }
    get type()
    {
        return this._type
    }
    get leftSideLoc()
    {
        return this._leftSideLoc
    }
    get rightSideLoc()
    {
        return this._rightSideLoc
    }
}
class Op {
    constructor(e, t, r, i)
    {
        this._leftSideLoc = e,
        this._rightSideLoc = t,
        this._leftSideLength = r,
        this._rightSideLength = i
    }
    get leftSideLoc()
    {
        return this._leftSideLoc
    }
    get rightSideLoc()
    {
        return this._rightSideLoc
    }
    get leftSideLength()
    {
        return this._leftSideLength
    }
    get rightSideLength()
    {
        return this._rightSideLength
    }
}
const ya = class {
    constructor(s, e, t, r, i, n, o, l, c, u=0, h=0, d=0, m=0)
    {
        if (this._maskManager = null, this._width = 0, this._height = 0, this._textureCache = s, this._secondaryNormals = [], this._bitmapMasks = [], this._rectangleMasks = [], this._bitmapMasksOld = [], this._rectangleMasksOld = [], this._randomSeed = c, this._bitmapData = null, this._maskBitmapData = null, this._maskChanged = !1, this._activeTexture = null, this._origin = new w, this._origin.assign(e), this._location = new w, this._location.assign(t), this._leftSide = new w, this._leftSide.assign(r), this._rightSide = new w, this._rightSide.assign(i), this._normal = w.crossProduct(this._leftSide, this._rightSide), this._normal.length > 0 && this._normal.multiply(1 / this._normal.length), l != null)
            for (const p of l) {
                if (!p)
                    continue;
                const E = new w;
                E.assign(p),
                this._secondaryNormals.push(E)
            }
        this._disposed = !1,
        this._isVisible = !1,
        this._id = null,
        this._hasTexture = !0,
        this._geometryUpdateId = -1,
        this._offset = new Ge,
        this._relativeDepth = 0,
        this._type = n,
        this._color = 0,
        this._rasterizer = null,
        this._canBeVisible = !0,
        this._cornerA = new w,
        this._cornerB = new w,
        this._cornerC = new w,
        this._cornerD = new w,
        this._width = 0,
        this._height = 0,
        this._textureOffsetX = u,
        this._textureOffsetY = h,
        this._textureMaxX = d,
        this._textureMaxY = m,
        this._useMask = o,
        this._uniqueId = ++ya._uniqueIdCounter
    }
    static blend(s, e)
    {
        return nr.colorize(e, s | 4278190080) & 16777215
    }
    set canBeVisible(s)
    {
        s !== this._canBeVisible && (this._canBeVisible || this.resetTextureCache(), this._canBeVisible = s)
    }
    get canBeVisible()
    {
        return this._canBeVisible
    }
    get bitmapData()
    {
        return !this.visible || !this._bitmapData ? null : this._bitmapData
    }
    get maskBitmapData()
    {
        return !this.visible || !this._maskBitmapData ? null : this._maskBitmapData
    }
    get visible()
    {
        return this._isVisible && this._canBeVisible
    }
    get offset()
    {
        return this._offset
    }
    get relativeDepth()
    {
        return this._relativeDepth
    }
    get color()
    {
        return this._color
    }
    set color(s)
    {
        this._color = s
    }
    get type()
    {
        return this._type
    }
    get leftSide()
    {
        return this._leftSide
    }
    get rightSide()
    {
        return this._rightSide
    }
    get location()
    {
        return this._location
    }
    get normal()
    {
        return this._normal
    }
    get hasTexture()
    {
        return this._hasTexture
    }
    set hasTexture(s)
    {
        this._hasTexture = s
    }
    set rasterizer(s)
    {
        this._rasterizer = s
    }
    set maskManager(s)
    {
        this._maskManager = s
    }
    set id(s)
    {
        s !== this._id && (this.resetTextureCache(), this._id = s)
    }
    get uniqueId()
    {
        return this._uniqueId
    }
    dispose()
    {
        this._activeTexture = null,
        this._location = null,
        this._origin = null,
        this._leftSide = null,
        this._rightSide = null,
        this._normal = null,
        this._rasterizer = null,
        this._cornerA = null,
        this._cornerB = null,
        this._cornerC = null,
        this._cornerD = null,
        this._bitmapMasks = null,
        this._rectangleMasks = null,
        this._maskPixels = null,
        this._maskBitmapData && (this._maskBitmapData.destroy(!0), this._maskBitmapData = null),
        this._disposed = !0
    }
    copyBitmapData(s)
    {
        return !this.visible || !this._bitmapData || !s || this._bitmapData.width !== s.width || this._bitmapData.height !== s.height ? null : s
    }
    resetTextureCache(s=null)
    {
        this._activeTexture = null
    }
    getTextureIdentifier(s)
    {
        return this._rasterizer ? this._rasterizer.getTextureIdentifier(s, this.normal) : s.toString()
    }
    needsNewTexture(s, e)
    {
        if (!s)
            return !1;
        const t = this._activeTexture;
        return this.updateMaskChangeStatus(), !!(this._canBeVisible && (!t || t.timeStamp >= 0 && e > t.timeStamp || this._maskChanged))
    }
    getTexture(s, e)
    {
        if (!s)
            return null;
        let t = null;
        if (this.needsNewTexture(s, e)) {
            this.getTextureIdentifier(s.scale);
            const r = this._leftSide.length * s.scale,
                i = this._rightSide.length * s.scale,
                n = s.getCoordinatePosition(this._normal);
            t = this._rasterizer.render(this._uniqueId.toString(), this._textureCache, null, this._id, r, i, s.scale, n, this._hasTexture, this._textureOffsetX, this._textureOffsetY, this._textureMaxX, this._textureMaxY, e),
            t && this.updateMask(t.texture, s)
        } else
            this._activeTexture && (t = this._activeTexture);
        return t ? (this._activeTexture = t, t.texture) : null
    }
    resolveMasks(s)
    {
        if (!this._useMask)
            return null;
        const e = new Dc,
            t = 0;
        for (; t < this._bitmapMasks.length;) {
            const r = this._bitmapMasks[t];
            if (r) {
                const i = this._maskManager.getMask(r.type);
                if (i) {
                    const n = i.getAssetName(s.scale);
                    if (n) {
                        const o = s.getCoordinatePosition(this._normal),
                            l = i.getGraphicAsset(s.scale, o);
                        if (l) {
                            const c = this._maskBitmapData.width * (1 - r.leftSideLoc / this._leftSide.length),
                                u = this._maskBitmapData.height * (1 - r.rightSideLoc / this._rightSide.length);
                            e.addMask(n, new Ge(c + l.offsetX, u + l.offsetY), l.flipH, l.flipV)
                        }
                    }
                }
            }
        }
        return e
    }
    screenWidth(s)
    {
        const e = s.getScreenPoint(new w(0, 0, 0)),
            t = s.getScreenPoint(new w(0, 1, 0));
        return Math.round(this._leftSide.length * Math.abs(e.x - t.x))
    }
    getDrawingDatas(s)
    {
        const e = [];
        if (this._isVisible) {
            const t = this.resolveMasks(s),
                r = this._rasterizer.getLayers(this._id);
            for (const i of r)
                if (this._hasTexture && i.getMaterial()) {
                    const n = s.getCoordinatePosition(this._normal),
                        o = i.getMaterial().getMaterialCellMatrix(n),
                        l = new Dc(t, ya.blend(this._color, i.getColor()), o.isBottomAligned());
                    aa.setSeed(this._randomSeed);
                    for (const c of o.getColumns(this.screenWidth(s))) {
                        const u = [];
                        for (const h of c.getCells()) {
                            const d = h.getAssetName(n);
                            d && u.push(d)
                        }
                        u.length > 0 && (c.isRepeated() || u.push(""), l.addAssetColumn(u))
                    }
                    l.assetNameColumns.length > 0 && e.push(l)
                } else {
                    const n = new Dc(t, ya.blend(this._color, i.getColor()));
                    e.push(n)
                }
            e.length || e.push(new Dc(t, this._color))
        }
        return e
    }
    update(s, e)
    {
        if (!s || this._disposed)
            return !1;
        let t = !1;
        if (this._geometryUpdateId != s.updateId && (t = !0), (!t || !this._canBeVisible) && !this.visible)
            return !1;
        if (t) {
            this._activeTexture = null;
            let r = 0;
            if (r = w.cosAngle(s.directionAxis, this.normal), r > -.001)
                return this._isVisible ? (this._isVisible = !1, !0) : !1;
            let i = 0;
            for (; i < this._secondaryNormals.length;) {
                if (r = w.cosAngle(s.directionAxis, this._secondaryNormals[i]), r > -.001)
                    return this._isVisible ? (this._isVisible = !1, !0) : !1;
                i++
            }
            this.updateCorners(s);
            const o = s.getScreenPosition(this._origin).z;
            let l = Math.max(this._cornerA.z, this._cornerB.z, this._cornerC.z, this._cornerD.z) - o;
            this._type === ya.TYPE_FLOOR && (l = l - (this._location.z + Math.min(0, this._leftSide.z, this._rightSide.z)) * 8),
            this._type === ya.TYPE_LANDSCAPE && (l = l + .02),
            this._relativeDepth = l,
            this._isVisible = !0,
            this._geometryUpdateId = s.updateId
        }
        if (t || this.needsNewTexture(s, e)) {
            if (!this._bitmapData || this._width !== this._bitmapData.width || this._height !== this._bitmapData.height) {
                if (this._bitmapData)
                    if (this._width !== this._bitmapData.width || this._height !== this._bitmapData.height) {
                        if (this._bitmapData.destroy(), this._bitmapData = null, this._width < 1 || this._height < 1)
                            return !0;
                        this._bitmapData = this._textureCache.createAndFillRenderTexture(this._width, this._height)
                    } else {
                        if (this._width < 1 || this._height < 1)
                            return this._bitmapData.destroy(), this._bitmapData = null, !0;
                        this._textureCache.clearAndFillRenderTexture(this._bitmapData)
                    }
                else {
                    if (this._width < 1 || this._height < 1)
                        return !1;
                    this._bitmapData = this._textureCache.createAndFillRenderTexture(this._width, this._height)
                }
                if (!this._bitmapData)
                    return !1
            } else
                this._textureCache.clearAndFillRenderTexture(this._bitmapData);
            aa.setSeed(this._randomSeed);
            const r = this.getTexture(s, e);
            if (r)
                this.renderTexture(s, r);
            else
                return this.dispose(), !1;
            return r !== null || t
        }
        return !1
    }
    updateCorners(s)
    {
        this._cornerA.assign(s.getScreenPosition(this._location)),
        this._cornerB.assign(s.getScreenPosition(w.sum(this._location, this._rightSide))),
        this._cornerC.assign(s.getScreenPosition(w.sum(w.sum(this._location, this._leftSide), this._rightSide))),
        this._cornerD.assign(s.getScreenPosition(w.sum(this._location, this._leftSide))),
        this._offset = s.getScreenPoint(this._origin),
        this._cornerA.x = Math.round(this._cornerA.x),
        this._cornerA.y = Math.round(this._cornerA.y),
        this._cornerB.x = Math.round(this._cornerB.x),
        this._cornerB.y = Math.round(this._cornerB.y),
        this._cornerC.x = Math.round(this._cornerC.x),
        this._cornerC.y = Math.round(this._cornerC.y),
        this._cornerD.x = Math.round(this._cornerD.x),
        this._cornerD.y = Math.round(this._cornerD.y),
        this._offset.x = Math.round(this._offset.x),
        this._offset.y = Math.round(this._offset.y);
        const e = Math.min(this._cornerA.x, this._cornerB.x, this._cornerC.x, this._cornerD.x),
            t = Math.max(this._cornerA.x, this._cornerB.x, this._cornerC.x, this._cornerD.x) - e,
            r = Math.min(this._cornerA.y, this._cornerB.y, this._cornerC.y, this._cornerD.y),
            i = Math.max(this._cornerA.y, this._cornerB.y, this._cornerC.y, this._cornerD.y) - r;
        this._offset.x = this._offset.x - e,
        this._cornerA.x = this._cornerA.x - e,
        this._cornerB.x = this._cornerB.x - e,
        this._cornerC.x = this._cornerC.x - e,
        this._cornerD.x = this._cornerD.x - e,
        this._offset.y = this._offset.y - r,
        this._cornerA.y = this._cornerA.y - r,
        this._cornerB.y = this._cornerB.y - r,
        this._cornerC.y = this._cornerC.y - r,
        this._cornerD.y = this._cornerD.y - r,
        this._width = t,
        this._height = i
    }
    getMatrixForDimensions(s, e)
    {
        let t = this._cornerD.x - this._cornerC.x,
            r = this._cornerD.y - this._cornerC.y,
            i = this._cornerB.x - this._cornerC.x,
            n = this._cornerB.y - this._cornerC.y;
        (this._type === ya.TYPE_WALL || this._type === ya.TYPE_LANDSCAPE) && (Math.abs(i - s) <= 1 && (i = s), Math.abs(n - s) <= 1 && (n = s), Math.abs(t - e) <= 1 && (t = e), Math.abs(r - e) <= 1 && (r = e));
        const o = i / s,
            l = n / s,
            c = t / e,
            u = r / e,
            h = new Pr(o, l, c, u);
        return h.translate(this._cornerC.x, this._cornerC.y), h
    }
    renderTexture(s, e)
    {
        this._cornerA == null || this._cornerB == null || this._cornerC == null || this._cornerD == null || e == null || this._bitmapData == null || this.draw(e, this.getMatrixForDimensions(e.width, e.height))
    }
    draw(s, e)
    {
        this._textureCache.writeToRenderTexture(new ls(s), this._bitmapData, !0, e)
    }
    resetBitmapMasks()
    {
        this._disposed || !this._useMask || !this._bitmapMasks.length || (this._maskChanged = !0, this._bitmapMasks = [])
    }
    addBitmapMask(s, e, t)
    {
        if (!this._useMask)
            return !1;
        for (const i of this._bitmapMasks)
            if (i && i.type === s && i.leftSideLoc === e && i.rightSideLoc === t)
                return !1;
        const r = new Rp(s, e, t);
        return this._bitmapMasks.push(r), this._maskChanged = !0, !0
    }
    resetRectangleMasks()
    {
        !this._useMask || !this._rectangleMasks.length || (this._maskChanged = !0, this._rectangleMasks = [])
    }
    addRectangleMask(s, e, t, r)
    {
        if (this._useMask) {
            for (const n of this._rectangleMasks)
                if (n && n.leftSideLoc === s && n.rightSideLoc === e && n.leftSideLength === t && n.rightSideLength === r)
                    return !1;
            const i = new Op(s, e, t, r);
            return this._rectangleMasks.push(i), this._maskChanged = !0, !0
        }
        return !1
    }
    updateMaskChangeStatus()
    {
        if (!this._maskChanged)
            return;
        let s = !0;
        if (this._bitmapMasks.length === this._bitmapMasksOld.length)
            for (const e of this._bitmapMasks) {
                if (!e)
                    continue;
                let t = !1;
                for (const r of this._bitmapMasksOld)
                    if (r && r.type === e.type && r.leftSideLoc === e.leftSideLoc && r.rightSideLoc === e.rightSideLoc) {
                        t = !0;
                        break
                    }
                if (!t) {
                    s = !1;
                    break
                }
            }
        else
            s = !1;
        this._rectangleMasks.length > this._rectangleMasksOld.length && (s = !1),
        s && (this._maskChanged = !1)
    }
    updateMask(s, e)
    {
        if (!s || !e || !this._useMask || !this._bitmapMasks.length && !this._rectangleMasks.length && !this._maskChanged || !this._maskManager)
            return;
        const t = s.width,
            r = s.height;
        if (this.updateMaskChangeStatus(), (!this._maskBitmapData || this._maskBitmapData.width !== t || this._maskBitmapData.height !== r) && (this._maskBitmapData = this._textureCache.createAndFillRenderTexture(t, r, "mask"), this._maskChanged = !0), this._maskChanged) {
            this._bitmapMasksOld = [],
            this._rectangleMasksOld = [],
            this._maskBitmapData && this._textureCache.clearAndFillRenderTexture(this._maskBitmapData),
            this.resetTextureCache(s);
            const i = e.getCoordinatePosition(this._normal);
            let n = null,
                o = 0,
                l = 0,
                c = 0;
            for (; c < this._bitmapMasks.length;) {
                const u = this._bitmapMasks[c];
                u && (n = u.type, o = this._maskBitmapData.width - this._maskBitmapData.width * u.leftSideLoc / this._leftSide.length, l = this._maskBitmapData.height - this._maskBitmapData.height * u.rightSideLoc / this._rightSide.length, this._maskManager.updateMask(this._maskBitmapData, n, e.scale, i, o, l), this._bitmapMasksOld.push(new Rp(n, u.leftSideLoc, u.rightSideLoc))),
                c++
            }
            for (c = 0; c < this._rectangleMasks.length;) {
                const u = this._rectangleMasks[c];
                if (u) {
                    o = this._maskBitmapData.width - this._maskBitmapData.width * u.leftSideLoc / this._leftSide.length,
                    l = this._maskBitmapData.height - this._maskBitmapData.height * u.rightSideLoc / this._rightSide.length;
                    const h = this._maskBitmapData.width * u.leftSideLength / this._leftSide.length,
                        d = this._maskBitmapData.height * u.rightSideLength / this._rightSide.length,
                        m = new ls(cs.WHITE);
                    m.tint = 0,
                    m.width = h,
                    m.height = d,
                    m.position.set(o - h, l - d),
                    this._textureCache.writeToRenderTexture(m, this._maskBitmapData, !1),
                    this._rectangleMasksOld.push(new Op(u.leftSideLength, u.rightSideLoc, u.leftSideLength, u.rightSideLength))
                }
                c++
            }
            this._maskPixels = this._textureCache.getPixels(this._maskBitmapData),
            this._maskChanged = !1
        }
        this.combineTextureMask(s, this._maskPixels)
    }
    combineTextureMask(s, e)
    {
        var n,
            o;
        if (!s || !e)
            return;
        const t = this._textureCache.getPixels(s);
        for (let l = 0; l < t.length; l += 4) {
            const c = e[l],
                u = e[l + 1],
                h = e[l + 2];
            e[l + 3],
            !c && !u && !h && (t[l + 3] = 0)
        }
        const r = (n = s.baseTexture._glTextures[1]) == null ? void 0 : n.texture,
            i = (o = Gs.instance.renderer) == null ? void 0 : o.gl;
        !r || !i || (i.bindTexture(i.TEXTURE_2D, r), i.texImage2D(i.TEXTURE_2D, 0, i.RGBA, s.width, s.height, 0, i.RGBA, i.UNSIGNED_BYTE, t), i.bindTexture(i.TEXTURE_2D, null))
    }
}
;
let ft = ya;
ft.ZERO_POINT = new Ge(0, 0);
ft.TYPE_UNDEFINED = 0;
ft.TYPE_WALL = 1;
ft.TYPE_FLOOR = 2;
ft.TYPE_LANDSCAPE = 3;
ft._uniqueIdCounter = 1;
class rv extends ei {
    constructor()
    {
        super(),
        this._wallRasterizer = new f3,
        this._floorRasterizer = new g3,
        this._landscapeRasterizer = new Ru,
        this._maskManager = new u3,
        this._initialized = !1
    }
    initialize(e)
    {
        if (!e.roomVisualization)
            return !1;
        const t = e.roomVisualization.wallData;
        t && this._wallRasterizer.initialize(t);
        const r = e.roomVisualization.floorData;
        r && this._floorRasterizer.initialize(r);
        const i = e.roomVisualization.landscapeData;
        i && this._landscapeRasterizer.initialize(i);
        const n = e.roomVisualization.maskData;
        return n && this._maskManager.initialize(n), !0
    }
    onDispose()
    {
        this._wallRasterizer && (this._wallRasterizer.dispose(), this._wallRasterizer = null),
        this._floorRasterizer && (this._floorRasterizer.dispose(), this._floorRasterizer = null),
        this._landscapeRasterizer && (this._landscapeRasterizer.dispose(), this._landscapeRasterizer = null),
        this._maskManager && (this._maskManager.dispose(), this._maskManager = null),
        super.onDispose()
    }
    setGraphicAssetCollection(e)
    {
        this._initialized || (this._wallRasterizer.initializeAssetCollection(e), this._floorRasterizer.initializeAssetCollection(e), this._landscapeRasterizer.initializeAssetCollection(e), this._maskManager.initializeAssetCollection(e), this._initialized = !0)
    }
    clearCache()
    {
        this._wallRasterizer && this._wallRasterizer.clearCache(),
        this._floorRasterizer && this._floorRasterizer.clearCache(),
        this._landscapeRasterizer && this._landscapeRasterizer.clearCache()
    }
    get wallRasterizer()
    {
        return this._wallRasterizer
    }
    get floorRasterizer()
    {
        return this._floorRasterizer
    }
    get landscapeRasterizer()
    {
        return this._landscapeRasterizer
    }
    get maskManager()
    {
        return this._maskManager
    }
}
const $s = class  extends iu{
    constructor()
    {
        super(),
        this._data = null,
        this._roomPlaneParser = new ps,
        this._roomPlaneBitmapMaskParser = new BD,
        this._geometryUpdateId = -1,
        this._directionX = 0,
        this._directionY = 0,
        this._directionZ = 0,
        this._floorThickness = 1,
        this._wallThickness = 1,
        this._holeUpdateTime = NaN,
        this._planes = [],
        this._visiblePlanes = [],
        this._visiblePlaneSpriteNumbers = [],
        this._roomScale = 0,
        this._lastUpdateTime = -1e3,
        this._updateIntervalTime = 250,
        this._wallType = null,
        this._floorType = null,
        this._landscapeType = null,
        this._colorBackgroundOnly = !0,
        this._color = 16777215,
        this._redColor = 255,
        this._greenColor = 255,
        this._blueColor = 255,
        this._typeVisibility = [],
        this._assetUpdateCounter = 0,
        this._maskData = null,
        this._isPlaneSet = !1,
        this._textureCache = new mT,
        this._typeVisibility[ft.TYPE_UNDEFINED] = !1,
        this._typeVisibility[ft.TYPE_FLOOR] = !0,
        this._typeVisibility[ft.TYPE_WALL] = !0,
        this._typeVisibility[ft.TYPE_LANDSCAPE] = !0
    }
    initialize(s)
    {
        return s instanceof rv ? (this._data = s, super.initialize(s), this._data.setGraphicAssetCollection(this.asset), !0) : !1
    }
    dispose()
    {
        super.dispose(),
        this.clearPlanes(),
        this._planes = null,
        this._visiblePlanes = null,
        this._visiblePlaneSpriteNumbers = null,
        this._roomPlaneParser && (this._roomPlaneParser.dispose(), this._roomPlaneParser = null),
        this._roomPlaneBitmapMaskParser && (this._roomPlaneBitmapMaskParser.dispose(), this._roomPlaneBitmapMaskParser = null),
        this._data && (this._data.clearCache(), this._data = null),
        this._textureCache && this._textureCache.clearCache()
    }
    reset()
    {
        super.reset(),
        this._floorType = null,
        this._wallType = null,
        this._landscapeType = null,
        this._maskData = null,
        this._geometryUpdateId = -1,
        this._roomScale = 0
    }
    update(s, e, t, r)
    {
        if (!this.object || !s)
            return;
        const i = this.updateGeometry(s),
            n = this.object.model;
        let o = !1;
        if (this.updateThickness(n) && (o = !0), this.updateHole(n) && (o = !0), this.initializeRoomPlanes(), o = this.updateMasks(n), !(e < this._lastUpdateTime + this._updateIntervalTime && !i && !o)) {
            if (this.updatePlaneTexturesAndVisibilities(n) && (o = !0), this.updatePlanes(s, i, e) && (o = !0), o) {
                let l = 0;
                for (; l < this._visiblePlanes.length;) {
                    const c = this._visiblePlaneSpriteNumbers[l],
                        u = this.getSprite(c),
                        h = this._visiblePlanes[l];
                    if (u && h && h.type !== ft.TYPE_LANDSCAPE)
                        if (this._colorBackgroundOnly) {
                            let d = h.color;
                            const m = (d & 255) * this._redColor / 255,
                                p = (d >> 8 & 255) * this._greenColor / 255,
                                E = (d >> 16 & 255) * this._blueColor / 255;
                            d = (d >> 24 << 24) + (E << 16) + (p << 8) + m,
                            u.color = d
                        } else
                            u.color = h.color;
                    l++
                }
                this.updateSpriteCounter++
            }
            this.updateModelCounter = n.updateCounter,
            this._lastUpdateTime = e
        }
    }
    updateGeometry(s)
    {
        if (!s || this._geometryUpdateId === s.updateId)
            return !1;
        this._geometryUpdateId = s.updateId,
        this._boundingRectangle = null;
        const e = s.direction;
        return e && (e.x !== this._directionX || e.y !== this._directionY || e.z !== this._directionZ || s.scale !== this._roomScale) ? (this._directionX = e.x, this._directionY = e.y, this._directionZ = e.z, this._roomScale = s.scale, !0) : !1
    }
    updateThickness(s)
    {
        if (this.updateModelCounter === s.updateCounter)
            return !1;
        const e = s.getValue(C.ROOM_FLOOR_THICKNESS),
            t = s.getValue(C.ROOM_WALL_THICKNESS);
        return !isNaN(e) && !isNaN(t) && (e !== this._floorThickness || t !== this._wallThickness) ? (this._floorThickness = e, this._wallThickness = t, this.clearPlanes(), !0) : !1
    }
    updateHole(s)
    {
        if (this.updateModelCounter === s.updateCounter)
            return !1;
        const e = s.getValue(C.ROOM_FLOOR_HOLE_UPDATE_TIME);
        return !isNaN(e) && e !== this._holeUpdateTime ? (this._holeUpdateTime = e, this.clearPlanes(), !0) : !1
    }
    updateMasks(s)
    {
        if (this.updateModelCounter === s.updateCounter)
            return !1;
        let e = !1;
        const t = s.getValue(C.ROOM_PLANE_MASK_XML);
        t !== this._maskData && (this.updatePlaneMasks(t), this._maskData = t, e = !0);
        const r = s.getValue(C.ROOM_BACKGROUND_COLOR);
        r !== this._color && (this._color = r, this._redColor = this._color & 255, this._greenColor = this._color >> 8 & 255, this._blueColor = this._color >> 16 & 255, e = !0);
        const i = s.getValue(C.ROOM_COLORIZE_BG_ONLY) || !1;
        return i !== this._colorBackgroundOnly && (this._colorBackgroundOnly = i, e = !0), e
    }
    updatePlaneTexturesAndVisibilities(s)
    {
        if (this.updateModelCounter === s.updateCounter)
            return !1;
        const e = s.getValue(C.ROOM_FLOOR_TYPE),
            t = s.getValue(C.ROOM_WALL_TYPE),
            r = s.getValue(C.ROOM_LANDSCAPE_TYPE),
            i = s.getValue(C.ROOM_FLOOR_VISIBILITY) === 1,
            n = s.getValue(C.ROOM_WALL_VISIBILITY) === 1,
            o = s.getValue(C.ROOM_LANDSCAPE_VISIBILITY) === 1;
        return this.updatePlaneTypes(e, t, r) || this.updatePlaneVisibility(i, n, o)
    }
    clearPlanes()
    {
        if (this._planes) {
            for (; this._planes.length;) {
                const s = this._planes[0];
                s && s.dispose(),
                this._planes.pop()
            }
            this._planes = [],
            this._planes = []
        }
        this._isPlaneSet = !1,
        this._assetUpdateCounter = this._assetUpdateCounter + 1,
        this.reset()
    }
    initializeRoomPlanes()
    {
        if (!this.object || this._isPlaneSet)
            return;
        isNaN(this._floorThickness) || (this._roomPlaneParser.floorThicknessMultiplier = this._floorThickness),
        isNaN(this._wallThickness) || (this._roomPlaneParser.wallThicknessMultiplier = this._wallThickness);
        const s = this.object.model.getValue(C.ROOM_MAP_DATA);
        if (!this._roomPlaneParser.initializeFromMapData(s))
            return;
        const e = this.getLandscapeWidth(),
            t = this.getLandscapeHeight();
        let r = 0,
            i = this.object.model.getValue(C.ROOM_RANDOM_SEED),
            n = 0;
        for (; n < this._roomPlaneParser.planeCount;) {
            const o = this._roomPlaneParser.getPlaneLocation(n),
                l = this._roomPlaneParser.getPlaneLeftSide(n),
                c = this._roomPlaneParser.getPlaneRightSide(n),
                u = this._roomPlaneParser.getPlaneSecondaryNormals(n),
                h = this._roomPlaneParser.getPlaneType(n);
            let d = null;
            if (o && l && c) {
                const m = w.crossProduct(l, c);
                if (i = _v(Math.trunc(i * 7613 + 517) >>> 0), d = null, h === Jt.PLANE_FLOOR) {
                    const p = o.x + l.x + .5,
                        E = o.y + c.y + .5,
                        T = Math.trunc(p) - p,
                        I = Math.trunc(E) - E;
                    d = new ft(this._textureCache, this.object.getLocation(), o, l, c, ft.TYPE_FLOOR, !0, u, i, -T, -I),
                    m.z !== 0 ? d.color = $s.FLOOR_COLOR : d.color = m.x !== 0 ? $s.FLOOR_COLOR_RIGHT : $s.FLOOR_COLOR_LEFT,
                    this._data && (d.rasterizer = this._data.floorRasterizer)
                } else
                    h === Jt.PLANE_WALL ? (d = new ft(this._textureCache, this.object.getLocation(), o, l, c, ft.TYPE_WALL, !0, u, i), (l.length < 1 || c.length < 1) && (d.hasTexture = !1), m.x === 0 && m.y === 0 ? d.color = $s.WALL_COLOR_BORDER : m.y > 0 ? d.color = $s.WALL_COLOR_TOP : m.y === 0 ? d.color = $s.WALL_COLOR_SIDE : d.color = $s.WALL_COLOR_BOTTOM, this._data && (d.rasterizer = this._data.wallRasterizer)) : h === Jt.PLANE_LANDSCAPE ? (d = new ft(this._textureCache, this.object.getLocation(), o, l, c, ft.TYPE_LANDSCAPE, !0, u, i, r, 0, e, t), m.y > 0 ? d.color = $s.LANDSCAPE_COLOR_TOP : m.y == 0 ? d.color = $s.LANDSCAPE_COLOR_SIDE : d.color = $s.LANDSCAPE_COLOR_BOTTOM, this._data && (d.rasterizer = this._data.landscapeRasterizer), r = r + l.length) : h == Jt.PLANE_BILLBOARD && (d = new ft(this._textureCache, this.object.getLocation(), o, l, c, ft.TYPE_WALL, !0, u, i), (l.length < 1 || c.length < 1) && (d.hasTexture = !1), m.x == 0 && m.y == 0 ? d.color = $s.WALL_COLOR_BORDER : m.y > 0 ? d.color = $s.WALL_COLOR_TOP : m.y == 0 ? d.color = $s.WALL_COLOR_SIDE : d.color = $s.WALL_COLOR_BOTTOM);
                if (d) {
                    d.maskManager = this._data.maskManager;
                    let p = 0;
                    for (; p < this._roomPlaneParser.getPlaneMaskCount(n);) {
                        const E = this._roomPlaneParser.getPlaneMaskLeftSideLoc(n, p),
                            T = this._roomPlaneParser.getPlaneMaskRightSideLoc(n, p),
                            I = this._roomPlaneParser.getPlaneMaskLeftSideLength(n, p),
                            S = this._roomPlaneParser.getPlaneMaskRightSideLength(n, p);
                        d.addRectangleMask(E, T, I, S),
                        p++
                    }
                    this._planes.push(d)
                }
            } else
                return;
            n++
        }
        this._isPlaneSet = !0,
        this.defineSprites()
    }
    defineSprites()
    {
        this.createSprites(this._planes.length);
        let s = 0;
        for (; s < this._planes.length;) {
            const e = this._planes[s],
                t = this.getSprite(s);
            e && t && e.leftSide && e.rightSide && (e.type === ft.TYPE_WALL && (e.leftSide.length < 1 || e.rightSide.length < 1) ? t.alphaTolerance = Fi.MATCH_NOTHING : t.alphaTolerance = Fi.MATCH_OPAQUE_PIXELS, e.type === ft.TYPE_WALL ? t.tag = "plane.wall@" + (s + 1) : e.type === ft.TYPE_FLOOR ? t.tag = "plane.floor@" + (s + 1) : t.tag = "plane@" + (s + 1), t.spriteType = Dr.ROOM_PLANE),
            s++
        }
    }
    getLandscapeWidth()
    {
        let s = 0,
            e = 0;
        for (; e < this._roomPlaneParser.planeCount;) {
            if (this._roomPlaneParser.getPlaneType(e) === Jt.PLANE_LANDSCAPE) {
                const r = this._roomPlaneParser.getPlaneLeftSide(e);
                s += r.length
            }
            e++
        }
        return s
    }
    getLandscapeHeight()
    {
        let s = 0,
            e = 0;
        for (; e < this._roomPlaneParser.planeCount;) {
            if (this._roomPlaneParser.getPlaneType(e) === Jt.PLANE_LANDSCAPE) {
                const r = this._roomPlaneParser.getPlaneRightSide(e);
                r.length > s && (s = r.length)
            }
            e++
        }
        return s > 5 && (s = 5), s
    }
    updatePlaneTypes(s, e, t)
    {
        if (s !== this._floorType ? this._floorType = s : s = null, e !== this._wallType ? this._wallType = e : e = null, t !== this._landscapeType ? this._landscapeType = t : t = null, !s && !e && !t)
            return !1;
        let r = 0;
        for (; r < this._planes.length;) {
            const i = this._planes[r];
            i && (i.type === ft.TYPE_FLOOR && s ? i.id = s : i.type === ft.TYPE_WALL && e ? i.id = e : i.type === ft.TYPE_LANDSCAPE && t && (i.id = t)),
            r++
        }
        return !0
    }
    updatePlaneVisibility(s, e, t)
    {
        return s === this._typeVisibility[ft.TYPE_FLOOR] && e === this._typeVisibility[ft.TYPE_WALL] && t === this._typeVisibility[ft.TYPE_LANDSCAPE] ? !1 : (this._typeVisibility[ft.TYPE_FLOOR] = s, this._typeVisibility[ft.TYPE_WALL] = e, this._typeVisibility[ft.TYPE_LANDSCAPE] = t, this._visiblePlanes = [], this._visiblePlaneSpriteNumbers = [], !0)
    }
    updatePlanes(s, e, t)
    {
        if (!s || !this.object)
            return !1;
        this._assetUpdateCounter++,
        e && (this._visiblePlanes = [], this._visiblePlaneSpriteNumbers = []);
        const r = this._visiblePlanes.length > 0;
        let i = this._visiblePlanes;
        this._visiblePlanes.length || (i = this._planes);
        let n = 0,
            o = !1,
            l = 0;
        for (; l < i.length;) {
            let c = l;
            r && (c = this._visiblePlaneSpriteNumbers[l]);
            const u = this.getSprite(c);
            if (u) {
                const h = i[l];
                h ? (u.id = h.uniqueId, h.update(s, t) && (h.visible && (n = h.relativeDepth + this.floorRelativeDepth + c / 1e3, h.type !== ft.TYPE_FLOOR && (n = h.relativeDepth + this.wallRelativeDepth + c / 1e3, (h.leftSide.length < 1 || h.rightSide.length < 1) && (n = n + $s.ROOM_DEPTH_OFFSET * .5)), this.updateSprite(u, s, h, `plane ${c} ${s.scale}`, n)), o = !0), u.visible != (h.visible && this._typeVisibility[h.type]) && (u.visible = !u.visible, o = !0), u.visible && (r || (this._visiblePlanes.push(h), this._visiblePlaneSpriteNumbers.push(l)))) : (u.id = 0, u.visible && (u.visible = !1, o = !0))
            }
            l++
        }
        return o
    }
    updatePlaneMasks(s)
    {
        if (!s)
            return;
        this._roomPlaneBitmapMaskParser.initialize(s);
        const e = [],
            t = [];
        let r = !1,
            i = 0;
        for (; i < this._planes.length;) {
            const n = this._planes[i];
            n && (n.resetBitmapMasks(), n.type === ft.TYPE_LANDSCAPE && e.push(i)),
            i++
        }
        for (const n of this._roomPlaneBitmapMaskParser.masks.values()) {
            const o = this._roomPlaneBitmapMaskParser.getMaskType(n),
                l = this._roomPlaneBitmapMaskParser.getMaskLocation(n),
                c = this._roomPlaneBitmapMaskParser.getMaskCategory(n);
            if (l) {
                let u = 0;
                for (; u < this._planes.length;) {
                    const h = this._planes[u];
                    if ((h.type === ft.TYPE_WALL || h.type === ft.TYPE_LANDSCAPE) && h && h.location && h.normal) {
                        const d = w.dif(l, h.location);
                        if (Math.abs(w.scalarProjection(d, h.normal)) < .01 && h.leftSide && h.rightSide) {
                            const p = w.scalarProjection(d, h.leftSide),
                                E = w.scalarProjection(d, h.rightSide);
                            h.type === ft.TYPE_WALL || h.type === ft.TYPE_LANDSCAPE && c === Go.HOLE ? h.addBitmapMask(o, p, E) : h.type === ft.TYPE_LANDSCAPE && (h.canBeVisible || (r = !0), h.canBeVisible = !0, t.push(u))
                        }
                    }
                    u++
                }
            }
        }
        for (i = 0; i < e.length;) {
            const n = e[i];
            if (t.indexOf(n) < 0) {
                const o = this._planes[n];
                o.canBeVisible = !1,
                r = !0
            }
            i++
        }
        r && (this._visiblePlanes = [], this._visiblePlaneSpriteNumbers = [])
    }
    updateSprite(s, e, t, r, i)
    {
        const n = t.offset;
        s.offsetX = -n.x,
        s.offsetY = -n.y,
        s.relativeDepth = i,
        s.color = t.color,
        s.texture = t.bitmapData,
        s.name = r + "_" + this._assetUpdateCounter
    }
    getBoundingRectangle()
    {
        return this._boundingRectangle || (this._boundingRectangle = super.getBoundingRectangle()), new Qr(this._boundingRectangle.x, this._boundingRectangle.y, this._boundingRectangle.width, this._boundingRectangle.height)
    }
    get planes()
    {
        const s = [];
        for (const e of this._visiblePlanes)
            s.push(e);
        return s
    }
    get floorRelativeDepth()
    {
        return $s.ROOM_DEPTH_OFFSET + .1
    }
    get wallRelativeDepth()
    {
        return $s.ROOM_DEPTH_OFFSET + .5
    }
}
;
let ki = $s;
ki.FLOOR_COLOR = 16777215;
ki.FLOOR_COLOR_LEFT = 14540253;
ki.FLOOR_COLOR_RIGHT = 12303291;
ki.WALL_COLOR_TOP = 16777215;
ki.WALL_COLOR_SIDE = 13421772;
ki.WALL_COLOR_BOTTOM = 10066329;
ki.WALL_COLOR_BORDER = 10066329;
ki.LANDSCAPE_COLOR_TOP = 16777215;
ki.LANDSCAPE_COLOR_SIDE = 13421772;
ki.LANDSCAPE_COLOR_BOTTOM = 10066329;
ki.ROOM_DEPTH_OFFSET = 1e3;
class m3 extends As {
    constructor()
    {
        super(),
        this._tileHeight = 0
    }
    getLayerYOffset(e, t, r)
    {
        return r === 1 ? (this._tileHeight = this.object.model.getValue(C.TILE_CURSOR_HEIGHT), -this._tileHeight * 32) : super.getLayerYOffset(e, t, r)
    }
}
const iv = class {
    constructor()
    {
        this._visualizationDatas = new Map
    }
    getVisualization(s)
    {
        const e = this.getVisualizationType(s);
        return e ? new e : null
    }
    getVisualizationType(s)
    {
        if (!s)
            return null;
        let e = null;
        switch (s) {
        case ae.ROOM:
            e = ki;
            break;
        case ae.TILE_CURSOR:
            e = m3;
            break;
        case ae.USER:
        case ae.BOT:
        case ae.RENTABLE_BOT:
            e = Cs;
            break;
        case ae.PET_ANIMATED:
            e = on;
            break;
        case ae.FURNITURE_STATIC:
            e = da;
            break;
        case ae.FURNITURE_ANIMATED:
            e = As;
            break;
        case ae.FURNITURE_RESETTING_ANIMATED:
            e = r3;
            break;
        case ae.FURNITURE_BADGE_DISPLAY:
            e = zD;
            break;
        case ae.FURNITURE_BG:
            e = i3;
            break;
        case ae.FURNITURE_BB:
            e = KD;
            break;
        case ae.FURNITURE_ISOMETRIC_BB:
            e = e3;
            break;
        case ae.FURNITURE_BOTTLE:
            e = qd;
            break;
        case ae.FURNITURE_BUILDER_PLACEHOLDER:
            e = X5;
            break;
        case ae.FURNITURE_COUNTER_CLOCK:
            e = fu;
            break;
        case ae.FURNITURE_CUBOID:
            e = Q5;
            break;
        case ae.FURNITURE_EXTERNAL_IMAGE:
            e = J5;
            break;
        case ae.FURNITURE_FIREWORKS:
            e = XD;
            break;
        case ae.FURNITURE_GIFT_WRAPPED_FIREWORKS:
            e = Qd;
            break;
        case ae.FURNITURE_GIFT_WRAPPED:
            e = $5;
            break;
        case ae.FURNITURE_GUILD_CUSTOMIZED:
            e = oc;
            break;
        case ae.FURNITURE_GUILD_ISOMETRIC_BADGE:
            e = mu;
            break;
        case ae.FURNITURE_HABBOWHEEL:
            e = Eu;
            break;
        case ae.FURNITURE_MANNEQUIN:
            e = QD;
            break;
        case ae.FURNITURE_PARTY_BEAMER:
            e = lc;
            break;
        case ae.FURNITURE_PLANET_SYSTEM:
            e = t3;
            break;
        case ae.FURNITURE_POSTER:
            e = s3;
            break;
        case ae.FURNITURE_QUEUE_TILE:
            e = pu;
            break;
        case ae.FURNITURE_SCORE_BOARD:
            e = Iu;
            break;
        case ae.FURNITURE_SOUNDBLOCK:
            e = n3;
            break;
        case ae.FURNITURE_STICKIE:
            e = a3;
            break;
        case ae.FURNITURE_VAL_RANDOMIZER:
            e = cc;
            break;
        case ae.FURNITURE_VOTE_COUNTER:
            e = Tu;
            break;
        case ae.FURNITURE_VOTE_MAJORITY:
            e = uc;
            break;
        case ae.FURNITURE_WATER_AREA:
            e = o3;
            break;
        case ae.FURNITURE_YOUTUBE:
            e = ev;
            break
        }
        return e || (pe.log("Unknown Visualization", s), null)
    }
    getVisualizationData(s, e, t)
    {
        const r = this._visualizationDatas.get(s);
        if (r)
            return r;
        let i = null;
        switch (e) {
        case ae.FURNITURE_STATIC:
        case ae.FURNITURE_GIFT_WRAPPED:
        case ae.FURNITURE_BB:
        case ae.FURNITURE_ISOMETRIC_BB:
        case ae.FURNITURE_BG:
        case ae.FURNITURE_STICKIE:
        case ae.FURNITURE_BUILDER_PLACEHOLDER:
            i = new ra;
            break;
        case ae.FURNITURE_ANIMATED:
        case ae.FURNITURE_RESETTING_ANIMATED:
        case ae.FURNITURE_POSTER:
        case ae.FURNITURE_HABBOWHEEL:
        case ae.FURNITURE_VAL_RANDOMIZER:
        case ae.FURNITURE_BOTTLE:
        case ae.FURNITURE_PLANET_SYSTEM:
        case ae.FURNITURE_QUEUE_TILE:
        case ae.FURNITURE_PARTY_BEAMER:
        case ae.FURNITURE_COUNTER_CLOCK:
        case ae.FURNITURE_WATER_AREA:
        case ae.FURNITURE_SCORE_BOARD:
        case ae.FURNITURE_FIREWORKS:
        case ae.FURNITURE_GIFT_WRAPPED_FIREWORKS:
        case ae.FURNITURE_GUILD_CUSTOMIZED:
        case ae.FURNITURE_GUILD_ISOMETRIC_BADGE:
        case ae.FURNITURE_VOTE_COUNTER:
        case ae.FURNITURE_VOTE_MAJORITY:
        case ae.FURNITURE_SOUNDBLOCK:
        case ae.FURNITURE_BADGE_DISPLAY:
        case ae.FURNITURE_EXTERNAL_IMAGE:
        case ae.FURNITURE_YOUTUBE:
        case ae.TILE_CURSOR:
            i = new SE;
            break;
        case ae.FURNITURE_MANNEQUIN:
            i = new pf;
            break;
        case ae.ROOM:
            i = new rv;
            break;
        case ae.USER:
        case ae.BOT:
        case ae.RENTABLE_BOT:
            i = new td;
            break;
        case ae.PET_ANIMATED:
            i = new tv;
            break
        }
        return i ? i.initialize(t) ? ((i instanceof td || i instanceof pf) && (i.avatarManager = Ee.instance.avatar), iv.CACHING_ENABLED && this._visualizationDatas.set(s, i), i) : (i.dispose(), null) : null
    }
}
;
let nv = iv;
nv.CACHING_ENABLED = !0;
class Nt {}
Nt.ROOM_MIN_X = "room_min_x";
Nt.ROOM_MAX_X = "room_max_x";
Nt.ROOM_MIN_Y = "room_min_y";
Nt.ROOM_MAX_Y = "room_max_y";
Nt.ROOM_IS_PUBLIC = "room_is_public";
Nt.ROOM_Z_SCALE = "room_z_scale";
Nt.AD_DISPLAY_DELAY = "ad_display_delay";
Nt.IS_PLAYING_GAME = "is_playing_game";
Nt.RESTRICTS_DRAGGING = "restricts_dragging";
Nt.RESTRICTS_SCALING = "restricts_scaling";
Nt.RESTRICTED_SCALE = "room_scale";
class E3 {
    constructor(e, t)
    {
        this._width = e,
        this._height = t,
        this._heights = [],
        this._isNotStackable = [],
        this._isRoomTile = [];
        let r = e * t;
        for (; r > 0;)
            this._heights.push(0),
            this._isNotStackable.push(!1),
            this._isRoomTile.push(!1),
            r--
    }
    dispose()
    {
        this._width = 0,
        this._height = 0,
        this._height = null,
        this._isNotStackable = null,
        this._isRoomTile = null
    }
    validPosition(e, t)
    {
        return e >= 0 && e < this._width && t >= 0 && t < this._height
    }
    getTileHeight(e, t)
    {
        return this.validPosition(e, t) ? this._heights[t * this._width + e] : 0
    }
    setTileHeight(e, t, r)
    {
        this.validPosition(e, t) && (this._heights[t * this._width + e] = r)
    }
    setStackingBlocked(e, t, r)
    {
        this.validPosition(e, t) && (this._isNotStackable[t * this._width + e] = r)
    }
    setIsRoomTile(e, t, r)
    {
        this.validPosition(e, t) && (this._isRoomTile[t * this._width + e] = r)
    }
    validateLocation(e, t, r, i, n, o, l, c, u, h=-1)
    {
        let d = 0,
            m = 0;
        if (!this.validPosition(e, t) || !this.validPosition(e + r - 1, t + i - 1))
            return !1;
        (n < 0 || n >= this._width) && (n = 0),
        (o < 0 || o >= this._height) && (o = 0),
        l = Math.min(l, this._width - n),
        c = Math.min(c, this._height - o),
        h === -1 && (h = this.getTileHeight(e, t));
        let p = t;
        for (; p < t + i;) {
            for (d = e; d < e + r;) {
                if (d < n || d >= n + l || p < o || p >= o + c) {
                    if (m = p * this._width + d, u) {
                        if (!this._isRoomTile[m])
                            return !1
                    } else if (this._isNotStackable[m] || !this._isRoomTile[m] || Math.abs(this._heights[m] - h) > .01)
                        return !1
                }
                d++
            }
            p++
        }
        return !0
    }
    get width()
    {
        return this._width
    }
    get height()
    {
        return this._height
    }
}
const Hn = class {
    constructor()
    {
        this._isDisposed = !1,
        this._scale = 64,
        this._heightMap = [],
        this._width = 0,
        this._height = 0,
        this._floorHeight = 0
    }
    get disposed()
    {
        return this._isDisposed
    }
    get scale()
    {
        return this._scale
    }
    set scale(s)
    {
        this._scale = s
    }
    dispose()
    {
        this.reset(),
        this._isDisposed = !0
    }
    initialize(s, e, t)
    {
        if (s <= this._width && e <= this._height) {
            this._width = s,
            this._height = e,
            this._floorHeight = t;
            return
        }
        this.reset();
        let r = 0;
        for (; r < e;) {
            const i = [];
            this._heightMap.push(i);
            let n = 0;
            for (; n < s;)
                i.push(0),
                n++;
            r++
        }
        this._width = s,
        this._height = e,
        this._floorHeight = t
    }
    reset()
    {
        this._heightMap = []
    }
    setHeight(s, e, t)
    {
        if (s < 0 || s >= this._width || e < 0 || e >= this._height)
            return !1;
        const r = this._heightMap[e];
        return r ? (r[s] = t, !0) : !1
    }
    getHeight(s, e)
    {
        if (s < 0 || s >= this._width || e < 0 || e >= this._height)
            return 0;
        const t = this._heightMap[e];
        return t ? t[s] : 0
    }
    getLocation(s, e, t, r, i)
    {
        if (s == 0 && e == 0) {
            s = this._width,
            e = this._height;
            const u = Math.round(this.scale / 10);
            if (i == Hn.R) {
                let h = this._width - 1;
                for (; h >= 0;) {
                    let d = 1;
                    for (; d < this._height;) {
                        if (this.getHeight(h, d) <= this._floorHeight) {
                            d - 1 < e && (s = h, e = d - 1);
                            break
                        }
                        d++
                    }
                    h--
                }
                r = r + (this.scale / 4 - u / 2),
                t = t + this.scale / 2
            } else {
                let h = this._height - 1;
                for (; h >= 0;) {
                    let d = 1;
                    for (; d < this._width;) {
                        if (this.getHeight(d, h) <= this._floorHeight) {
                            d - 1 < s && (s = d - 1, e = h);
                            break
                        }
                        d++
                    }
                    h--
                }
                r = r + (this.scale / 4 - u / 2),
                t = t - u
            }
        }
        let n = s,
            o = e,
            l = this.getHeight(s, e);
        return i == Hn.R ? (n = n + (t / (this._scale / 2) - .5), o = o + .5, l = l - (r - t / 2) / (this._scale / 2)) : (o = o + ((this._scale / 2 - t) / (this._scale / 2) - .5), n = n + .5, l = l - (r - (this._scale / 2 - t) / 2) / (this._scale / 2)), new w(n, o, l)
    }
    getLocationOldFormat(s, e, t)
    {
        let r,
            i,
            n = 0,
            o = 0;
        i = Math.ceil(s),
        n = i - s;
        let l,
            c,
            u,
            h = 0;
        for (r = 0; r < this._width;) {
            if (i >= 0 && i < this._height) {
                if (this.getHeight(r, i) <= this._floorHeight) {
                    l = r - 1,
                    c = i,
                    o = r,
                    t = Hn.L;
                    break
                }
                if (this.getHeight(r, i + 1) <= this._floorHeight) {
                    l = r,
                    c = i,
                    o = c - s,
                    t = Hn.R;
                    break
                }
            }
            i++,
            r++
        }
        const d = this.scale / 2 * n;
        let m = -o * this.scale / 2;
        return m = m + -e * 18 / 32 * this.scale / 2, h = this.getHeight(l, c), u = h * this.scale / 2 + m, t == Hn.R ? u = u + n * this.scale / 4 : u = u + (1 - n) * this.scale / 4, this.getLocation(l, c, d, u, t)
    }
    getOldLocation(s, e)
    {
        if (s == null)
            return null;
        let t = 0,
            r = 0,
            i = 0,
            n = 0,
            o = "",
            l = 0;
        if (e == 90)
            t = Math.floor(s.x - .5),
            r = Math.floor(s.y + .5),
            l = this.getHeight(t, r),
            i = this._scale / 2 - (s.y - r + .5) * (this._scale / 2),
            n = (l - s.z) * (this._scale / 2) + (this._scale / 2 - i) / 2,
            o = Hn.L;
        else if (e == 180)
            t = Math.floor(s.x + .5),
            r = Math.floor(s.y - .5),
            l = this.getHeight(t, r),
            i = (s.x + .5 - t) * (this._scale / 2),
            n = (l - s.z) * (this._scale / 2) + i / 2,
            o = Hn.R;
        else
            return null;
        return [t, r, i, n, o]
    }
    getOldLocationString(s, e)
    {
        const t = this.getOldLocation(s, e);
        if (t == null)
            return null;
        const r = Math.trunc(t[0]),
            i = Math.trunc(t[1]),
            n = Math.trunc(t[2]),
            o = Math.trunc(t[3]),
            l = t[4];
        return ":w=" + r + "," + i + " l=" + n + "," + o + " " + l
    }
    getDirection(s)
    {
        return s == Hn.R ? 180 : 90
    }
    getFloorAltitude(s, e)
    {
        const t = this.getHeight(s, e),
            r = t + 1;
        return t + (Math.trunc(this.getHeight(s - 1, e - 1)) == r || Math.trunc(this.getHeight(s, e - 1)) == r || Math.trunc(this.getHeight(s + 1, e - 1)) == r || Math.trunc(this.getHeight(s - 1, e)) == r || Math.trunc(this.getHeight(s + 1, e)) == r || Math.trunc(this.getHeight(s - 1, e + 1)) == r || Math.trunc(this.getHeight(s, e + 1)) == r || Math.trunc(this.getHeight(s + 1, e + 1)) == r ? .5 : 0)
    }
    isRoomTile(s, e)
    {
        return s >= 0 && s < this._width && e >= 0 && e < this._height && this._heightMap[e][s] >= 0
    }
}
;
let hc = Hn;
hc.DEFAULT_SCALE = 32;
hc.L = "l";
hc.R = "r";
const av = class {
    constructor()
    {
        this._targetId = -1,
        this._targetCategory = -2,
        this._targetLoc = null,
        this._moveDistance = 0,
        this._previousMoveSpeed = 0,
        this._maintainPreviousMoveSpeed = !1,
        this._currentLoc = null,
        this._limitedLocX = !1,
        this._limitedLocY = !1,
        this._centeredLocX = !1,
        this._centeredLocY = !1,
        this._screenWd = 0,
        this._screenHt = 0,
        this._scale = 0,
        this._roomWd = 0,
        this._roomHt = 0,
        this._geometryUpdateId = -1,
        this._scaleChanged = !1,
        this._targetObjectLoc = new w
    }
    get location()
    {
        return this._currentLoc
    }
    get targetId()
    {
        return this._targetId
    }
    set targetId(s)
    {
        this._targetId = s
    }
    get targetCategory()
    {
        return this._targetCategory
    }
    set targetCategory(s)
    {
        this._targetCategory = s
    }
    get targetObjectLoc()
    {
        return this._targetObjectLoc
    }
    set targetObjectLoc(s)
    {
        this._targetObjectLoc.assign(s)
    }
    get limitedLocationX()
    {
        return this._limitedLocX
    }
    set limitedLocationX(s)
    {
        this._limitedLocX = s
    }
    get limitedLocationY()
    {
        return this._limitedLocY
    }
    set limitedLocationY(s)
    {
        this._limitedLocY = s
    }
    get centeredLocX()
    {
        return this._centeredLocX
    }
    set centeredLocX(s)
    {
        this._centeredLocX = s
    }
    get centeredLocY()
    {
        return this._centeredLocY
    }
    set centeredLocY(s)
    {
        this._centeredLocY = s
    }
    get screenWd()
    {
        return this._screenWd
    }
    set screenWd(s)
    {
        this._screenWd = s
    }
    get screenHt()
    {
        return this._screenHt
    }
    set screenHt(s)
    {
        this._screenHt = s
    }
    get scale()
    {
        return this._scale
    }
    set scale(s)
    {
        this._scale != s && (this._scale = s, this._scaleChanged = !0)
    }
    get roomWd()
    {
        return this._roomWd
    }
    set roomWd(s)
    {
        this._roomWd = s
    }
    get roomHt()
    {
        return this._roomHt
    }
    set roomHt(s)
    {
        this._roomHt = s
    }
    get geometryUpdateId()
    {
        return this._geometryUpdateId
    }
    set geometryUpdateId(s)
    {
        this._geometryUpdateId = s
    }
    get isMoving()
    {
        return this._targetLoc != null && this._currentLoc != null
    }
    set target(s)
    {
        let e;
        this._targetLoc == null && (this._targetLoc = new w),
        (this._targetLoc.x != s.x || this._targetLoc.y != s.y || this._targetLoc.z != s.z) && (this._targetLoc.assign(s), e = w.dif(this._targetLoc, this._currentLoc), this._moveDistance = e.length, this._maintainPreviousMoveSpeed = !0)
    }
    dispose()
    {
        this._targetLoc = null,
        this._currentLoc = null
    }
    initializeLocation(s)
    {
        this._currentLoc == null && (this._currentLoc = new w, this._currentLoc.assign(s))
    }
    resetLocation(s)
    {
        this._currentLoc == null && (this._currentLoc = new w),
        this._currentLoc.assign(s)
    }
    update(s, e)
    {
        let t,
            r,
            i,
            n,
            o;
        if (this._followDuration > 0 && this._targetLoc != null && this._currentLoc != null) {
            if (this._scaleChanged) {
                this._scaleChanged = !1,
                this._currentLoc = this._targetLoc,
                this._targetLoc = null;
                return
            }
            t = w.dif(this._targetLoc, this._currentLoc),
            t.length > this._moveDistance && (this._moveDistance = t.length),
            t.length <= e ? (this._currentLoc = this._targetLoc, this._targetLoc = null, this._previousMoveSpeed = 0) : (r = Math.sin(Math.PI * t.length / this._moveDistance), i = e * .5, n = this._moveDistance / av.MOVE_SPEED_DENOMINATOR, o = i + (n - i) * r, this._maintainPreviousMoveSpeed && (o < this._previousMoveSpeed ? (o = this._previousMoveSpeed, o > t.length && (o = t.length)) : this._maintainPreviousMoveSpeed = !1), this._previousMoveSpeed = o, t.divide(t.length), t.multiply(o), this._currentLoc = w.sum(this._currentLoc, t))
        }
    }
    reset()
    {
        this._geometryUpdateId = -1
    }
    activateFollowing(s)
    {
        this._followDuration = s
    }
}
;
let ov = av;
ov.MOVE_SPEED_DENOMINATOR = 12;
class Sp {
    constructor(e, t)
    {
        this._roomId = e,
        this._data = t,
        this._floorType = null,
        this._wallType = null,
        this._landscapeType = null
    }
    get roomId()
    {
        return this._roomId
    }
    get data()
    {
        return this._data
    }
    get floorType()
    {
        return this._floorType
    }
    set floorType(e)
    {
        this._floorType = e
    }
    get wallType()
    {
        return this._wallType
    }
    set wallType(e)
    {
        this._wallType = e
    }
    get landscapeType()
    {
        return this._landscapeType
    }
    set landscapeType(e)
    {
        this._landscapeType = e
    }
}
class N_ {
    constructor(e, t, r, i, n, o, l, c=NaN, u=-1, h=0, d=0, m="", p=!0, E=!0, T=-1)
    {
        this._id = e,
        this._typeId = t,
        this._type = r,
        this._state = o,
        this._data = l,
        this._extra = c,
        this._expiryTime = u,
        this._usagePolicy = h,
        this._ownerId = d,
        this._ownerName = m,
        this._synchronized = p,
        this._realRoomObject = E,
        this._sizeZ = T,
        this._location = new w,
        this._direction = new w,
        this._location.assign(i),
        this._direction.assign(n)
    }
    get id()
    {
        return this._id
    }
    get typeId()
    {
        return this._typeId
    }
    get type()
    {
        return this._type
    }
    get location()
    {
        return this._location
    }
    get direction()
    {
        return this._direction
    }
    get state()
    {
        return this._state
    }
    get data()
    {
        return this._data
    }
    get extra()
    {
        return this._extra
    }
    get expiryTime()
    {
        return this._expiryTime
    }
    get usagePolicy()
    {
        return this._usagePolicy
    }
    get ownerId()
    {
        return this._ownerId
    }
    get ownerName()
    {
        return this._ownerName
    }
    get synchronized()
    {
        return this._synchronized
    }
    get realRoomObject()
    {
        return this._realRoomObject
    }
    get sizeZ()
    {
        return this._sizeZ
    }
}
class p3 {
    constructor(e, t)
    {
        this._tileObjectMap = new Map;
        let r = 0;
        for (; r < t;)
            this._tileObjectMap.set(r, new Map),
            r++;
        this._width = e,
        this._height = t
    }
    clear()
    {
        for (const e of this._tileObjectMap.values())
            e && e.clear();
        this._tileObjectMap.clear()
    }
    populate(e)
    {
        this.clear();
        for (const t of e)
            this.addRoomObject(t)
    }
    dispose()
    {
        this._tileObjectMap = null,
        this._width = 0,
        this._height = 0
    }
    getObjectIntTile(e, t)
    {
        if (e >= 0 && e < this._width && t >= 0 && t < this._height) {
            const r = this._tileObjectMap.get(t);
            if (r)
                return r.get(e)
        }
        return null
    }
    setObjectInTile(e, t, r)
    {
        if (!r.isReady) {
            pe.log("Assigning non initialized object to tile object map!");
            return
        }
        if (e >= 0 && e < this._width && t >= 0 && t < this._height) {
            const i = this._tileObjectMap.get(t);
            i && i.set(e, r)
        }
    }
    addRoomObject(e)
    {
        if (!e || !e.model || !e.isReady)
            return;
        const t = e.getLocation(),
            r = e.getDirection();
        if (!t || !r)
            return;
        let i = e.model.getValue(C.FURNITURE_SIZE_X),
            n = e.model.getValue(C.FURNITURE_SIZE_Y);
        i < 1 && (i = 1),
        n < 1 && (n = 1);
        const o = Math.trunc(r.x + 45) % 360 / 90;
        (o === 1 || o === 3) && ([i, n] = [n, i]);
        let l = t.y;
        for (; l < t.y + n;) {
            let c = t.x;
            for (; c < t.x + i;) {
                const u = this.getObjectIntTile(c, l);
                (!u || u !== e && u.getLocation().z <= t.z) && this.setObjectInTile(c, l, e),
                c++
            }
            l++
        }
    }
}
class I3 {
    constructor(e)
    {
        this._roomId = e,
        this._modelName = null,
        this._legacyGeometry = new hc,
        this._tileObjectMap = null,
        this._roomCamera = new ov,
        this._selectedObject = null,
        this._placedObject = null,
        this._furnitureStackingHeightMap = null,
        this._floorStack = new Map,
        this._wallStack = new Map,
        this._mouseButtonCursorOwners = []
    }
    dispose() {}
    setModelName(e)
    {
        this._modelName = e
    }
    setSelectedObject(e)
    {
        this._selectedObject && this._selectedObject.dispose(),
        this._selectedObject = e
    }
    setPlacedObject(e)
    {
        this._placedObject && this._placedObject.dispose(),
        this._placedObject = e
    }
    setFurnitureStackingHeightMap(e)
    {
        this._furnitureStackingHeightMap && this._furnitureStackingHeightMap.dispose(),
        this._furnitureStackingHeightMap = e,
        this._tileObjectMap && this._tileObjectMap.dispose(),
        this._furnitureStackingHeightMap && (this._tileObjectMap = new p3(this._furnitureStackingHeightMap.width, this._furnitureStackingHeightMap.height))
    }
    addPendingFurnitureFloor(e)
    {
        e && (this._floorStack.delete(e.id), this._floorStack.set(e.id, e))
    }
    removePendingFunitureFloor(e)
    {
        const t = this._floorStack.get(e);
        return t ? (this._floorStack.delete(e), t) : null
    }
    getPendingFurnitureFloor(e)
    {
        const t = this._floorStack.get(e);
        return t ? (this._floorStack.delete(e), t) : null
    }
    getNextPendingFurnitureFloor()
    {
        if (!this._floorStack.size)
            return null;
        const e = this._floorStack.keys();
        return this.getPendingFurnitureFloor(e.next().value)
    }
    addPendingFurnitureWall(e)
    {
        e && (this._wallStack.delete(e.id), this._wallStack.set(e.id, e))
    }
    removePendingFurnitureWall(e)
    {
        const t = this._wallStack.get(e);
        return t ? (this._wallStack.delete(e), t) : null
    }
    getPendingFurnitureWall(e)
    {
        const t = this._wallStack.get(e);
        return t ? (this._wallStack.delete(e), t) : null
    }
    getNextPendingFurnitureWall()
    {
        if (!this._wallStack.size)
            return null;
        const e = this._wallStack.keys();
        return this.getPendingFurnitureWall(e.next().value)
    }
    addButtonMouseCursorOwner(e)
    {
        return this._mouseButtonCursorOwners.indexOf(e) === -1 ? (this._mouseButtonCursorOwners.push(e), !0) : !1
    }
    removeButtonMouseCursorOwner(e)
    {
        const t = this._mouseButtonCursorOwners.indexOf(e);
        return t > -1 ? (this._mouseButtonCursorOwners.splice(t, 1), !0) : !1
    }
    hasButtonMouseCursorOwners()
    {
        return this._mouseButtonCursorOwners.length > 0
    }
    get roomId()
    {
        return this._roomId
    }
    get modelName()
    {
        return this._modelName
    }
    get legacyGeometry()
    {
        return this._legacyGeometry
    }
    get tileObjectMap()
    {
        return this._tileObjectMap
    }
    get roomCamera()
    {
        return this._roomCamera
    }
    get selectedObject()
    {
        return this._selectedObject
    }
    get placedObject()
    {
        return this._placedObject
    }
    get furnitureStackingHeightMap()
    {
        return this._furnitureStackingHeightMap
    }
}
class T3 {
    constructor(e, t)
    {
        this._object = e,
        this._groupBadge = t
    }
    get object()
    {
        return this._object
    }
    get groupBadge()
    {
        return this._groupBadge
    }
}
class y_ {
    constructor(e, t, r, i, n, o=0, l=null, c=null, u=-1, h=-1, d=null)
    {
        this._id = 0,
        this._category = 0,
        this._operation = "",
        this._loc = null,
        this._dir = null,
        this._typeId = 0,
        this._instanceData = null,
        this._stuffData = null,
        this._state = -1,
        this._animFrame = -1,
        this._posture = null,
        this._id = e,
        this._category = t,
        this._operation = r,
        this._loc = new w,
        this._loc.assign(i),
        this._dir = new w,
        this._dir.assign(n),
        this._typeId = o,
        this._instanceData = l,
        this._stuffData = c,
        this._state = u,
        this._animFrame = h,
        this._posture = d
    }
    get id()
    {
        return this._id
    }
    get category()
    {
        return this._category
    }
    get operation()
    {
        return this._operation
    }
    get loc()
    {
        return this._loc
    }
    get dir()
    {
        return this._dir
    }
    get typeId()
    {
        return this._typeId
    }
    get instanceData()
    {
        return this._instanceData
    }
    get stuffData()
    {
        return this._stuffData
    }
    get state()
    {
        return this._state
    }
    get animFrame()
    {
        return this._animFrame
    }
    get posture()
    {
        return this._posture
    }
    dispose()
    {
        this._loc = null,
        this._dir = null
    }
}
const dn = class {
    constructor()
    {
        this.spriteCount = 0,
        this.externalImageCount = 0
    }
    static addMannequinSprites(s, e)
    {
        const t = [];
        for (const r of s)
            if (r)
                if (r.type === "boutique_mannequin1" && r.name.indexOf("mannequin_") === 0) {
                    const i = e.getRoomObject(e.activeRoomId, r.objectId, V.FLOOR);
                    if (i) {
                        const n = i.visualization.getSpriteList();
                        if (n)
                            for (const o of n)
                                o.x = o.x + (r.x + r.width / 2 + dn.MANNEQUIN_MAGIC_X_OFFSET),
                                o.y = o.y + (r.y + r.height + dn.MANNEQUIN_MAGIC_Y_OFFSET),
                                o.z = o.z + r.z,
                                t.push(o)
                    }
                } else
                    t.push(r);
        return t
    }
    static sortSpriteDataObjects(s, e)
    {
        return s.z < e.z ? 1 : (s.z > e.z, -1)
    }
    static isSpriteInViewPort(s, e, t)
    {
        return !0
    }
    static sortQuadPoints(s, e, t, r)
    {
        const i = [];
        if (s.x == e.x ? i.push(s, t, e, r) : s.x == t.x ? i.push(s, e, t, r) : e.x < s.x && e.y > s.y || e.x > s.x && e.y < s.y ? i.push(s, t, e, r) : i.push(s, e, t, r), i[0].x < i[1].x) {
            let n = i[0];
            i[0] = i[1],
            i[1] = n,
            n = i[2],
            i[2] = i[3],
            i[3] = n
        }
        if (i[0].y < i[2].y) {
            let n = i[0];
            i[0] = i[2],
            i[2] = n,
            n = i[1],
            i[1] = i[3],
            i[3] = n
        }
        return i
    }
    getFurniData(s, e, t, r)
    {
        const i = [];
        let n = e.getSortableSpriteList();
        const o = t.getRoomObjects(t.activeRoomId, V.UNIT);
        for (const l of o)
            if (l.id !== r) {
                const c = l.visualization.getSpriteList();
                if (c) {
                    let u = 0,
                        h = 0;
                    for (const m of n)
                        if (m.name === "avatar_" + l.id) {
                            u = m.z,
                            h = m.y + m.height - e.geometry.scale / 4;
                            break
                        }
                    const d = t.getRoomObjectScreenLocation(t.activeRoomId, l.id, V.UNIT, e.id);
                    if (d) {
                        h === 0 && (h = d.y);
                        for (const m of c)
                            m.x = m.x + (d.x - e.screenOffsetX),
                            m.y = m.y + h,
                            m.z = m.z + u,
                            (m.name.indexOf("h_std_fx29_") === 0 || m.name.indexOf("h_std_fx185_") === 0) && (m.y = m.y + dn.AVATAR_WATER_EFFECT_MAGIC_Y_OFFSET),
                            n.push(m)
                    }
                }
            }
        n = dn.addMannequinSprites(n, t),
        n.sort(dn.sortSpriteDataObjects);
        for (const l of n)
            l.name !== null && l.name.length > 0 && l.name.indexOf("tile_cursor_") !== 0 && dn.isSpriteInViewPort(l, s, e) && (r < 0 || l.objectId != r) && (i.push(this.getSpriteDataObject(l, s, e, t)), this.maxZ || (this.maxZ = l.z), this.spriteCount++);
        return JSON.stringify(i)
    }
    getRoomRenderingModifiers(s)
    {
        return JSON.stringify(new Object)
    }
    getSpriteDataObject(s, e, t, r)
    {
        let i = [];
        const n = {};
        let o = s.name;
        return s.name.indexOf("@") !== -1 && (i = s.name.split("@"), o = i[0], i[1]), n.name = o, n.x = s.x - e.x, n.y = s.y - e.y, n.x = n.x + t.screenOffsetX, n.y = n.y + t.screenOffsetY, n.z = s.z, s.alpha && s.alpha.toString() !== "255" && (n.alpha = s.alpha), s.flipH && (n.flipH = s.flipH), s.skew && (n.skew = s.skew), s.frame && (n.frame = s.frame), s.color && s.color.length > 0 && (n.color = parseInt(s.color)), s.blendMode && s.blendMode !== "normal" && (n.blendMode = s.blendMode), o.indexOf("http") === 0 && (n.width = s.width, n.height = s.height, this.externalImageCount++, this.externalImageCount > dn.MAX_EXTERNAL_IMAGE_COUNT && (n.name = "box")), s.posture && (n.posture = s.posture), n
    }
    makeBackgroundPlane(s, e, t)
    {
        const r = new Ge(0, 0),
            i = new Ge(s.width, 0),
            n = new Ge(0, s.height),
            o = new Ge(s.width, s.height),
            l = dn.sortQuadPoints(r, i, n, o);
        let c = 0;
        t.length > 0 ? (c = t[0].z, this.maxZ && (c = Math.max(this.maxZ, c))) : c = this.maxZ ? this.maxZ : 0,
        c = c + (this.spriteCount * 1.776104 + t.length * 2.31743);
        const u = new Dc(null, e);
        return u.cornerPoints = l, u.z = c, u
    }
    sortRoomPlanes(s, e, t)
    {
        const r = new Map;
        let i = 1;
        this.maxZ && (i = i + this.maxZ);
        for (const l of s) {
            const c = {
                plane: l,
                z: i
            };
            r.set(l.uniqueId, c)
        }
        const n = e.getPlaneSortableSprites();
        n.sort((l, c) => c.z - l.z),
        n.reverse();
        let o = [];
        for (const l of n) {
            const c = l.sprite;
            if (c) {
                const u = r.get(c.id);
                u && (r.delete(c.id), u.z = l.z, o.push(u))
            }
        }
        return o = o.concat(Array.from(r.values())), o
    }
    getRoomPlanes(s, e, t, r)
    {
        const i = [],
            o = t.getRoomObject(t.activeRoomId, Ei.ROOM_OBJECT_ID, V.ROOM).visualization;
        if (o) {
            const l = e.geometry,
                c = this.sortRoomPlanes(o.planes, e, t),
                u = Gs.instance.stage;
            for (const h of c) {
                const d = h.plane,
                    m = [],
                    p = w.sum(d.location, d.leftSide),
                    E = l.getScreenPoint(d.location),
                    T = l.getScreenPoint(p),
                    I = l.getScreenPoint(w.sum(d.location, d.rightSide)),
                    S = l.getScreenPoint(w.sum(p, d.rightSide));
                m.push(E, T, I, S);
                let A = 0,
                    N = 0;
                for (const b of m)
                    b.x += u.width / 2,
                    b.y += u.height / 2,
                    b.x += e.screenOffsetX,
                    b.y += e.screenOffsetY,
                    b.x += -s.x,
                    b.y += -s.y,
                    b.x < 0 ? A-- : b.x >= s.width && A++,
                    b.y < 0 ? N-- : b.y >= s.height && N++;
                if (!(Math.abs(A) === 4 || Math.abs(N) === 4)) {
                    const b = dn.sortQuadPoints(E, T, I, S);
                    for (const v of d.getDrawingDatas(l))
                        v.cornerPoints = b,
                        v.z = h.z,
                        i.push(v)
                }
            }
            i.unshift(this.makeBackgroundPlane(s, r, i))
        }
        return i
    }
}
;
let Ou = dn;
Ou.MANNEQUIN_MAGIC_X_OFFSET = 1;
Ou.MANNEQUIN_MAGIC_Y_OFFSET = -16;
Ou.AVATAR_WATER_EFFECT_MAGIC_Y_OFFSET = -52;
Ou.MAX_EXTERNAL_IMAGE_COUNT = 30;
class R3 extends ei {
    constructor(e)
    {
        super(),
        this._connection = null,
        this._roomCreator = e,
        this._planeParser = new ps,
        this._latestEntryTileEvent = null,
        this._currentRoomId = 0,
        this._ownUserId = 0,
        this._initialConnection = !0,
        this._guideId = -1,
        this._requesterId = -1
    }
    onDispose()
    {
        super.onDispose(),
        this._connection = null,
        this._roomCreator = null,
        this._latestEntryTileEvent = null,
        this._planeParser && (this._planeParser.dispose(), this._planeParser = null)
    }
    setConnection(e)
    {
        this._connection || !e || (this._connection = e, this._connection.addMessageEvent(new xl(this.onUserInfoEvent.bind(this))), this._connection.addMessageEvent(new Fl(this.onRoomReadyMessageEvent.bind(this))), this._connection.addMessageEvent(new Vg(this.onRoomPaintEvent.bind(this))), this._connection.addMessageEvent(new Bh(this.onRoomModelEvent.bind(this))), this._connection.addMessageEvent(new Bg(this.onRoomHeightMapEvent.bind(this))), this._connection.addMessageEvent(new kg(this.onRoomHeightMapUpdateEvent.bind(this))), this._connection.addMessageEvent(new Vh(this.onRoomThicknessEvent.bind(this))), this._connection.addMessageEvent(new kh(this.onRoomDoorEvent.bind(this))), this._connection.addMessageEvent(new Ag(this.onRoomRollingEvent.bind(this))), this._connection.addMessageEvent(new Cg(this.onObjectsDataUpdateEvent.bind(this))), this._connection.addMessageEvent(new vg(this.onFurnitureAliasesEvent.bind(this))), this._connection.addMessageEvent(new yg(this.onFurnitureFloorAddEvent.bind(this))), this._connection.addMessageEvent(new Mg(this.onFurnitureFloorEvent.bind(this))), this._connection.addMessageEvent(new bg(this.onFurnitureFloorRemoveEvent.bind(this))), this._connection.addMessageEvent(new Dg(this.onFurnitureFloorUpdateEvent.bind(this))), this._connection.addMessageEvent(new wg(this.onFurnitureWallAddEvent.bind(this))), this._connection.addMessageEvent(new Fg(this.onFurnitureWallEvent.bind(this))), this._connection.addMessageEvent(new xg(this.onFurnitureWallRemoveEvent.bind(this))), this._connection.addMessageEvent(new Gg(this.onFurnitureWallUpdateEvent.bind(this))), this._connection.addMessageEvent(new Pg(this.onFurnitureDataEvent.bind(this))), this._connection.addMessageEvent(new Lg(this.onItemDataUpdateMessageEvent.bind(this))), this._connection.addMessageEvent(new Ug(this.onOneWayDoorStatusMessageEvent.bind(this))), this._connection.addMessageEvent(new Yh(this.onRoomUnitDanceEvent.bind(this))), this._connection.addMessageEvent(new jg(this.onRoomUnitEffectEvent.bind(this))), this._connection.addMessageEvent(new zh(this.onRoomUnitEvent.bind(this))), this._connection.addMessageEvent(new Wg(this.onRoomUnitExpressionEvent.bind(this))), this._connection.addMessageEvent(new Yg(this.onRoomUnitHandItemEvent.bind(this))), this._connection.addMessageEvent(new zg(this.onRoomUnitIdleEvent.bind(this))), this._connection.addMessageEvent(new Kh(this.onRoomUnitInfoEvent.bind(this))), this._connection.addMessageEvent(new Kg(this.onRoomUnitNumberEvent.bind(this))), this._connection.addMessageEvent(new qh(this.onRoomUnitRemoveEvent.bind(this))), this._connection.addMessageEvent(new qg(this.onRoomUnitStatusEvent.bind(this))), this._connection.addMessageEvent(new Vm(this.onRoomUnitChatEvent.bind(this))), this._connection.addMessageEvent(new jh(this.onRoomUnitChatEvent.bind(this))), this._connection.addMessageEvent(new Wh(this.onRoomUnitChatEvent.bind(this))), this._connection.addMessageEvent(new Hg(this.onRoomUnitTypingEvent.bind(this))), this._connection.addMessageEvent(new Hh(this.onPetFigureUpdateEvent.bind(this))), this._connection.addMessageEvent(new iA(this.onPetExperienceEvent.bind(this))), this._connection.addMessageEvent(new oA(this.onYouArePlayingGameEvent.bind(this))), this._connection.addMessageEvent(new Ng(this.onDiceValueMessageEvent.bind(this))), this._connection.addMessageEvent(new Km(this.onIgnoreResultEvent.bind(this))), this._connection.addMessageEvent(new Pm(this.onGuideSessionStartedMessageEvent.bind(this))), this._connection.addMessageEvent(new Dm(this.onGuideSessionEndedMessageEvent.bind(this))), this._connection.addMessageEvent(new vm(this.onGuideSessionErrorMessageEvent.bind(this))))
    }
    setRoomId(e)
    {
        this._currentRoomId !== 0 && this._roomCreator && this._roomCreator.destroyRoom(this._currentRoomId),
        this._currentRoomId = e,
        this._latestEntryTileEvent = null
    }
    clearRoomId()
    {
        this._currentRoomId = 0,
        this._latestEntryTileEvent = null
    }
    onUserInfoEvent(e)
    {
        if (!(e instanceof xl) || !e.connection)
            return;
        const t = e.getParser();
        t && (this._ownUserId = t.userInfo.userId)
    }
    onRoomReadyMessageEvent(e)
    {
        const t = e.getParser();
        if (this._currentRoomId !== t.roomId && this.setRoomId(t.roomId), this._roomCreator && this._roomCreator.setRoomInstanceModelName(t.roomId, t.name), this._initialConnection) {
            e.connection.send(new ib),
            this._initialConnection = !1;
            return
        }
        e.connection.send(new cf)
    }
    onRoomPaintEvent(e)
    {
        if (!(e instanceof Vg))
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = t.floorType,
            i = t.wallType,
            n = t.landscapeType;
        this._roomCreator && this._roomCreator.updateRoomInstancePlaneType(this._currentRoomId, r, i, n)
    }
    onRoomModelEvent(e)
    {
        if (!(e instanceof Bh) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this._roomCreator.getLegacyWallGeometry(this._currentRoomId);
        if (!r)
            return;
        this._planeParser.reset();
        const i = t.width,
            n = t.height;
        this._planeParser.initializeTileMap(i, n);
        let o = null;
        this._latestEntryTileEvent && (o = this._latestEntryTileEvent.getParser());
        let l = -1,
            c = -1,
            u = 0,
            h = 0,
            d = 0;
        for (; d < n;) {
            let E = 0;
            for (; E < i;) {
                const T = t.getHeight(E, d);
                (d > 0 && d < n - 1 || E > 0 && E < i - 1) && T != ps.TILE_BLOCKED && (o == null || E == o.x && d == o.y) && (t.getHeight(E, d - 1) == ps.TILE_BLOCKED && t.getHeight(E - 1, d) == ps.TILE_BLOCKED && t.getHeight(E, d + 1) == ps.TILE_BLOCKED && (l = E + .5, c = d, u = T, h = 90), t.getHeight(E, d - 1) == ps.TILE_BLOCKED && t.getHeight(E - 1, d) == ps.TILE_BLOCKED && t.getHeight(E + 1, d) == ps.TILE_BLOCKED && (l = E, c = d + .5, u = T, h = 180)),
                this._planeParser.setTileHeight(E, d, T),
                E++
            }
            d++
        }
        this._planeParser.setTileHeight(Math.floor(l), Math.floor(c), u),
        this._planeParser.initializeFromTileData(t.wallHeight),
        this._planeParser.setTileHeight(Math.floor(l), Math.floor(c), u + this._planeParser.wallHeight),
        t.scale === 64 ? (this._planeParser.restrictsDragging = !0, this._planeParser.restrictsScaling = !0, this._planeParser.restrictedScale = .5) : (this._planeParser.restrictsDragging = !1, this._planeParser.restrictsScaling = !1, this._planeParser.restrictedScale = 1),
        r.scale = hc.DEFAULT_SCALE,
        r.initialize(i, n, this._planeParser.floorHeight);
        let m = t.height - 1;
        for (; m >= 0;) {
            let E = t.width - 1;
            for (; E >= 0;)
                r.setHeight(E, m, this._planeParser.getTileHeight(E, m)),
                E--;
            m--
        }
        const p = this._planeParser.getMapData();
        p.doors.push({
            x: l,
            y: c,
            z: u,
            dir: h
        }),
        this._roomCreator.createRoomInstance(this._currentRoomId, p)
    }
    onRoomHeightMapEvent(e)
    {
        if (!(e instanceof Bg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = t.width,
            i = t.height,
            n = new E3(r, i);
        let o = 0;
        for (; o < i;) {
            let l = 0;
            for (; l < r;)
                n.setTileHeight(l, o, t.getTileHeight(l, o)),
                n.setStackingBlocked(l, o, t.getStackingBlocked(l, o)),
                n.setIsRoomTile(l, o, t.isRoomTile(l, o)),
                l++;
            o++
        }
        this._roomCreator.setFurnitureStackingHeightMap(this._currentRoomId, n)
    }
    onRoomHeightMapUpdateEvent(e)
    {
        if (!(e instanceof kg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this._roomCreator.getFurnitureStackingHeightMap(this._currentRoomId);
        if (r) {
            for (; t.next();)
                r.setTileHeight(t.x, t.y, t.tileHeight()),
                r.setStackingBlocked(t.x, t.y, t.isStackingBlocked()),
                r.setIsRoomTile(t.x, t.y, t.isRoomTile());
            this._roomCreator.refreshTileObjectMap(this._currentRoomId, "RoomMessageHandler.onRoomHeightMapUpdateEvent()")
        }
    }
    onRoomThicknessEvent(e)
    {
        if (!(e instanceof Vh))
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = !t.hideWalls,
            i = !0,
            n = t.thicknessWall,
            o = t.thicknessFloor;
        this._roomCreator && (this._roomCreator.updateRoomInstancePlaneVisibility(this._currentRoomId, r, i), this._roomCreator.updateRoomInstancePlaneThickness(this._currentRoomId, n, o))
    }
    onRoomDoorEvent(e)
    {
        e instanceof kh && (this._latestEntryTileEvent = e)
    }
    onRoomRollingEvent(e)
    {
        if (!(e instanceof Ag) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        this._roomCreator.updateRoomObjectFloor(this._currentRoomId, t.rollerId, null, null, 1, null),
        this._roomCreator.updateRoomObjectFloor(this._currentRoomId, t.rollerId, null, null, 2, null);
        const r = t.itemsRolling;
        if (r && r.length)
            for (const n of r)
                n && this._roomCreator.rollRoomObjectFloor(this._currentRoomId, n.id, n.location, n.targetLocation);
        const i = t.unitRolling;
        if (i) {
            this._roomCreator.updateRoomObjectUserLocation(this._currentRoomId, i.id, i.location, i.targetLocation);
            const n = this._roomCreator.getRoomObjectUser(this._currentRoomId, i.id);
            if (n && n.type !== it.MONSTER_PLANT) {
                let o = "std";
                switch (i.movementType) {
                case Kn.MOVE:
                    o = "mv";
                    break;
                case Kn.SLIDE:
                    o = "std";
                    break
                }
                this._roomCreator.updateRoomObjectUserPosture(this._currentRoomId, i.id, o)
            }
        }
    }
    onObjectsDataUpdateEvent(e)
    {
        if (!(e instanceof Cg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        if (t)
            for (const r of t.objects)
                this._roomCreator.updateRoomObjectFloor(this._currentRoomId, r.id, null, null, r.state, r.data)
    }
    onFurnitureAliasesEvent(e)
    {
        !(e instanceof vg) || !e.connection || !this._roomCreator || (e.getParser().aliases, this._connection.send(new cf))
    }
    onFurnitureFloorAddEvent(e)
    {
        if (!(e instanceof yg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser().item;
        t && this.addRoomObjectFurnitureFloor(this._currentRoomId, t)
    }
    onFurnitureFloorEvent(e)
    {
        if (!(e instanceof Mg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = t.items.length;
        let i = 0;
        for (; i < r;) {
            const n = t.items[i];
            n && this.addRoomObjectFurnitureFloor(this._currentRoomId, n),
            i++
        }
    }
    onFurnitureFloorRemoveEvent(e)
    {
        if (!(e instanceof bg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        t && (t.delay > 0 ? setTimeout(() => {
            this._roomCreator.removeRoomObjectFloor(this._currentRoomId, t.itemId, t.isExpired ? -1 : t.userId, !0)
        }, t.delay) : this._roomCreator.removeRoomObjectFloor(this._currentRoomId, t.itemId, t.isExpired ? -1 : t.userId, !0))
    }
    onFurnitureFloorUpdateEvent(e)
    {
        if (!(e instanceof Dg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser().item;
        if (!t)
            return;
        const r = new w(t.x, t.y, t.z),
            i = new w(t.direction);
        this._roomCreator.updateRoomObjectFloor(this._currentRoomId, t.itemId, r, i, t.data.state, t.data, t.extra),
        this._roomCreator.updateRoomObjectFloorHeight(this._currentRoomId, t.itemId, t.stackHeight),
        this._roomCreator.updateRoomObjectFloorExpiration(this._currentRoomId, t.itemId, t.expires)
    }
    onFurnitureWallAddEvent(e)
    {
        if (!(e instanceof wg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser().item;
        t && this.addRoomObjectFurnitureWall(this._currentRoomId, t)
    }
    onFurnitureWallEvent(e)
    {
        if (!(e instanceof Fg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = t.items.length;
        let i = 0;
        for (; i < r;) {
            const n = t.items[i];
            n && this.addRoomObjectFurnitureWall(this._currentRoomId, n),
            i++
        }
    }
    onFurnitureWallRemoveEvent(e)
    {
        if (!(e instanceof xg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        t && this._roomCreator.removeRoomObjectWall(this._currentRoomId, t.itemId, t.userId)
    }
    onFurnitureWallUpdateEvent(e)
    {
        if (!(e instanceof Gg) || !e.connection || !this._roomCreator)
            return;
        const t = this._roomCreator.getLegacyWallGeometry(this._currentRoomId);
        if (!t)
            return;
        const r = e.getParser().item;
        if (!r)
            return;
        const i = t.getLocation(r.width, r.height, r.localX, r.localY, r.direction),
            n = new w(t.getDirection(r.direction));
        this._roomCreator.updateRoomObjectWall(this._currentRoomId, r.itemId, i, n, r.state, r.stuffData),
        this._roomCreator.updateRoomObjectWallExpiration(this._currentRoomId, r.itemId, r.secondsToExpiration)
    }
    onFurnitureDataEvent(e)
    {
        if (!(e instanceof Pg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        this._roomCreator.updateRoomObjectFloor(this._currentRoomId, t.furnitureId, null, null, t.objectData.state, t.objectData)
    }
    onItemDataUpdateMessageEvent(e)
    {
        if (!(e instanceof Lg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        this._roomCreator.updateRoomObjectWallItemData(this._currentRoomId, t.furnitureId, t.data)
    }
    onOneWayDoorStatusMessageEvent(e)
    {
        if (!(e instanceof Ug) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        this._roomCreator.updateRoomObjectFloor(this._currentRoomId, t.itemId, null, null, t.state, new Lr)
    }
    onDiceValueMessageEvent(e)
    {
        if (!(e instanceof Ng) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        this._roomCreator.updateRoomObjectFloor(this._currentRoomId, t.itemId, null, null, t.value, new Lr)
    }
    onRoomUnitDanceEvent(e)
    {
        !(e instanceof Yh) || !e.connection || !this._roomCreator || this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, e.getParser().unitId, C.FIGURE_DANCE, e.getParser().danceId)
    }
    onRoomUnitEffectEvent(e)
    {
        !(e instanceof jg) || !e.connection || !this._roomCreator || this._roomCreator.updateRoomObjectUserEffect(this._currentRoomId, e.getParser().unitId, e.getParser().effectId, e.getParser().delay)
    }
    onRoomUnitEvent(e)
    {
        if (!(e instanceof zh) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser().users;
        if (!(!t || !t.length)) {
            for (const r of t) {
                if (!r)
                    continue;
                const i = new w(r.x, r.y, r.z),
                    n = new w(r.dir);
                this._roomCreator.addRoomObjectUser(this._currentRoomId, r.roomIndex, i, n, r.dir, r.userType, r.figure),
                r.webID === this._ownUserId && (this._roomCreator.setRoomSessionOwnUser(this._currentRoomId, r.roomIndex), this._roomCreator.updateRoomObjectUserOwn(this._currentRoomId, r.roomIndex)),
                this._roomCreator.updateRoomObjectUserFigure(this._currentRoomId, r.roomIndex, r.figure, r.sex, r.subType, r.isRiding),
                it.getTypeString(r.userType) === it.PET && this._roomCreator.getPetTypeId(r.figure) === Le.MONSTERPLANT && this._roomCreator.updateRoomObjectUserPosture(this._currentRoomId, r.roomIndex, r.petPosture),
                this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, r.roomIndex, C.FIGURE_IS_MUTED, this._roomCreator.sessionDataManager.isUserIgnored(r.name) ? 1 : 0)
            }
            this.updateGuideMarker()
        }
    }
    onRoomUnitExpressionEvent(e)
    {
        !(e instanceof Wg) || !e.connection || !this._roomCreator || this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, e.getParser().unitId, C.FIGURE_EXPRESSION, e.getParser().expression)
    }
    onRoomUnitHandItemEvent(e)
    {
        !(e instanceof Yg) || !e.connection || !this._roomCreator || this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, e.getParser().unitId, C.FIGURE_CARRY_OBJECT, e.getParser().handId)
    }
    onRoomUnitIdleEvent(e)
    {
        !(e instanceof zg) || !e.connection || !this._roomCreator || this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, e.getParser().unitId, C.FIGURE_SLEEP, e.getParser().isIdle ? 1 : 0)
    }
    onRoomUnitInfoEvent(e)
    {
        !(e instanceof Kh) || !e.connection || !this._roomCreator || this._roomCreator.updateRoomObjectUserFigure(this._currentRoomId, e.getParser().unitId, e.getParser().figure, e.getParser().gender)
    }
    onRoomUnitNumberEvent(e)
    {
        if (!(e instanceof Kg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        t && this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, t.unitId, C.FIGURE_NUMBER_VALUE, t.value)
    }
    onRoomUnitRemoveEvent(e)
    {
        !(e instanceof qh) || !e.connection || !this._roomCreator || (this._roomCreator.removeRoomObjectUser(this._currentRoomId, e.getParser().unitId), this.updateGuideMarker())
    }
    onRoomUnitStatusEvent(e)
    {
        if (!(e instanceof qg) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser().statuses;
        if (!t || !t.length)
            return;
        const r = this._roomCreator.getRoomInstance(this._currentRoomId);
        if (!r)
            return;
        const i = r.model.getValue(Nt.ROOM_Z_SCALE) || 1;
        for (const n of t) {
            if (!n)
                continue;
            let o = n.height;
            o && (o = o / i);
            const l = new w(n.x, n.y, n.z + o),
                c = new w(n.direction);
            let u = null;
            n.didMove && (u = new w(n.targetX, n.targetY, n.targetZ)),
            this._roomCreator.updateRoomObjectUserLocation(this._currentRoomId, n.id, l, u, n.canStandUp, o, c, n.headDirection),
            this._roomCreator.updateRoomObjectUserFlatControl(this._currentRoomId, n.id, null);
            let h = !0,
                d = !1,
                m = C.STD,
                p = "";
            if (n.actions && n.actions.length) {
                for (const E of n.actions)
                    if (E)
                        switch (E.action) {
                        case "flatctrl":
                            this._roomCreator.updateRoomObjectUserFlatControl(this._currentRoomId, n.id, E.value);
                            break;
                        case "sign":
                            n.actions.length === 1 && (h = !1),
                            this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, n.id, C.FIGURE_SIGN, parseInt(E.value));
                            break;
                        case "gst":
                            n.actions.length === 1 && (h = !1),
                            this._roomCreator.updateRoomObjectUserPetGesture(this._currentRoomId, n.id, E.value);
                            break;
                        case "wav":
                        case "mv":
                            d = !0,
                            m = E.action,
                            p = E.value;
                            break;
                        case "trd":
                            break;
                        default:
                            d = !0,
                            m = E.action,
                            p = E.value;
                            break
                        }
            }
            d ? this._roomCreator.updateRoomObjectUserPosture(this._currentRoomId, n.id, m, p) : h && this._roomCreator.updateRoomObjectUserPosture(this._currentRoomId, n.id, C.STD, "")
        }
        this.updateGuideMarker()
    }
    onRoomUnitChatEvent(e)
    {
        if (!e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        t && (this._roomCreator.updateRoomObjectUserGesture(this._currentRoomId, t.roomIndex, t.gesture), this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, t.roomIndex, C.FIGURE_TALK, t.message.length / 10))
    }
    onRoomUnitTypingEvent(e)
    {
        !(e instanceof Hg) || !e.connection || !this._roomCreator || this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, e.getParser().unitId, C.FIGURE_IS_TYPING, e.getParser().isTyping ? 1 : 0)
    }
    onPetFigureUpdateEvent(e)
    {
        if (!(e instanceof Hh) || !e.connection || !this._roomCreator)
            return;
        const t = e.getParser();
        t && this._roomCreator.updateRoomObjectUserFigure(this._currentRoomId, t.roomIndex, t.figureData.figuredata, "", "", t.isRiding)
    }
    onPetExperienceEvent(e)
    {
        const t = e.getParser();
        t && this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, t.roomIndex, C.FIGURE_GAINED_EXPERIENCE, t.gainedExperience)
    }
    onYouArePlayingGameEvent(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        t && this._roomCreator.setRoomEngineGameMode(this._currentRoomId, t.isPlaying)
    }
    addRoomObjectFurnitureFloor(e, t)
    {
        if (!t || !this._roomCreator)
            return;
        const r = new w(t.x, t.y, t.z),
            i = new w(t.direction);
        t.spriteName ? this._roomCreator.addFurnitureFloorByTypeName(e, t.itemId, t.spriteName, r, i, t.state, t.data, t.extra, t.expires, t.usagePolicy, t.userId, t.username, !0, !0, t.stackHeight) : this._roomCreator.addFurnitureFloor(e, t.itemId, t.spriteId, r, i, t.state, t.data, t.extra, t.expires, t.usagePolicy, t.userId, t.username, !0, !0, t.stackHeight)
    }
    addRoomObjectFurnitureWall(e, t)
    {
        if (!t || !this._roomCreator)
            return;
        const r = this._roomCreator.getLegacyWallGeometry(e);
        if (!r)
            return;
        let i = null;
        t.isOldFormat || (i = r.getLocation(t.width, t.height, t.localX, t.localY, t.direction));
        const n = new w(r.getDirection(t.direction));
        this._roomCreator.addFurnitureWall(e, t.itemId, t.spriteId, i, n, t.state, t.stuffData, t.secondsToExpiration, t.usagePolicy, t.userId, t.username)
    }
    onIgnoreResultEvent(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this._roomCreator.roomSessionManager.getSession(this._currentRoomId);
        if (!r)
            return;
        const i = r.userDataManager.getUserDataByName(t.name);
        if (i)
            switch (t.result) {
            case 1:
            case 2:
                this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, i.roomIndex, C.FIGURE_IS_MUTED, 1);
                return;
            case 3:
                this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, i.roomIndex, C.FIGURE_IS_MUTED, 0);
                return
            }
    }
    onGuideSessionStartedMessageEvent(e)
    {
        const t = e.getParser();
        this._guideId = t.guideUserId,
        this._requesterId = t.requesterUserId,
        this.updateGuideMarker()
    }
    onGuideSessionEndedMessageEvent(e)
    {
        this.removeGuideMarker()
    }
    onGuideSessionErrorMessageEvent(e)
    {
        this.removeGuideMarker()
    }
    updateGuideMarker()
    {
        const e = this._roomCreator.sessionDataManager.userId;
        this.setUserGuideStatus(this._guideId, this._requesterId === e ? zi.GUIDE : zi.NONE),
        this.setUserGuideStatus(this._requesterId, this._guideId === e ? zi.REQUESTER : zi.NONE)
    }
    removeGuideMarker()
    {
        this.setUserGuideStatus(this._guideId, zi.NONE),
        this.setUserGuideStatus(this._requesterId, zi.NONE),
        this._guideId = -1,
        this._requesterId = -1
    }
    setUserGuideStatus(e, t)
    {
        if (!this._roomCreator || !this._roomCreator.roomSessionManager)
            return;
        const r = this._roomCreator.roomSessionManager.getSession(this._currentRoomId);
        if (!r)
            return;
        const i = r.userDataManager.getDataByType(e, yt.USER);
        i && this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, i.roomIndex, C.FIGURE_GUIDE_STATUS, t)
    }
    get currentRoomId()
    {
        return this._currentRoomId
    }
}
class O3 extends ei {
    constructor(e)
    {
        super(),
        this._roomEngine = e,
        this._eventIds = new Map,
        this._selectedAvatarId = -1,
        this._selectedObjectId = -1,
        this._selectedObjectCategory = -2,
        this._whereYouClickIsWhereYouGo = !0,
        this._objectPlacementSource = null,
        this.onRoomEngineObjectEvent = this.onRoomEngineObjectEvent.bind(this),
        this._roomEngine.events.addEventListener(de.ADDED, this.onRoomEngineObjectEvent)
    }
    dispose()
    {
        this._eventIds && (this._eventIds = null),
        this._roomEngine.events.removeEventListener(de.ADDED, this.onRoomEngineObjectEvent),
        this._roomEngine = null
    }
    onRoomEngineObjectEvent(e)
    {
        let t = this.getSelectedRoomObjectData(e.roomId);
        if (t && t.operation === Ne.OBJECT_PLACE && t.id === e.objectId) {
            const r = this._roomEngine.getRoomObject(e.roomId, t.id, t.category);
            if (r && r.model && t.category === V.FLOOR) {
                const i = r.model.getValue(C.FURNITURE_ALLOWED_DIRECTIONS);
                if (i && i.length) {
                    const n = new w(i[0]);
                    if (r.setDirection(n), this.updateSelectedObjectData(e.roomId, t.id, t.category, t.loc, n, t.operation, t.typeId, t.instanceData, t.stuffData, t.state, t.animFrame, t.posture), t = this.getSelectedRoomObjectData(e.roomId), !t)
                        return
                }
            }
            this.setFurnitureAlphaMultiplier(r, .5)
        }
    }
    processRoomCanvasMouseEvent(e, t, r)
    {
        if (!e || !t || xs.isRunning())
            return;
        const i = t.type;
        let n = this._roomEngine.getRoomObjectCategoryForType(i);
        if (n !== V.ROOM && (!this._roomEngine.isPlayingGame() || n !== V.UNIT) && (n = V.MINIMUM), this.getMouseEventId(n, e.type) === e.eventId) {
            if (e.type === le.MOUSE_CLICK || e.type === le.DOUBLE_CLICK || e.type === le.MOUSE_DOWN || e.type === le.MOUSE_UP || e.type === le.MOUSE_MOVE)
                return
        } else
            e.eventId && this.setMouseEventId(n, e.type, e.eventId);
        t.mouseHandler && t.mouseHandler.mouseEvent(e, r)
    }
    processRoomObjectPlacement(e, t, r, i, n, o=null, l=null, c=-1, u=-1, h=null)
    {
        this._objectPlacementSource = e;
        const d = new w(-100, -100),
            m = new w(0);
        return this.setSelectedRoomObjectData(t, r, i, d, m, Ne.OBJECT_PLACE, n, o, l, c, u, h), this._roomEngine && (this._roomEngine.setObjectMoverIconSprite(n, i, !1, o, l, c, u, h), this._roomEngine.setObjectMoverIconSpriteVisible(!1)), !0
    }
    cancelRoomObjectInsert(e)
    {
        return this.resetSelectedObjectData(e), !0
    }
    getMouseEventId(e, t)
    {
        const r = this._eventIds.get(e);
        return r && r.get(t) || null
    }
    setMouseEventId(e, t, r)
    {
        let i = this._eventIds.get(e);
        i || (i = new Map, this._eventIds.set(e, i)),
        i.delete(t),
        i.set(t, r)
    }
    handleRoomObjectEvent(e, t)
    {
        if (e) {
            if (e instanceof De) {
                this.handleRoomObjectMouseEvent(e, t);
                return
            }
            switch (e.type) {
            case ht.STATE_CHANGE:
            case ht.STATE_RANDOM:
                this.onRoomObjectStateChangedEvent(e, t);
                return;
            case bl.DIMMER_STATE:
                this.onRoomObjectDimmerStateUpdateEvent(e, t);
                return;
            case pr.POSITION_CHANGED:
            case pr.OBJECT_REMOVED:
                this.handleSelectedObjectRemove(e, t);
                return;
            case Y.OPEN_WIDGET:
            case Y.CLOSE_WIDGET:
            case Y.OPEN_FURNI_CONTEXT_MENU:
            case Y.CLOSE_FURNI_CONTEXT_MENU:
            case Y.PLACEHOLDER:
            case Y.CREDITFURNI:
            case Y.STACK_HEIGHT:
            case Y.EXTERNAL_IMAGE:
            case Y.STICKIE:
            case Y.PRESENT:
            case Y.TROPHY:
            case Y.TEASER:
            case Y.ECOTRONBOX:
            case Y.DIMMER:
            case Y.WIDGET_REMOVE_DIMMER:
            case Y.CLOTHING_CHANGE:
            case Y.JUKEBOX_PLAYLIST_EDITOR:
            case Y.MANNEQUIN:
            case Y.PET_PRODUCT_MENU:
            case Y.GUILD_FURNI_CONTEXT_MENU:
            case Y.MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG:
            case Y.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG:
            case Y.BACKGROUND_COLOR:
            case Y.MYSTERYBOX_OPEN_DIALOG:
            case Y.EFFECTBOX_OPEN_DIALOG:
            case Y.MYSTERYTROPHY_OPEN_DIALOG:
            case Y.ACHIEVEMENT_RESOLUTION_OPEN:
            case Y.ACHIEVEMENT_RESOLUTION_ENGRAVING:
            case Y.ACHIEVEMENT_RESOLUTION_FAILED:
            case Y.FRIEND_FURNITURE_CONFIRM:
            case Y.FRIEND_FURNITURE_ENGRAVING:
            case Y.BADGE_DISPLAY_ENGRAVING:
            case Y.HIGH_SCORE_DISPLAY:
            case Y.HIDE_HIGH_SCORE_DISPLAY:
            case Y.INERNAL_LINK:
            case Y.ROOM_LINK:
            case Y.YOUTUBE:
                this.onRoomObjectWidgetRequestEvent(e, t);
                return;
            case ce.DICE_ACTIVATE:
            case ce.DICE_OFF:
            case ce.USE_HABBOWHEEL:
            case ce.STICKIE:
            case ce.ENTER_ONEWAYDOOR:
                this.onRoomObjectFurnitureActionEvent(e, t);
                return;
            case ce.SOUND_MACHINE_INIT:
            case ce.SOUND_MACHINE_START:
            case ce.SOUND_MACHINE_STOP:
            case ce.SOUND_MACHINE_DISPOSE:
                this.handleObjectSoundMachineEvent(e, t);
                return;
            case ce.JUKEBOX_INIT:
            case ce.JUKEBOX_START:
            case ce.JUKEBOX_MACHINE_STOP:
            case ce.JUKEBOX_DISPOSE:
                this.handleObjectJukeboxEvent(e, t);
                return;
            case fr.ADD_HOLE:
            case fr.REMOVE_HOLE:
                this.onRoomObjectFloorHoleEvent(e, t);
                return;
            case kt.ROOM_AD_FURNI_CLICK:
            case kt.ROOM_AD_FURNI_DOUBLE_CLICK:
            case kt.ROOM_AD_TOOLTIP_SHOW:
            case kt.ROOM_AD_TOOLTIP_HIDE:
            case kt.ROOM_AD_LOAD_IMAGE:
                this.onRoomObjectRoomAdEvent(e, t);
                return;
            case Sn.LOAD_BADGE:
                this.onRoomObjectBadgeAssetEvent(e, t);
                return;
            case ce.MOUSE_ARROW:
            case ce.MOUSE_BUTTON:
                this.handleMousePointer(e, t);
                return;
            case Jn.PLAY_SOUND:
            case Jn.PLAY_SOUND_AT_PITCH:
                this.handleRoomObjectPlaySoundEvent(e, t);
                return;
            case Es.ROOM_OBJECT_INITIALIZED:
            case Es.ROOM_OBJECT_DISPOSED:
            case Es.PLAY_SAMPLE:
            case Es.CHANGE_PITCH:
                this.handleRoomObjectSamplePlaybackEvent(e, t);
                return;
            case Ma.ROOM_BACKGROUND_COLOR:
                this.onHSLColorEnableEvent(e, t);
                return;
            case vi.RODRE_CURRENT_USER_ID:
            case vi.RODRE_URL_PREFIX:
                this.onRoomObjectDataRequestEvent(e, t);
                return;
            default:
                pe.warn("Unhandled Event", e.constructor.name, "Object ID", e.object.id);
                return
            }
        }
    }
    handleRoomObjectMouseEvent(e, t)
    {
        if (!(!e || !e.type))
            switch (e.type) {
            case De.CLICK:
                this.handleRoomObjectMouseClickEvent(e, t);
                return;
            case De.DOUBLE_CLICK:
                this.handleRoomObjectMouseDoubleClickEvent(e, t);
                return;
            case De.MOUSE_MOVE:
                this.handleRoomObjectMouseMoveEvent(e, t);
                return;
            case De.MOUSE_DOWN:
                this.handleRoomObjectMouseDownEvent(e, t);
                return;
            case De.MOUSE_DOWN_LONG:
                this.handleRoomObjectMouseDownLongEvent(e, t);
                return;
            case De.MOUSE_ENTER:
                this.handleRoomObjectMouseEnterEvent(e, t);
                return;
            case De.MOUSE_LEAVE:
                this.handleRoomObjectMouseLeaveEvent(e, t);
                return
            }
    }
    handleRoomObjectMouseClickEvent(e, t)
    {
        if (!e)
            return;
        let r = Ne.OBJECT_UNDEFINED;
        const i = this.getSelectedRoomObjectData(t);
        i && (r = i.operation);
        let n = !1,
            o = !1;
        this._whereYouClickIsWhereYouGo && (!r || r === Ne.OBJECT_UNDEFINED) && (n = this.handleMoveTargetFurni(t, e));
        const l = this._roomEngine.getRoomObjectCategoryForType(e.objectType);
        switch (r) {
        case Ne.OBJECT_MOVE:
            l === V.ROOM ? i && this.modifyRoomObject(t, i.id, i.category, Ne.OBJECT_MOVE_TO) : l === V.UNIT && (i && e.objectType === it.MONSTER_PLANT && this.modifyRoomObject(t, i.id, i.category, Ne.OBJECT_MOVE_TO), e.eventId && this.setMouseEventId(V.ROOM, le.MOUSE_CLICK, e.eventId), this.placeObjectOnUser(t, e.objectId, l)),
            o = !0,
            e.objectId !== -1 && this.setSelectedObject(t, e.objectId, l);
            break;
        case Ne.OBJECT_PLACE:
            if (l === V.ROOM)
                this.placeObject(t, e instanceof wn, e instanceof nl);
            else if (l === V.UNIT)
                switch (e.objectType) {
                case it.MONSTER_PLANT:
                case it.RENTABLE_BOT:
                    this.placeObject(t, e instanceof wn, e instanceof nl);
                    break;
                default:
                    e.eventId && this.setMouseEventId(V.ROOM, le.MOUSE_CLICK, e.eventId),
                    this.placeObjectOnUser(t, e.objectId, l);
                    break
                }
            break;
        case Ne.OBJECT_UNDEFINED:
            l === V.ROOM ? !n && e instanceof wn && this.onRoomObjectTileMouseEvent(t, e) : (this.setSelectedObject(t, e.objectId, l), o = !1, l === V.UNIT ? (e.ctrlKey && !e.altKey && !e.shiftKey && e.objectType === it.RENTABLE_BOT ? this.modifyRoomObject(t, e.objectId, l, Ne.OBJECT_PICKUP_BOT) : e.ctrlKey && !e.altKey && !e.shiftKey && e.objectType === it.MONSTER_PLANT ? this.modifyRoomObject(t, e.objectId, l, Ne.OBJECT_PICKUP_PET) : !e.ctrlKey && !e.altKey && e.shiftKey && e.objectType === it.MONSTER_PLANT && this.modifyRoomObject(t, e.objectId, l, Ne.OBJECT_ROTATE_POSITIVE), this._roomEngine.isPlayingGame() ? o = !0 : n = !0) : (l === V.FLOOR || l === V.WALL) && (e.altKey || e.ctrlKey || e.shiftKey) && (!e.ctrlKey && !e.altKey && e.shiftKey ? l === V.FLOOR && this._roomEngine.events && this._roomEngine.events.dispatchEvent(new de(de.REQUEST_ROTATE, t, e.objectId, l)) : e.ctrlKey && !e.altKey && !e.shiftKey && this.modifyRoomObject(t, e.objectId, l, Ne.OBJECT_PICKUP), this._roomEngine.isPlayingGame() ? o = !0 : n = !0), e.eventId && (n && this.setMouseEventId(V.ROOM, le.MOUSE_CLICK, e.eventId), o && this.setMouseEventId(V.MINIMUM, le.MOUSE_CLICK, e.eventId)));
            break
        }
        if (l === V.ROOM) {
            const c = this.getMouseEventId(V.MINIMUM, le.MOUSE_CLICK),
                u = this.getMouseEventId(V.UNIT, le.MOUSE_CLICK);
            c !== e.eventId && u !== e.eventId && !o && (this.deselectObject(t), this._roomEngine.events && this._roomEngine.events.dispatchEvent(new de(de.DESELECTED, t, -1, V.MINIMUM)), this.setSelectedAvatar(t, 0, !1))
        }
    }
    handleRoomObjectMouseDoubleClickEvent(e, t)
    {
        const r = e.objectId,
            i = e.objectType,
            n = this._roomEngine.getRoomObjectCategoryForType(i);
        this._roomEngine.events && this._roomEngine.events.dispatchEvent(new de(de.DOUBLE_CLICK, t, r, n))
    }
    handleRoomObjectMouseMoveEvent(e, t)
    {
        if (!e)
            return;
        let r = Ne.OBJECT_UNDEFINED;
        const i = this.getSelectedRoomObjectData(t);
        i && (r = i.operation);
        const n = this._roomEngine.getRoomObjectCategoryForType(e.objectType);
        if (this._roomEngine) {
            const o = this._roomEngine.getRoomObjectCursor(t);
            if (o && o.logic) {
                let l = null;
                e instanceof wn ? l = this.handleMouseOverTile(e, t) : e.object && e.object.id !== -1 ? this._whereYouClickIsWhereYouGo && (l = this.handleMouseOverObject(n, t, e)) : l = new ol(null, 0, !1, e.eventId),
                o.processUpdateMessage(l)
            }
        }
        switch (r) {
        case Ne.OBJECT_MOVE:
            n === V.ROOM && this.handleObjectMove(e, t);
            return;
        case Ne.OBJECT_PLACE:
            n === V.ROOM && this.handleObjectPlace(e, t);
            return
        }
    }
    handleRoomObjectMouseDownEvent(e, t)
    {
        if (!e)
            return;
        let r = Ne.OBJECT_UNDEFINED;
        const i = this.getSelectedRoomObjectData(t);
        i && (r = i.operation);
        const n = this._roomEngine.getRoomObjectCategoryForType(e.objectType);
        switch (r) {
        case Ne.OBJECT_UNDEFINED:
            (n === V.FLOOR || n === V.WALL || e.objectType === it.MONSTER_PLANT) && (e.altKey && !e.ctrlKey && !e.shiftKey || this.decorateModeMove(e)) && this._roomEngine.events && this._roomEngine.events.dispatchEvent(new de(de.REQUEST_MOVE, t, e.objectId, n));
            return
        }
    }
    handleRoomObjectMouseDownLongEvent(e, t)
    {
        if (!e)
            return;
        let r = Ne.OBJECT_UNDEFINED;
        const i = this.getSelectedRoomObjectData(t);
        i && (r = i.operation);
        const n = this._roomEngine.getRoomObjectCategoryForType(e.objectType);
        switch (r) {
        case Ne.OBJECT_UNDEFINED:
            (n === V.FLOOR || n === V.WALL || e.objectType === it.MONSTER_PLANT) && (!e.ctrlKey && !e.shiftKey || this.decorateModeMove(e)) && this._roomEngine.events && this._roomEngine.events.dispatchEvent(new de(de.REQUEST_MANIPULATION, t, e.objectId, n));
            return
        }
    }
    handleRoomObjectMouseEnterEvent(e, t)
    {
        const r = e.objectId,
            i = e.objectType,
            n = this._roomEngine.getRoomObjectCategoryForType(i);
        this._roomEngine.events && this._roomEngine.events.dispatchEvent(new de(de.MOUSE_ENTER, t, r, n))
    }
    handleRoomObjectMouseLeaveEvent(e, t)
    {
        const r = e.objectId,
            i = e.objectType,
            n = this._roomEngine.getRoomObjectCategoryForType(i);
        if (n !== V.ROOM && n === V.UNIT) {
            const o = this._roomEngine.getRoomObjectCursor(t);
            o && o.processUpdateMessage(new Gt(0, null))
        }
        this._roomEngine.events && this._roomEngine.events.dispatchEvent(new de(de.MOUSE_LEAVE, t, r, n))
    }
    onRoomObjectStateChangedEvent(e, t)
    {
        if (e)
            switch (e.type) {
            case ht.STATE_CHANGE:
                this.changeObjectState(t, e.object.id, e.object.type, e.state, !1);
                return;
            case ht.STATE_RANDOM:
                this.changeObjectState(t, e.object.id, e.object.type, e.state, !0);
                return
            }
    }
    onRoomObjectDimmerStateUpdateEvent(e, t)
    {
        if (e)
            switch (e.type) {
            case bl.DIMMER_STATE:
                this._roomEngine.events.dispatchEvent(new Qf(t, e.state, e.presetId, e.effectId, e.color, e.brightness));
                return
            }
    }
    handleSelectedObjectRemove(e, t)
    {
        if (!(!e || !this._roomEngine))
            switch (e.type) {
            case pr.POSITION_CHANGED:
                {
                    const r = e.objectId,
                        i = e.objectType,
                        n = this._roomEngine.getRoomObjectCategoryForType(i),
                        o = this._roomEngine.getRoomObject(t, r, n),
                        l = this._roomEngine.getRoomObjectSelectionArrow(t);
                    if (o && l && l.logic) {
                        const c = o.getLocation();
                        l.logic.processUpdateMessage(new Bs(c, null))
                    }
                    return
                }case pr.OBJECT_REMOVED:
                this.setSelectedAvatar(t, 0, !1);
                return
            }
    }
    onRoomObjectWidgetRequestEvent(e, t)
    {
        if (!e || !this._roomEngine)
            return;
        const r = e.objectId,
            i = e.objectType,
            n = this._roomEngine.getRoomObjectCategoryForType(i),
            o = this._roomEngine.events;
        if (o && !On.isRoomPreviewerId(t))
            switch (e.type) {
            case Y.OPEN_WIDGET:
                o.dispatchEvent(new ee(ee.OPEN_WIDGET, t, r, n, e.object.logic.widget));
                return;
            case Y.CLOSE_WIDGET:
                o.dispatchEvent(new ee(ee.CLOSE_WIDGET, t, r, n, e.object.logic.widget));
                return;
            case Y.OPEN_FURNI_CONTEXT_MENU:
                o.dispatchEvent(new ee(ee.OPEN_FURNI_CONTEXT_MENU, t, r, n, e.object.logic.contextMenu));
                return;
            case Y.CLOSE_FURNI_CONTEXT_MENU:
                o.dispatchEvent(new ee(ee.CLOSE_FURNI_CONTEXT_MENU, t, r, n));
                return;
            case Y.PLACEHOLDER:
                o.dispatchEvent(new ee(ee.REQUEST_PLACEHOLDER, t, r, n));
                return;
            case Y.CREDITFURNI:
                o.dispatchEvent(new ee(ee.REQUEST_CREDITFURNI, t, r, n));
                return;
            case Y.STACK_HEIGHT:
                o.dispatchEvent(new ee(ee.REQUEST_STACK_HEIGHT, t, r, n));
                return;
            case Y.EXTERNAL_IMAGE:
                o.dispatchEvent(new ee(ee.REQUEST_EXTERNAL_IMAGE, t, r, n));
                return;
            case Y.STICKIE:
                o.dispatchEvent(new ee(ee.REQUEST_STICKIE, t, r, n));
                return;
            case Y.PRESENT:
                o.dispatchEvent(new ee(ee.REQUEST_PRESENT, t, r, n));
                return;
            case Y.TROPHY:
                o.dispatchEvent(new ee(ee.REQUEST_TROPHY, t, r, n));
                return;
            case Y.TEASER:
                o.dispatchEvent(new ee(ee.REQUEST_TEASER, t, r, n));
                return;
            case Y.ECOTRONBOX:
                o.dispatchEvent(new ee(ee.REQUEST_ECOTRONBOX, t, r, n));
                return;
            case Y.DIMMER:
                o.dispatchEvent(new ee(ee.REQUEST_DIMMER, t, r, n));
                return;
            case Y.WIDGET_REMOVE_DIMMER:
                o.dispatchEvent(new ee(ee.REMOVE_DIMMER, t, r, n));
                return;
            case Y.CLOTHING_CHANGE:
                o.dispatchEvent(new ee(ee.REQUEST_CLOTHING_CHANGE, t, r, n));
                return;
            case Y.JUKEBOX_PLAYLIST_EDITOR:
                o.dispatchEvent(new ee(ee.REQUEST_PLAYLIST_EDITOR, t, r, n));
                return;
            case Y.MANNEQUIN:
                o.dispatchEvent(new ee(ee.REQUEST_MANNEQUIN, t, r, n));
                return;
            case Y.PET_PRODUCT_MENU:
                o.dispatchEvent(new Ul(Ul.USE_PRODUCT_FROM_ROOM, t, r, n));
                return;
            case Y.GUILD_FURNI_CONTEXT_MENU:
                this._roomEngine.connection.send(new nb(e.objectId, e.object.model.getValue(C.FURNITURE_GUILD_CUSTOMIZED_GUILD_ID)));
                return;
            case Y.MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG:
                o.dispatchEvent(new ee(ee.REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG, t, r, n));
                return;
            case Y.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG:
                o.dispatchEvent(new ee(ee.REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG, t, r, n));
                return;
            case Y.BACKGROUND_COLOR:
                o.dispatchEvent(new ee(ee.REQUEST_BACKGROUND_COLOR, t, r, n));
                return;
            case Y.MYSTERYBOX_OPEN_DIALOG:
                o.dispatchEvent(new ee(ee.REQUEST_MYSTERYBOX_OPEN_DIALOG, t, r, n));
                return;
            case Y.EFFECTBOX_OPEN_DIALOG:
                o.dispatchEvent(new ee(ee.REQUEST_EFFECTBOX_OPEN_DIALOG, t, r, n));
                return;
            case Y.MYSTERYTROPHY_OPEN_DIALOG:
                o.dispatchEvent(new ee(ee.REQUEST_MYSTERYTROPHY_OPEN_DIALOG, t, r, n));
                return;
            case Y.ACHIEVEMENT_RESOLUTION_OPEN:
                this._roomEngine.connection.send(new xN(e.objectId, 0));
                return;
            case Y.ACHIEVEMENT_RESOLUTION_ENGRAVING:
                o.dispatchEvent(new ee(ee.REQUEST_ACHIEVEMENT_RESOLUTION_ENGRAVING, t, r, n));
                return;
            case Y.ACHIEVEMENT_RESOLUTION_FAILED:
                o.dispatchEvent(new ee(ee.REQUEST_ACHIEVEMENT_RESOLUTION_FAILED, t, r, n));
                return;
            case Y.FRIEND_FURNITURE_CONFIRM:
                o.dispatchEvent(new ee(ee.REQUEST_FRIEND_FURNITURE_CONFIRM, t, r, n));
                return;
            case Y.FRIEND_FURNITURE_ENGRAVING:
                o.dispatchEvent(new ee(ee.REQUEST_FRIEND_FURNITURE_ENGRAVING, t, r, n));
                return;
            case Y.BADGE_DISPLAY_ENGRAVING:
                o.dispatchEvent(new ee(ee.REQUEST_BADGE_DISPLAY_ENGRAVING, t, r, n));
                return;
            case Y.HIGH_SCORE_DISPLAY:
                o.dispatchEvent(new ee(ee.REQUEST_HIGH_SCORE_DISPLAY, t, r, n));
                return;
            case Y.HIDE_HIGH_SCORE_DISPLAY:
                o.dispatchEvent(new ee(ee.REQUEST_HIDE_HIGH_SCORE_DISPLAY, t, r, n));
                return;
            case Y.INERNAL_LINK:
                o.dispatchEvent(new ee(ee.REQUEST_INTERNAL_LINK, t, r, n));
                return;
            case Y.ROOM_LINK:
                o.dispatchEvent(new ee(ee.REQUEST_ROOM_LINK, t, r, n));
                return;
            case Y.YOUTUBE:
                o.dispatchEvent(new ee(ee.REQUEST_YOUTUBE, t, r, n));
                return
            }
    }
    onRoomObjectFurnitureActionEvent(e, t)
    {
        e && this.useObject(t, e.object.id, e.object.type, e.type)
    }
    handleObjectSoundMachineEvent(e, t)
    {
        if (!e)
            return;
        const r = this._roomEngine.getRoomObjectCategoryForType(e.objectType),
            i = this.getSelectedRoomObjectData(t);
        if (!(i && i.category === r && i.id === e.objectId && i.operation === Ne.OBJECT_PLACE))
            switch (e.type) {
            case ce.SOUND_MACHINE_INIT:
                this._roomEngine.events.dispatchEvent(new wt(wt.SOUND_MACHINE_INIT, t, e.objectId, r));
                return;
            case ce.SOUND_MACHINE_START:
                this._roomEngine.events.dispatchEvent(new wt(wt.SOUND_MACHINE_SWITCHED_ON, t, e.objectId, r));
                return;
            case ce.SOUND_MACHINE_STOP:
                this._roomEngine.events.dispatchEvent(new wt(wt.SOUND_MACHINE_SWITCHED_OFF, t, e.objectId, r));
                return;
            case ce.SOUND_MACHINE_DISPOSE:
                this._roomEngine.events.dispatchEvent(new wt(wt.SOUND_MACHINE_DISPOSE, t, e.objectId, r));
                return
            }
    }
    handleObjectJukeboxEvent(e, t)
    {
        if (!e)
            return;
        const r = this._roomEngine.getRoomObjectCategoryForType(e.objectType),
            i = this.getSelectedRoomObjectData(t);
        if (!(i && i.category === r && i.id === e.objectId && i.operation === Ne.OBJECT_PLACE))
            switch (e.type) {
            case ce.JUKEBOX_INIT:
                this._roomEngine.events.dispatchEvent(new wt(wt.JUKEBOX_INIT, t, e.objectId, r));
                return;
            case ce.JUKEBOX_START:
                this._roomEngine.events.dispatchEvent(new wt(wt.JUKEBOX_SWITCHED_ON, t, e.objectId, r));
                return;
            case ce.JUKEBOX_MACHINE_STOP:
                this._roomEngine.events.dispatchEvent(new wt(wt.JUKEBOX_SWITCHED_OFF, t, e.objectId, r));
                return;
            case ce.JUKEBOX_DISPOSE:
                this._roomEngine.events.dispatchEvent(new wt(wt.JUKEBOX_DISPOSE, t, e.objectId, r));
                return
            }
    }
    onRoomObjectFloorHoleEvent(e, t)
    {
        if (e)
            switch (e.type) {
            case fr.ADD_HOLE:
                this._roomEngine.addRoomInstanceFloorHole(t, e.objectId);
                return;
            case fr.REMOVE_HOLE:
                this._roomEngine.removeRoomInstanceFloorHole(t, e.objectId);
                return
            }
    }
    onRoomObjectRoomAdEvent(e, t)
    {
        if (!e)
            return;
        let r = null;
        switch (e.type) {
        case kt.ROOM_AD_FURNI_CLICK:
            this._roomEngine.events.dispatchEvent(e),
            e.clickUrl && e.clickUrl.length > 0 && Ee.instance.createLinkEvent(e.clickUrl),
            r = Di.FURNI_CLICK;
            break;
        case kt.ROOM_AD_FURNI_DOUBLE_CLICK:
            if (e.clickUrl && e.clickUrl.length > 0) {
                const i = "CATALOG_PAGE";
                e.clickUrl.indexOf(i) === 0 && Ee.instance.createLinkEvent(e.clickUrl.substr(i.length))
            }
            r = Di.FURNI_DOUBLE_CLICK;
            break;
        case kt.ROOM_AD_TOOLTIP_SHOW:
            r = Di.TOOLTIP_SHOW;
            break;
        case kt.ROOM_AD_TOOLTIP_HIDE:
            r = Di.TOOLTIP_HIDE;
            break
        }
        r && this._roomEngine.events.dispatchEvent(new de(r, t, e.objectId, this._roomEngine.getRoomObjectCategoryForType(e.objectType)))
    }
    onRoomObjectBadgeAssetEvent(e, t)
    {
        if (!(!e || !this._roomEngine))
            switch (e.type) {
            case Sn.LOAD_BADGE:
                {
                    const r = e.objectId,
                        i = e.objectType,
                        n = this._roomEngine.getRoomObjectCategoryForType(i);
                    this._roomEngine.loadRoomObjectBadgeImage(t, r, n, e.badgeId, e.groupBadge);
                    return
                }
            }
    }
    handleMousePointer(e, t)
    {
        e && this._roomEngine.updateMousePointer(e.type, e.objectId, e.objectType)
    }
    handleRoomObjectPlaySoundEvent(e, t)
    {
        const r = this._roomEngine.getRoomObjectCategoryForType(e.objectType);
        switch (e.type) {
        case Jn.PLAY_SOUND:
            this._roomEngine.events.dispatchEvent(new Il(Il.PLAY_SOUND, t, e.objectId, r, e.soundId, e.pitch));
            return;
        case Jn.PLAY_SOUND_AT_PITCH:
            this._roomEngine.events.dispatchEvent(new Il(Il.PLAY_SOUND_AT_PITCH, t, e.objectId, r, e.soundId, e.pitch));
            return
        }
    }
    handleRoomObjectSamplePlaybackEvent(e, t)
    {
        if (!e)
            return;
        const r = this._roomEngine.getRoomObjectCategoryForType(e.objectType);
        switch (e.type) {
        case Es.ROOM_OBJECT_INITIALIZED:
            this._roomEngine.events.dispatchEvent(new Mr(Mr.ROOM_OBJECT_INITIALIZED, t, e.objectId, r, e.sampleId, e.pitch));
            break;
        case Es.ROOM_OBJECT_DISPOSED:
            this._roomEngine.events.dispatchEvent(new Mr(Mr.ROOM_OBJECT_DISPOSED, t, e.objectId, r, e.sampleId, e.pitch));
            break;
        case Es.PLAY_SAMPLE:
            this._roomEngine.events.dispatchEvent(new Mr(Mr.PLAY_SAMPLE, t, e.objectId, r, e.sampleId, e.pitch));
            break;
        case Es.CHANGE_PITCH:
            this._roomEngine.events.dispatchEvent(new Mr(Mr.CHANGE_PITCH, t, e.objectId, r, e.sampleId, e.pitch));
            break
        }
    }
    onHSLColorEnableEvent(e, t)
    {
        if (!(!e || !this._roomEngine))
            switch (e.type) {
            case Ma.ROOM_BACKGROUND_COLOR:
                this._roomEngine.events.dispatchEvent(new Mh(Mh.ROOM_BACKGROUND_COLOR, t, e.enable, e.hue, e.saturation, e.lightness));
                return
            }
    }
    onRoomObjectDataRequestEvent(e, t)
    {
        if (!(!e || !this._roomEngine || !e.object))
            switch (e.type) {
            case vi.RODRE_CURRENT_USER_ID:
                e.object.model.setValue(C.SESSION_CURRENT_USER_ID, this._roomEngine.sessionDataManager.userId);
                return;
            case vi.RODRE_URL_PREFIX:
                e.object.model.setValue(C.SESSION_URL_PREFIX, ye.getValue("url.prefix"));
                return
            }
    }
    onRoomObjectTileMouseEvent(e, t)
    {
        if (!this._roomEngine || this._roomEngine.isDecorating || !this._roomEngine.roomSessionManager)
            return;
        const r = this._roomEngine.roomSessionManager.getSession(e);
        !r || r.isSpectator || this.sendWalkUpdate(t.tileXAsInt, t.tileYAsInt)
    }
    handleObjectMove(e, t)
    {
        if (!e || !this._roomEngine || !this._roomEngine.events)
            return;
        const i = this.getSelectedRoomObjectData(t);
        if (!i)
            return;
        const n = this._roomEngine.getRoomObject(t, i.id, i.category);
        if (!n)
            return;
        let o = !0;
        if (i.category === V.FLOOR || i.category === V.UNIT) {
            const l = this._roomEngine.getFurnitureStackingHeightMap(t);
            e instanceof wn && this.handleFurnitureMove(n, i, Math.trunc(e.tileX + .5), Math.trunc(e.tileY + .5), l) || (this.handleFurnitureMove(n, i, i.loc.x, i.loc.y, l), o = !1)
        } else if (i.category === V.WALL) {
            if (o = !1, e instanceof nl) {
                const l = e.wallLocation,
                    c = e.wallWidth,
                    u = e.wallHeight,
                    h = e.x,
                    d = e.y,
                    m = e.direction;
                this.handleWallItemMove(n, i, l, c, u, h, d, m) && (o = !0)
            }
            o || (n.setLocation(i.loc), n.setDirection(i.dir)),
            this._roomEngine.updateRoomObjectMask(t, i.id, o)
        }
        o ? (this.setFurnitureAlphaMultiplier(n, .5), this._roomEngine.setObjectMoverIconSpriteVisible(!1)) : (this.setFurnitureAlphaMultiplier(n, 0), this._roomEngine.setObjectMoverIconSpriteVisible(!0))
    }
    handleObjectPlace(e, t)
    {
        if (!e || !this._roomEngine || !this._roomEngine.events)
            return;
        let i = this.getSelectedRoomObjectData(t);
        if (!i)
            return;
        let n = this._roomEngine.getRoomObject(t, i.id, i.category);
        if (!n) {
            if (e instanceof wn) {
                if (i.category === V.FLOOR)
                    this._roomEngine.addFurnitureFloor(t, i.id, i.typeId, i.loc, i.dir, 0, i.stuffData, parseFloat(i.instanceData), -1, 0, 0, "", !1);
                else if (i.category === V.UNIT) {
                    this._roomEngine.addRoomObjectUser(t, i.id, new w, new w(180), 180, i.typeId, i.instanceData);
                    const o = this._roomEngine.getRoomObject(t, i.id, i.category);
                    o && i.posture && o.model.setValue(C.FIGURE_POSTURE, i.posture)
                }
            } else
                e instanceof nl && i.category === V.WALL && this._roomEngine.addFurnitureWall(t, i.id, i.typeId, i.loc, i.dir, 0, i.instanceData, 0);
            if (n = this._roomEngine.getRoomObject(t, i.id, i.category), n && i.category === V.FLOOR) {
                const o = n.model.getValue(C.FURNITURE_ALLOWED_DIRECTIONS);
                if (o && o.length) {
                    const l = new w(o[0]);
                    if (n.setDirection(l), this.updateSelectedObjectData(t, i.id, i.category, i.loc, l, i.operation, i.typeId, i.instanceData, i.stuffData, i.state, i.animFrame, i.posture), i = this.getSelectedRoomObjectData(t), !i)
                        return
                }
            }
            this.setFurnitureAlphaMultiplier(n, .5),
            this._roomEngine.setObjectMoverIconSpriteVisible(!0)
        }
        if (n) {
            let o = !0;
            const l = this._roomEngine.getFurnitureStackingHeightMap(t);
            if (i.category === V.FLOOR)
                e instanceof wn && this.handleFurnitureMove(n, i, Math.trunc(e.tileX + .5), Math.trunc(e.tileY + .5), l) || (this._roomEngine.removeRoomObjectFloor(t, i.id), o = !1);
            else if (i.category === V.WALL) {
                if (o = !1, e instanceof nl) {
                    const c = e.wallLocation,
                        u = e.wallWidth,
                        h = e.wallHeight,
                        d = e.x,
                        m = e.y,
                        p = e.direction;
                    this.handleWallItemMove(n, i, c, u, h, d, m, p) && (o = !0)
                }
                o || this._roomEngine.removeRoomObjectWall(t, i.id),
                this._roomEngine.updateRoomObjectMask(t, i.id, o)
            } else
                i.category === V.UNIT && (e instanceof wn && this.handleUserPlace(n, Math.trunc(e.tileX + .5), Math.trunc(e.tileY + .5), this._roomEngine.getLegacyWallGeometry(t)) || (this._roomEngine.removeRoomObjectUser(t, i.id), o = !1));
            this._roomEngine.setObjectMoverIconSpriteVisible(!o)
        }
    }
    handleFurnitureMove(e, t, r, i, n)
    {
        if (!e || !t)
            return !1;
        const o = new w;
        o.assign(e.getDirection()),
        e.setDirection(t.dir);
        const l = new w(r, i, 0),
            c = new w;
        c.assign(e.getDirection());
        let u = this.validateFurnitureLocation(e, l, t.loc, t.dir, n);
        return u || (c.x = this.getValidRoomObjectDirection(e, !0), e.setDirection(c), u = this.validateFurnitureLocation(e, l, t.loc, t.dir, n)), u ? (e.setLocation(u), c && e.setDirection(c), !0) : (e.setDirection(o), !1)
    }
    handleWallItemMove(e, t, r, i, n, o, l, c)
    {
        if (!e || !t)
            return !1;
        const u = new w(c),
            h = this.validateWallItemLocation(e, r, i, n, o, l, t);
        return h ? (e.setLocation(h), e.setDirection(u), !0) : !1
    }
    validateFurnitureLocation(e, t, r, i, n)
    {
        if (!e || !e.model || !t)
            return null;
        let o = null;
        const l = e.getDirection();
        if (!l || !r || !i)
            return null;
        if (t.x === r.x && t.y === r.y && l.x === i.x)
            return o = new w, o.assign(r), o;
        let c = e.model.getValue(C.FURNITURE_SIZE_X),
            u = e.model.getValue(C.FURNITURE_SIZE_Y);
        c < 1 && (c = 1),
        u < 1 && (u = 1);
        const h = r.x,
            d = r.y;
        let m = c,
            p = u,
            E = 0,
            T = Math.trunc(Math.trunc(l.x + 45) % 360 / 90);
        if ((T === 1 || T === 3) && (E = c, c = u, u = E), T = Math.trunc(Math.trunc(i.x + 45) % 360 / 90), (T === 1 || T === 3) && (E = m, m = p, p = E), n && t) {
            const I = e.model.getValue(C.FURNITURE_ALWAYS_STACKABLE) === 1;
            return n.validateLocation(t.x, t.y, c, u, h, d, m, p, I) ? new w(t.x, t.y, n.getTileHeight(t.x, t.y)) : null
        }
        return null
    }
    validateWallItemLocation(e, t, r, i, n, o, l)
    {
        if (e == null || e.model == null || t == null || r == null || i == null || l == null)
            return null;
        const c = e.model.getValue(C.FURNITURE_SIZE_X),
            u = e.model.getValue(C.FURNITURE_SIZE_Z),
            h = e.model.getValue(C.FURNITURE_CENTER_Z);
        if ((n < c / 2 || n > r.length - c / 2 || o < h || o > i.length - (u - h)) && (n < c / 2 && n <= r.length - c / 2 ? n = c / 2 : n >= c / 2 && n > r.length - c / 2 && (n = r.length - c / 2), o < h && o <= i.length - (u - h) ? o = h : o >= h && o > i.length - (u - h) && (o = i.length - (u - h))), n < c / 2 || n > r.length - c / 2 || o < h || o > i.length - (u - h))
            return null;
        let d = w.sum(w.product(r, n / r.length), w.product(i, o / i.length));
        return d = w.sum(t, d), d
    }
    changeObjectState(e, t, r, i, n)
    {
        const o = this._roomEngine.getRoomObjectCategoryForType(r);
        this.changeRoomObjectState(e, t, o, i, n)
    }
    useObject(e, t, r, i)
    {
        if (!(!this._roomEngine || !this._roomEngine.connection))
            switch (i) {
            case ce.DICE_ACTIVATE:
                this._roomEngine.connection.send(new lb(t));
                return;
            case ce.DICE_OFF:
                this._roomEngine.connection.send(new cb(t));
                return;
            case ce.USE_HABBOWHEEL:
                this._roomEngine.connection.send(new ob(t));
                return;
            case ce.STICKIE:
                this._roomEngine.connection.send(new KM(t));
                return;
            case ce.ENTER_ONEWAYDOOR:
                this._roomEngine.connection.send(new hb(t));
                return
            }
    }
    changeRoomObjectState(e, t, r, i, n)
    {
        return !this._roomEngine || !this._roomEngine.connection || (r === V.FLOOR ? n ? this._roomEngine.connection.send(new db(t, i)) : this._roomEngine.connection.send(new Bl(t, i)) : r === V.WALL && this._roomEngine.connection.send(new _b(t, i))), !0
    }
    sendWalkUpdate(e, t)
    {
        !this._roomEngine || !this._roomEngine.connection || this._roomEngine.connection.send(new xb(e, t))
    }
    handleMouseOverObject(e, t, r)
    {
        if (e !== V.FLOOR)
            return null;
        const i = this._roomEngine.getRoomObject(t, r.objectId, V.FLOOR);
        if (!i)
            return null;
        const n = this.getActiveSurfaceLocation(i, r);
        if (!n || !this._roomEngine.getFurnitureStackingHeightMap(t))
            return null;
        const l = n.x,
            c = n.y,
            u = n.z;
        return new ol(new w(l, c, i.getLocation().z), u, !0, r.eventId)
    }
    handleMoveTargetFurni(e, t)
    {
        if (t.objectType === it.USER || t.objectType === it.PET || t.objectType === it.BOT || t.objectType === it.RENTABLE_BOT || t.objectType === it.MONSTER_PLANT)
            return;
        const r = this._roomEngine.getRoomObject(e, t.objectId, V.FLOOR),
            i = this.getActiveSurfaceLocation(r, t);
        return i ? (this.sendWalkUpdate(i.x, i.y), !0) : !1
    }
    getActiveSurfaceLocation(e, t)
    {
        if (!e || !t)
            return null;
        const r = this._roomEngine.sessionDataManager.getFloorItemDataByName(e.type);
        if (!r || !r.canStandOn && !r.canSitOn && !r.canLayOn)
            return null;
        const i = e.model;
        if (!i)
            return null;
        const n = e.getLocation(),
            o = e.getDirection();
        let l = i.getValue(C.FURNITURE_SIZE_X),
            c = i.getValue(C.FURNITURE_SIZE_Y);
        const u = i.getValue(C.FURNITURE_SIZE_Z);
        (o.x === 90 || o.x === 270) && ([l, c] = [c, l]),
        l < 1 && (l = 1),
        c < 1 && (c = 1);
        const h = this._roomEngine.getActiveRoomInstanceRenderingCanvas();
        if (!h)
            return null;
        const d = h.geometry.scale,
            m = r.canSitOn ? .5 : 0,
            p = (d / 2 + t.spriteOffsetX + t.localX) / (d / 4),
            E = (t.spriteOffsetY + t.localY + (u - m) * d / 2) / (d / 4),
            T = (p + 2 * E) / 4,
            I = (p - 2 * E) / 4,
            S = Math.floor(n.x + T),
            A = Math.floor(n.y - I + 1);
        let N = !1;
        (S < n.x || S >= n.x + l || A < n.y || A >= n.y + c) && (N = !0);
        const b = r.canSitOn ? u - .5 : u;
        return N ? null : new w(S, A, b)
    }
    handleMouseOverTile(e, t)
    {
        if (this._whereYouClickIsWhereYouGo)
            return new ol(new w(e.tileXAsInt, e.tileYAsInt, e.tileZAsInt), 0, !0, e.eventId);
        const r = this._roomEngine.getRoomObjectCursor(t);
        if (r && r.visualization) {
            const i = e.tileXAsInt,
                n = e.tileYAsInt,
                o = e.tileZAsInt;
            if (this._roomEngine.getRoomInstance(t)) {
                const c = this._roomEngine.getRoomTileObjectMap(t);
                if (c) {
                    const u = c.getObjectIntTile(i, n),
                        h = this._roomEngine.getFurnitureStackingHeightMap(t);
                    if (h) {
                        if (u && u.model && u.model.getValue(C.FURNITURE_IS_VARIABLE_HEIGHT) > 0) {
                            const d = h.getTileHeight(i, n),
                                m = this._roomEngine.getLegacyWallGeometry(t).getHeight(i, n);
                            return new ol(new w(i, n, o), d - m, !0, e.eventId)
                        }
                        return new ol(new w(i, n, o), 0, !0, e.eventId)
                    }
                }
            }
        }
        return null
    }
    placeObject(e, t, r)
    {
        const i = this.getSelectedRoomObjectData(e);
        if (!i)
            return;
        let n = null,
            o = i.id;
        const l = i.category;
        let c = 0,
            u = 0,
            h = 0,
            d = 0,
            m = "";
        if (this._roomEngine && this._roomEngine.connection && (n = this._roomEngine.getRoomObject(e, o, l), n)) {
            const p = n.getLocation();
            if (d = n.getDirection().x, l === V.FLOOR || l === V.UNIT)
                c = p.x,
                u = p.y,
                h = p.z;
            else if (l === V.WALL) {
                c = p.x,
                u = p.y,
                h = p.z;
                const E = this._roomEngine.getLegacyWallGeometry(e);
                E && (m = E.getOldLocationString(p, d))
            }
            d = (d / 45 % 8 + 8) % 8,
            o < 0 && l === V.UNIT && (o = o * -1),
            this._objectPlacementSource !== za.CATALOG && (l === V.UNIT ? i.typeId === yt.PET ? this._roomEngine.connection.send(new XM(o, Math.trunc(c), Math.trunc(u))) : i.typeId === yt.RENTABLE_BOT && this._roomEngine.connection.send(new WM(o, Math.trunc(c), Math.trunc(u))) : n.model.getValue(C.FURNITURE_IS_STICKIE) !== void 0 ? this._roomEngine.connection.send(new ab(o, m)) : this._roomEngine.connection.send(new aE(o, l, m, Math.trunc(c), Math.trunc(u), d)))
        }
        if (this._roomEngine.setPlacedRoomObjectData(e, new y_(i.id, i.category, null, i.dir, null)), this.resetSelectedObjectData(e), this._roomEngine && this._roomEngine.events) {
            const p = n && n.id === i.id;
            this._roomEngine.events.dispatchEvent(new ag(de.PLACED, e, o, l, m, c, u, h, d, p, t, r, i.instanceData))
        }
    }
    modifyRoomObject(e, t, r, i)
    {
        if (!this._roomEngine)
            return !1;
        const n = this._roomEngine.getRoomObject(e, t, r);
        if (!n)
            return !1;
        let o = !0;
        switch (i) {
        case Ne.OBJECT_ROTATE_POSITIVE:
        case Ne.OBJECT_ROTATE_NEGATIVE:
            if (this._roomEngine.connection) {
                let l = 0;
                i == Ne.OBJECT_ROTATE_NEGATIVE ? l = this.getValidRoomObjectDirection(n, !1) : l = this.getValidRoomObjectDirection(n, !0);
                const c = n.getLocation().x,
                    u = n.getLocation().y;
                if (this.isValidLocation(n, new w(l), this._roomEngine.getFurnitureStackingHeightMap(e)))
                    if (l = Math.trunc(l / 45), n.type === it.MONSTER_PLANT) {
                        const h = this._roomEngine.roomSessionManager.getSession(e);
                        if (h) {
                            const d = h.userDataManager.getUserDataByIndex(t);
                            d && this._roomEngine.connection.send(new af(d.webID, Math.trunc(c), Math.trunc(u), l))
                        }
                    } else
                        this._roomEngine.connection.send(new of(t, c, u, l))
            }
            break;
        case Ne.OBJECT_EJECT:
        case Ne.OBJECT_PICKUP:
            this._roomEngine.connection && this._roomEngine.connection.send(new nE(r, t));
            break;
        case Ne.OBJECT_PICKUP_PET:
            if (this._roomEngine.connection) {
                const l = this._roomEngine.roomSessionManager.getSession(e);
                if (l) {
                    const c = l.userDataManager.getUserDataByIndex(t);
                    l.pickupPet(c.webID)
                }
            }
            break;
        case Ne.OBJECT_PICKUP_BOT:
            if (this._roomEngine.connection) {
                const l = this._roomEngine.roomSessionManager.getSession(e);
                if (l) {
                    const c = l.userDataManager.getUserDataByIndex(t);
                    l.pickupBot(c.webID)
                }
            }
            break;
        case Ne.OBJECT_MOVE:
            o = !1,
            this.setFurnitureAlphaMultiplier(n, .5),
            this.setSelectedRoomObjectData(e, n.id, r, n.getLocation(), n.getDirection(), i),
            this._roomEngine.setObjectMoverIconSprite(n.id, r, !0),
            this._roomEngine.setObjectMoverIconSpriteVisible(!1);
            break;
        case Ne.OBJECT_MOVE_TO:
            {
                const l = this.getSelectedRoomObjectData(e);
                if (this.updateSelectedObjectData(e, l.id, l.category, l.loc, l.dir, Ne.OBJECT_MOVE_TO, l.typeId, l.instanceData, l.stuffData, l.state, l.animFrame, l.posture), this.setFurnitureAlphaMultiplier(n, 1), this._roomEngine.removeObjectMoverIconSprite(), this._roomEngine.connection) {
                    if (r === V.FLOOR) {
                        const c = n.getDirection().x % 360,
                            u = n.getLocation(),
                            h = c / 45;
                        this._roomEngine.connection.send(new of(t, u.x, u.y, h))
                    } else if (r === V.WALL) {
                        const c = n.getDirection().x % 360,
                            u = this._roomEngine.getLegacyWallGeometry(e);
                        if (u) {
                            const h = u.getOldLocationString(n.getLocation(), c);
                            h && this._roomEngine.connection.send(new pb(t, h))
                        }
                    } else if (r === V.UNIT) {
                        const c = n.getDirection().x % 360,
                            u = n.getLocation(),
                            h = c / 45;
                        parseInt(n.model.getValue(C.RACE));
                        const d = this._roomEngine.roomSessionManager.getSession(e);
                        if (d) {
                            const m = d.userDataManager.getUserDataByIndex(t);
                            m && this._roomEngine.connection.send(new af(m.webID, u.x, u.y, h))
                        }
                    }
                }
                break
            }
        }
        return o && this.resetSelectedObjectData(e), !0
    }
    modifyRoomObjectDataWithMap(e, t, r, i, n)
    {
        if (!this._roomEngine || !this._roomEngine.getRoomObject(e, t, r))
            return !1;
        switch (i) {
        case Ne.OBJECT_SAVE_STUFF_DATA:
            this._roomEngine.connection && this._roomEngine.connection.send(new iE(t, n));
            break
        }
        return !0
    }
    modifyWallItemData(e, t, r, i)
    {
        return !this._roomEngine || !this._roomEngine.connection ? !1 : (this._roomEngine.connection.send(new $M(t, r, i)), !0)
    }
    deleteWallItem(e, t)
    {
        return !this._roomEngine || !this._roomEngine.connection ? !1 : (this._roomEngine.connection.send(new JM(t)), !0)
    }
    getValidRoomObjectDirection(e, t)
    {
        if (!e || !e.model)
            return 0;
        let r = 0,
            i = 0,
            n = [];
        e.type === it.MONSTER_PLANT ? n = e.model.getValue(C.PET_ALLOWED_DIRECTIONS) : n = e.model.getValue(C.FURNITURE_ALLOWED_DIRECTIONS);
        let o = e.getDirection().x;
        if (n && n.length) {
            if (r = n.indexOf(o), r < 0) {
                for (r = 0, i = 0; i < n.length && !(o <= n[i]);)
                    r++,
                    i++;
                r = r % n.length
            }
            t ? r = (r + 1) % n.length : r = (r - 1 + n.length) % n.length,
            o = n[r]
        }
        return o
    }
    isValidLocation(e, t, r)
    {
        if (!e || !e.model || !t)
            return !1;
        const i = e.getDirection(),
            n = e.getLocation();
        if (!i || !n)
            return !1;
        if (i.x % 180 === t.x % 180)
            return !0;
        let o = e.model.getValue(C.FURNITURE_SIZE_X),
            l = e.model.getValue(C.FURNITURE_SIZE_Y);
        o < 1 && (o = 1),
        l < 1 && (l = 1);
        let c = o,
            u = l,
            h = Math.trunc(Math.trunc(t.x + 45) % 360 / 90);
        if ((h === 1 || h === 3) && ([o, l] = [l, o]), h = Math.trunc(Math.trunc(i.x + 45) % 360 / 90), (h === 1 || h === 3) && ([c, u] = [u, c]), r && n) {
            const d = e.model.getValue(C.FURNITURE_ALWAYS_STACKABLE) === 1;
            if (r.validateLocation(n.x, n.y, o, l, n.x, n.y, c, u, d, n.z))
                return !0
        }
        return !1
    }
    placeObjectOnUser(e, t, r)
    {
        const i = this.getSelectedRoomObjectData(e);
        !i || !this._roomEngine.getRoomObject(e, t, r) || !this._roomEngine || !this._roomEngine.events || this._roomEngine.events.dispatchEvent(new zL(de.PLACED_ON_USER, e, t, r, i.id, i.category))
    }
    setSelectedObject(e, t, r)
    {
        if (!this._roomEngine)
            return;
        const i = this._roomEngine.events;
        if (i)
            switch (r) {
            case V.UNIT:
            case V.FLOOR:
            case V.WALL:
                if (r === V.UNIT)
                    this.deselectObject(e),
                    this.setSelectedAvatar(e, t, !0);
                else if (this.setSelectedAvatar(e, 0, !1), t !== this._selectedObjectId) {
                    this.deselectObject(e);
                    const n = this._roomEngine.getRoomObject(e, t, r);
                    n && n.logic && (n.logic.processUpdateMessage(new zc(!0)), this._selectedObjectId = t, this._selectedObjectCategory = r)
                }
                i.dispatchEvent(new de(de.SELECTED, e, t, r));
                return
            }
    }
    deselectObject(e)
    {
        if (this._selectedObjectId === -1)
            return;
        const t = this._roomEngine.getRoomObject(e, this._selectedObjectId, this._selectedObjectCategory);
        t && t.logic && (t.logic.processUpdateMessage(new zc(!1)), this._selectedObjectId = -1, this._selectedObjectCategory = V.MINIMUM)
    }
    setSelectedAvatar(e, t, r)
    {
        if (!this._roomEngine)
            return;
        const i = V.UNIT,
            n = this._roomEngine.getRoomObject(e, this._selectedAvatarId, i);
        n && n.logic && (n.logic.processUpdateMessage(new Zh(!1)), this._selectedAvatarId = -1);
        let o = !1;
        if (r) {
            const c = this._roomEngine.getRoomObject(e, t, i);
            if (c && c.logic) {
                c.logic.processUpdateMessage(new Zh(!0)),
                o = !0,
                this._selectedAvatarId = t;
                const u = c.getLocation();
                u && this._roomEngine.connection.send(new Ub(~~u.x, ~~u.y))
            }
        }
        const l = this._roomEngine.getRoomObjectSelectionArrow(e);
        l && l.logic && (o && !this._roomEngine.isPlayingGame() ? l.logic.processUpdateMessage(new sa(sa.ENABLED)) : l.logic.processUpdateMessage(new sa(sa.DISABLED)))
    }
    resetSelectedObjectData(e)
    {
        if (!this._roomEngine)
            return;
        this._roomEngine.removeObjectMoverIconSprite();
        const t = this.getSelectedRoomObjectData(e);
        if (t) {
            if (t.operation === Ne.OBJECT_MOVE || t.operation === Ne.OBJECT_MOVE_TO) {
                const r = this._roomEngine.getRoomObject(e, t.id, t.category);
                r && t.operation !== Ne.OBJECT_MOVE_TO && (r.setLocation(t.loc), r.setDirection(t.dir)),
                this.setFurnitureAlphaMultiplier(r, 1),
                t.category === V.WALL && this._roomEngine.updateRoomObjectMask(e, t.id, !0),
                this.updateSelectedObjectData(e, t.id, t.category, t.loc, t.dir, Ne.OBJECT_MOVE, t.typeId, t.instanceData, t.stuffData, t.state, t.animFrame, t.posture)
            } else if (t.operation === Ne.OBJECT_PLACE) {
                const r = t.id;
                switch (t.category) {
                case V.FLOOR:
                    this._roomEngine.removeRoomObjectFloor(e, r);
                    break;
                case V.WALL:
                    this._roomEngine.removeRoomObjectWall(e, r);
                    break;
                case V.UNIT:
                    this._roomEngine.removeRoomObjectUser(e, r);
                    break
                }
            }
            this._roomEngine.setSelectedRoomObjectData(e, null)
        }
    }
    getSelectedRoomObjectData(e)
    {
        return this._roomEngine ? this._roomEngine.getSelectedRoomObjectData(e) : null
    }
    setFurnitureAlphaMultiplier(e, t)
    {
        !e || !e.model || e.model.setValue(C.FURNITURE_ALPHA_MULTIPLIER, t)
    }
    decorateModeMove(e)
    {
        return this._roomEngine.isDecorating && !(e.ctrlKey || e.shiftKey)
    }
    cancelRoomObjectPlacement(e)
    {
        return this.resetSelectedObjectData(e), !0
    }
    setSelectedRoomObjectData(e, t, r, i, n, o, l=0, c=null, u=null, h=-1, d=-1, m=null)
    {
        if (this.resetSelectedObjectData(e), !this._roomEngine)
            return;
        const p = new y_(t, r, o, i, n, l, c, u, h, d, m);
        this._roomEngine.setSelectedRoomObjectData(e, p)
    }
    updateSelectedObjectData(e, t, r, i, n, o, l=0, c=null, u=null, h=-1, d=-1, m=null)
    {
        if (!this._roomEngine)
            return null;
        const p = new y_(t, r, o, i, n, l, c, u, h, d, m);
        this._roomEngine.setSelectedRoomObjectData(e, p)
    }
    handleUserPlace(e, t, r, i)
    {
        return i.isRoomTile(t, r) ? (e.setLocation(new w(t, r, i.getHeight(t, r))), !0) : !1
    }
    get engine()
    {
        return this._roomEngine
    }
    get selectedAvatarId()
    {
        return this._selectedAvatarId
    }
}
class S3 {
    constructor()
    {
        this._events = new ti,
        this._cachedEvents = new Map,
        this._registeredEvents = new Map,
        this._functions = []
    }
    getLogic(e)
    {
        const t = this.getLogicType(e);
        if (!t)
            return null;
        const r = new t;
        if (!r)
            return null;
        if (r.eventDispatcher = this._events, !this._cachedEvents.get(e)) {
            this._cachedEvents.set(e, !0);
            const i = r.getEventTypes();
            for (const n of i)
                n && this.registerEventType(n)
        }
        return r
    }
    registerEventType(e)
    {
        if (!this._registeredEvents.get(e)) {
            this._registeredEvents.set(e, !0);
            for (const t of this._functions)
                t && this._events.addEventListener(e, t)
        }
    }
    registerEventFunction(e)
    {
        if (e && !(this._functions.indexOf(e) >= 0)) {
            this._functions.push(e);
            for (const t of this._registeredEvents.keys())
                t && this._events.addEventListener(t, e)
        }
    }
    removeEventFunction(e)
    {
        if (!e)
            return;
        const t = this._functions.indexOf(e);
        if (t !== -1) {
            this._functions.splice(t, 1);
            for (const r of this._registeredEvents.keys())
                r && this._events.removeEventListener(r, e)
        }
    }
    getLogicType(e)
    {
        if (!e)
            return null;
        let t = null;
        switch (e) {
        case se.ROOM:
            t = k5;
            break;
        case se.TILE_CURSOR:
            t = Kd;
            break;
        case se.SELECTION_ARROW:
            t = V5;
            break;
        case se.USER:
        case se.BOT:
        case se.RENTABLE_BOT:
            t = $a;
            break;
        case se.PET:
            t = F5;
            break;
        case se.FURNITURE_BASIC:
            t = Rt;
            break;
        case se.FURNITURE_BADGE_DISPLAY:
            t = PD;
            break;
        case se.FURNITURE_CHANGE_STATE_WHEN_STEP_ON:
            t = Wz;
            break;
        case se.FURNITURE_COUNTER_CLOCK:
            t = zz;
            break;
        case se.FURNITURE_CRACKABLE:
            t = Kz;
            break;
        case se.FURNITURE_CREDIT:
            t = Xz;
            break;
        case se.FURNITURE_CUSTOM_STACK_HEIGHT:
            t = Jz;
            break;
        case se.FURNITURE_DICE:
            t = Zz;
            break;
        case se.FURNITURE_EDITABLE_INTERNAL_LINK:
            t = e5;
            break;
        case se.FURNITURE_EDITABLE_ROOM_LINK:
            t = t5;
            break;
        case se.FURNITURE_EXTERNAL_IMAGE_WALLITEM:
            t = r5;
            break;
        case se.FURNITURE_FIREWORKS:
            t = i5;
            break;
        case se.FURNITURE_FLOOR_HOLE:
            t = LD;
            break;
        case se.FURNITURE_GUILD_CUSTOMIZED:
            t = sc;
            break;
        case se.FURNITURE_HIGH_SCORE:
            t = wD;
            break;
        case se.FURNITURE_HOCKEY_SCORE:
            t = o5;
            break;
        case se.FURNITURE_ES:
            t = c5;
            break;
        case se.FURNITURE_MANNEQUIN:
            t = Wd;
            break;
        case se.FURNITURE_MULTIHEIGHT:
            t = g5;
            break;
        case se.FURNITURE_MULTISTATE:
            t = Ss;
            break;
        case se.FURNITURE_ONE_WAY_DOOR:
            t = E5;
            break;
        case se.FURNITURE_PET_CUSTOMIZATION:
            t = p5;
            break;
        case se.FURNITURE_PRESENT:
            t = rc;
            break;
        case se.FURNITURE_PURCHASABLE_CLOTHING:
            t = R5;
            break;
        case se.FURNITURE_PUSHABLE:
            t = Yd;
            break;
        case se.FURNITURE_BACKGROUND_COLOR:
            t = A5;
            break;
        case se.FURNITURE_BG:
            t = N5;
            break;
        case se.FURNITURE_BB:
            t = y5;
            break;
        case se.FURNITURE_ROOMDIMMER:
            t = M5;
            break;
        case se.FURNITURE_SCORE:
            t = TE;
            break;
        case se.FURNITURE_SOUNDBLOCK:
            t = zd;
            break;
        case se.FURNITURE_STICKIE:
            t = xD;
            break;
        case se.FURNITURE_TROPHY:
            t = v5;
            break;
        case se.FURNITURE_VOTE_COUNTER:
            t = RE;
            break;
        case se.FURNITURE_VOTE_MAJORITY:
            t = P5;
            break;
        case se.FURNITURE_WINDOW:
            t = U5;
            break;
        case se.FURNITURE_LOVELOCK:
            t = d5;
            break;
        case se.FURNITURE_YOUTUBE:
            t = w5;
            break;
        case se.FURNITURE_CRAFTING_GIZMO:
            t = qz;
            break;
        case se.FURNITURE_RENTABLE_SPACE:
            t = C5;
            break;
        case se.FURNITURE_EFFECTBOX:
            t = s5;
            break;
        case se.FURNITURE_MONSTERPLANT_SEED:
            t = _5;
            break;
        case se.FURNITURE_MYSTERYBOX:
            t = f5;
            break;
        case se.FURNITURE_MYSTERYTROPHY:
            t = m5;
            break;
        case se.FURNITURE_RANDOM_TELEPORT:
            t = S5;
            break;
        case se.FURNITURE_CLOTHING_CHANGE:
            t = Yz;
            break;
        case se.FURNITURE_CUCKOO_CLOCK:
            t = Qz;
            break;
        case se.FURNITURE_ECOTRON_BOX:
            t = $z;
            break;
        case se.FURNITURE_GROUP_FORUM_TERMINAL:
            t = n5;
            break;
        case se.FURNITURE_HWEEN_LOVELOCK:
            t = l5;
            break;
        case se.FURNITURE_INTERNAL_LINK:
            t = u5;
            break;
        case se.FURNITURE_JUKEBOX:
            t = h5;
            break;
        case se.FURNITURE_PLACEHOLDER:
            t = I5;
            break;
        case se.FURNITURE_PLANET_SYSTEM:
            t = T5;
            break;
        case se.FURNITURE_RANDOMSTATE:
            t = O5;
            break;
        case se.FURNITURE_SONG_DISK:
            t = b5;
            break;
        case se.FURNITURE_SOUND_MACHINE:
            t = D5;
            break;
        case se.FURNITURE_WELCOME_GIFT:
            t = L5;
            break;
        case se.FURNITURE_ACHIEVEMENT_RESOLUTION:
            t = Yo;
            break;
        case se.FURNITURE_HABBOWHEEL:
            t = a5;
            break;
        default:
            t = Rt;
            break
        }
        return t || (pe.warn("Unknown Logic", e), null)
    }
    get events()
    {
        return this._events
    }
}
const Bt = class  extends bn{
    constructor(s)
    {
        super(),
        this._communication = s,
        this._sessionDataManager = null,
        this._roomSessionManager = null,
        this._roomManager = null,
        this._roomObjectEventHandler = new O3(this),
        this._roomMessageHandler = new R3(this),
        this._roomContentLoader = new ci,
        this._ready = !1,
        this._roomContentLoaderReady = !1,
        this._activeRoomId = -1,
        this._activeRoomActiveCanvas = -1,
        this._roomInstanceDatas = new Map,
        this._roomDatas = new Map,
        this._roomRendererFactory = new UU,
        this._visualizationFactory = new nv,
        this._logicFactory = new S3,
        this._activeRoomActiveCanvasMouseX = 0,
        this._activeRoomActiveCanvasMouseY = 0,
        this._activeRoomIsDragged = !1,
        this._activeRoomWasDragged = !1,
        this._activeRoomDragStartX = 0,
        this._activeRoomDragStartY = 0,
        this._activeRoomDragX = 0,
        this._activeRoomDragY = 0,
        this._skipFurnitureCreationForNextFrame = !1,
        this._mouseCursorUpdate = !1,
        this._imageObjectIdBank = null,
        this._imageCallbacks = new Map,
        this._thumbnailCallbacks = new Map,
        this._roomDraggingAlwaysCenters = !1,
        this._roomAllowsDragging = !0,
        this._badgeListenerObjects = new Map,
        this.runVisibilityUpdate = this.runVisibilityUpdate.bind(this),
        this.processRoomObjectEvent = this.processRoomObjectEvent.bind(this),
        this.onRoomSessionEvent = this.onRoomSessionEvent.bind(this),
        this.onRoomContentLoaderReadyEvent = this.onRoomContentLoaderReadyEvent.bind(this),
        this.onBadgeImageReadyEvent = this.onBadgeImageReadyEvent.bind(this)
    }
    onInit()
    {
        this._ready || (this._imageObjectIdBank = new gp(1e3), this._thumbnailObjectIdBank = new gp(1e3), this._logicFactory.registerEventFunction(this.processRoomObjectEvent), this._roomManager && (this._roomManager.setContentLoader(this._roomContentLoader), this._roomManager.addUpdateCategory(V.FLOOR), this._roomManager.addUpdateCategory(V.WALL), this._roomManager.addUpdateCategory(V.UNIT), this._roomManager.addUpdateCategory(V.CURSOR), this._roomManager.addUpdateCategory(V.ROOM)), this._roomMessageHandler.setConnection(this._communication.connection), this._roomContentLoader.initialize(this.events), this._roomContentLoader.setSessionDataManager(this._sessionDataManager), this._roomContentLoader.setIconListener(this), this._roomSessionManager && (this._roomSessionManager.events.addEventListener(Ce.STARTED, this.onRoomSessionEvent), this._roomSessionManager.events.addEventListener(Ce.ENDED, this.onRoomSessionEvent)), this.events.addEventListener(ci.LOADER_READY, this.onRoomContentLoaderReadyEvent), ir().add(this.update, this), document.addEventListener("visibilitychange", this.runVisibilityUpdate))
    }
    onDispose()
    {
        if (this._ready) {
            for (const [s, e] of this._roomInstanceDatas)
                this.removeRoomInstance(s);
            document.removeEventListener("visibilitychange", this.runVisibilityUpdate),
            ir().remove(this.update, this),
            this._roomObjectEventHandler && this._roomObjectEventHandler.dispose(),
            this._roomMessageHandler && this._roomMessageHandler.dispose(),
            this._roomContentLoader && this._roomContentLoader.dispose(),
            this.events.removeEventListener(ci.LOADER_READY, this.onRoomContentLoaderReadyEvent),
            this._roomSessionManager && (this._roomSessionManager.events.removeEventListener(Ce.STARTED, this.onRoomSessionEvent), this._roomSessionManager.events.removeEventListener(Ce.ENDED, this.onRoomSessionEvent)),
            super.onDispose()
        }
    }
    onRoomSessionEvent(s)
    {
        if (s instanceof Ce)
            switch (s.type) {
            case Ce.STARTED:
                this._roomMessageHandler && this._roomMessageHandler.setRoomId(s.session.roomId);
                return;
            case Ce.ENDED:
                this._roomMessageHandler && (this._roomMessageHandler.clearRoomId(), this.removeRoomInstance(s.session.roomId));
                return
            }
    }
    onRoomContentLoaderReadyEvent(s)
    {
        this._roomContentLoaderReady = !0,
        this._roomManager.init()
    }
    setActiveRoomId(s)
    {
        this._activeRoomId = s
    }
    destroyRoom(s)
    {
        this.removeRoomInstance(s)
    }
    getRoomInstance(s)
    {
        return this._roomManager && this._roomManager.getRoomInstance(this.getRoomId(s)) || null
    }
    removeRoomInstance(s)
    {
        this.getRoomInstance(s) && this._roomManager && this._roomManager.removeRoomInstance(this.getRoomId(s));
        const t = this._roomInstanceDatas.get(s);
        t && (this._roomInstanceDatas.delete(t.roomId), t.dispose()),
        this.events.dispatchEvent(new ze(ze.DISPOSED, s))
    }
    createRoomInstance(s, e)
    {
        let t = "111",
            r = "201",
            i = "1";
        if (!this._ready) {
            let l = this._roomDatas.get(s);
            l && (this._roomDatas.delete(s), t = l.floorType, r = l.wallType, i = l.landscapeType),
            l = new Sp(s, e),
            l.floorType = t,
            l.wallType = r,
            l.landscapeType = i,
            this._roomDatas.set(s, l),
            pe.warn("Room Engine not initilized yet, can not create room. Room data stored for later initialization.");
            return
        }
        if (!e) {
            pe.warn("Room property messages");
            return
        }
        const n = this._roomDatas.get(s);
        n && (this._roomDatas.delete(s), n.floorType && (t = n.floorType), n.wallType && (r = n.wallType), n.landscapeType && (i = n.landscapeType)),
        this.setupRoomInstance(s, e, t, r, i, this.getRoomInstanceModelName(s)) && (e.restrictsDragging ? this._roomAllowsDragging = !1 : this._roomAllowsDragging = !0, this.events.dispatchEvent(new ze(ze.INITIALIZED, s)))
    }
    setupRoomInstance(s, e, t, r, i, n)
    {
        if (!this._ready || !this._roomManager)
            return;
        const o = this._roomManager.createRoomInstance(this.getRoomId(s));
        if (!o)
            return null;
        const l = V.ROOM,
            c = o.createRoomObjectAndInitalize(Bt.ROOM_OBJECT_ID, Bt.ROOM_OBJECT_TYPE, l);
        if (o.model.setValue(Nt.ROOM_IS_PUBLIC, 0), o.model.setValue(Nt.ROOM_Z_SCALE, 1), e && (o.model.setValue(Nt.RESTRICTS_DRAGGING, e.restrictsDragging), o.model.setValue(Nt.RESTRICTS_SCALING, e.restrictsScaling), o.model.setValue(Nt.RESTRICTED_SCALE, e.restrictedScale), e.dimensions)) {
            const d = e.dimensions.minX,
                m = e.dimensions.maxX,
                p = e.dimensions.minY,
                E = e.dimensions.maxY;
            o.model.setValue(Nt.ROOM_MIN_X, d),
            o.model.setValue(Nt.ROOM_MAX_X, m),
            o.model.setValue(Nt.ROOM_MIN_Y, p),
            o.model.setValue(Nt.ROOM_MAX_Y, E);
            const T = Math.trunc(d * 423 + m * 671 + p * 913 + E * 7509);
            c && c.model && c.model.setValue(C.ROOM_RANDOM_SEED, T)
        }
        const u = c && c.logic || null;
        if (u && (u.initialize(e), t && (u.processUpdateMessage(new Qs(Qs.ROOM_FLOOR_UPDATE, t)), o.model.setValue(C.ROOM_FLOOR_TYPE, t)), r && (u.processUpdateMessage(new Qs(Qs.ROOM_WALL_UPDATE, r)), o.model.setValue(C.ROOM_WALL_TYPE, r)), i && (u.processUpdateMessage(new Qs(Qs.ROOM_LANDSCAPE_UPDATE, i)), o.model.setValue(C.ROOM_LANDSCAPE_TYPE, i))), e && e.doors.length) {
            let h = 0;
            for (; h < e.doors.length;) {
                const d = e.doors[h];
                if (d) {
                    const m = d.x,
                        p = d.y,
                        E = d.z,
                        T = d.dir,
                        I = Js.DOOR,
                        S = "door_" + h,
                        A = new w(m, p, E);
                    u.processUpdateMessage(new Js(Js.ADD_MASK, S, I, A, Js.HOLE)),
                    (T === 90 || T === 180) && (T === 90 && (o.model.setValue(C.ROOM_DOOR_X, m - .5), o.model.setValue(C.ROOM_DOOR_Y, p)), T === 180 && (o.model.setValue(C.ROOM_DOOR_X, m), o.model.setValue(C.ROOM_DOOR_Y, p - .5)), o.model.setValue(C.ROOM_DOOR_Z, E), o.model.setValue(C.ROOM_DOOR_DIR, T))
                }
                h++
            }
        }
        return o.createRoomObjectAndInitalize(Bt.CURSOR_OBJECT_ID, Bt.CURSOR_OBJECT_TYPE, V.CURSOR), ye.getValue("enable.avatar.arrow", !1) && o.createRoomObjectAndInitalize(Bt.ARROW_OBJECT_ID, Bt.ARROW_OBJECT_TYPE, V.CURSOR), o
    }
    getRoomInstanceDisplay(s, e, t, r, i)
    {
        const n = this.getRoomInstance(s);
        if (!n)
            return null;
        let o = n.renderer;
        if (!o && (o = this._roomRendererFactory.createRenderer(), !o))
            return null;
        o.roomObjectVariableAccurateZ = C.OBJECT_ACCURATE_Z_VALUE,
        n.setRenderer(o);
        const l = o.createCanvas(e, t, r, i);
        if (!l)
            return null;
        if (n.model.getValue(Nt.RESTRICTS_SCALING)) {
            let u = n.model.getValue(Nt.RESTRICTED_SCALE);
            u || (u = 1),
            l.setScale(u),
            l.restrictsScaling = !0
        } else
            l.restrictsScaling = !1;
        if (l.setMouseListener(this._roomObjectEventHandler), l.geometry) {
            l.geometry.z_scale = n.model.getValue(Nt.ROOM_Z_SCALE);
            const u = n.model.getValue(C.ROOM_DOOR_X),
                h = n.model.getValue(C.ROOM_DOOR_Y),
                d = n.model.getValue(C.ROOM_DOOR_Z),
                m = n.model.getValue(C.ROOM_DOOR_DIR),
                p = new w(u, h, d);
            let E = null;
            m === 90 && (E = new w(-2e3, 0, 0)),
            m === 180 && (E = new w(0, -2e3, 0)),
            l.geometry.setDisplacement(p, E);
            const T = l.master;
            if (T) {
                const I = new qt(cs.EMPTY);
                I.name = Bt.OVERLAY,
                I.interactive = !1,
                T.addChild(I)
            }
        }
        return l.master
    }
    setRoomInstanceRenderingCanvasMask(s, e, t)
    {
        const r = this.getRoomInstanceRenderingCanvas(s, e);
        r && r.setMask(t)
    }
    setRoomInstanceRenderingCanvasScale(s, e, t, r=null, i=null, n=!1, o=!1)
    {
        const l = this.getRoomInstanceRenderingCanvas(s, e);
        if (l) {
            if (l.restrictsScaling && !n)
                return;
            l.setScale(t, r, i, n, o),
            this.events.dispatchEvent(new ze(ze.ROOM_ZOOMED, s))
        }
    }
    getRoomInstanceRenderingCanvas(s, e=-1)
    {
        const t = this.getRoomInstance(s);
        if (!t)
            return null;
        const r = t.renderer;
        if (!r)
            return null;
        e === -1 && (e = this._activeRoomActiveCanvas);
        const i = r.getCanvas(e);
        return i || null
    }
    getActiveRoomInstanceRenderingCanvas()
    {
        return this.getRoomInstanceRenderingCanvas(this._activeRoomId, this._activeRoomActiveCanvas)
    }
    getRoomInstanceRenderingCanvasOffset(s, e=-1)
    {
        e === -1 && (e = this._activeRoomActiveCanvas);
        const t = this.getRoomInstanceRenderingCanvas(s, e);
        return t ? new Ge(t.screenOffsetX, t.screenOffsetY) : null
    }
    setRoomInstanceRenderingCanvasOffset(s, e, t)
    {
        const r = this.getRoomInstanceRenderingCanvas(s, e);
        if (!r || !t)
            return !1;
        const i = ~~t.x,
            n = ~~t.y;
        if (!(r.screenOffsetX === i && r.screenOffsetY === n))
            return this.events.dispatchEvent(new Xf(s, -(r.screenOffsetX - i), -(r.screenOffsetY - n))), r.screenOffsetX = i, r.screenOffsetY = n, !0
    }
    getRoomInstanceRenderingCanvasScale(s=-1e3, e=-1)
    {
        s === -1e3 && (s = this._activeRoomId),
        e === -1 && (e = this._activeRoomActiveCanvas);
        const t = this.getRoomInstanceRenderingCanvas(s, e);
        return t ? t.scale : 1
    }
    initializeRoomInstanceRenderingCanvas(s, e, t, r)
    {
        const i = this.getRoomInstanceRenderingCanvas(s, e);
        i && i.initialize(t, r)
    }
    getRoomInstanceGeometry(s, e=-1)
    {
        const t = this.getRoomInstance(s);
        if (!t)
            return null;
        const r = t.renderer;
        if (!r)
            return null;
        e === -1 && (e = this._activeRoomActiveCanvas);
        const i = r.getCanvas(e);
        return i ? i.geometry : null
    }
    getRoomInstanceVariable(s, e)
    {
        const t = this.getRoomInstance(s);
        return t && t.model && t.model.getValue(e) || null
    }
    updateRoomInstancePlaneVisibility(s, e, t=!0)
    {
        const r = this.getRoomOwnObject(s);
        return r ? (r.processUpdateMessage(new ta(ta.WALL_VISIBILITY, e)), r.processUpdateMessage(new ta(ta.FLOOR_VISIBILITY, t)), !0) : !1
    }
    updateRoomInstancePlaneThickness(s, e, t)
    {
        const r = this.getRoomOwnObject(s);
        return r ? (r.processUpdateMessage(new ea(ea.WALL_THICKNESS, e)), r.processUpdateMessage(new ea(ea.FLOOR_THICKNESS, t)), !0) : !1
    }
    updateRoomInstancePlaneType(s, e=null, t=null, r=null, i=!1)
    {
        const n = this.getRoomOwnObject(s),
            o = this.getRoomInstance(s);
        if (!n) {
            let l = this._roomDatas.get(s);
            return l || (l = new Sp(s, null), this._roomDatas.set(s, l)), e && (l.floorType = e), t && (l.wallType = t), r && (l.landscapeType = r), !0
        }
        return e && (o && !i && o.model.setValue(C.ROOM_FLOOR_TYPE, e), n.processUpdateMessage(new Qs(Qs.ROOM_FLOOR_UPDATE, e))), t && (o && !i && o.model.setValue(C.ROOM_WALL_TYPE, t), n.processUpdateMessage(new Qs(Qs.ROOM_WALL_UPDATE, t))), r && (o && !i && o.model.setValue(C.ROOM_LANDSCAPE_TYPE, r), n.processUpdateMessage(new Qs(Qs.ROOM_LANDSCAPE_UPDATE, r))), !0
    }
    updateObjectRoomColor(s, e, t, r)
    {
        const i = this.getRoomOwnObject(s);
        if (!i || !i.logic)
            return !1;
        const n = new ed(ed.BACKGROUND_COLOR, e, t, r);
        return i.logic.processUpdateMessage(n), this.events.dispatchEvent(new qf(s, e, t, r)), !0
    }
    addRoomInstanceFloorHole(s, e)
    {
        if (e < 0)
            return;
        const t = this.getRoomOwnObject(s),
            r = this.getRoomObjectFloor(s, e);
        if (t && t.logic && r && r.model) {
            const i = r.getLocation(),
                n = r.model.getValue(C.FURNITURE_SIZE_X),
                o = r.model.getValue(C.FURNITURE_SIZE_Y);
            t.processUpdateMessage(new $n($n.ADD, e, i.x, i.y, n, o))
        }
    }
    removeRoomInstanceFloorHole(s, e)
    {
        if (e < 0)
            return;
        const t = this.getRoomOwnObject(s);
        t && t.processUpdateMessage(new $n($n.REMOVE, e))
    }
    setRoomEngineGameMode(s, e)
    {
        const t = this.getRoomInstance(s);
        if (!t)
            return;
        const r = e ? 1 : 0;
        t.model.setValue(Nt.IS_PLAYING_GAME, r),
        r === 0 ? this.events.dispatchEvent(new ze(ze.NORMAL_MODE, s)) : this.events.dispatchEvent(new ze(ze.GAME_MODE, s))
    }
    isRoomIdPlayingGame(s)
    {
        const e = this.getRoomInstance(s);
        return e ? e.model.getValue(Nt.IS_PLAYING_GAME) > 0 : !1
    }
    isPlayingGame()
    {
        return this.isRoomIdPlayingGame(this._activeRoomId)
    }
    disableUpdate(s)
    {
        s ? ir().remove(this.update, this) : (ir().remove(this.update, this), ir().add(this.update, this))
    }
    runUpdate()
    {
        this.update(1)
    }
    runVisibilityUpdate()
    {
        document.hidden || this.update(1, !0)
    }
    update(s, e=!1)
    {
        this._roomManager && (s = Pe(), xs.turnVisualizationOn(), this.processPendingFurniture(), this._roomManager.update(s, e), this.updateRoomCameras(s), this._mouseCursorUpdate && this.setPointer(), xs.turnVisualizationOff())
    }
    setPointer()
    {
        this._mouseCursorUpdate = !1;
        const s = this.getRoomInstanceData(this._activeRoomId);
        s && s.hasButtonMouseCursorOwners() ? document.body.style.cursor = "pointer" : document.body.style.cursor = "auto"
    }
    processPendingFurniture()
    {
        if (this._skipFurnitureCreationForNextFrame) {
            this._skipFurnitureCreationForNextFrame = !1;
            return
        }
        const s = new Date().valueOf(),
            e = 5;
        for (const t of this._roomInstanceDatas.values()) {
            if (!t)
                continue;
            let r = null,
                i = 0,
                n = !1;
            for (; r = t.getNextPendingFurnitureFloor();)
                if (n = this.processPendingFurnitureFloor(t.roomId, r.id, r), !(++i % e) && new Date().valueOf() - s >= 40) {
                    this._skipFurnitureCreationForNextFrame = !0;
                    break
                }
            for (; !this._skipFurnitureCreationForNextFrame && (r = t.getNextPendingFurnitureWall());)
                if (n = this.processPendingFurnitureWall(t.roomId, r.id, r), !(++i % e) && new Date().valueOf() - s >= 40) {
                    this._skipFurnitureCreationForNextFrame = !0;
                    break
                }
            if (n && this._roomManager && (this._roomManager.getRoomInstance(this.getRoomId(t.roomId)).hasUninitializedObjects() || this.objectsInitialized(t.roomId.toString())), this._skipFurnitureCreationForNextFrame)
                return
        }
    }
    onRoomEngineInitalized(s)
    {
        if (s) {
            this._ready = !0,
            this.events.dispatchEvent(new ze(ze.ENGINE_INITIALIZED, 0));
            for (const e of this._roomDatas.values())
                e && this.createRoomInstance(e.roomId, e.data)
        }
    }
    processPendingFurnitureFloor(s, e, t)
    {
        if (!t) {
            const l = this.getRoomInstanceData(s);
            if (l && (t = l.getPendingFurnitureFloor(e)), !t)
                return !1
        }
        let r = t.type;
        r || (r = this.getFurnitureFloorName(t.typeId));
        const i = this.createRoomObjectFloor(s, e, r);
        if (!i)
            return !1;
        const n = i.model;
        if (n && (n.setValue(C.FURNITURE_COLOR, this.getFurnitureFloorColorIndex(t.typeId)), n.setValue(C.FURNITURE_TYPE_ID, t.typeId), n.setValue(C.FURNITURE_AD_URL, this.getRoomObjectAdUrl(t.type)), n.setValue(C.FURNITURE_REAL_ROOM_OBJECT, t.realRoomObject ? 1 : 0), n.setValue(C.FURNITURE_EXPIRY_TIME, t.expiryTime), n.setValue(C.FURNITURE_EXPIRTY_TIMESTAMP, Pe()), n.setValue(C.FURNITURE_USAGE_POLICY, t.usagePolicy), n.setValue(C.FURNITURE_OWNER_ID, t.ownerId), n.setValue(C.FURNITURE_OWNER_NAME, t.ownerName)), !this.updateRoomObjectFloor(s, e, t.location, t.direction, t.state, t.data, t.extra) || t.sizeZ >= 0 && !this.updateRoomObjectFloorHeight(s, e, t.sizeZ))
            return !1;
        this.events && this.events.dispatchEvent(new de(de.ADDED, s, e, V.FLOOR));
        const o = this.getPlacedRoomObjectData(s);
        return o && o.id === e && o.category === V.FLOOR && this.selectRoomObject(s, e, V.FLOOR), i.isReady && t.synchronized && this.addObjectToTileMap(s, i), !0
    }
    processPendingFurnitureWall(s, e, t)
    {
        if (!t) {
            const c = this.getRoomInstanceData(s);
            if (c && (t = c.getPendingFurnitureWall(e)), !t)
                return !1
        }
        let r = "";
        t.data && (r = t.data.getLegacyString());
        let i = this.getFurnitureWallName(t.typeId, r);
        i || (i = "");
        const n = this.createRoomObjectWall(s, e, i);
        if (!n)
            return !1;
        const o = n.model;
        if (o && (o.setValue(C.FURNITURE_COLOR, this.getFurnitureWallColorIndex(t.typeId)), o.setValue(C.FURNITURE_TYPE_ID, t.typeId), o.setValue(C.FURNITURE_AD_URL, this.getRoomObjectAdUrl(t.type)), o.setValue(C.FURNITURE_REAL_ROOM_OBJECT, t.realRoomObject ? 1 : 0), o.setValue(C.OBJECT_ACCURATE_Z_VALUE, 1), o.setValue(C.FURNITURE_EXPIRY_TIME, t.expiryTime), o.setValue(C.FURNITURE_EXPIRTY_TIMESTAMP, Pe()), o.setValue(C.FURNITURE_USAGE_POLICY, t.usagePolicy), o.setValue(C.FURNITURE_OWNER_ID, t.ownerId), o.setValue(C.FURNITURE_OWNER_NAME, t.ownerName)), !this.updateRoomObjectWall(s, e, t.location, t.direction, t.state, r))
            return !1;
        this.events && this.events.dispatchEvent(new de(de.ADDED, s, e, V.WALL));
        const l = this.getPlacedRoomObjectData(s);
        return l && Math.abs(l.id) === e && l.category === V.WALL && this.selectRoomObject(s, e, V.WALL), !0
    }
    setRoomSessionOwnUser(s, e)
    {
        if (!this._roomSessionManager)
            return;
        const t = this._roomSessionManager.getSession(s);
        t && t.setOwnRoomIndex(e);
        const r = this.getRoomCamera(s);
        r && (r.targetId = e, r.targetCategory = V.UNIT, r.activateFollowing(this.cameraFollowDuration))
    }
    get cameraFollowDuration()
    {
        return 1e3
    }
    updateRoomCameras(s)
    {
        for (const e of this._roomInstanceDatas.values()) {
            if (!e)
                continue;
            const t = e.roomCamera;
            if (!t)
                continue;
            let r = null;
            const i = this.getRoomObject(e.roomId, t.targetId, t.targetCategory);
            i && (r = i.getLocation()),
            r && (e.roomId !== this._activeRoomId || !this._activeRoomIsDragged) && this.updateRoomCamera(e.roomId, 1, r, s)
        }
        if (this._activeRoomWasDragged) {
            const e = this.getRoomInstanceRenderingCanvas(this._activeRoomId, 1);
            e && this.setRoomInstanceRenderingCanvasOffset(this._activeRoomId, 1, new Ge(e.screenOffsetX + this._activeRoomDragX, e.screenOffsetY + this._activeRoomDragY)),
            this._activeRoomDragX = 0,
            this._activeRoomDragY = 0
        }
    }
    updateRoomCamera(s, e, t, r)
    {
        const i = this.getRoomInstanceRenderingCanvas(s, e),
            n = this.getRoomInstanceData(s);
        if (!i || !n || i.scale !== 1)
            return;
        const o = i.geometry,
            l = n.roomCamera,
            c = this.getRoomInstance(s);
        if (!o || !l || !c)
            return;
        const u = this.getRoomCanvasRectangle(s, e);
        if (!u)
            return;
        let h = Math.floor(t.z) + 1;
        const d = Math.round(u.width),
            m = Math.round(u.height),
            p = this.getCanvasBoundingRectangle(e);
        if (p && (p.right < 0 || p.bottom < 0 || p.left >= d || p.top >= m) && l.reset(), l.screenWd !== d || l.screenHt !== m || l.scale !== o.scale || l.geometryUpdateId !== o.updateId || !w.isEqual(t, l.targetObjectLoc) || l.isMoving) {
            l.targetObjectLoc = t;
            const E = new w;
            E.assign(t),
            E.x = Math.round(E.x),
            E.y = Math.round(E.y);
            const T = c.model.getValue(Nt.ROOM_MIN_X) - .5,
                I = c.model.getValue(Nt.ROOM_MIN_Y) - .5,
                S = c.model.getValue(Nt.ROOM_MAX_X) + .5,
                A = c.model.getValue(Nt.ROOM_MAX_Y) + .5,
                N = Math.round((T + S) / 2),
                b = Math.round((I + A) / 2),
                v = 2;
            let D = new Ge(E.x - N, E.y - b);
            const G = o.scale / Math.sqrt(2),
                x = G / 2,
                F = new Pr;
            F.rotate(-(o.direction.x + 90) / 180 * Math.PI),
            D = F.apply(D),
            D.y = D.y * (x / G);
            const U = u.width / 2 / G - 1,
                z = u.height / 2 / x - 1;
            let Q = 0,
                j = 0,
                J = 0,
                X = 0,
                K = o.getScreenPoint(new w(N, b, v));
            if (!K)
                return;
            if (K.x = K.x + Math.round(u.width / 2), K.y = K.y + Math.round(u.height / 2), p)
                if (p.x += -i.screenOffsetX, p.y += -i.screenOffsetY, p.width > 1 && p.height > 1)
                    Q = (p.left - K.x - o.scale * .25) / G,
                    J = (p.right - K.x + o.scale * .25) / G,
                    j = (p.top - K.y - o.scale * .5) / x,
                    X = (p.bottom - K.y + o.scale * .5) / x;
                else {
                    o.adjustLocation(new w(-30, -30), 25);
                    return
                }
            else {
                o.adjustLocation(new w(0, 0), 25);
                return
            }
            let be = !1,
                he = !1,
                et = !1,
                Ut = !1;
            Math.round((J - Q) * G) < u.width ? (h = 2, D.x = (J + Q) / 2, et = !0) : (D.x > J - U && (D.x = J - U, be = !0), D.x < Q + U && (D.x = Q + U, be = !0)),
            Math.round((X - j) * x) < u.height ? (h = 2, D.y = (X + j) / 2, Ut = !0) : (D.y > X - z && (D.y = X - z, he = !0), D.y < j + z && (D.y = j + z, he = !0), he && (D.y = D.y / (x / G))),
            F.invert(),
            D = F.apply(D),
            D.x = D.x + N,
            D.y = D.y + b;
            let ms = .35,
                ut = .2,
                Ps = .2;
            const Cr = 10,
                It = 10;
            if (Ps * d > 100 && (Ps = 100 / d), ms * m > 150 && (ms = 150 / m), ut * m > 150 && (ut = 150 / m), l.limitedLocationX && l.screenWd == d && l.screenHt == m && (Ps = 0), l.limitedLocationY && l.screenWd == d && l.screenHt == m && (ms = 0, ut = 0), u.width = u.width * (1 - Ps * 2), u.height = u.height * (1 - (ms + ut)), u.width < Cr && (u.width = Cr), u.height < It && (u.height = It), ms + ut > 0 ? (u.x += -u.width / 2, u.y += -u.height * (ut / (ms + ut))) : (u.x += -u.width / 2, u.y += -u.height / 2), K = o.getScreenPoint(E), !K)
                return;
            if (K) {
                K.x = K.x + i.screenOffsetX,
                K.y = K.y + i.screenOffsetY,
                E.z = h,
                E.x = Math.round(D.x * 2) / 2,
                E.y = Math.round(D.y * 2) / 2,
                l.location || (o.location = E, this.useOffsetScrolling ? l.initializeLocation(new w(0, 0, 0)) : l.initializeLocation(E));
                const Ve = o.getScreenPoint(E),
                    Dt = new w(0, 0, 0);
                Ve && (Dt.x = Ve.x, Dt.y = Ve.y),
                (K.x < u.left || K.x > u.right) && !l.centeredLocX || (K.y < u.top || K.y > u.bottom) && !l.centeredLocY || et && !l.centeredLocX && l.screenWd != d || Ut && !l.centeredLocY && l.screenHt != m || l.roomWd != p.width || l.roomHt != p.height || l.screenWd != d || l.screenHt != m ? (l.limitedLocationX = be, l.limitedLocationY = he, this.useOffsetScrolling ? l.target = Dt : l.target = E) : (be || (l.limitedLocationX = !1), he || (l.limitedLocationY = !1))
            }
            l.centeredLocX = et,
            l.centeredLocY = Ut,
            l.screenWd = d,
            l.screenHt = m,
            l.scale = o.scale,
            l.geometryUpdateId = o.updateId,
            l.roomWd = p.width,
            l.roomHt = p.height,
            this._sessionDataManager.isCameraFollowDisabled || (this.useOffsetScrolling ? l.update(r, 8) : l.update(r, .5)),
            this.useOffsetScrolling ? this.setRoomInstanceRenderingCanvasOffset(this.activeRoomId, 1, new Ge(-l.location.x, -l.location.y)) : o.adjustLocation(l.location, 25)
        } else
            l.limitedLocationX = !1,
            l.limitedLocationY = !1,
            l.centeredLocX = !1,
            l.centeredLocY = !1
    }
    getRoomCanvasRectangle(s, e)
    {
        const t = this.getRoomInstanceRenderingCanvas(s, e);
        return t ? new Qr(0, 0, t.width, t.height) : null
    }
    getRoomObjectBoundingRectangle(s, e, t, r)
    {
        const i = this.getRoomInstanceGeometry(s, r);
        if (!i)
            return null;
        const n = this.getRoomObject(s, e, t);
        if (!n)
            return null;
        const o = n.visualization;
        if (!o)
            return null;
        const l = o.getBoundingRectangle(),
            c = this.getRoomInstanceRenderingCanvas(s, r),
            u = c ? c.scale : 1,
            h = i.getScreenPoint(n.getLocation());
        return !h || (h.x = Math.round(h.x), h.y = Math.round(h.y), l.x = l.x * u, l.y = l.y * u, l.width = l.width * u, l.height = l.height * u, h.x = h.x * u, h.y = h.y * u, l.x += h.x, l.y += h.y, !c) ? null : (l.x += Math.round(c.width / 2) + c.screenOffsetX, l.y += Math.round(c.height / 2) + c.screenOffsetY, l)
    }
    getCanvasBoundingRectangle(s)
    {
        return this.getRoomObjectBoundingRectangle(this._activeRoomId, Bt.ROOM_OBJECT_ID, V.ROOM, s)
    }
    getFurnitureFloorName(s)
    {
        return this._roomContentLoader ? this._roomContentLoader.getFurnitureFloorNameForTypeId(s) : null
    }
    getFurnitureWallName(s, e=null)
    {
        return this._roomContentLoader ? this._roomContentLoader.getFurnitureWallNameForTypeId(s, e) : null
    }
    getFurnitureFloorColorIndex(s)
    {
        return this._roomContentLoader ? this._roomContentLoader.getFurnitureFloorColorIndex(s) : null
    }
    getFurnitureWallColorIndex(s)
    {
        return this._roomContentLoader ? this._roomContentLoader.getFurnitureWallColorIndex(s) : null
    }
    getRoomInstanceData(s)
    {
        const e = this._roomInstanceDatas.get(s);
        if (e)
            return e;
        const t = new I3(s);
        return this._roomInstanceDatas.set(t.roomId, t), t
    }
    getRoomInstanceModelName(s)
    {
        const e = this.getRoomInstanceData(s);
        return e ? e.modelName : null
    }
    setRoomInstanceModelName(s, e)
    {
        const t = this.getRoomInstanceData(s);
        t && t.setModelName(e)
    }
    getRoomTileObjectMap(s)
    {
        const e = this.getRoomInstanceData(s);
        return e ? e.tileObjectMap : null
    }
    getCurrentRoomCamera()
    {
        return this.getRoomCamera(this._activeRoomId)
    }
    getRoomCamera(s)
    {
        const e = this.getRoomInstanceData(s);
        return e ? e.roomCamera : null
    }
    getSelectedRoomObjectData(s)
    {
        const e = this.getRoomInstanceData(s);
        return e ? e.selectedObject : null
    }
    setSelectedRoomObjectData(s, e)
    {
        const t = this.getRoomInstanceData(s);
        if (!t)
            return null;
        t.setSelectedObject(e),
        e && t.setPlacedObject(null)
    }
    getPlacedRoomObjectData(s)
    {
        const e = this.getRoomInstanceData(s);
        return e ? e.placedObject : null
    }
    setPlacedRoomObjectData(s, e)
    {
        const t = this.getRoomInstanceData(s);
        if (!t)
            return null;
        t.setPlacedObject(e)
    }
    cancelRoomObjectPlacement()
    {
        this._roomObjectEventHandler && this._roomObjectEventHandler.cancelRoomObjectPlacement(this._activeRoomId)
    }
    getFurnitureStackingHeightMap(s)
    {
        const e = this.getRoomInstanceData(s);
        return e ? e.furnitureStackingHeightMap : null
    }
    setFurnitureStackingHeightMap(s, e)
    {
        const t = this.getRoomInstanceData(s);
        if (!t)
            return null;
        t.setFurnitureStackingHeightMap(e)
    }
    getLegacyWallGeometry(s)
    {
        const e = this.getRoomInstanceData(s);
        return e ? e.legacyGeometry : null
    }
    createRoomObjectAndInitialize(s, e, t, r)
    {
        const i = this.getRoomInstance(s);
        return i ? i.createRoomObjectAndInitalize(e, t, r) : null
    }
    getTotalObjectsForManager(s, e)
    {
        const t = this.getRoomInstance(s);
        return t ? t.getTotalObjectsForManager(e) : 0
    }
    getRoomObject(s, e, t)
    {
        if (!this._ready)
            return null;
        let r = this.getRoomId(s);
        return s === 0 && (r = Bt.TEMPORARY_ROOM), this.getObject(r, e, t)
    }
    getObject(s, e, t)
    {
        let r = null;
        if (this._roomManager && (r = this._roomManager.getRoomInstance(s)), !r)
            return null;
        let i = r.getRoomObject(e, t);
        if (!i)
            switch (t) {
            case V.FLOOR:
                this.processPendingFurnitureFloor(this.getRoomIdFromString(s), e, null),
                i = r.getRoomObject(e, t);
                break;
            case V.WALL:
                this.processPendingFurnitureWall(this.getRoomIdFromString(s), e, null),
                i = r.getRoomObject(e, t);
                break
            }
        return i
    }
    getRoomObjectByIndex(s, e, t)
    {
        const r = this.getRoomInstance(s);
        return r ? r.getRoomObjectByIndex(e, t) : null
    }
    getRoomObjectCategoryForType(s)
    {
        return !s || !this._roomContentLoader ? V.MINIMUM : this._roomContentLoader.getCategoryForType(s)
    }
    getRoomObjectCursor(s)
    {
        return this.getObject(this.getRoomId(s), Bt.CURSOR_OBJECT_ID, V.CURSOR)
    }
    getRoomObjectSelectionArrow(s)
    {
        return this.getObject(this.getRoomId(s), Bt.ARROW_OBJECT_ID, V.CURSOR)
    }
    getRoomOwnObject(s)
    {
        return this.getObject(this.getRoomId(s), Bt.ROOM_OBJECT_ID, V.ROOM)
    }
    getRoomObjectUser(s, e)
    {
        return this.getObject(this.getRoomId(s), e, V.UNIT)
    }
    removeRoomObjectUser(s, e)
    {
        return this.removeRoomObject(s, e, V.UNIT)
    }
    createRoomObjectUser(s, e, t)
    {
        return this.createRoomObjectAndInitialize(s, e, t, V.UNIT)
    }
    getRoomObjectFloor(s, e)
    {
        return this.getObject(this.getRoomId(s), e, V.FLOOR)
    }
    createRoomObjectFloor(s, e, t)
    {
        return this.createRoomObjectAndInitialize(s, e, t, V.FLOOR)
    }
    removeRoomObjectFloor(s, e, t=-1, r=!1)
    {
        const i = this.getRoomInstanceData(s);
        if (i && i.removePendingFunitureFloor(e), this._sessionDataManager && t === this._sessionDataManager.userId && !Of.isBuilderClubId(e)) {
            const n = this.getRoomObject(s, e, V.FLOOR);
            if (n) {
                const o = this.getRoomObjectScreenLocation(s, e, V.FLOOR, this._activeRoomActiveCanvas);
                if (o && !(n.model.getValue(C.FURNITURE_DISABLE_PICKING_ANIMATION) === 1)) {
                    const c = n.model.getValue(C.FURNITURE_TYPE_ID),
                        u = n.model.getValue(C.FURNITURE_EXTRAS),
                        h = n.model.getValue(C.FURNITURE_DATA_FORMAT),
                        d = Tn.getData(h),
                        m = this.getFurnitureFloorIcon(c, null, u, d).data;
                    if (m) {
                        const p = pt.generateImage(m);
                        if (this.events) {
                            const E = new yh(p, o.x, o.y);
                            E.iconName = ia.INVENTORY,
                            this.events.dispatchEvent(E)
                        }
                    }
                }
            }
        }
        this.removeRoomObject(s, e, V.FLOOR),
        this.setMouseDefault(s, V.FLOOR, e),
        r && this.refreshTileObjectMap(s, "RoomEngine.disposeObjectFurniture()")
    }
    getRoomObjectWall(s, e)
    {
        return this.getObject(this.getRoomId(s), e, V.WALL)
    }
    removeRoomObjectWall(s, e, t=-1)
    {
        if (this._sessionDataManager && t === this._sessionDataManager.userId && !Of.isBuilderClubId(e)) {
            const r = this.getRoomObject(s, e, V.WALL);
            if (r && r.type.indexOf("post_it") === -1 && r.type.indexOf("external_image_wallitem") === -1) {
                const i = this.getRoomObjectScreenLocation(s, e, V.WALL, this._activeRoomActiveCanvas);
                if (i) {
                    const n = r.model.getValue(C.FURNITURE_TYPE_ID),
                        o = r.model.getValue(C.FURNITURE_DATA),
                        l = this.getFurnitureWallIcon(n, null, o).data;
                    if (l) {
                        const c = pt.generateImage(l);
                        if (this.events) {
                            const u = new yh(c, i.x, i.y);
                            u.iconName = ia.INVENTORY,
                            this.events.dispatchEvent(u)
                        }
                    }
                }
            }
        }
        this.removeRoomObject(s, e, V.WALL),
        this.updateRoomObjectMask(s, e, !1),
        this.setMouseDefault(s, V.WALL, e)
    }
    createRoomObjectWall(s, e, t)
    {
        return this.createRoomObjectAndInitialize(s, e, t, V.WALL)
    }
    removeRoomObject(s, e, t)
    {
        const r = this.getRoomInstance(s);
        if (!r)
            return null;
        r.removeRoomObject(e, t),
        this.events && this.events.dispatchEvent(new de(de.REMOVED, s, e, t))
    }
    addFurnitureFloor(s, e, t, r, i, n, o, l=NaN, c=-1, u=0, h=0, d="", m=!0, p=!0, E=-1)
    {
        const T = this.getRoomInstanceData(s);
        if (!T)
            return !1;
        const I = new N_(e, t, null, r, i, n, o, l, c, u, h, d, m, p, E);
        return T.addPendingFurnitureFloor(I), !0
    }
    addFurnitureFloorByTypeName(s, e, t, r, i, n, o, l=NaN, c=-1, u=0, h=0, d="", m=!0, p=!0, E=-1)
    {
        const T = this.getRoomInstanceData(s);
        if (!T)
            return !1;
        const I = new N_(e, 0, t, r, i, n, o, l, c, u, h, d, m, p, E);
        return T.addPendingFurnitureFloor(I), !0
    }
    addFurnitureWall(s, e, t, r, i, n, o, l=-1, c=0, u=0, h="", d=!0)
    {
        const m = this.getRoomInstanceData(s);
        if (!m)
            return !1;
        const p = new Lr;
        p.setString(o);
        const E = new N_(e, t, null, r, i, n, p, NaN, l, c, u, h, !0, d);
        return m.addPendingFurnitureWall(E), !0
    }
    updateRoomObjectFloor(s, e, t, r, i, n, o=null)
    {
        const l = this.getRoomObjectFloor(s, e);
        return l ? (l.processUpdateMessage(new Bs(t, r)), l.processUpdateMessage(new Gt(i, n, o)), !0) : !1
    }
    updateRoomObjectWall(s, e, t, r, i, n=null)
    {
        const o = this.getRoomObjectWall(s, e);
        if (!o || !o.logic)
            return !1;
        const l = new Bs(t, r),
            c = new Lr,
            u = new Gt(i, c);
        return c.setString(n), o.logic.processUpdateMessage(l), o.logic.processUpdateMessage(u), this.updateRoomObjectMask(s, e), !0
    }
    updateRoomObjectWallItemData(s, e, t)
    {
        const r = this.getRoomObjectWall(s, e);
        return !r || !r.logic ? !1 : (r.logic.processUpdateMessage(new pE(t)), !0)
    }
    updateRoomObjectFloorHeight(s, e, t)
    {
        const r = this.getRoomObjectFloor(s, e);
        return r ? (r.processUpdateMessage(new bD(null, null, t)), !0) : !1
    }
    updateRoomObjectFloorExpiration(s, e, t)
    {
        const r = this.getRoomObjectFloor(s, e);
        return r ? (r.model.setValue(C.FURNITURE_EXPIRY_TIME, t), r.model.setValue(C.FURNITURE_EXPIRTY_TIMESTAMP, Pe()), !0) : !1
    }
    updateRoomObjectWallExpiration(s, e, t)
    {
        const r = this.getRoomObjectWall(s, e);
        return r ? (r.model.setValue(C.FURNITURE_EXPIRY_TIME, t), r.model.setValue(C.FURNITURE_EXPIRTY_TIMESTAMP, Pe()), !0) : !1
    }
    updateRoomObjectMask(s, e, t=!0)
    {
        const r = V.WALL + "_" + e,
            i = this.getRoomObjectWall(s, e);
        let n = null;
        if (i && i.model) {
            if (i.model.getValue(C.FURNITURE_USES_PLANE_MASK) > 0) {
                const l = i.model.getValue(C.FURNITURE_PLANE_MASK_TYPE),
                    c = i.getLocation();
                t ? n = new Js(Js.ADD_MASK, r, l, c) : n = new Js(Js.REMOVE_MASK, r)
            }
        } else
            n = new Js(Js.REMOVE_MASK, r);
        const o = this.getRoomOwnObject(s);
        o && o.logic && n && o.logic.processUpdateMessage(n)
    }
    rollRoomObjectFloor(s, e, t, r)
    {
        const i = this.getRoomObjectFloor(s, e);
        i && i.processUpdateMessage(new ka(t, r, null, !!r))
    }
    updateRoomObjectWallLocation(s, e, t)
    {
        const r = this.getRoomObjectWall(s, e);
        return r ? (r.logic && r.logic.processUpdateMessage(new ka(t, null, null)), this.updateRoomObjectMask(s, e), !0) : !1
    }
    addRoomObjectUser(s, e, t, r, i, n, o)
    {
        if (this.getRoomObjectUser(s, e))
            return !1;
        let c = it.getTypeString(n);
        c === it.PET && (c = this.getPetType(o));
        const u = this.createRoomObjectUser(s, e, c);
        return u ? (u.processUpdateMessage(new $h(this.fixedUserLocation(s, t), null, r, i, !1, 0)), o && u.processUpdateMessage(new Jh(o)), this.events && this.events.dispatchEvent(new de(de.ADDED, s, e, V.UNIT)), !0) : !1
    }
    updateRoomObjectUserLocation(s, e, t, r, i=!1, n=0, o=null, l=NaN)
    {
        const c = this.getRoomObjectUser(s, e);
        if (!c)
            return !1;
        t || (t = c.getLocation()),
        o || (o = c.getDirection()),
        isNaN(l) && (l = c.model.getValue(C.HEAD_DIRECTION)),
        c.processUpdateMessage(new $h(this.fixedUserLocation(s, t), this.fixedUserLocation(s, r), o, l, i, n));
        const u = this._roomSessionManager && this._roomSessionManager.getSession(s) || null;
        return u && u.ownRoomIndex === e && this._logicFactory.events.dispatchEvent(new Hc(Hc.ROAME_MOVE_TO, r)), !0
    }
    fixedUserLocation(s, e)
    {
        if (!e)
            return null;
        const t = this.getFurnitureStackingHeightMap(s),
            r = this.getLegacyWallGeometry(s);
        if (!t || !r)
            return e;
        let i = e.z;
        const n = t.getTileHeight(e.x, e.y),
            o = r.getHeight(e.x, e.y);
        return Math.abs(i - n) < .1 && Math.abs(n - o) < .1 && (i = r.getFloorAltitude(e.x, e.y)), new w(e.x, e.y, i)
    }
    updateRoomObjectUserAction(s, e, t, r, i=null)
    {
        const n = this.getRoomObjectUser(s, e);
        if (!n)
            return !1;
        let o = null;
        switch (t) {
        case C.FIGURE_TALK:
            o = new fE(r);
            break;
        case C.FIGURE_SLEEP:
            o = new EE(r === 1);
            break;
        case C.FIGURE_IS_TYPING:
            o = new yD(r === 1);
            break;
        case C.FIGURE_IS_MUTED:
            o = new RD(r === 1);
            break;
        case C.FIGURE_CARRY_OBJECT:
            o = new gD(r, i);
            break;
        case C.FIGURE_USE_OBJECT:
            o = new MD(r);
            break;
        case C.FIGURE_DANCE:
            o = new fD(r);
            break;
        case C.FIGURE_GAINED_EXPERIENCE:
            o = new ED(r);
            break;
        case C.FIGURE_NUMBER_VALUE:
            o = new CD(r);
            break;
        case C.FIGURE_SIGN:
            o = new ND(r);
            break;
        case C.FIGURE_EXPRESSION:
            o = new pD(r);
            break;
        case C.FIGURE_IS_PLAYING_GAME:
            o = new AD(r === 1);
            break;
        case C.FIGURE_GUIDE_STATUS:
            o = new jz(r);
            break
        }
        return o ? (n.processUpdateMessage(o), !0) : !1
    }
    updateRoomObjectUserFigure(s, e, t, r=null, i=null, n=!1)
    {
        const o = this.getRoomObjectUser(s, e);
        return o ? (o.processUpdateMessage(new Jh(t, r, i, n)), !0) : !1
    }
    updateRoomObjectUserFlatControl(s, e, t)
    {
        const r = this.getRoomObjectUser(s, e);
        return r ? (r.processUpdateMessage(new ID(parseInt(t))), !0) : !1
    }
    updateRoomObjectUserEffect(s, e, t, r=0)
    {
        const i = this.getRoomObjectUser(s, e);
        return i ? (i.processUpdateMessage(new mD(t, r)), !0) : !1
    }
    updateRoomObjectUserGesture(s, e, t)
    {
        const r = this.getRoomObjectUser(s, e);
        return r ? (r.processUpdateMessage(new TD(t)), !0) : !1
    }
    updateRoomObjectUserPetGesture(s, e, t)
    {
        const r = this.getRoomObjectUser(s, e);
        return r ? (r.processUpdateMessage(new SD(t)), !0) : !1
    }
    updateRoomObjectUserPosture(s, e, t, r=null)
    {
        const i = this.getRoomObjectUser(s, e);
        return i ? (i.processUpdateMessage(new mE(t, r)), !0) : !1
    }
    updateRoomObjectUserOwn(s, e)
    {
        const t = this.getRoomObjectUser(s, e);
        t && t.processUpdateMessage(new OD)
    }
    useRoomObject(s, e)
    {
        const t = this.getRoomObject(this._activeRoomId, s, e);
        if (t) {
            const r = t.logic;
            if (r)
                return r.useObject(), !0
        }
        return !1
    }
    objectInitialized(s, e, t)
    {
        const r = this.getRoomIdFromString(s);
        t === V.WALL && this.updateRoomObjectMask(r, e);
        const i = this.getRoomObject(r, e, t);
        if (i && i.model && i.logic) {
            const n = i.model.getValue(C.FURNITURE_DATA_FORMAT);
            if (!isNaN(n)) {
                const o = Tn.getData(n);
                o.initializeFromRoomObjectModel(i.model),
                i.processUpdateMessage(new Gt(i.getState(0), o))
            }
            this.events.dispatchEvent(new de(de.CONTENT_UPDATED, r, e, t))
        }
        s !== Bt.TEMPORARY_ROOM && this.addObjectToTileMap(r, i)
    }
    changeObjectModelData(s, e, t, r, i)
    {
        const n = this.getObject(this.getRoomId(s), e, t);
        if (!n || !n.logic)
            return !1;
        const o = new DD(r, i);
        return n.processUpdateMessage(o), !0
    }
    changeObjectState(s, e, t)
    {
        const r = this.getObject(this.getRoomId(s), e, t);
        if (!r || !r.model)
            return;
        let i = r.model.getValue(C.FURNITURE_AUTOMATIC_STATE_INDEX);
        isNaN(i) ? i = 1 : i = i + 1,
        r.model.setValue(C.FURNITURE_AUTOMATIC_STATE_INDEX, i);
        const n = r.model.getValue(C.FURNITURE_DATA_FORMAT),
            o = Tn.getData(n);
        o.initializeFromRoomObjectModel(r.model),
        r.logic && r.logic.processUpdateMessage(new Gt(i, o))
    }
    loadRoomObjectBadgeImage(s, e, t, r, i=!0)
    {
        if (!this._sessionDataManager)
            return;
        let n = null;
        if (s === 0) {
            const l = this._roomManager.getRoomInstance(Bt.TEMPORARY_ROOM);
            l && (n = l.getRoomObject(e, t))
        } else
            n = this.getRoomObjectFloor(s, e);
        if (!n || !n.logic)
            return;
        let o = i ? this._sessionDataManager.loadGroupBadgeImage(r) : this._sessionDataManager.loadBadgeImage(r);
        if (o)
            this.putBadgeInObjectAssets(n, r, i);
        else {
            o = "loading_icon",
            this._badgeListenerObjects || (this._badgeListenerObjects = new Map),
            this._badgeListenerObjects.size || this._sessionDataManager.events.addEventListener(wa.IMAGE_READY, this.onBadgeImageReadyEvent);
            let l = this._badgeListenerObjects.get(r);
            l || (l = []),
            l.push(new T3(n, i)),
            this._badgeListenerObjects.set(r, l)
        }
        n.logic.processUpdateMessage(new kl(r, o))
    }
    onBadgeImageReadyEvent(s)
    {
        if (!this._sessionDataManager)
            return;
        const e = this._badgeListenerObjects && this._badgeListenerObjects.get(s.badgeId);
        if (e) {
            for (const t of e) {
                if (!t)
                    continue;
                this.putBadgeInObjectAssets(t.object, s.badgeId, t.groupBadge);
                const r = t.groupBadge ? this._sessionDataManager.loadGroupBadgeImage(s.badgeId) : this._sessionDataManager.loadBadgeImage(s.badgeId);
                t.object && t.object.logic && t.object.logic.processUpdateMessage(new kl(s.badgeId, r))
            }
            this._badgeListenerObjects.delete(s.badgeId),
            this._badgeListenerObjects.size || this._sessionDataManager.events.removeEventListener(wa.IMAGE_READY, this.onBadgeImageReadyEvent)
        }
    }
    putBadgeInObjectAssets(s, e, t=!1)
    {
        if (!this._roomContentLoader || !this._sessionDataManager)
            return;
        const r = t ? this._sessionDataManager.loadGroupBadgeImage(e) : this._sessionDataManager.loadBadgeImage(e),
            i = t ? this._sessionDataManager.getGroupBadgeImage(e) : this._sessionDataManager.getBadgeImage(e);
        i && this._roomContentLoader.addAssetToCollection(s.type, r, i, !1)
    }
    dispatchMouseEvent(s, e, t, r, i, n, o, l)
    {
        const c = this.getRoomInstanceRenderingCanvas(this._activeRoomId, s);
        if (!c)
            return;
        const u = this.getRenderingCanvasOverlay(c),
            h = this.getOverlayIconSprite(u, Bt.OBJECT_ICON_SPRITE);
        if (h) {
            const d = h.getLocalBounds();
            h.x = e - d.width / 2,
            h.y = t - d.height / 2
        }
        if (!this.handleRoomDragging(c, e, t, r, i, n, o) && !c.handleMouseEvent(e, t, r, i, n, o, l)) {
            let d = null;
            r === le.MOUSE_CLICK ? (this.events && this.events.dispatchEvent(new de(de.DESELECTED, this._activeRoomId, -1, V.MINIMUM)), d = De.CLICK) : r === le.MOUSE_MOVE ? d = De.MOUSE_MOVE : r === le.MOUSE_DOWN ? d = De.MOUSE_DOWN : r === le.MOUSE_DOWN_LONG ? d = De.MOUSE_DOWN_LONG : r === le.MOUSE_UP && (d = De.MOUSE_UP),
            this._roomObjectEventHandler.handleRoomObjectEvent(new De(d, this.getRoomObject(this._activeRoomId, Bt.ROOM_OBJECT_ID, V.ROOM), null, i), this._activeRoomId)
        }
        this._activeRoomActiveCanvas = s,
        this._activeRoomActiveCanvasMouseX = e,
        this._activeRoomActiveCanvasMouseY = t
    }
    handleRoomDragging(s, e, t, r, i, n, o)
    {
        let l = e - this._activeRoomActiveCanvasMouseX,
            c = t - this._activeRoomActiveCanvasMouseY;
        if (r === le.MOUSE_DOWN)
            !i && !n && !o && !this.isDecorating && this._roomAllowsDragging && (this._activeRoomIsDragged = !0, this._activeRoomWasDragged = !1, this._activeRoomDragStartX = this._activeRoomActiveCanvasMouseX, this._activeRoomDragStartY = this._activeRoomActiveCanvasMouseY);
        else if (r === le.MOUSE_UP) {
            if (this._activeRoomIsDragged && (this._activeRoomIsDragged = !1, this._activeRoomWasDragged)) {
                const u = this.getRoomInstanceData(this._activeRoomId);
                if (u) {
                    const h = u.roomCamera;
                    h && (this.useOffsetScrolling && (h.isMoving || (h.centeredLocX = !1, h.centeredLocY = !1), h.resetLocation(new w(-s.screenOffsetX, -s.screenOffsetY))), this._roomDraggingAlwaysCenters && h.reset())
                }
            }
        } else if (r === le.MOUSE_MOVE)
            this._activeRoomIsDragged && (this._activeRoomWasDragged || (l = e - this._activeRoomDragStartX, c = t - this._activeRoomDragStartY, (l <= -Bt.DRAG_THRESHOLD || l >= Bt.DRAG_THRESHOLD || c <= -Bt.DRAG_THRESHOLD || c >= Bt.DRAG_THRESHOLD) && (this._activeRoomWasDragged = !0), l = 0, c = 0), (l != 0 || c != 0) && (this._activeRoomDragX += l, this._activeRoomDragY += c, this._activeRoomWasDragged = !0));
        else if ((r === le.MOUSE_CLICK || r === le.DOUBLE_CLICK) && (this._activeRoomIsDragged = !1, this._activeRoomWasDragged))
            return this._activeRoomWasDragged = !1, !0;
        return !1
    }
    updateMousePointer(s, e, t)
    {
        const r = this.getRoomObjectCategoryForType(t);
        switch (s) {
        case ce.MOUSE_BUTTON:
            this.setMouseButton(this._activeRoomId, r, e);
            return;
        default:
            this.setMouseDefault(this._activeRoomId, r, e);
            return
        }
    }
    setMouseButton(s, e, t)
    {
        if (!this._roomSessionManager)
            return;
        const r = this._roomSessionManager.getSession(s);
        if (r && (e !== V.FLOOR && e !== V.WALL || r.controllerLevel >= ct.GUEST)) {
            const i = this.getRoomInstanceData(s);
            i && i.addButtonMouseCursorOwner(e + "_" + t) && (this._mouseCursorUpdate = !0)
        }
    }
    setMouseDefault(s, e, t)
    {
        if (!this._roomSessionManager)
            return;
        const r = this.getRoomInstanceData(s);
        r && r.removeButtonMouseCursorOwner(e + "_" + t) && (this._mouseCursorUpdate = !0)
    }
    processRoomObjectOperation(s, e, t)
    {
        if (!this._roomObjectEventHandler)
            return !1;
        this._roomObjectEventHandler.modifyRoomObject(this._activeRoomId, s, e, t)
    }
    modifyRoomObjectDataWithMap(s, e, t, r)
    {
        if (!this._roomObjectEventHandler)
            return !1;
        e === V.FLOOR && this._roomObjectEventHandler.modifyRoomObjectDataWithMap(this._activeRoomId, s, e, t, r)
    }
    modifyRoomObjectData(s, e, t, r)
    {
        if (!this._roomObjectEventHandler)
            return !1;
        e === V.WALL && this._roomObjectEventHandler.modifyWallItemData(this._activeRoomId, s, t, r)
    }
    processRoomObjectEvent(s)
    {
        if (!this._roomObjectEventHandler)
            return;
        const e = this.getRoomObjectRoomId(s.object);
        if (!e)
            return;
        const t = this.getRoomIdFromString(e);
        this._roomObjectEventHandler.handleRoomObjectEvent(s, t)
    }
    processRoomObjectPlacement(s, e, t, r, i=null, n=null, o=-1, l=-1, c=null)
    {
        const u = this.getRoomInstance(this._activeRoomId);
        return !u || u.model.getValue(Nt.ROOM_IS_PUBLIC) !== 0 || !this._roomObjectEventHandler ? !1 : this._roomObjectEventHandler.processRoomObjectPlacement(s, this._activeRoomId, e, t, r, i, n, o, l, c)
    }
    getRoomObjectScreenLocation(s, e, t, r=-1)
    {
        r == -1 && (r = this._activeRoomActiveCanvas);
        const i = this.getRoomInstanceGeometry(s, r);
        if (!i)
            return null;
        const n = this.getRoomObject(s, e, t);
        if (!n)
            return null;
        const o = i.getScreenPoint(n.getLocation());
        if (!o)
            return null;
        const l = this.getRoomInstanceRenderingCanvas(s, r);
        return l ? (o.x = o.x * l.scale, o.y = o.y * l.scale, o.x += l.width / 2 + l.screenOffsetX, o.y += l.height / 2 + l.screenOffsetY, o.x = Math.round(o.x), o.y = Math.round(o.y), o) : null
    }
    selectRoomObject(s, e, t)
    {
        this._roomObjectEventHandler && this._roomObjectEventHandler.setSelectedObject(s, e, t)
    }
    setSelectedAvatar(s, e)
    {
        this._roomObjectEventHandler || this._roomObjectEventHandler.setSelectedAvatar(s, e, !0)
    }
    cancelRoomObjectInsert()
    {
        this._roomObjectEventHandler && this._roomObjectEventHandler.cancelRoomObjectInsert(this._activeRoomId)
    }
    addOverlayIconSprite(s, e, t, r=1)
    {
        if (!s || !t)
            return;
        let i = this.getOverlayIconSprite(s, e);
        return i ? null : (i = new qt(t), i.name = e, i.scale.set(r), s.addChild(i), i)
    }
    onRoomContentLoaded(s, e, t)
    {
        if (!this._roomContentLoader || s === -1)
            return;
        this._thumbnailObjectIdBank.freeNumber(s - 1);
        const r = this._thumbnailCallbacks.get(e);
        if (r) {
            this._thumbnailCallbacks.delete(e);
            const i = this._roomContentLoader.getImage(e);
            if (i)
                for (const n of r)
                    n && n.imageReady(s, null, i)
        }
    }
    setObjectMoverIconSprite(s, e, t, r=null, i=null, n=-1, o=-1, l=null)
    {
        let c = null,
            u = 0,
            h = null;
        const d = 1;
        if (t)
            h = this.getRoomObjectImage(this._activeRoomId, s, e, new w, 1, null);
        else if (this._roomContentLoader)
            if (e === V.FLOOR ? (c = this._roomContentLoader.getFurnitureFloorNameForTypeId(s), u = this._roomContentLoader.getFurnitureFloorColorIndex(s)) : e === V.WALL && (c = this._roomContentLoader.getFurnitureWallNameForTypeId(s, r), u = this._roomContentLoader.getFurnitureWallColorIndex(s)), e === V.UNIT)
                if (c = it.getTypeString(s), c === "pet") {
                    c = this.getPetType(r);
                    const T = new Nn(r);
                    h = this.getRoomObjectPetImage(T.typeId, T.paletteId, T.color, new w(180), 64, null, !0, 0, T.customParts, l)
                } else
                    h = this.getGenericRoomObjectImage(c, r, new w(180), 64, null, 0, null, i, n, o, l);
            else
                h = this.getGenericRoomObjectImage(c, u.toString(), new w, 1, null, 0, r, i, n, o, l);
        if (!h || !h.data)
            return;
        const m = this.getActiveRoomInstanceRenderingCanvas();
        if (!m)
            return;
        const p = this.getRenderingCanvasOverlay(m);
        this.removeOverlayIconSprite(p, Bt.OBJECT_ICON_SPRITE);
        const E = this.addOverlayIconSprite(p, Bt.OBJECT_ICON_SPRITE, h.data, d);
        E && (E.x = this._activeRoomActiveCanvasMouseX - h.data.width / 2, E.y = this._activeRoomActiveCanvasMouseY - h.data.height / 2)
    }
    getRoomObjectImage(s, e, t, r, i, n, o=0)
    {
        if (!this._roomManager)
            return null;
        let l = -1,
            c = null,
            u = null,
            h = "",
            d = null;
        const m = this.getRoomId(s),
            p = this._roomManager.getRoomInstance(m);
        if (p) {
            const E = p.getRoomObject(e, t);
            if (E && E.model)
                switch (l = E.id, c = E.type, t) {
                case V.FLOOR:
                case V.WALL:
                    {
                        h = E.model.getValue(C.FURNITURE_COLOR).toString(),
                        d = E.model.getValue(C.FURNITURE_EXTRAS);
                        const T = E.model.getValue(C.FURNITURE_DATA_FORMAT);
                        T !== Lr.FORMAT_KEY && (u = Tn.getData(T), u.initializeFromRoomObjectModel(E.model));
                        break
                    }case V.UNIT:
                    h = E.model.getValue(C.FIGURE);
                    break
                }
        }
        return this.getGenericRoomObjectImage(c, h, r, i, n, o, d, u, -1, -1, null, l)
    }
    getFurnitureFloorIconUrl(s)
    {
        let e = null,
            t = "";
        return this._roomContentLoader ? (e = this._roomContentLoader.getFurnitureFloorNameForTypeId(s), t = this._roomContentLoader.getFurnitureFloorColorIndex(s).toString(), this._roomContentLoader.getAssetIconUrl(e, t)) : null
    }
    getFurnitureFloorIcon(s, e, t=null, r=null)
    {
        return this.getFurnitureFloorImage(s, new w, 1, e, 0, t, -1, -1, r)
    }
    getFurnitureWallIconUrl(s, e=null)
    {
        let t = null,
            r = "";
        return this._roomContentLoader ? (t = this._roomContentLoader.getFurnitureWallNameForTypeId(s, e), r = this._roomContentLoader.getFurnitureWallColorIndex(s).toString(), this._roomContentLoader.getAssetIconUrl(t, r)) : null
    }
    getFurnitureWallIcon(s, e, t=null)
    {
        return this.getFurnitureWallImage(s, new w, 1, e, 0, t)
    }
    getFurnitureFloorImage(s, e, t, r, i=0, n=null, o=-1, l=-1, c=null)
    {
        let u = null,
            h = "";
        return this._roomContentLoader && (u = this._roomContentLoader.getFurnitureFloorNameForTypeId(s), h = this._roomContentLoader.getFurnitureFloorColorIndex(s).toString()), t === 1 && r ? this.getGenericRoomObjectThumbnail(u, h, r, n, c) : this.getGenericRoomObjectImage(u, h, e, t, r, i, n, c, o, l)
    }
    getFurnitureWallImage(s, e, t, r, i=0, n=null, o=-1, l=-1)
    {
        let c = null,
            u = "";
        return this._roomContentLoader && (c = this._roomContentLoader.getFurnitureWallNameForTypeId(s), u = this._roomContentLoader.getFurnitureWallColorIndex(s).toString()), t === 1 && r ? this.getGenericRoomObjectThumbnail(c, u, r, n, null) : this.getGenericRoomObjectImage(c, u, e, t, r, i, n, null, o, l)
    }
    getRoomObjectPetImage(s, e, t, r, i, n, o=!1, l=0, c=null, u=null)
    {
        let h = null,
            d = s + " " + e + " " + t.toString(16);
        if (o && (d = d + " head"), c) {
            d = d + (" " + c.length);
            for (const m of c)
                d = d + (" " + m.layerId + " " + m.partId + " " + m.paletteId)
        }
        return this._roomContentLoader && (h = this._roomContentLoader.getPetNameForType(s)), this.getGenericRoomObjectImage(h, d, r, i, n, l, null, null, -1, -1, u)
    }
    getGenericRoomObjectImage(s, e, t, r, i, n=0, o=null, l=null, c=-1, u=-1, h=null, d=-1)
    {
        if (!this._roomManager)
            return null;
        const m = new pp;
        if (m.id = -1, !this._ready || !s)
            return m;
        let p = this._roomManager.getRoomInstance(Bt.TEMPORARY_ROOM);
        if (!p && (p = this._roomManager.createRoomInstance(Bt.TEMPORARY_ROOM), !p))
            return m;
        let E = this._imageObjectIdBank.reserveNumber();
        const T = this.getRoomObjectCategoryForType(s);
        if (E < 0)
            return m;
        E++;
        const I = p.createRoomObjectAndInitalize(E, s, T);
        if (!I || !I.model || !I.logic)
            return m;
        const S = I.model;
        switch (T) {
        case V.FLOOR:
        case V.WALL:
            S.setValue(C.FURNITURE_COLOR, parseInt(e)),
            S.setValue(C.FURNITURE_EXTRAS, o);
            break;
        case V.UNIT:
            if (s === it.USER || s === it.BOT || s === it.RENTABLE_BOT || s === it.PET)
                S.setValue(C.FIGURE, e);
            else {
                const v = new Nn(e);
                S.setValue(C.PET_PALETTE_INDEX, v.paletteId),
                S.setValue(C.PET_COLOR, v.color),
                v.headOnly && S.setValue(C.PET_HEAD_ONLY, 1),
                v.hasCustomParts && (S.setValue(C.PET_CUSTOM_LAYER_IDS, v.customLayerIds), S.setValue(C.PET_CUSTOM_PARTS_IDS, v.customPartIds), S.setValue(C.PET_CUSTOM_PALETTE_IDS, v.customPaletteIds)),
                h && S.setValue(C.FIGURE_POSTURE, h)
            }
            break
        }
        I.setDirection(t);
        const A = I.visualization;
        if (!A)
            return p.removeRoomObject(E, T), m;
        (c > -1 || l) && (l && l.getLegacyString() !== "" ? I.logic.processUpdateMessage(new Gt(parseInt(l.getLegacyString()), l)) : I.logic.processUpdateMessage(new Gt(c, l)));
        const N = new qa(r, new w(-135, 30, 0), new w(11, 11, 5));
        if (A.update(N, 0, !0, !1), u > 0) {
            let v = 0;
            for (; v < u;)
                A.update(N, 0, !0, !1),
                v++
        }
        const b = A.getImage(n, d);
        if (m.data = b, m.id = E, !this.isRoomContentTypeLoaded(s) && i) {
            let v = this._imageCallbacks.get(E.toString());
            v || (v = [], this._imageCallbacks.set(E.toString(), v)),
            v.push(i),
            S.setValue(C.IMAGE_QUERY_SCALE, r)
        } else
            p.removeRoomObject(E, T),
            this._imageObjectIdBank.freeNumber(E - 1),
            m.id = 0;
        return N.dispose(), m
    }
    getGenericRoomObjectThumbnail(s, e, t, r=null, i=null)
    {
        if (!this._roomManager)
            return null;
        const n = new pp;
        if (n.id = -1, !this._ready || !s)
            return n;
        let o = this._roomManager.getRoomInstance(Bt.TEMPORARY_ROOM);
        if (!o && (o = this._roomManager.createRoomInstance(Bt.TEMPORARY_ROOM), !o))
            return n;
        let l = this._thumbnailObjectIdBank.reserveNumber();
        if (this.getRoomObjectCategoryForType(s), l < 0)
            return n;
        l++,
        n.id = l,
        n.data = null,
        n.image = null;
        const c = [s, e].join("_"),
            u = this._roomContentLoader.getImage(c);
        if (!u && t) {
            let h = this._thumbnailCallbacks.get(c);
            h || (h = [], this._thumbnailCallbacks.set(c, h), this._roomContentLoader.downloadImage(l, s, e, null)),
            h.push(t)
        } else
            u && (n.image = u),
            this._thumbnailObjectIdBank.freeNumber(l - 1),
            n.id = 0;
        return n
    }
    initalizeTemporaryObjectsByType(s, e)
    {
        const t = this._roomManager.getRoomInstance(Bt.TEMPORARY_ROOM);
        if (!t || !this._roomContentLoader)
            return;
        const r = this._roomContentLoader.getCategoryForType(s),
            i = t.getManager(r);
        let n = null,
            o = 0;
        if (i && i.objects.length) {
            for (const l of i.objects.getValues())
                if (l && l.model && l.type === s) {
                    const c = l.id,
                        u = l.visualization;
                    let h = null;
                    if (u) {
                        const m = l.model.getValue(C.IMAGE_QUERY_SCALE);
                        n && o !== m && (n.dispose(), n = null),
                        n || (o = m, n = new qa(m, new w(-135, 30, 0), new w(11, 11, 5))),
                        u.update(n, 0, !0, !1),
                        h = u.image
                    }
                    t.removeRoomObject(c, r),
                    this._imageObjectIdBank.freeNumber(c - 1);
                    const d = this._imageCallbacks.get(c.toString());
                    if (d) {
                        this._imageCallbacks.delete(c.toString());
                        for (const m of d)
                            m && (h ? m.imageReady(c, h) : m.imageFailed(c))
                    }
                }
        }
        n && n.dispose()
    }
    setObjectMoverIconSpriteVisible(s)
    {
        const e = this.getActiveRoomInstanceRenderingCanvas();
        if (!e)
            return;
        const t = this.getRenderingCanvasOverlay(e),
            r = this.getOverlayIconSprite(t, Bt.OBJECT_ICON_SPRITE);
        r && (r.visible = s)
    }
    removeObjectMoverIconSprite()
    {
        const s = this.getActiveRoomInstanceRenderingCanvas();
        if (!s)
            return;
        const e = this.getRenderingCanvasOverlay(s);
        this.removeOverlayIconSprite(e, Bt.OBJECT_ICON_SPRITE)
    }
    getRenderingCanvasOverlay(s)
    {
        if (!s)
            return null;
        const e = s.master;
        return e && e.getChildByName(Bt.OVERLAY) || null
    }
    removeOverlayIconSprite(s, e)
    {
        if (!s)
            return !1;
        let t = s.children.length - 1;
        for (; t >= 0;) {
            const r = s.getChildAt(t);
            if (r && r.name === e) {
                if (s.removeChildAt(t), r.children.length) {
                    const i = r.getChildAt(0);
                    i.parent.removeChild(i),
                    i.destroy()
                }
                return !0
            }
            t--
        }
        return !1
    }
    getOverlayIconSprite(s, e)
    {
        if (!s)
            return null;
        let t = s.children.length - 1;
        for (; t >= 0;) {
            const r = s.getChildAt(t);
            if (r && r.name === e)
                return r;
            t--
        }
        return null
    }
    getRoomObjects(s, e)
    {
        if (this._ready) {
            const t = this.getRoomId(s),
                r = this._roomManager.getRoomInstance(t);
            if (r)
                return r.getRoomObjectsForCategory(e)
        }
        return []
    }
    addObjectToTileMap(s, e)
    {
        const t = this.getRoomInstanceData(s).tileObjectMap;
        t && t.addRoomObject(e)
    }
    refreshTileObjectMap(s, e)
    {
        const t = this.getRoomInstanceData(s).tileObjectMap;
        t && t.populate(this.getRoomObjects(s, V.FLOOR))
    }
    getRenderRoomMessage(s, e, t=!1, r=!0, i=!1, n=-1)
    {
        let o = null;
        if (n > -1 ? o = this.getRoomInstanceRenderingCanvas(this._activeRoomId, n) : o = this.getActiveRoomInstanceRenderingCanvas(), !o)
            return null;
        i && o.skipSpriteVisibilityChecking();
        let l = -1;
        !r && this._roomSessionManager.getSession(this._activeRoomId) != null && (l = this._roomSessionManager.getSession(this._activeRoomId).ownRoomIndex);
        const c = new Ou,
            u = c.getFurniData(s, o, this, l),
            h = c.getRoomRenderingModifiers(this),
            d = c.getRoomPlanes(s, o, this, e);
        return i && o.resumeSpriteVisibilityChecking(), pe.log(u, h, d), null
    }
    createTextureFromRoom(s, e=-1, t=null)
    {
        let r = null;
        e > -1 ? r = this.getRoomInstanceRenderingCanvas(this._activeRoomId, e) : r = this.getActiveRoomInstanceRenderingCanvas();
        let i = null;
        return t ? i = pt.generateTexture(r.master, t) : i = r.getDisplayAsTexture(), i
    }
    saveTextureAsScreenshot(s, e=!1)
    {
        let t = null;
        e ? t = new Xg : t = new Xh,
        t.assignBitmap(s),
        this._communication.connection.send(t)
    }
    saveBase64AsScreenshot(s, e=!1)
    {
        let t = null;
        e ? t = new Xg : t = new Xh,
        t.assignBase64(s),
        this._communication.connection.send(t)
    }
    objectsInitialized(s)
    {
        const e = this.getRoomIdFromString(s);
        this.events.dispatchEvent(new ze(ze.OBJECTS_INITIALIZED, e))
    }
    getRoomId(s)
    {
        return s.toString()
    }
    getRoomIdFromString(s)
    {
        if (!s)
            return -1;
        const e = s.split("_");
        return e.length <= 0 ? -1 : parseInt(e[0]) || 0
    }
    getRoomObjectRoomId(s)
    {
        return !s || !s.model ? null : s.model.getValue(C.OBJECT_ROOM_ID)
    }
    getRoomObjectAdUrl(s)
    {
        return this._roomContentLoader.getRoomObjectAdUrl(s)
    }
    getPetTypeId(s)
    {
        let e = -1;
        if (s) {
            const t = s.split(" ");
            t.length > 1 && (e = parseInt(t[0]))
        }
        return e
    }
    getPetType(s)
    {
        if (!s)
            return null;
        const e = s.split(" ");
        if (e.length > 1) {
            const t = parseInt(e[0]);
            return this._roomContentLoader ? this._roomContentLoader.getPetNameForType(t) : "pet"
        }
        return null
    }
    isRoomContentTypeLoaded(s)
    {
        return this._roomContentLoader ? this._roomContentLoader.getCollection(s) !== null : !1
    }
    getPetColorResult(s, e)
    {
        return this._roomContentLoader ? this._roomContentLoader.getPetColorResult(s, e) : null
    }
    getPetColorResultsForTag(s, e)
    {
        return this._roomContentLoader ? this._roomContentLoader.getPetColorResultsForTag(s, e) : null
    }
    deleteRoomObject(s, e)
    {
        return !this._roomObjectEventHandler || e !== V.WALL ? !1 : this._roomObjectEventHandler.deleteWallItem(this._activeRoomId, s)
    }
    get connection()
    {
        return this._communication.connection
    }
    get sessionDataManager()
    {
        return this._sessionDataManager
    }
    set sessionDataManager(s)
    {
        this._sessionDataManager = s
    }
    get roomSessionManager()
    {
        return this._roomSessionManager
    }
    set roomSessionManager(s)
    {
        this._roomSessionManager = s
    }
    get roomManager()
    {
        return this._roomManager
    }
    set roomManager(s)
    {
        this._roomManager = s
    }
    get objectEventHandler()
    {
        return this._roomObjectEventHandler
    }
    get roomRendererFactory()
    {
        return this._roomRendererFactory
    }
    get visualizationFactory()
    {
        return this._visualizationFactory
    }
    get logicFactory()
    {
        return this._logicFactory
    }
    get activeRoomId()
    {
        return this._activeRoomId
    }
    get ready()
    {
        return this._ready
    }
    get roomContentLoader()
    {
        return this._roomContentLoader
    }
    get isDecorating()
    {
        if (!this._roomSessionManager)
            return !1;
        const s = this._roomSessionManager.getSession(this._activeRoomId);
        return s && s.isDecorating || !1
    }
    get useOffsetScrolling()
    {
        return !0
    }
    get selectedAvatarId()
    {
        return this._roomObjectEventHandler ? this._roomObjectEventHandler.selectedAvatarId : -1
    }
    getRoomObjectCount(s, e)
    {
        return this._roomManager == null ? 0 : this._roomManager.getRoomInstance(s.toString()).getRoomObjectsForCategory(e).length
    }
}
;
let Ei = Bt;
Ei.ROOM_OBJECT_ID = -1;
Ei.ROOM_OBJECT_TYPE = "room";
Ei.CURSOR_OBJECT_ID = -2;
Ei.CURSOR_OBJECT_TYPE = "tile_cursor";
Ei.ARROW_OBJECT_ID = -3;
Ei.ARROW_OBJECT_TYPE = "selection_arrow";
Ei.OVERLAY = "overlay";
Ei.OBJECT_ICON_SPRITE = "object_icon_sprite";
Ei.DRAG_THRESHOLD = 15;
Ei.TEMPORARY_ROOM = "temporary_room";
const me = class {
    constructor(s, e=1)
    {
        this._previewRoomId = 1,
        this._currentPreviewObjectType = 0,
        this._currentPreviewObjectCategory = 0,
        this._currentPreviewObjectData = "",
        this._currentPreviewRectangle = null,
        this._currentPreviewCanvasWidth = 0,
        this._currentPreviewCanvasHeight = 0,
        this._currentPreviewScale = 64,
        this._backgroundColor = 305148561,
        this._backgroundSprite = null,
        this._disableUpdate = !1,
        this._roomEngine = s,
        this._planeParser = new ps,
        this._previewRoomId = On.makeRoomPreviewerId(e),
        this._addViewOffset = new Ge(0, 0),
        this.onRoomObjectAdded = this.onRoomObjectAdded.bind(this),
        this.onRoomInitializedonRoomInitialized = this.onRoomInitializedonRoomInitialized.bind(this),
        this.isRoomEngineReady && this._roomEngine.events && (this._roomEngine.events.addEventListener(de.ADDED, this.onRoomObjectAdded), this._roomEngine.events.addEventListener(de.CONTENT_UPDATED, this.onRoomObjectAdded), this._roomEngine.events.addEventListener(ze.INITIALIZED, this.onRoomInitializedonRoomInitialized)),
        this.createRoomForPreview()
    }
    dispose()
    {
        this.reset(!0),
        this.isRoomEngineReady && this._roomEngine.events && (this._roomEngine.events.removeEventListener(de.ADDED, this.onRoomObjectAdded), this._roomEngine.events.removeEventListener(de.CONTENT_UPDATED, this.onRoomObjectAdded), this._roomEngine.events.removeEventListener(ze.INITIALIZED, this.onRoomInitializedonRoomInitialized)),
        this._backgroundSprite && (this._backgroundSprite.destroy(), this._backgroundSprite = null),
        this._planeParser && (this._planeParser.dispose(), this._planeParser = null)
    }
    createRoomForPreview()
    {
        if (this.isRoomEngineReady) {
            const e = new ps;
            e.initializeTileMap(7 + 2, 7 + 2);
            let t = 1;
            for (; t < 1 + 7;) {
                let r = 1;
                for (; r < 1 + 7;)
                    e.setTileHeight(r, t, 0),
                    r++;
                t++
            }
            e.initializeFromTileData(),
            this._roomEngine.createRoomInstance(this._previewRoomId, e.getMapData()),
            e.dispose()
        }
    }
    reset(s)
    {
        this.isRoomEngineReady && (this._roomEngine.removeRoomObjectFloor(this._previewRoomId, me.PREVIEW_OBJECT_ID), this._roomEngine.removeRoomObjectWall(this._previewRoomId, me.PREVIEW_OBJECT_ID), this._roomEngine.removeRoomObjectUser(this._previewRoomId, me.PREVIEW_OBJECT_ID), s || this.updatePreviewRoomView()),
        this._currentPreviewObjectCategory = V.MINIMUM
    }
    updatePreviewModel(s, e, t=!0)
    {
        const r = new um;
        r.flush(),
        r.parseModel(s, e, t);
        const i = this._roomEngine.getLegacyWallGeometry(this._previewRoomId);
        if (!i)
            return;
        this._planeParser.reset();
        const n = r.width,
            o = r.height;
        this._planeParser.initializeTileMap(n, o);
        const l = null;
        let c = -1,
            u = -1,
            h = 0,
            d = 0,
            m = 0;
        for (; m < o;) {
            let I = 0;
            for (; I < n;) {
                const S = r.getHeight(I, m);
                (m > 0 && m < o - 1 || I > 0 && I < n - 1) && S != ps.TILE_BLOCKED && l == null && (r.getHeight(I, m - 1) == ps.TILE_BLOCKED && r.getHeight(I - 1, m) == ps.TILE_BLOCKED && r.getHeight(I, m + 1) == ps.TILE_BLOCKED && (c = I + .5, u = m, h = S, d = 90), r.getHeight(I, m - 1) == ps.TILE_BLOCKED && r.getHeight(I - 1, m) == ps.TILE_BLOCKED && r.getHeight(I + 1, m) == ps.TILE_BLOCKED && (c = I, u = m + .5, h = S, d = 180)),
                this._planeParser.setTileHeight(I, m, S),
                I++
            }
            m++
        }
        this._planeParser.setTileHeight(Math.floor(c), Math.floor(u), h),
        this._planeParser.initializeFromTileData(r.wallHeight),
        this._planeParser.setTileHeight(Math.floor(c), Math.floor(u), h + this._planeParser.wallHeight),
        i.scale = hc.DEFAULT_SCALE,
        i.initialize(n, o, this._planeParser.floorHeight);
        let p = r.height - 1;
        for (; p >= 0;) {
            let I = r.width - 1;
            for (; I >= 0;)
                i.setHeight(I, p, this._planeParser.getTileHeight(I, p)),
                I--;
            p--
        }
        const E = this._planeParser.getMapData();
        E.doors.push({
            x: c,
            y: u,
            z: h,
            dir: d
        });
        const T = this.getRoomPreviewOwnRoomObject();
        T && T.processUpdateMessage(new IE(E))
    }
    addFurnitureIntoRoom(s, e, t=null, r=null)
    {
        if (t || (t = new Lr), this.isRoomEngineReady && (this.reset(!1), this._currentPreviewObjectType = s, this._currentPreviewObjectCategory = V.FLOOR, this._currentPreviewObjectData = "", this._roomEngine.addFurnitureFloor(this._previewRoomId, me.PREVIEW_OBJECT_ID, s, new w(me.PREVIEW_OBJECT_LOCATION_X, me.PREVIEW_OBJECT_LOCATION_Y, 0), e, 0, t, NaN, -1, 0, -1, "", !0, !1))) {
            this._previousAutomaticStateChangeTime = Pe(),
            this._automaticStateChange = !0;
            const i = this._roomEngine.getRoomObject(this._previewRoomId, me.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);
            return i && r && i.model.setValue(C.FURNITURE_EXTRAS, r), this.updatePreviewRoomView(), me.PREVIEW_OBJECT_ID
        }
        return -1
    }
    addWallItemIntoRoom(s, e, t)
    {
        if (this.isRoomEngineReady) {
            if (this._currentPreviewObjectCategory === V.WALL && this._currentPreviewObjectType === s && this._currentPreviewObjectData === t)
                return me.PREVIEW_OBJECT_ID;
            if (this.reset(!1), this._currentPreviewObjectType = s, this._currentPreviewObjectCategory = V.WALL, this._currentPreviewObjectData = t, this._roomEngine.addFurnitureWall(this._previewRoomId, me.PREVIEW_OBJECT_ID, s, new w(.5, 2.3, 1.8), e, 0, t, 0, 0, -1, "", !1))
                return this._previousAutomaticStateChangeTime = Pe(), this._automaticStateChange = !0, this.updatePreviewRoomView(), me.PREVIEW_OBJECT_ID
        }
        return -1
    }
    addAvatarIntoRoom(s, e)
    {
        return this.isRoomEngineReady ? (this.reset(!1), this._currentPreviewObjectType = 1, this._currentPreviewObjectCategory = V.UNIT, this._currentPreviewObjectData = s, this._roomEngine.addRoomObjectUser(this._previewRoomId, me.PREVIEW_OBJECT_ID, new w(me.PREVIEW_OBJECT_LOCATION_X, me.PREVIEW_OBJECT_LOCATION_Y, 0), new w(90, 0, 0), 135, it.getTypeNumber(it.USER), s) && (this._previousAutomaticStateChangeTime = Pe(), this._automaticStateChange = !0, this.updateUserGesture(1), this.updateUserEffect(e), this.updateUserPosture("std")), this.updatePreviewRoomView(), me.PREVIEW_OBJECT_ID) : -1
    }
    addPetIntoRoom(s)
    {
        return this.isRoomEngineReady ? (this.reset(!1), this._currentPreviewObjectType = 1, this._currentPreviewObjectCategory = V.UNIT, this._currentPreviewObjectData = s, this._roomEngine.addRoomObjectUser(this._previewRoomId, me.PREVIEW_OBJECT_ID, new w(me.PREVIEW_OBJECT_LOCATION_X, me.PREVIEW_OBJECT_LOCATION_Y, 0), new w(90, 0, 0), 90, it.getTypeNumber(it.PET), s) && (this._previousAutomaticStateChangeTime = Pe(), this._automaticStateChange = !1, this.updateUserGesture(1), this.updateUserPosture("std")), this.updatePreviewRoomView(), me.PREVIEW_OBJECT_ID) : -1
    }
    updateUserPosture(s, e="")
    {
        this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserPosture(this._previewRoomId, me.PREVIEW_OBJECT_ID, s, e)
    }
    updateUserGesture(s)
    {
        this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserGesture(this._previewRoomId, me.PREVIEW_OBJECT_ID, s)
    }
    updateUserEffect(s)
    {
        this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserEffect(this._previewRoomId, me.PREVIEW_OBJECT_ID, s)
    }
    updateObjectUserFigure(s, e=null, t=null, r=!1)
    {
        return this.isRoomEngineReady ? this._roomEngine.updateRoomObjectUserFigure(this._previewRoomId, me.PREVIEW_OBJECT_ID, s, e, t, r) : !1
    }
    updateObjectUserAction(s, e, t=null)
    {
        this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserAction(this._previewRoomId, me.PREVIEW_OBJECT_ID, s, e, t)
    }
    updateObjectStuffData(s)
    {
        this.isRoomEngineReady && this._roomEngine.updateRoomObjectFloor(this._previewRoomId, me.PREVIEW_OBJECT_ID, null, null, s.state, s)
    }
    changeRoomObjectState()
    {
        this.isRoomEngineReady && (this._automaticStateChange = !1, this._currentPreviewObjectCategory !== V.UNIT && this._roomEngine.changeObjectState(this._previewRoomId, me.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory))
    }
    changeRoomObjectDirection()
    {
        if (this.isRoomEngineReady) {
            const s = this._roomEngine.getRoomObject(this._previewRoomId, me.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);
            if (!s)
                return;
            const e = this._roomEngine.objectEventHandler.getValidRoomObjectDirection(s, !0);
            switch (this._currentPreviewObjectCategory) {
            case V.FLOOR:
                {
                    const t = new w(me.PREVIEW_OBJECT_LOCATION_X, me.PREVIEW_OBJECT_LOCATION_Y),
                        r = new w(e, e, e);
                    this._roomEngine.updateRoomObjectFloor(this._previewRoomId, me.PREVIEW_OBJECT_ID, t, r, null, null);
                    return
                }case V.WALL:
                return
            }
        }
    }
    checkAutomaticRoomObjectStateChange()
    {
        if (this._automaticStateChange) {
            const s = Pe();
            s > this._previousAutomaticStateChangeTime + me.AUTOMATIC_STATE_CHANGE_INTERVAL && (this._previousAutomaticStateChangeTime = s, this.isRoomEngineReady && this._roomEngine.changeObjectState(this._previewRoomId, me.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory))
        }
    }
    getRoomCanvas(s, e)
    {
        if (this.isRoomEngineReady) {
            const t = this._roomEngine.getRoomInstanceDisplay(this._previewRoomId, me.PREVIEW_CANVAS_ID, s, e, this._currentPreviewScale);
            if (t && this._backgroundColor !== null) {
                let i = this._backgroundSprite;
                i || (i = new qt(cs.WHITE), t.addChildAt(i, 0)),
                i.width = s,
                i.height = e,
                i.tint = this._backgroundColor
            }
            this._roomEngine.setRoomInstanceRenderingCanvasMask(this._previewRoomId, me.PREVIEW_CANVAS_ID, !0);
            const r = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, me.PREVIEW_CANVAS_ID);
            return r && r.adjustLocation(new w(me.PREVIEW_OBJECT_LOCATION_X, me.PREVIEW_OBJECT_LOCATION_Y, 0), 30), this._currentPreviewCanvasWidth = s, this._currentPreviewCanvasHeight = e, t
        }
        return null
    }
    modifyRoomCanvas(s, e)
    {
        this.isRoomEngineReady && (this._currentPreviewCanvasWidth = s, this._currentPreviewCanvasHeight = e, this._backgroundSprite && (this._backgroundSprite.width = s, this._backgroundSprite.height = e), this._roomEngine.initializeRoomInstanceRenderingCanvas(this._previewRoomId, me.PREVIEW_CANVAS_ID, s, e))
    }
    set addViewOffset(s)
    {
        this._addViewOffset = s
    }
    get addViewOffset()
    {
        return this._addViewOffset
    }
    updatePreviewObjectBoundingRectangle(s)
    {
        const e = this._roomEngine.getRoomObjectBoundingRectangle(this._previewRoomId, me.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory, me.PREVIEW_CANVAS_ID);
        if (e && s)
            if (e.x += -(this._currentPreviewCanvasWidth >> 1), e.y += -(this._currentPreviewCanvasHeight >> 1), e.x += -s.x, e.y += -s.y, !this._currentPreviewRectangle)
                this._currentPreviewRectangle = e;
            else {
                const t = this._currentPreviewRectangle.clone().enlarge(e);
                (t.width - this._currentPreviewRectangle.width > this._currentPreviewCanvasWidth - this._currentPreviewRectangle.width >> 1 || t.height - this._currentPreviewRectangle.height > this._currentPreviewCanvasHeight - this._currentPreviewRectangle.height >> 1 || this._currentPreviewRectangle.width < 1 || this._currentPreviewRectangle.height < 1) && (this._currentPreviewRectangle = t)
            }
    }
    validatePreviewSize(s)
    {
        if (this._currentPreviewRectangle.width < 1 || this._currentPreviewRectangle.height < 1)
            return s;
        if (this.isRoomEngineReady) {
            const e = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, me.PREVIEW_CANVAS_ID);
            this._currentPreviewRectangle.width > this._currentPreviewCanvasWidth * (1 + me.ALLOWED_IMAGE_CUT) || this._currentPreviewRectangle.height > this._currentPreviewCanvasHeight * (1 + me.ALLOWED_IMAGE_CUT) ? me.ZOOM_ENABLED ? this._roomEngine.getRoomInstanceRenderingCanvasScale(this._previewRoomId, me.PREVIEW_CANVAS_ID) !== .5 && (this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, me.PREVIEW_CANVAS_ID, .5, null, null), this._currentPreviewScale = me.SCALE_SMALL, this._currentPreviewNeedsZoomOut = !0, s.x = s.x >> 1, s.y = s.y >> 1, this._currentPreviewRectangle.x = this._currentPreviewRectangle.x >> 2, this._currentPreviewRectangle.y = this._currentPreviewRectangle.y >> 2, this._currentPreviewRectangle.width = this._currentPreviewRectangle.width >> 2, this._currentPreviewRectangle.height = this._currentPreviewRectangle.height >> 2) : e.isZoomedIn() && (e.performZoomOut(), this._currentPreviewScale = me.SCALE_SMALL, this._currentPreviewNeedsZoomOut = !0) : this._currentPreviewNeedsZoomOut || (me.ZOOM_ENABLED ? this._roomEngine.getRoomInstanceRenderingCanvasScale(this._previewRoomId, me.PREVIEW_CANVAS_ID) !== 1 && (this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, me.PREVIEW_CANVAS_ID, 1, null, null), this._currentPreviewScale = me.SCALE_NORMAL) : e.isZoomedIn() || (e.performZoomIn(), this._currentPreviewScale = me.SCALE_NORMAL))
        }
        return s
    }
    zoomIn()
    {
        this.isRoomEngineReady && (me.ZOOM_ENABLED ? this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, me.PREVIEW_CANVAS_ID, 1) : this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, me.PREVIEW_CANVAS_ID).performZoomIn()),
        this._currentPreviewScale = me.SCALE_NORMAL
    }
    zoomOut()
    {
        this.isRoomEngineReady && (me.ZOOM_ENABLED ? this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, me.PREVIEW_CANVAS_ID, .5) : this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, me.PREVIEW_CANVAS_ID).performZoomOut()),
        this._currentPreviewScale = me.SCALE_SMALL
    }
    updateAvatarDirection(s, e)
    {
        this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserLocation(this._previewRoomId, me.PREVIEW_OBJECT_ID, new w(me.PREVIEW_OBJECT_LOCATION_X, me.PREVIEW_OBJECT_LOCATION_Y, 0), new w(me.PREVIEW_OBJECT_LOCATION_X, me.PREVIEW_OBJECT_LOCATION_Y, 0), !1, 0, new w(s * 45, 0, 0), e * 45)
    }
    updateObjectRoom(s=null, e=null, t=null, r=!1)
    {
        return this.isRoomEngineReady ? this._roomEngine.updateRoomInstancePlaneType(this._previewRoomId, s, e, t, r) : !1
    }
    updateRoomWallsAndFloorVisibility(s, e=!0)
    {
        this.isRoomEngineReady && this._roomEngine.updateRoomInstancePlaneVisibility(this._previewRoomId, s, e)
    }
    getCanvasOffset(s)
    {
        if (this._currentPreviewRectangle.width < 1 || this._currentPreviewRectangle.height < 1)
            return s;
        let e = -(this._currentPreviewRectangle.left + this._currentPreviewRectangle.right) >> 1,
            t = -(this._currentPreviewRectangle.top + this._currentPreviewRectangle.bottom) >> 1;
        const r = this._currentPreviewCanvasHeight - this._currentPreviewRectangle.height >> 1;
        r > 10 ? t = t + Math.min(15, r - 10) : this._currentPreviewObjectCategory !== V.UNIT ? t = t + (5 - Math.max(0, r / 2)) : t = t - (5 - Math.min(0, r / 2)),
        t = t + this._addViewOffset.y,
        e = e + this._addViewOffset.x;
        const i = e - s.x,
            n = t - s.y;
        if (i !== 0 || n !== 0) {
            const o = Math.sqrt(i * i + n * n);
            return o > 10 && (e = s.x + i * 10 / o, t = s.y + n * 10 / o), new Ge(e, t)
        }
        return null
    }
    updatePreviewRoomView(s=!1)
    {
        if (!(this._disableUpdate && !s) && (this.checkAutomaticRoomObjectStateChange(), this.isRoomEngineReady)) {
            let e = this._roomEngine.getRoomInstanceRenderingCanvasOffset(this._previewRoomId, me.PREVIEW_CANVAS_ID);
            if (e && (this.updatePreviewObjectBoundingRectangle(e), this._currentPreviewRectangle)) {
                const t = this._currentPreviewScale;
                e = this.validatePreviewSize(e);
                const r = this.getCanvasOffset(e);
                r && this._roomEngine.setRoomInstanceRenderingCanvasOffset(this._previewRoomId, me.PREVIEW_CANVAS_ID, r),
                this._currentPreviewScale !== t && (this._currentPreviewRectangle = null)
            }
        }
    }
    set disableUpdate(s)
    {
        this._disableUpdate = s
    }
    set disableRoomEngineUpdate(s)
    {
        this.isRoomEngineReady && this._roomEngine.disableUpdate(s)
    }
    onRoomInitializedonRoomInitialized(s)
    {
        if (s)
            switch (s.type) {
            case ze.INITIALIZED:
                s.roomId === this._previewRoomId && this.isRoomEngineReady && this._roomEngine.updateRoomInstancePlaneType(this._previewRoomId, "110", "99999");
                return
            }
    }
    onRoomObjectAdded(s)
    {
        if (s.roomId === this._previewRoomId && s.objectId === me.PREVIEW_OBJECT_ID && s.category === this._currentPreviewObjectCategory) {
            this._currentPreviewRectangle = null,
            this._currentPreviewNeedsZoomOut = !1;
            const e = this._roomEngine.getRoomObject(s.roomId, s.objectId, s.category);
            if (e && e.model && s.category === V.WALL) {
                const t = e.model.getValue(C.FURNITURE_SIZE_Z),
                    r = e.model.getValue(C.FURNITURE_CENTER_Z);
                (t !== null || r !== null) && this._roomEngine.updateRoomObjectWallLocation(s.roomId, s.objectId, new w(.5, 2.3, (3.6 - t) / 2 + r))
            }
        }
    }
    updateRoomEngine()
    {
        this.isRoomEngineReady && this._roomEngine.runUpdate()
    }
    getRenderingCanvas()
    {
        const s = this._roomEngine.getRoomInstanceRenderingCanvas(this._previewRoomId, me.PREVIEW_CANVAS_ID);
        return s || null
    }
    getGenericRoomObjectImage(s, e, t, r, i, n=0, o=null, l=null, c=-1, u=-1, h=null)
    {
        return this.isRoomEngineReady ? this._roomEngine.getGenericRoomObjectImage(s, e, t, r, i, n, o, l, c, u, h) : null
    }
    getRoomObjectImage(s, e, t, r=0)
    {
        return this.isRoomEngineReady ? this._roomEngine.getRoomObjectImage(this._previewRoomId, me.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory, s, e, t, r) : null
    }
    getRoomObjectCurrentImage()
    {
        if (this.isRoomEngineReady) {
            const s = this._roomEngine.getRoomObject(this._previewRoomId, me.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);
            if (s && s.visualization)
                return s.visualization.getImage(16777215, -1)
        }
        return null
    }
    getRoomPreviewObject()
    {
        if (this.isRoomEngineReady) {
            const s = this._roomEngine.getRoomObject(this._previewRoomId, me.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);
            if (s)
                return s
        }
        return null
    }
    getRoomPreviewOwnRoomObject()
    {
        if (this.isRoomEngineReady) {
            const s = this._roomEngine.getRoomObject(this._previewRoomId, Ei.ROOM_OBJECT_ID, V.ROOM);
            if (s)
                return s
        }
        return null
    }
    get isRoomEngineReady()
    {
        return this._roomEngine && this._roomEngine.ready
    }
    get roomId()
    {
        return this._previewRoomId
    }
    get backgroundColor()
    {
        return this._backgroundColor
    }
    set backgroundColor(s)
    {
        this._backgroundColor = s
    }
    get width()
    {
        return this._currentPreviewCanvasWidth
    }
    get height()
    {
        return this._currentPreviewCanvasHeight
    }
}
;
let Jr = me;
Jr.SCALE_NORMAL = 64;
Jr.SCALE_SMALL = 32;
Jr.PREVIEW_COUNTER = 0;
Jr.PREVIEW_CANVAS_ID = 1;
Jr.PREVIEW_OBJECT_ID = 1;
Jr.PREVIEW_OBJECT_LOCATION_X = 2;
Jr.PREVIEW_OBJECT_LOCATION_Y = 2;
Jr.ALLOWED_IMAGE_CUT = .25;
Jr.AUTOMATIC_STATE_CHANGE_INTERVAL = 2500;
Jr.ZOOM_ENABLED = !0;
class Cp {
    constructor(e, t)
    {
        this._image = e,
        this._placeHolder = t
    }
    get image()
    {
        return this._image
    }
    get placeHolder()
    {
        return this._placeHolder
    }
}
class C3 {
    constructor(e)
    {
        this._code = e,
        this._parts = []
    }
    get code()
    {
        return this._code
    }
    get parts()
    {
        return this._parts
    }
}
const Vr = class {
    constructor(e, t=0, r=0, i=0)
    {
        this.type = e,
        this.key = t,
        this.color = r,
        this.position = i
    }
    get code()
    {
        return this.key === 0 ? null : Vr.getCode(this.type, this.key, this.color, this.position)
    }
    static getCode(e, t, r, i)
    {
        return (e === Vr.BASE ? e : t >= 100 ? Vr.SYMBOL_ALT : Vr.SYMBOL) + (t < 10 ? "0" : "") + (e === Vr.BASE ? t : t >= 100 ? t - 100 : t) + (r < 10 ? "0" : "") + r + i
    }
    calculatePosition(e)
    {
        const t = this.calculateGridPos(this.position);
        let r = Vr.CELL_WIDTH * t.x + Vr.CELL_WIDTH / 2 - e.width / 2,
            i = Vr.CELL_HEIGHT * t.y + Vr.CELL_HEIGHT / 2 - e.height / 2;
        return r < 0 && (r = 0), r + e.width > Vr.IMAGE_WIDTH && (r = Vr.IMAGE_WIDTH - e.width), i < 0 && (i = 0), i + e.height > Vr.IMAGE_HEIGHT && (i = Vr.IMAGE_HEIGHT - e.height), new wi(Math.floor(r), Math.floor(i))
    }
    calculateGridPos(e)
    {
        const t = new wi;
        return t.x = Math.floor(e % 3), t.y = Math.floor(e / 3), t
    }
}
;
let Ur = Vr;
Ur.BASE = "b";
Ur.SYMBOL = "s";
Ur.SYMBOL_ALT = "t";
Ur.BASE_PART = 0;
Ur.LAYER_PART = 1;
Ur.IMAGE_WIDTH = 39;
Ur.IMAGE_HEIGHT = 39;
Ur.CELL_WIDTH = 13;
Ur.CELL_HEIGHT = 13;
const jn = class {
    constructor(s, e)
    {
        this._assets = s,
        this._sessionDataManager = e,
        this._groupBases = new Map,
        this._groupSymbols = new Map,
        this._groupPartColors = new Map,
        this._requestedBadges = new Map,
        this._groupBadgesQueue = new Map,
        this._readyToGenerateGroupBadges = !1
    }
    init()
    {
        if (this._sessionDataManager && this._sessionDataManager.communication) {
            this._messages = [new bm(this.onGroupBadgePartsEvent.bind(this))];
            for (const s of this._messages)
                this._sessionDataManager.communication.registerMessageEvent(s)
        }
    }
    dispose()
    {
        if (this._messages && this._messages.length) {
            for (const s of this._messages)
                this._sessionDataManager.communication.removeMessageEvent(s);
            this._messages = null
        }
        this._sessionDataManager = null
    }
    getBadgeImage(s, e=jn.NORMAL_BADGE, t=!0)
    {
        let r = this.getBadgeTexture(s, e);
        return !r && t && (r = this.getBadgePlaceholder()), r
    }
    getBadgeInfo(s)
    {
        const e = this.getBadgeTexture(s);
        return e ? new Cp(e, !1) : new Cp(this.getBadgePlaceholder(), !0)
    }
    loadBadgeImage(s, e=jn.NORMAL_BADGE)
    {
        return this._assets.getTexture(this.getBadgeUrl(s, e)) ? s : (this.getBadgeTexture(s, e), null)
    }
    getBadgeTexture(s, e=jn.NORMAL_BADGE)
    {
        const t = this.getBadgeUrl(s, e);
        if (!t || !t.length)
            return null;
        const r = this._assets.getTexture(t);
        if (r)
            return r.clone();
        if (e === jn.NORMAL_BADGE) {
            if (this._requestedBadges.get(s))
                return null;
            this._requestedBadges.set(s, !0),
            this._assets.downloadAsset(t).then(i => {
                if (!i)
                    return;
                this._requestedBadges.delete(s);
                const n = this._assets.getTexture(t);
                n && this._sessionDataManager && this._sessionDataManager.events.dispatchEvent(new wa(s, n.clone()))
            }).catch(i => {})
        } else if (e === jn.GROUP_BADGE) {
            if (this._groupBadgesQueue.get(s))
                return;
            this._groupBadgesQueue.set(s, !0),
            this._readyToGenerateGroupBadges && this.loadGroupBadge(s)
        }
        return null
    }
    getBadgePlaceholder()
    {
        const s = ye.getValue("images.url") + "/loading_icon.png",
            e = this._assets.getTexture(s);
        return e ? e.clone() : null
    }
    getBadgeUrl(s, e=jn.NORMAL_BADGE)
    {
        let t = null;
        switch (e) {
        case jn.NORMAL_BADGE:
            t = ye.getValue("badge.asset.url").replace("%badgename%", s);
            break;
        case jn.GROUP_BADGE:
            t = s;
            break
        }
        return t
    }
    loadGroupBadge(s)
    {
        const e = new C3(s),
            t = [...s.matchAll(/[b|s][0-9]{4,6}/g)];
        for (const r of t) {
            const i = r[0],
                n = i.length === 6,
                o = i[0],
                l = parseInt(i.slice(1, n ? 3 : 4)),
                c = parseInt(i.slice(n ? 3 : 4, n ? 5 : 6)),
                u = i.length < 6 ? 0 : parseInt(i.slice(n ? 5 : 6, n ? 6 : 7)),
                h = new Ur(o, l, c, u);
            e.parts.push(h)
        }
        this.renderGroupBadge(e)
    }
    renderGroupBadge(s)
    {
        const e = new Mi,
            t = new qt(jf.EMPTY);
        t.width = Ur.IMAGE_WIDTH,
        t.height = Ur.IMAGE_HEIGHT,
        e.addChild(t);
        for (const i of s.parts) {
            let n = !0;
            const o = i.type === "b" ? this._groupBases.get(i.key) : this._groupSymbols.get(i.key);
            if (o)
                for (const l of o) {
                    if (!l || !l.length)
                        continue;
                    const c = this._assets.getTexture(`badgepart_${l}`);
                    if (!c)
                        continue;
                    const {x: u, y: h} = i.calculatePosition(c),
                        d = new qt(c);
                    d.position.set(u, h),
                    n && (d.tint = parseInt(this._groupPartColors.get(i.color), 16)),
                    n = !1,
                    e.addChild(d)
                }
        }
        this._requestedBadges.delete(s.code),
        this._groupBadgesQueue.delete(s.code);
        const r = pt.generateTexture(e);
        this._assets.setTexture(s.code, r),
        this._sessionDataManager && this._sessionDataManager.events.dispatchEvent(new wa(s.code, r))
    }
    onGroupBadgePartsEvent(s)
    {
        if (!s)
            return;
        const e = s.getParser();
        if (e) {
            e.bases.forEach((t, r) => this._groupBases.set(r, t.map(i => i.replace(".png", "").replace(".gif", "")))),
            e.symbols.forEach((t, r) => this._groupSymbols.set(r, t.map(i => i.replace(".png", "").replace(".gif", "")))),
            this._groupPartColors = e.partColors,
            this._readyToGenerateGroupBadges = !0;
            for (const t of this._groupBadgesQueue.keys())
                this.loadGroupBadge(t)
        }
    }
    get disposed()
    {
        return !!this._sessionDataManager
    }
}
;
let Sl = jn;
Sl.GROUP_BADGE = "group_badge";
Sl.NORMAL_BADGE = "normal_badge";
class Ap {
    constructor(e, t, r, i, n, o, l, c, u, h, d, m, p, E, T, I, S, A, N, b, v, D, G, x, F, U, z, Q, j)
    {
        this._type = e,
        this._id = t,
        this._fullName = r,
        this._className = i,
        this._category = n,
        this._revision = c,
        this._tileSizeX = u,
        this._tileSizeY = h,
        this._tileSizeZ = d,
        this._colors = m,
        this._hasIndexedColor = p,
        this._colourIndex = E,
        this._localizedName = o,
        this._description = l,
        this._adUrl = T,
        this._purchaseOfferId = I,
        this._purchaseCouldBeUsedForBuyout = S,
        this._rentOfferId = A,
        this._rentCouldBeUsedForBuyout = N,
        this._customParams = v,
        this._specialType = D,
        this._availableForBuildersClub = b,
        this._canStandOn = G,
        this._canSitOn = x,
        this._canLayOn = F,
        this._excludedFromDynamic = U,
        this._furniLine = z,
        this._environment = Q,
        this._rare = j
    }
    get type()
    {
        return this._type
    }
    get id()
    {
        return this._id
    }
    get className()
    {
        return this._className
    }
    set className(e)
    {
        this._className = e
    }
    get fullName()
    {
        return this._fullName
    }
    get category()
    {
        return this._category
    }
    get hasIndexedColor()
    {
        return this._hasIndexedColor
    }
    get colorIndex()
    {
        return this._colourIndex
    }
    get revision()
    {
        return this._revision
    }
    get tileSizeX()
    {
        return this._tileSizeX
    }
    get tileSizeY()
    {
        return this._tileSizeY
    }
    get tileSizeZ()
    {
        return this._tileSizeZ
    }
    get colors()
    {
        return this._colors
    }
    get name()
    {
        return this._localizedName
    }
    get description()
    {
        return this._description
    }
    get adUrl()
    {
        return this._adUrl
    }
    get purchaseOfferId()
    {
        return this._purchaseOfferId
    }
    get customParams()
    {
        return this._customParams
    }
    get specialType()
    {
        return this._specialType
    }
    get rentOfferId()
    {
        return this._rentOfferId
    }
    get purchaseCouldBeUsedForBuyout()
    {
        return this._purchaseCouldBeUsedForBuyout
    }
    get rentCouldBeUsedForBuyout()
    {
        return this._rentCouldBeUsedForBuyout
    }
    get availableForBuildersClub()
    {
        return this._availableForBuildersClub
    }
    get canStandOn()
    {
        return this._canStandOn
    }
    get canSitOn()
    {
        return this._canSitOn
    }
    get canLayOn()
    {
        return this._canLayOn
    }
    get isExternalImage()
    {
        return this._className.indexOf("external_image") !== -1
    }
    get excludeDynamic()
    {
        return this._excludedFromDynamic
    }
    get furniLine()
    {
        return this._furniLine
    }
    get environment()
    {
        return this._environment
    }
    get rare()
    {
        return this._rare
    }
}
const If = class  extends ti{
    constructor(s, e, t)
    {
        super(),
        this._floorItems = s,
        this._wallItems = e,
        this._localization = t
    }
    loadFurnitureData(s)
    {
        s && fetch(s).then(e => e.json()).then(e => this.onFurnitureDataLoaded(e)).catch(e => this.onFurnitureDataError(e))
    }
    onFurnitureDataLoaded(s)
    {
        s && ((typeof s.roomitemtypes > "u" || typeof s.wallitemtypes > "u") && pe.warn("Could not find `roomitemtypes` or `wallitemtypes` in furnidata."), s.roomitemtypes && this.parseFloorItems(s.roomitemtypes), s.wallitemtypes && this.parseWallItems(s.wallitemtypes), this.dispatchEvent(new Ye(If.FURNITURE_DATA_READY)))
    }
    onFurnitureDataError(s)
    {
        s && (pe.error(s), this.dispatchEvent(new Ye(If.FURNITURE_DATA_ERROR)))
    }
    parseFloorItems(s)
    {
        if (!(!s || !s.furnitype))
            for (const e of s.furnitype) {
                if (!e)
                    continue;
                const t = [];
                if (e.partcolors)
                    for (const c of e.partcolors.color) {
                        let u = c;
                        u.charAt(0) === "#" && (u = u.replace("#", "")),
                        t.push(parseInt(u, 16))
                    }
                const r = e.classname.split("*"),
                    i = r[0],
                    n = r.length > 1 ? parseInt(r[1]) : 0,
                    o = r.length > 1,
                    l = new Ap(Ao.FLOOR, e.id, e.classname, i, e.category, e.name, e.description, e.revision, e.xdim, e.ydim, 0, t, o, n, e.adurl, e.offerid, e.buyout, e.rentofferid, e.rentbuyout, e.bc, e.customparams, e.specialtype, e.canstandon, e.cansiton, e.canlayon, e.excludeddynamic, e.furniline, e.environment, e.rare);
                this._floorItems.set(l.id, l),
                this.updateLocalizations(l)
            }
    }
    parseWallItems(s)
    {
        if (!(!s || !s.furnitype))
            for (const e of s.furnitype) {
                if (!e)
                    continue;
                const t = new Ap(Ao.WALL, e.id, e.classname, e.classname, e.category, e.name, e.description, e.revision, 0, 0, 0, null, !1, 0, e.adurl, e.offerid, e.buyout, e.rentofferid, e.rentbuyout, e.bc, null, e.specialtype, !1, !1, !1, e.excludeddynamic, e.furniline, e.environment, e.rare);
                this._wallItems.set(t.id, t),
                this.updateLocalizations(t)
            }
    }
    updateLocalizations(s)
    {
        if (this._localization)
            switch (s.type) {
            case Ao.FLOOR:
                this._localization.setValue("roomItem.name." + s.id, s.name),
                this._localization.setValue("roomItem.desc." + s.id, s.description);
                return;
            case Ao.WALL:
                this._localization.setValue("wallItem.name." + s.id, s.name),
                this._localization.setValue("wallItem.desc." + s.id, s.description);
                return
            }
    }
}
;
let wc = If;
wc.FURNITURE_DATA_READY = "FDP_FURNITURE_DATA_READY";
wc.FURNITURE_DATA_ERROR = "FDP_FURNITURE_DATA_ERROR";
class A3 {
    constructor(e)
    {
        this._sessionDataManager = e,
        this._groupBadges = new Map
    }
    init()
    {
        if (this._sessionDataManager && this._sessionDataManager.communication) {
            this._messages = [new Fl(this.onRoomReadyMessageEvent.bind(this)), new FA(this.onGroupBadgesEvent.bind(this))];
            for (const e of this._messages)
                this._sessionDataManager.communication.registerMessageEvent(e)
        }
    }
    dispose()
    {
        if (!this.disposed) {
            if (this._messages && this._messages.length) {
                for (const e of this._messages)
                    this._sessionDataManager.communication.removeMessageEvent(e);
                this._messages = null
            }
            this._groupBadges = null,
            this._sessionDataManager = null
        }
    }
    onRoomReadyMessageEvent(e)
    {
        this._sessionDataManager.send(new iD)
    }
    onGroupBadgesEvent(e)
    {
        const t = e.getParser();
        for (const [r, i] of t.badges.entries())
            this._groupBadges.set(r, i)
    }
    getGroupBadge(e)
    {
        return this._groupBadges.get(e)
    }
    get disposed()
    {
        return !!this._sessionDataManager
    }
}
class gr {}
gr.NO_CLUB = 0;
gr.CLUB = 1;
gr.VIP = 2;
class ln extends ei {
    constructor(e, t)
    {
        super(),
        this._connection = e,
        this._listener = t,
        this._roomId = 0
    }
    onDispose()
    {
        this._connection = null,
        this._listener = null
    }
    setRoomId(e)
    {
        this._roomId = e
    }
    get connection()
    {
        return this._connection
    }
    get listener()
    {
        return this._listener
    }
    get roomId()
    {
        return this._roomId
    }
}
class N3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e.addMessageEvent(new Uh(this.onRoomGenericError.bind(this)))
    }
    onRoomGenericError(e)
    {
        if (!(e instanceof Uh))
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        if (!r)
            return;
        let i = null;
        switch (t.errorCode) {
        case zf.KICKED_OUT_OF_ROOM:
            i = We.RSEME_KICKED;
            break;
        default:
            return
        }
        !i || i.length == 0 || this.listener.events.dispatchEvent(new We(i, r))
    }
}
class y3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e.addMessageEvent(new AC(this.onOpenPetPackageRequested.bind(this))),
        e.addMessageEvent(new NC(this.onOpenPetPackageResult.bind(this)))
    }
    onOpenPetPackageRequested(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && this.listener.events.dispatchEvent(new Pa(Pa.RSOPPE_OPEN_PET_PACKAGE_REQUESTED, r, t.objectId, t.figureData, 0, null))
    }
    onOpenPetPackageResult(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && this.listener.events.dispatchEvent(new Pa(Pa.RSOPPE_OPEN_PET_PACKAGE_RESULT, r, t.objectId, null, t.nameValidationStatus, t.nameValidationInfo))
    }
}
class M3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e.addMessageEvent(new DC(this.onPollContentsEvent.bind(this))),
        e.addMessageEvent(new PC(this.onPollOfferEvent.bind(this))),
        e.addMessageEvent(new vC(this.onPollErrorEvent.bind(this))),
        e.addMessageEvent(new xC(this.onStartRoomPollEvent.bind(this))),
        e.addMessageEvent(new FC(this.onRoomPollResultEvent.bind(this)))
    }
    onPollContentsEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = new Ni(Ni.CONTENT, t, r.id);
        i.startMessage = r.startMessage,
        i.endMessage = r.endMessage,
        i.numQuestions = r.numQuestions,
        i.questionArray = r.questionArray,
        i.npsPoll = r.npsPoll,
        this.listener.events.dispatchEvent(i)
    }
    onPollOfferEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = new Ni(Ni.OFFER, t, r.id);
        i.summary = r.headline,
        i.summary = r.summary,
        this.listener.events.dispatchEvent(i)
    }
    onPollErrorEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t || !e.getParser())
            return;
        const i = new Ni(Ni.ERROR, t, -1);
        i.headline = "???",
        i.summary = "???",
        this.listener.events.dispatchEvent(i)
    }
    onStartRoomPollEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = new Tl(Tl.VOTE_QUESTION, t, r.question, r.choices);
        this.listener.events.dispatchEvent(i)
    }
    onRoomPollResultEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = new Tl(Tl.VOTE_RESULT, t, r.question, r.choices, r.SafeStr_7651, r.SafeStr_7654);
        this.listener.events.dispatchEvent(i)
    }
}
class b3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e.addMessageEvent(new Vm(this.onRoomUnitChatEvent.bind(this))),
        e.addMessageEvent(new jh(this.onRoomUnitChatEvent.bind(this))),
        e.addMessageEvent(new Wh(this.onRoomUnitChatEvent.bind(this))),
        e.addMessageEvent(new hA(this.onRoomUnitHandItemReceivedEvent.bind(this))),
        e.addMessageEvent(new qm(this.onRespectReceivedEvent.bind(this))),
        e.addMessageEvent(new HA(this.onPetRespectNoficationEvent.bind(this))),
        e.addMessageEvent(new jA(this.onPetSupplementedNotificationEvent.bind(this))),
        e.addMessageEvent(new cA(this.onFloodControlEvent.bind(this))),
        e.addMessageEvent(new uA(this.onRemainingMuteEvent.bind(this)))
    }
    onRoomUnitChatEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        let i = He.CHAT_TYPE_SPEAK;
        e instanceof jh ? i = He.CHAT_TYPE_SHOUT : e instanceof Wh && (i = He.CHAT_TYPE_WHISPER);
        const n = new He(He.CHAT_EVENT, t, r.roomIndex, r.message, i, r.bubble);
        this.listener.events.dispatchEvent(n)
    }
    onRoomUnitHandItemReceivedEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        r && this.listener.events.dispatchEvent(new He(He.CHAT_EVENT, t, r.giverUserId, "", He.CHAT_TYPE_HAND_ITEM_RECEIVED, qn.GENERIC, null, r.handItemType))
    }
    onRespectReceivedEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = t.userDataManager.getUserData(r.userId);
        i && this.listener.events.dispatchEvent(new He(He.CHAT_EVENT, t, i.roomIndex, "", He.CHAT_TYPE_RESPECT, qn.GENERIC))
    }
    onPetRespectNoficationEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = t.userDataManager.getPetData(r.petData.id);
        if (!i)
            return;
        let n = He.CHAT_TYPE_PETRESPECT;
        r.isTreat && (n = He.CHAT_TYPE_PETTREAT),
        this.listener.events.dispatchEvent(new He(He.CHAT_EVENT, t, i.roomIndex, "", n, qn.GENERIC))
    }
    onPetSupplementedNotificationEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = t.userDataManager.getPetData(r.petId);
        if (!i)
            return;
        let n = -1;
        const o = t.userDataManager.getUserData(r.userId);
        o && (n = o.roomIndex);
        let l = He.CHAT_TYPE_PETREVIVE;
        switch (r.supplementType) {
        case Ga.REVIVE:
            l = He.CHAT_TYPE_PETREVIVE;
            break;
        case Ga.REBREED_FERTILIZER:
            l = He.CHAT_TYPE_PET_REBREED_FERTILIZE;
            break;
        case Ga.SPEED_FERTILIZER:
            l = He.CHAT_TYPE_PET_SPEED_FERTILIZE;
            break
        }
        this.listener.events.dispatchEvent(new He(He.CHAT_EVENT, t, i.roomIndex, "", l, qn.GENERIC, null, n))
    }
    onFloodControlEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = r.seconds;
        this.listener.events.dispatchEvent(new He(He.FLOOD_EVENT, t, -1, i.toString(), 0, 0))
    }
    onRemainingMuteEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        r && this.listener.events.dispatchEvent(new He(He.CHAT_EVENT, t, t.ownRoomIndex, "", He.CHAT_TYPE_MUTE_REMAINING, qn.GENERIC, null, r.seconds))
    }
}
class D3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e.addMessageEvent(new na(this.onGetGuestRoomResultEvent.bind(this)))
    }
    onGetGuestRoomResultEvent(e)
    {
        if (!(e instanceof na))
            return;
        const t = e.getParser();
        if (!t || t.roomForward)
            return;
        const r = this.listener.getSession(this.roomId);
        if (!r)
            return;
        const i = t.data;
        r.tradeMode = i.tradeMode,
        r.isGuildRoom = i.habboGroupId !== 0,
        r.doorMode = i.doorMode,
        r.allowPets = i.allowPets,
        r.moderationSettings = t.moderation,
        this.listener.events.dispatchEvent(new og(og.RSDUE_ALLOW_PETS, r)),
        this.listener.events.dispatchEvent(new Ce(Ce.ROOM_DATA, r))
    }
}
class v3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e.addMessageEvent(new ZC(this.onRoomDimmerPresets.bind(this)))
    }
    onRoomDimmerPresets(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        if (!r)
            return;
        const i = new Dh(Dh.ROOM_DIMMER_PRESETS, r);
        i.selectedPresetId = t.selectedPresetId;
        let n = 0;
        for (; n < t.presetCount;) {
            const o = t.getPreset(n);
            o && i.storePreset(o.id, o.type, o.color, o.brightness),
            n++
        }
        this.listener && this.listener.events.dispatchEvent(i)
    }
}
class P3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e.addMessageEvent(new Og(this.onRoomRightsEvent.bind(this))),
        e.addMessageEvent(new Rg(this.onRoomRightsClearEvent.bind(this))),
        e.addMessageEvent(new Sg(this.onRoomRightsOwnerEvent.bind(this)))
    }
    onRoomRightsEvent(e)
    {
        if (!(e instanceof Og))
            return;
        const t = this.listener.getSession(this.roomId);
        t && t.setControllerLevel(e.getParser().controllerLevel)
    }
    onRoomRightsClearEvent(e)
    {
        if (!(e instanceof Rg))
            return;
        const t = this.listener.getSession(this.roomId);
        t && t.setControllerLevel(ct.NONE)
    }
    onRoomRightsOwnerEvent(e)
    {
        if (!(e instanceof Sg))
            return;
        const t = this.listener.getSession(this.roomId);
        t && t.setRoomOwner()
    }
}
class L3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e && e.addMessageEvent(new _S(this.onFurnitureGiftOpenedEvent.bind(this)))
    }
    onFurnitureGiftOpenedEvent(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && this.listener && this.listener.events && this.listener.events.dispatchEvent(new vh(vh.RSPE_PRESENT_OPENED, r, t.classId, t.itemType, t.productCode, t.placedItemId, t.placedItemType, t.placedInRoom, t.petFigureString))
    }
}
const vc = class  extends ln{
    constructor(s, e)
    {
        super(s, e),
        s.addMessageEvent(new Gh(this.onRoomEnterEvent.bind(this))),
        s.addMessageEvent(new Fl(this.onRoomReadyMessageEvent.bind(this))),
        s.addMessageEvent(new Wc(this.onDesktopViewEvent.bind(this))),
        s.addMessageEvent(new xh(this.onRoomDoorbellAcceptedEvent.bind(this))),
        s.addMessageEvent(new Fh(this.onRoomDoorbellRejectedEvent.bind(this))),
        s.addMessageEvent(new lA(this.onYouAreSpectatorMessageEvent.bind(this)))
    }
    onRoomEnterEvent(s)
    {
        s instanceof Gh && this.listener && this.listener.sessionUpdate(this.roomId, vc.RS_CONNECTED)
    }
    onRoomReadyMessageEvent(s)
    {
        if (!(s instanceof Fl))
            return;
        const e = this.roomId,
            t = s.getParser().roomId;
        this.listener && (this.listener.sessionReinitialize(e, t), this.listener.sessionUpdate(this.roomId, vc.RS_READY))
    }
    onDesktopViewEvent(s)
    {
        s instanceof Wc && this.listener && this.listener.sessionUpdate(this.roomId, vc.RS_DISCONNECTED)
    }
    onRoomDoorbellAcceptedEvent(s)
    {
        if (!(s instanceof xh) || !this.listener)
            return;
        const e = s.getParser();
        if (!e)
            return;
        const t = e.userName;
        if (!t || !t.length)
            this.connection.send(new Cb(this.roomId));
        else if (this.listener.events) {
            const r = this.listener.getSession(this.roomId);
            if (!r)
                return;
            this.listener.events.dispatchEvent(new Pi(Pi.RSDE_ACCEPTED, r, t))
        }
    }
    onRoomDoorbellRejectedEvent(s)
    {
        if (!(s instanceof Fh) || !this.listener)
            return;
        const e = s.getParser();
        if (!e)
            return;
        const t = e.userName;
        if (!t || !t.length)
            this.listener.sessionUpdate(this.roomId, vc.RS_DISCONNECTED);
        else if (this.listener.events) {
            const r = this.listener.getSession(this.roomId);
            if (!r)
                return;
            this.listener.events.dispatchEvent(new Pi(Pi.RSDE_REJECTED, r, t))
        }
    }
    onYouAreSpectatorMessageEvent(s)
    {
        if (this.listener) {
            const e = this.listener.getSession(this.roomId);
            if (!e)
                return;
            e.isSpectator = !0,
            this.listener.events.dispatchEvent(new lg(lg.SPECTATOR_MODE, e))
        }
    }
}
;
let bo = vc;
bo.RS_CONNECTED = "RS_CONNECTED";
bo.RS_READY = "RS_READY";
bo.RS_DISCONNECTED = "RS_DISCONNECTED";
class U3 {
    constructor()
    {
        this._adultLevel = 7
    }
    get id()
    {
        return this._id
    }
    set id(e)
    {
        this._id = e
    }
    get level()
    {
        return this._level
    }
    set level(e)
    {
        this._level = e
    }
    get maximumLevel()
    {
        return this._maximumLevel
    }
    set maximumLevel(e)
    {
        this._maximumLevel = e
    }
    get experience()
    {
        return this._experience
    }
    set experience(e)
    {
        this._experience = e
    }
    get levelExperienceGoal()
    {
        return this._levelExperienceGoal
    }
    set levelExperienceGoal(e)
    {
        this._levelExperienceGoal = e
    }
    get energy()
    {
        return this._energy
    }
    set energy(e)
    {
        this._energy = e
    }
    get maximumEnergy()
    {
        return this._maximumEnergy
    }
    set maximumEnergy(e)
    {
        this._maximumEnergy = e
    }
    get happyness()
    {
        return this._happyness
    }
    set happyness(e)
    {
        this._happyness = e
    }
    get maximumHappyness()
    {
        return this._maximumHappyness
    }
    set maximumHappyness(e)
    {
        this._maximumHappyness = e
    }
    get ownerId()
    {
        return this._ownerId
    }
    set ownerId(e)
    {
        this._ownerId = e
    }
    get ownerName()
    {
        return this._ownerName
    }
    set ownerName(e)
    {
        this._ownerName = e
    }
    get respect()
    {
        return this._respect
    }
    set respect(e)
    {
        this._respect = e
    }
    get age()
    {
        return this._age
    }
    set age(e)
    {
        this._age = e
    }
    get unknownRarity()
    {
        return this._unknownRarity
    }
    set unknownRarity(e)
    {
        this._unknownRarity = e
    }
    get saddle()
    {
        return this._saddle
    }
    set saddle(e)
    {
        this._saddle = e
    }
    get rider()
    {
        return this._rider
    }
    set rider(e)
    {
        this._rider = e
    }
    get skillTresholds()
    {
        return this._skillThresholds
    }
    set skillTresholds(e)
    {
        this._skillThresholds = e
    }
    get publiclyRideable()
    {
        return this._publiclyRideable
    }
    set publiclyRideable(e)
    {
        this._publiclyRideable = e
    }
    get breedable()
    {
        return this._breedable
    }
    set breedable(e)
    {
        this._breedable = e
    }
    get fullyGrown()
    {
        return this._fullyGrown
    }
    set fullyGrown(e)
    {
        this._fullyGrown = e
    }
    get dead()
    {
        return this._dead
    }
    set dead(e)
    {
        this._dead = e
    }
    get rarityLevel()
    {
        return this._rarityLevel
    }
    set rarityLevel(e)
    {
        this._rarityLevel = e
    }
    get maximumTimeToLive()
    {
        return this._maximumTimeToLive
    }
    set maximumTimeToLive(e)
    {
        this._maximumTimeToLive = e
    }
    get remainingTimeToLive()
    {
        return this._remainingTimeToLive
    }
    set remainingTimeToLive(e)
    {
        this._remainingTimeToLive = e
    }
    get remainingGrowTime()
    {
        return this._remainingGrowTime
    }
    set remainingGrowTime(e)
    {
        this._remainingGrowTime = e
    }
    get publiclyBreedable()
    {
        return this._publiclyBreedable
    }
    set publiclyBreedable(e)
    {
        this._publiclyBreedable = e
    }
    get adultLevel()
    {
        return this._adultLevel
    }
}
class lv {
    constructor(e)
    {
        this._roomIndex = -1,
        this._name = "",
        this._type = 0,
        this._sex = "",
        this._figure = "",
        this._custom = "",
        this._webID = 0,
        this._groupID = 0,
        this._groupStatus = 0,
        this._groupName = "",
        this._ownerId = 0,
        this._ownerName = "",
        this._petLevel = 0,
        this._rarityLevel = 0,
        this._roomIndex = e
    }
    get roomIndex()
    {
        return this._roomIndex
    }
    get activityPoints()
    {
        return this._activityPoints
    }
    set activityPoints(e)
    {
        this._activityPoints = e
    }
    get name()
    {
        return this._name
    }
    set name(e)
    {
        this._name = e
    }
    get type()
    {
        return this._type
    }
    set type(e)
    {
        this._type = e
    }
    get sex()
    {
        return this._sex
    }
    set sex(e)
    {
        this._sex = e
    }
    get figure()
    {
        return this._figure
    }
    set figure(e)
    {
        this._figure = e
    }
    get custom()
    {
        return this._custom
    }
    set custom(e)
    {
        this._custom = e
    }
    get webID()
    {
        return this._webID
    }
    set webID(e)
    {
        this._webID = e
    }
    get groupId()
    {
        return this._groupID
    }
    set groupId(e)
    {
        this._groupID = e
    }
    get groupName()
    {
        return this._groupName
    }
    set groupName(e)
    {
        this._groupName = e
    }
    get groupStatus()
    {
        return this._groupStatus
    }
    set groupStatus(e)
    {
        this._groupStatus = e
    }
    get ownerId()
    {
        return this._ownerId
    }
    set ownerId(e)
    {
        this._ownerId = e
    }
    get ownerName()
    {
        return this._ownerName
    }
    set ownerName(e)
    {
        this._ownerName = e
    }
    get rarityLevel()
    {
        return this._rarityLevel
    }
    set rarityLevel(e)
    {
        this._rarityLevel = e
    }
    get hasSaddle()
    {
        return this._hasSaddle
    }
    set hasSaddle(e)
    {
        this._hasSaddle = e
    }
    get isRiding()
    {
        return this._isRiding
    }
    set isRiding(e)
    {
        this._isRiding = e
    }
    get canBreed()
    {
        return this._canBreed
    }
    set canBreed(e)
    {
        this._canBreed = e
    }
    get canHarvest()
    {
        return this._canHarvest
    }
    set canHarvest(e)
    {
        this._canHarvest = e
    }
    get canRevive()
    {
        return this._canRevive
    }
    set canRevive(e)
    {
        this._canRevive = e
    }
    get hasBreedingPermission()
    {
        return this._hasBreedingPermission
    }
    set hasBreedingPermission(e)
    {
        this._hasBreedingPermission = e
    }
    get petLevel()
    {
        return this._petLevel
    }
    set petLevel(e)
    {
        this._petLevel = e
    }
    get botSkills()
    {
        return this._botSkills
    }
    set botSkills(e)
    {
        this._botSkills = e
    }
    get isModerator()
    {
        return this._isModerator
    }
    set isModerator(e)
    {
        this._isModerator = e
    }
}
class w3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e.addMessageEvent(new zh(this.onRoomUnitEvent.bind(this))),
        e.addMessageEvent(new Kh(this.onRoomUnitInfoEvent.bind(this))),
        e.addMessageEvent(new qh(this.onRoomUnitRemoveEvent.bind(this))),
        e.addMessageEvent(new Yh(this.onRoomUnitDanceEvent.bind(this))),
        e.addMessageEvent(new Ym(this.onUserCurrentBadgesEvent.bind(this))),
        e.addMessageEvent(new Fm(this.onRoomDoorbellEvent.bind(this))),
        e.addMessageEvent(new Bd(this.onUserNameChangeMessageEvent.bind(this))),
        e.addMessageEvent(new Nm(this.onNewFriendRequestEvent.bind(this))),
        e.addMessageEvent(new nA(this.onPetInfoEvent.bind(this))),
        e.addMessageEvent(new aA(this.onPetStatusUpdateEvent.bind(this))),
        e.addMessageEvent(new z2(this.onPetBreedingMessageEvent.bind(this))),
        e.addMessageEvent(new yC(this.onPetLevelUpdateMessageEvent.bind(this))),
        e.addMessageEvent(new p2(this.onConfirmBreedingResultEvent.bind(this))),
        e.addMessageEvent(new I2(this.onNestBreedingSuccessEvent.bind(this))),
        e.addMessageEvent(new E2(this.onConfirmBreedingRequestEvent.bind(this))),
        e.addMessageEvent(new Hh(this.onPetFigureUpdateEvent.bind(this))),
        e.addMessageEvent(new rA(this.onPetBreedingResultEvent.bind(this))),
        e.addMessageEvent(new OC(this.onPetPlacingError.bind(this))),
        e.addMessageEvent(new gC(this.onBotError.bind(this))),
        e.addMessageEvent(new WC(this.onFavoriteMembershipUpdateMessageEvent.bind(this)))
    }
    onRoomUnitEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser().users,
            i = [];
        if (r && r.length)
            for (const n of r) {
                if (!n)
                    continue;
                const o = new lv(n.roomIndex);
                o.name = n.name,
                o.custom = n.custom,
                o.activityPoints = n.activityPoints,
                o.figure = n.figure,
                o.type = n.userType,
                o.webID = n.webID,
                o.groupId = n.groupID,
                o.groupName = n.groupName,
                o.groupStatus = n.groupStatus,
                o.sex = n.sex,
                o.ownerId = n.ownerId,
                o.ownerName = n.ownerName,
                o.rarityLevel = n.rarityLevel,
                o.hasSaddle = n.hasSaddle,
                o.isRiding = n.isRiding,
                o.canBreed = n.canBreed,
                o.canHarvest = n.canHarvest,
                o.canRevive = n.canRevive,
                o.hasBreedingPermission = n.hasBreedingPermission,
                o.petLevel = n.petLevel,
                o.botSkills = n.botSkills,
                o.isModerator = n.isModerator,
                t.userDataManager.getUserData(n.roomIndex) || i.push(o),
                t.userDataManager.updateUserData(o)
            }
        this.listener.events.dispatchEvent(new rm(t, i))
    }
    onRoomUnitInfoEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        r && (t.userDataManager.updateFigure(r.unitId, r.figure, r.gender, !1, !1), t.userDataManager.updateMotto(r.unitId, r.motto), t.userDataManager.updateAchievementScore(r.unitId, r.achievementScore), this.listener.events.dispatchEvent(new im(t, r.unitId, r.figure, r.gender, r.motto, r.achievementScore)))
    }
    onRoomUnitRemoveEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        t && t.userDataManager.removeUserData(e.getParser().unitId)
    }
    onRoomUnitDanceEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && this.listener.events.dispatchEvent(new Zf(r, t.unitId, t.danceId))
    }
    onUserCurrentBadgesEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && (r.userDataManager.setUserBadges(t.userId, t.badges), this.listener.events.dispatchEvent(new sm(r, t.userId, t.badges)))
    }
    onRoomDoorbellEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = t.userName;
        if (!r || !r.length)
            return;
        const i = this.listener.getSession(this.roomId);
        i && this.listener.events.dispatchEvent(new Pi(Pi.DOORBELL, i, r))
    }
    onUserNameChangeMessageEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && r.userDataManager.updateName(t.id, t.newName)
    }
    onNewFriendRequestEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        if (!r)
            return;
        const i = t.request;
        this.listener.events.dispatchEvent(new jT(r, i.requestId, i.requesterUserId, i.requesterName))
    }
    onPetInfoEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        if (!r)
            return;
        const i = new U3;
        i.id = t.id,
        i.level = t.level,
        i.maximumLevel = t.maximumLevel,
        i.experience = t.experience,
        i.levelExperienceGoal = t.levelExperienceGoal,
        i.energy = t.energy,
        i.maximumEnergy = t.maximumEnergy,
        i.happyness = t.happyness,
        i.maximumHappyness = t.maximumHappyness,
        i.ownerId = t.ownerId,
        i.ownerName = t.ownerName,
        i.respect = t.respect,
        i.age = t.age,
        i.unknownRarity = t.unknownRarity,
        i.saddle = t.saddle,
        i.rider = t.rider,
        i.breedable = t.breedable,
        i.fullyGrown = t.fullyGrown,
        i.rarityLevel = t.rarityLevel,
        i.dead = t.dead,
        i.skillTresholds = t.skillTresholds,
        i.publiclyRideable = t.publiclyRideable,
        i.maximumTimeToLive = t.maximumTimeToLive,
        i.remainingTimeToLive = t.remainingTimeToLive,
        i.remainingGrowTime = t.remainingGrowTime,
        i.publiclyBreedable = t.publiclyBreedable,
        this.listener.events.dispatchEvent(new em(r, i))
    }
    onPetStatusUpdateEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && (r.userDataManager.updatePetBreedingStatus(t.roomIndex, t.canBreed, t.canHarvest, t.canRevive, t.hasBreedingPermission), this.listener.events.dispatchEvent(new tm(r, t.petId, t.canBreed, t.canHarvest, t.canRevive, t.hasBreedingPermission)))
    }
    onPetBreedingMessageEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && this.listener.events.dispatchEvent(new KT(r, t.state, t.ownPetId, t.otherPetId))
    }
    onPetLevelUpdateMessageEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && (r.userDataManager.updatePetLevel(t.roomIndex, t.level), this.listener.events.dispatchEvent(new tR(r, t.petId, t.level)))
    }
    onConfirmBreedingResultEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && this.listener.events.dispatchEvent(new BT(r, t.breedingNestStuffId, t.result))
    }
    onNestBreedingSuccessEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && this.listener.events.dispatchEvent(new YT(r, t.petId, t.rarityCategory))
    }
    onConfirmBreedingRequestEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && this.listener.events.dispatchEvent(new xT(r, t.nestId, t.pet1, t.pet2, t.rarityCategories, t.resultPetType))
    }
    onPetFigureUpdateEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        if (!r)
            return;
        const i = t.figureData.figuredata;
        r.userDataManager.updateFigure(t.roomIndex, i, "", t.hasSaddle, t.isRiding),
        this.listener.events.dispatchEvent(new ZT(r, t.petId, i))
    }
    onPetBreedingResultEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        r && this.listener.events.dispatchEvent(new XT(r, t.resultData, t.otherResultData))
    }
    onPetPlacingError(e)
    {
        if (!e || !this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        if (!r)
            return;
        let i = null;
        switch (t.errorCode) {
        case 0:
            i = We.RSEME_PETS_FORBIDDEN_IN_HOTEL;
            break;
        case 1:
            i = We.RSEME_PETS_FORBIDDEN_IN_FLAT;
            break;
        case 2:
            i = We.RSEME_MAX_PETS;
            break;
        case 3:
            i = We.RSEME_NO_FREE_TILES_FOR_PET;
            break;
        case 4:
            i = We.RSEME_SELECTED_TILE_NOT_FREE_FOR_PET;
            break;
        case 5:
            i = We.RSEME_MAX_NUMBER_OF_OWN_PETS;
            break
        }
        !i || i.length == 0 || this.listener.events.dispatchEvent(new We(i, r))
    }
    onBotError(e)
    {
        if (!e || !this.listener)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = this.listener.getSession(this.roomId);
        if (!r)
            return;
        let i = null;
        switch (t.errorCode) {
        case 0:
            i = We.RSEME_BOTS_FORBIDDEN_IN_HOTEL;
            break;
        case 1:
            i = We.RSEME_BOTS_FORBIDDEN_IN_FLAT;
            break;
        case 2:
            i = We.RSEME_BOT_LIMIT_REACHED;
            break;
        case 3:
            i = We.RSEME_SELECTED_TILE_NOT_FREE_FOR_BOT;
            break;
        case 4:
            i = We.RSEME_BOT_NAME_NOT_ACCEPTED;
            break
        }
        !i || i.length == 0 || this.listener.events.dispatchEvent(new We(i, r))
    }
    onFavoriteMembershipUpdateMessageEvent(e)
    {
        if (!this.listener)
            return;
        const t = e.getParser(),
            r = this.listener.getSession(this.roomId);
        if (!r)
            return;
        const i = r.userDataManager.getUserDataByIndex(t.roomIndex);
        i && (i.groupId = t.groupId, i.groupName = t.groupName, this.listener.events.dispatchEvent(new $f(r, t.roomIndex, t.groupId, t.status, t.groupName)))
    }
}
class F3 extends ln {
    constructor(e, t)
    {
        super(e, t),
        e.addMessageEvent(new UC(this.onQuestionEvent.bind(this))),
        e.addMessageEvent(new LC(this.onQuestionAnsweredEvent.bind(this))),
        e.addMessageEvent(new wC(this.onQuestionFinishedEvent.bind(this)))
    }
    onQuestionEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = new yi(yi.QUESTION, t, r.pollId);
        i.question = r.question,
        i.duration = r.duration,
        i.pollType = r.pollType,
        i.questionId = r.questionId,
        i.pollId = r.pollId,
        this.listener.events.dispatchEvent(i)
    }
    onQuestionAnsweredEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = new yi(yi.ANSWERED, t, r.userId);
        i.value = r.value,
        i.userId = r.userId,
        i.answerCounts = r.answerCounts,
        this.listener.events.dispatchEvent(i)
    }
    onQuestionFinishedEvent(e)
    {
        if (!this.listener)
            return;
        const t = this.listener.getSession(this.roomId);
        if (!t)
            return;
        const r = e.getParser();
        if (!r)
            return;
        const i = new yi(yi.FINISHED, t);
        i.questionId = r.questionId,
        i.answerCounts = r.answerCounts,
        this.listener.events.dispatchEvent(i)
    }
}
class x3 {
    constructor(e)
    {
        this._sessionDataManager = e,
        this._ignoredUsers = []
    }
    init()
    {
        if (this._sessionDataManager && this._sessionDataManager.communication) {
            this._messages = [new xA(this.onIgnoredUsersEvent.bind(this)), new Km(this.onIgnoreResultEvent.bind(this))];
            for (const e of this._messages)
                this._sessionDataManager.communication.registerMessageEvent(e)
        }
    }
    dispose()
    {
        if (!this.disposed) {
            if (this._messages && this._messages.length) {
                for (const e of this._messages)
                    this._sessionDataManager.communication.removeMessageEvent(e);
                this._messages = null
            }
            this._sessionDataManager = null
        }
    }
    requestIgnoredUsers()
    {
        this._sessionDataManager.send(new Jb(this._sessionDataManager.userName))
    }
    onIgnoredUsersEvent(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        t && (this._ignoredUsers = t.ignoredUsers)
    }
    onIgnoreResultEvent(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        if (!t)
            return;
        const r = t.name;
        switch (t.result) {
        case 0:
            return;
        case 1:
            this.addUserToIgnoreList(r);
            return;
        case 2:
            this.addUserToIgnoreList(r),
            this._ignoredUsers.shift();
            return;
        case 3:
            this.removeUserFromIgnoreList(r);
            return
        }
    }
    addUserToIgnoreList(e)
    {
        this._ignoredUsers.indexOf(e) < 0 && this._ignoredUsers.push(e)
    }
    removeUserFromIgnoreList(e)
    {
        const t = this._ignoredUsers.indexOf(e);
        t >= 0 && this._ignoredUsers.splice(t, 1)
    }
    ignoreUserId(e)
    {
        this._sessionDataManager.send(new eD(e))
    }
    ignoreUser(e)
    {
        this._sessionDataManager.send(new $b(e))
    }
    unignoreUser(e)
    {
        this._sessionDataManager.send(new tD(e))
    }
    isIgnored(e)
    {
        return this._ignoredUsers.indexOf(e) >= 0
    }
    get disposed()
    {
        return !!this._sessionDataManager
    }
}
class G3 {
    constructor(e, t, r)
    {
        this._type = e,
        this._name = t,
        this._description = r
    }
    get type()
    {
        return this._type
    }
    get name()
    {
        return this._name
    }
    get description()
    {
        return this._description
    }
}
const Tf = class  extends ti{
    constructor(s)
    {
        super(),
        this._products = s
    }
    dispose()
    {
        this._products = null
    }
    loadProductData(s)
    {
        s && fetch(s).then(e => e.json()).then(e => this.onProductDataLoadedEvent(e)).catch(e => this.onProductDataError(e))
    }
    onProductDataLoadedEvent(s)
    {
        s && (this.parseProducts(s.productdata), this.dispatchEvent(new Ye(Tf.PDP_PRODUCT_DATA_READY)))
    }
    onProductDataError(s)
    {
        s && this.dispatchEvent(new Ye(Tf.PDP_PRODUCT_DATA_FAILED))
    }
    parseProducts(s)
    {
        if (s)
            for (const e of s.product)
                e && this._products.set(e.code, new G3(e.code, e.name, e.description))
    }
}
;
let Fc = Tf;
Fc.PDP_PRODUCT_DATA_READY = "PDP_PRODUCT_DATA_READY";
Fc.PDP_PRODUCT_DATA_FAILED = "PDP_PRODUCT_DATA_FAILED";
const Pc = class  extends ei{
    constructor()
    {
        super(),
        this._connection = null,
        this._userDataByType = new Map,
        this._userDataByRoomIndex = new Map,
        this._userBadges = new Map
    }
    onDispose()
    {
        this._connection = null
    }
    setConnection(s)
    {
        this._connection = s
    }
    getUserData(s)
    {
        return this.getDataByType(s, Pc.TYPE_USER)
    }
    getPetData(s)
    {
        return this.getDataByType(s, Pc.TYPE_PET)
    }
    getBotData(s)
    {
        return this.getDataByType(s, Pc.TYPE_BOT)
    }
    getRentableBotData(s)
    {
        return this.getDataByType(s, Pc.TYPE_RENTABLE_BOT)
    }
    getDataByType(s, e)
    {
        const t = this._userDataByType.get(e);
        if (!t)
            return null;
        const r = t.get(s);
        return r || null
    }
    getUserDataByIndex(s)
    {
        const e = this._userDataByRoomIndex.get(s);
        return e || null
    }
    getUserDataByName(s)
    {
        for (const e of this._userDataByRoomIndex.values())
            if (!(!e || e.name !== s))
                return e;
        return null
    }
    updateUserData(s)
    {
        if (!s)
            return;
        this.removeUserData(s.roomIndex);
        let e = this._userDataByType.get(s.type);
        e || (e = new Map, this._userDataByType.set(s.type, e)),
        e.set(s.webID, s),
        this._userDataByRoomIndex.set(s.roomIndex, s)
    }
    removeUserData(s)
    {
        const e = this.getUserDataByIndex(s);
        if (!e)
            return;
        this._userDataByRoomIndex.delete(s);
        const t = this._userDataByType.get(e.type);
        t && t.delete(e.webID)
    }
    getUserBadges(s)
    {
        this._connection && this._connection.send(new dE(s));
        const e = this._userBadges.get(s);
        return e || []
    }
    setUserBadges(s, e)
    {
        this._userBadges.set(s, e)
    }
    updateFigure(s, e, t, r, i)
    {
        const n = this.getUserDataByIndex(s);
        n && (n.figure = e, n.sex = t, n.hasSaddle = r, n.isRiding = i)
    }
    updateName(s, e)
    {
        const t = this.getUserDataByIndex(s);
        t && (t.name = e)
    }
    updateMotto(s, e)
    {
        const t = this.getUserDataByIndex(s);
        t && (t.custom = e)
    }
    updateAchievementScore(s, e)
    {
        const t = this.getUserDataByIndex(s);
        t && (t.activityPoints = e)
    }
    updatePetLevel(s, e)
    {
        const t = this.getUserDataByIndex(s);
        t && (t.petLevel = e)
    }
    updatePetBreedingStatus(s, e, t, r, i)
    {
        const n = this.getUserDataByIndex(s);
        n && (n.canBreed = e, n.canHarvest = t, n.canRevive = r, n.hasBreedingPermission = i)
    }
    requestPetInfo(s)
    {
        !this._connection || !this.getPetData(s) || this._connection.send(new OM(s))
    }
    get connection()
    {
        return this._connection
    }
}
;
let Su = Pc;
Su.TYPE_USER = 1;
Su.TYPE_PET = 2;
Su.TYPE_BOT = 3;
Su.TYPE_RENTABLE_BOT = 4;
class B3 extends ei {
    constructor()
    {
        super(),
        this._connection = null,
        this._userData = new Su,
        this._roomId = 0,
        this._password = null,
        this._state = Ce.CREATED,
        this._tradeMode = Po.NO_TRADING,
        this._doorMode = 0,
        this._controllerLevel = ct.NONE,
        this._ownRoomIndex = -1,
        this._isGuildRoom = !1,
        this._isRoomOwner = !1,
        this._isDecorating = !1,
        this._isSpectator = !1,
        this._moderationSettings = null
    }
    onDispose()
    {
        this._userData && (this._userData.dispose(), this._userData = null),
        this._connection = null
    }
    setConnection(e)
    {
        this._connection || !e || (this._connection = e, this._userData && this._userData.setConnection(e))
    }
    setControllerLevel(e)
    {
        if (e >= ct.NONE && e <= ct.MODERATOR) {
            this._controllerLevel = e;
            return
        }
        this._controllerLevel = ct.NONE
    }
    setOwnRoomIndex(e)
    {
        this._ownRoomIndex = e
    }
    setRoomOwner()
    {
        this._isRoomOwner = !0
    }
    start()
    {
        return this._state !== Ce.CREATED || !this._connection ? !1 : (this._state = Ce.STARTED, this.enterRoom())
    }
    enterRoom()
    {
        return this._connection ? (this._connection.send(new PM(this._roomId, this._password)), !0) : !1
    }
    reset(e)
    {
        e !== this._roomId && (this._roomId = e)
    }
    sendChatMessage(e, t)
    {
        this._connection.send(new cE(e, t))
    }
    sendShoutMessage(e, t)
    {
        this._connection.send(new Ab(e, t))
    }
    sendWhisperMessage(e, t, r)
    {
        this._connection.send(new yb(e, t, r))
    }
    sendChatTypingMessage(e)
    {
        e ? this._connection.send(new Mb) : this._connection.send(new bb)
    }
    sendMottoMessage(e)
    {
        this._connection.send(new sD(e))
    }
    sendDanceMessage(e)
    {
        this._connection.send(new vb(e))
    }
    sendExpressionMessage(e)
    {
        this._connection.send(new Db(e))
    }
    sendSignMessage(e)
    {
        e < 0 || e > 17 || this._connection.send(new Fb(e))
    }
    sendPostureMessage(e)
    {
        this._connection.send(new wb(e))
    }
    sendDoorbellApprovalMessage(e, t)
    {
        this._connection.send(new vM(e, t))
    }
    sendAmbassadorAlertMessage(e)
    {
        this._connection.send(new UM(e))
    }
    sendKickMessage(e)
    {
        this._connection.send(new GM(e))
    }
    sendMuteMessage(e, t)
    {
        this._connection.send(new BM(e, t, this._roomId))
    }
    sendBanMessage(e, t)
    {
        this._connection.send(new wM(e, this._roomId, t))
    }
    sendGiveRightsMessage(e)
    {
        this._connection.send(new xM(e))
    }
    sendTakeRightsMessage(e)
    {
        this._connection.send(new tE(e))
    }
    sendPollStartMessage(e)
    {
        this._connection.send(new MM(e))
    }
    sendPollRejectMessage(e)
    {
        this._connection.send(new yM(e))
    }
    sendPollAnswerMessage(e, t, r)
    {
        this._connection.send(new NM(e, t, r))
    }
    sendPeerUsersClassificationMessage(e)
    {
        this._connection.send(new dD(e))
    }
    sendOpenPetPackageMessage(e, t)
    {
        this._connection.send(new oE(e, t))
    }
    sendRoomUsersClassificationMessage(e)
    {
        this._connection.send(new _D(e))
    }
    updateMoodlightData(e, t, r, i, n)
    {
        let o = "000000" + r.toString(16).toUpperCase();
        o = "#" + o.substring(o.length - 6),
        this.connection.send(new sb(e, t, o, i, n))
    }
    toggleMoodlightState()
    {
        this.connection.send(new rb)
    }
    pickupPet(e)
    {
        this._connection && this._connection.send(new QM(e))
    }
    pickupBot(e)
    {
        this._connection && this._connection.send(new Hd(e))
    }
    requestMoodlightSettings()
    {
        this._connection && this._connection.send(new tb)
    }
    openGift(e)
    {
        this._connection.send(new mb(e))
    }
    mountPet(e)
    {
        this._connection.send(new nf(e, !0))
    }
    dismountPet(e)
    {
        this._connection.send(new nf(e, !1))
    }
    usePetProduct(e, t)
    {
        this._connection.send(new AM(e, t))
    }
    removePetSaddle(e)
    {
        this._connection.send(new RM(e))
    }
    togglePetBreeding(e)
    {
        this._connection.send(new SM(e))
    }
    togglePetRiding(e)
    {
        this._connection.send(new CM(e))
    }
    useMultistateItem(e)
    {
        this._connection.send(new Bl(e))
    }
    harvestPet(e)
    {
        this._connection.send(new qM(e))
    }
    compostPlant(e)
    {
        this._connection.send(new zM(e))
    }
    requestPetCommands(e)
    {
        this._connection.send(new TM(e))
    }
    sendScriptProceed()
    {
        this._connection.send(new IM)
    }
    sendUpdateClothingChangeFurniture(e, t, r)
    {
        this._connection.send(new ZM(e, t, r))
    }
    changeQueue(e)
    {
        this._connection.send(new Sb(e))
    }
    votePoll(e)
    {
        this._connection.send(new bM(e))
    }
    get connection()
    {
        return this._connection
    }
    get userDataManager()
    {
        return this._userData
    }
    get roomId()
    {
        return this._roomId
    }
    set roomId(e)
    {
        this._roomId = e
    }
    get password()
    {
        return this._password
    }
    set password(e)
    {
        this._password = e
    }
    get state()
    {
        return this._state
    }
    get isPrivateRoom()
    {
        return !0
    }
    get tradeMode()
    {
        return this._tradeMode
    }
    set tradeMode(e)
    {
        this._tradeMode = e
    }
    get doorMode()
    {
        return this._doorMode
    }
    set doorMode(e)
    {
        this._doorMode = e
    }
    get allowPets()
    {
        return this._allowPets
    }
    set allowPets(e)
    {
        this._allowPets = e
    }
    get controllerLevel()
    {
        return this._controllerLevel
    }
    get ownRoomIndex()
    {
        return this._ownRoomIndex
    }
    get isGuildRoom()
    {
        return this._isGuildRoom
    }
    set isGuildRoom(e)
    {
        this._isGuildRoom = e
    }
    get isRoomOwner()
    {
        return this._isRoomOwner
    }
    get isDecorating()
    {
        return this._isDecorating
    }
    set isDecorating(e)
    {
        this._isDecorating = e
    }
    get isSpectator()
    {
        return this._isSpectator
    }
    set isSpectator(e)
    {
        this._isSpectator = e
    }
    get moderationSettings()
    {
        return this._moderationSettings
    }
    set moderationSettings(e)
    {
        this._moderationSettings = e
    }
}
class k3 extends bn {
    constructor(e, t)
    {
        super(),
        this._communication = e,
        this._roomEngine = t,
        this._handlers = [],
        this._sessions = new Map,
        this._pendingSession = null,
        this._sessionStarting = !1,
        this._viewerSession = null,
        this.onRoomEngineEvent = this.onRoomEngineEvent.bind(this)
    }
    onInit()
    {
        this.createHandlers(),
        this.processPendingSession(),
        this._roomEngine.events.addEventListener(ze.ENGINE_INITIALIZED, this.onRoomEngineEvent)
    }
    onDispose()
    {
        this._roomEngine.events.removeEventListener(ze.ENGINE_INITIALIZED, this.onRoomEngineEvent),
        super.onDispose()
    }
    createHandlers()
    {
        const e = this._communication && this._communication.connection;
        e && this._handlers.push(new b3(e, this), new D3(e, this), new v3(e, this), new P3(e, this), new bo(e, this), new w3(e, this), new L3(e, this), new N3(e, this), new F3(e, this), new M3(e, this), new y3(e, this))
    }
    setHandlers(e)
    {
        if (!(!this._handlers || !this._handlers.length))
            for (const t of this._handlers)
                t && t.setRoomId(e.roomId)
    }
    onRoomEngineEvent(e)
    {
        this.processPendingSession()
    }
    processPendingSession()
    {
        !this._pendingSession || !this._roomEngine.ready || (this.addSession(this._pendingSession), this._pendingSession = null)
    }
    getSession(e)
    {
        const t = this._sessions.get(this.getRoomId(e));
        return t || null
    }
    createSession(e, t=null)
    {
        const r = new B3;
        return r.roomId = e, r.password = t, this.addSession(r)
    }
    addSession(e)
    {
        return this._roomEngine.ready ? (this._sessionStarting = !0, this._sessions.get(this.getRoomId(e.roomId)) && this.removeSession(e.roomId, !1), e.setConnection(this._communication.connection), this._sessions.set(this.getRoomId(e.roomId), e), this.events.dispatchEvent(new Ce(Ce.CREATED, e)), this._viewerSession = e, this.startSession(this._viewerSession), !0) : (this._pendingSession = e, !1)
    }
    startSession(e)
    {
        return e.state === Ce.STARTED ? !1 : (this._sessionStarting = !1, e.start() ? (this.events.dispatchEvent(new Ce(Ce.STARTED, e)), this.setHandlers(e), !0) : (this.removeSession(e.roomId), !1))
    }
    removeSession(e, t=!0)
    {
        const r = this.getSession(e);
        r && (this._sessions.delete(this.getRoomId(e)), this.events.dispatchEvent(new Ce(Ce.ENDED, r, t)), r.dispose())
    }
    sessionUpdate(e, t)
    {
        if (this.getSession(e))
            switch (t) {
            case bo.RS_CONNECTED:
                return;
            case bo.RS_READY:
                return;
            case bo.RS_DISCONNECTED:
                this.removeSession(e);
                return
            }
    }
    sessionReinitialize(e, t)
    {
        const r = this.getSession(e);
        r && (this._sessions.delete(this.getRoomId(e)), r.reset(t), this._sessions.set(this.getRoomId(t), r), this.setHandlers(r))
    }
    getRoomId(e)
    {
        return "hard_coded_room_id"
    }
    get communication()
    {
        return this._communication
    }
    get roomEngine()
    {
        return this._roomEngine
    }
    get viewerSession()
    {
        return this._viewerSession
    }
}
const cv = class {
    static logEventLog(s)
    {
        try {
            Ze.available && Ze.call("logEventLog", s)
        } catch {
            pe.log("External interface not working, failed to log event log.")
        }
    }
    static openPage(s)
    {
        try {
            Ze.available && Ze.call("openPage", s)
        } catch {
            pe.log("Failed to open web page", s)
        }
    }
    static openWebPage(s)
    {
        window.open(s)
    }
    static sendHeartBeat()
    {
        try {
            Ze.available && Ze.call("heartBeat")
        } catch {
            pe.log("Failed to send heartbeat")
        }
    }
    static openWebPageAndMinimizeClient(s)
    {
        try {
            Ze.available && cv.openPage(s)
        } catch {
            pe.log("Failed to open web page", s)
        }
    }
    static closeWebPageAndRestoreClient()
    {
        try {
            Ze.available && Ze.call("closeWebPageAndRestoreClient")
        } catch {
            pe.log("Failed to close web page and restore client!")
        }
    }
    static openHabblet(s, e=null)
    {
        try {
            Ze.available && Ze.call("openHabblet", s, e)
        } catch {
            pe.log("Failed to open Habblet", s)
        }
    }
    static closeHabblet(s, e=null)
    {
        try {
            Ze.available && Ze.call("closeHabblet", s, e)
        } catch {
            pe.log("Failed to close Habblet", s)
        }
    }
    static send(s, e)
    {
        try {
            Ze.available && Ze.call("disconnect", s, e)
        } catch {
            pe.log("Failed to close send ")
        }
    }
    static showGame(s)
    {
        try {
            Ze.available && Ze.callGame("showGame", s)
        } catch (e) {
            pe.log("Failed to open game", e)
        }
    }
    static hideGame()
    {
        try {
            Ze.available && Ze.callGame("hideGame")
        } catch {
            pe.log("Failed to hide game")
        }
    }
    static open(s)
    {
        try {
            Ze.available && Ze.call("openExternalLink", escape(s))
        } catch {
            pe.log("External interface not working. Could not request to open: " + s)
        }
    }
    static roomVisited(s)
    {
        try {
            Ze.available && Ze.call("roomVisited", s)
        } catch {
            pe.log("External interface not working. Could not store last room visit.")
        }
    }
    static openMinimail(s)
    {
        try {
            Ze.available && Ze.call("openMinimail", s)
        } catch {
            pe.log("External interface not working. Could not open minimail.")
        }
    }
    static openNews()
    {
        try {
            Ze.available && Ze.call("openNews")
        } catch {
            pe.log("External interface not working. Could not open news.")
        }
    }
    static closeNews()
    {
        try {
            Ze.available && Ze.call("closeNews")
        } catch {
            pe.log("External interface not working. Could not close news.")
        }
    }
    static openAvatars()
    {
        try {
            Ze.available && Ze.call("openAvatars")
        } catch {
            pe.log("External interface not working. Could not open avatars.")
        }
    }
    static openRoomEnterAd()
    {
        try {
            Ze.available && Ze.call("openRoomEnterAd")
        } catch {
            pe.log("External interface not working. Could not open roomenterad.")
        }
    }
    static updateFigure(s)
    {
        try {
            Ze.available && Ze.call("updateFigure", s)
        } catch {
            pe.log("External interface not working. Could not update figure.")
        }
    }
}
;
let Gi = cv;
Gi.ADVERTISEMENT = "advertisement";
Gi.OPENLINK = "openlink";
Gi.OPENROOM = "openroom";
class V3 extends bn {
    constructor(e)
    {
        super(),
        this._communication = e,
        this.resetUserInfo(),
        this._ignoredUsersManager = new x3(this),
        this._groupInformationManager = new A3(this),
        this._clubLevel = 0,
        this._securityLevel = 0,
        this._isAmbassador = !1,
        this._noobnessLevel = -1,
        this._isEmailVerified = !1,
        this._systemOpen = !1,
        this._systemShutdown = !1,
        this._isAuthenticHabbo = !1,
        this._isRoomCameraFollowDisabled = !1,
        this._uiFlags = 0,
        this._floorItems = new Map,
        this._wallItems = new Map,
        this._products = new Map,
        this._furnitureData = null,
        this._furnitureReady = !1,
        this._productsReady = !1,
        this._furnitureListenersNotified = !1,
        this._pendingFurnitureListeners = [],
        this._pendingProductListeners = [],
        this._tags = [],
        this._badgeImageManager = null,
        this.onFurnitureDataReadyEvent = this.onFurnitureDataReadyEvent.bind(this),
        this.onProductDataReadyEvent = this.onProductDataReadyEvent.bind(this),
        this.onNitroSettingsEvent = this.onNitroSettingsEvent.bind(this)
    }
    onInit()
    {
        this.loadFurnitureData(),
        this.loadProductData(),
        this.loadBadgeImageManager(),
        this._ignoredUsersManager && this._ignoredUsersManager.init(),
        this._groupInformationManager && this._groupInformationManager.init(),
        this._communication.registerMessageEvent(new Sm(this.onUserFigureEvent.bind(this))),
        this._communication.registerMessageEvent(new xl(this.onUserInfoEvent.bind(this))),
        this._communication.registerMessageEvent(new jm(this.onUserPermissionsEvent.bind(this))),
        this._communication.registerMessageEvent(new VR(this.onAvailabilityStatusMessageEvent.bind(this))),
        this._communication.registerMessageEvent(new MC(this.onPetRespectFailed.bind(this))),
        this._communication.registerMessageEvent(new tn(this.onChangeNameUpdateEvent.bind(this))),
        this._communication.registerMessageEvent(new Bd(this.onUserNameChangeMessageEvent.bind(this))),
        this._communication.registerMessageEvent(new PA(this.onUserTags.bind(this))),
        this._communication.registerMessageEvent(new Fl(this.onRoomModelNameEvent.bind(this))),
        this._communication.registerMessageEvent(new GA(this.onInClientLinkEvent.bind(this))),
        this._communication.registerMessageEvent(new ZS(this.onMysteryBoxKeysEvent.bind(this))),
        this._communication.registerMessageEvent(new YO(this.onNoobnessLevelMessageEvent.bind(this))),
        this._communication.registerMessageEvent(new bA(this.onAccountSafetyLockStatusChangeMessageEvent.bind(this))),
        this._communication.registerMessageEvent(new LA(this.onEmailStatus.bind(this))),
        Ee.instance.events.addEventListener(Lo.SETTINGS_UPDATED, this.onNitroSettingsEvent)
    }
    onDispose()
    {
        this.destroyFurnitureData(),
        this._ignoredUsersManager && (this._ignoredUsersManager.dispose(), this._ignoredUsersManager = null),
        this._groupInformationManager && (this._groupInformationManager.dispose(), this._groupInformationManager = null),
        Ee.instance.events.removeEventListener(Lo.SETTINGS_UPDATED, this.onNitroSettingsEvent),
        super.onDispose()
    }
    resetUserInfo()
    {
        this._userId = 0,
        this._name = null,
        this._figure = null,
        this._gender = null,
        this._realName = null,
        this._canChangeName = !1,
        this._safetyLocked = !1
    }
    loadFurnitureData()
    {
        this.destroyFurnitureData(),
        this._furnitureData = new wc(this._floorItems, this._wallItems, Ee.instance.localization),
        this._furnitureData.addEventListener(wc.FURNITURE_DATA_READY, this.onFurnitureDataReadyEvent),
        this._furnitureData.loadFurnitureData(ye.getValue("furnidata.url"))
    }
    loadProductData()
    {
        this.destroyProductData(),
        this._productData = new Fc(this._products),
        this._productData.addEventListener(Fc.PDP_PRODUCT_DATA_READY, this.onProductDataReadyEvent),
        this._productData.loadProductData(ye.getValue("productdata.url"))
    }
    loadBadgeImageManager()
    {
        this._badgeImageManager || (this._badgeImageManager = new Sl(zr(), this), this._badgeImageManager.init())
    }
    hasProductData(e)
    {
        return this._productsReady ? !0 : (e && this._pendingProductListeners.indexOf(e) === -1 && this._pendingProductListeners.push(e), !1)
    }
    getAllFurnitureData(e)
    {
        if (!this._furnitureReady)
            return this._pendingFurnitureListeners.indexOf(e) === -1 && this._pendingFurnitureListeners.push(e), null;
        const t = [];
        for (const r of this._floorItems.values())
            r && t.push(r);
        for (const r of this._wallItems.values())
            r && t.push(r);
        return t
    }
    removePendingFurniDataListener(e)
    {
        if (!this._pendingFurnitureListeners)
            return;
        const t = this._pendingFurnitureListeners.indexOf(e);
        t !== -1 && this._pendingFurnitureListeners.splice(t, 1)
    }
    onUserFigureEvent(e)
    {
        !e || !e.connection || (this._figure = e.getParser().figure, this._gender = e.getParser().gender, Gi.updateFigure(this._figure))
    }
    onUserInfoEvent(e)
    {
        if (!e || !e.connection)
            return;
        this.resetUserInfo();
        const t = e.getParser().userInfo;
        t && (this._userId = t.userId, this._name = t.username, this._figure = t.figure, this._gender = t.gender, this._realName = t.realName, this._respectsReceived = t.respectsReceived, this._respectsLeft = t.respectsRemaining, this._respectsPetLeft = t.respectsPetRemaining, this._canChangeName = t.canChangeName, this._safetyLocked = t.safetyLocked, this._ignoredUsersManager && this._ignoredUsersManager.requestIgnoredUsers())
    }
    onUserPermissionsEvent(e)
    {
        !e || !e.connection || (this._clubLevel = e.getParser().clubLevel, this._securityLevel = e.getParser().securityLevel, this._isAmbassador = e.getParser().isAmbassador)
    }
    onAvailabilityStatusMessageEvent(e)
    {
        if (!e || !e.connection)
            return;
        const t = e.getParser();
        t && (this._systemOpen = t.isOpen, this._systemShutdown = t.onShutdown, this._isAuthenticHabbo = t.isAuthenticUser)
    }
    onPetRespectFailed(e)
    {
        !e || !e.connection || this._respectsPetLeft++
    }
    onChangeNameUpdateEvent(e)
    {
        if (!e || !e.connection)
            return;
        const t = e.getParser();
        t && t.resultCode === tn.NAME_OK && (this._canChangeName = !1, this.events.dispatchEvent(new cg(t.name)))
    }
    onUserNameChangeMessageEvent(e)
    {
        if (!e || !e.connection)
            return;
        const t = e.getParser();
        t && t.webId === this.userId && (this._name = t.newName, this._canChangeName = !1, this.events.dispatchEvent(new cg(this._name)))
    }
    onUserTags(e)
    {
        if (!e || !e.connection)
            return;
        const t = e.getParser();
        t && (this._tags = t.tags)
    }
    onRoomModelNameEvent(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        t && Gi.roomVisited(t.roomId)
    }
    onFurnitureDataReadyEvent(e)
    {
        if (this._furnitureData.removeEventListener(wc.FURNITURE_DATA_READY, this.onFurnitureDataReadyEvent), this._furnitureReady = !0, !this._furnitureListenersNotified && (this._furnitureListenersNotified = !0, this._pendingFurnitureListeners && this._pendingFurnitureListeners.length))
            for (const t of this._pendingFurnitureListeners)
                t && t.loadFurnitureData();
        this._pendingProductListeners = []
    }
    onProductDataReadyEvent(e)
    {
        this._productData.removeEventListener(Fc.PDP_PRODUCT_DATA_READY, this.onProductDataReadyEvent),
        this._productsReady = !0;
        for (const t of this._pendingProductListeners)
            t && t.loadProductData();
        this._pendingProductListeners = []
    }
    onInClientLinkEvent(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        t && Ee.instance.createLinkEvent(t.link)
    }
    onMysteryBoxKeysEvent(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        t && this.events.dispatchEvent(new Jf(t.boxColor, t.keyColor))
    }
    onNoobnessLevelMessageEvent(e)
    {
        this._noobnessLevel = e.getParser().noobnessLevel,
        this._noobnessLevel !== yl.OLD_IDENTITY && ye.setValue("new.identity", 1)
    }
    onAccountSafetyLockStatusChangeMessageEvent(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        t && (this._safetyLocked = t.status == yd.SAFETY_LOCK_STATUS_LOCKED)
    }
    onEmailStatus(e)
    {
        if (!e)
            return;
        const t = e.getParser();
        t && (this._isEmailVerified = t.isVerified)
    }
    onNitroSettingsEvent(e)
    {
        this._isRoomCameraFollowDisabled = e.cameraFollow,
        this._uiFlags = e.flags,
        this.events.dispatchEvent(new cR(this._uiFlags))
    }
    destroyFurnitureData()
    {
        this._furnitureData && (this._furnitureData.dispose(), this._furnitureData = null)
    }
    destroyProductData()
    {
        this._productData && (this._productData.dispose(), this._productData = null)
    }
    getFloorItemData(e)
    {
        const t = this._floorItems.get(e);
        return t || null
    }
    getFloorItemDataByName(e)
    {
        if (!e || !this._floorItems || !this._floorItems.size)
            return null;
        for (const t of this._floorItems.values())
            if (!(!t || t.className !== e))
                return t
    }
    getWallItemData(e)
    {
        const t = this._wallItems.get(e);
        return t || null
    }
    getWallItemDataByName(e)
    {
        if (!e || !this._wallItems || !this._wallItems.size)
            return null;
        for (const t of this._wallItems.values())
            if (!(!t || t.className !== e))
                return t
    }
    getProductData(e)
    {
        return this._productsReady || this.loadProductData(), this._products.get(e)
    }
    getBadgeUrl(e)
    {
        return this._badgeImageManager.getBadgeUrl(e)
    }
    getGroupBadgeUrl(e)
    {
        return this._badgeImageManager.getBadgeUrl(e, Sl.GROUP_BADGE)
    }
    getBadgeImage(e)
    {
        return this._badgeImageManager.getBadgeImage(e)
    }
    getGroupBadgeImage(e)
    {
        return this._badgeImageManager.getBadgeImage(e, Sl.GROUP_BADGE)
    }
    getUserTags(e)
    {
        e < 0 || this.send(new Zb(e))
    }
    loadBadgeImage(e)
    {
        return this._badgeImageManager.loadBadgeImage(e)
    }
    loadGroupBadgeImage(e)
    {
        return this._badgeImageManager.loadBadgeImage(e, Sl.GROUP_BADGE)
    }
    hasSecurity(e)
    {
        return this._securityLevel >= e
    }
    giveRespect(e)
    {
        e < 0 || this._respectsLeft <= 0 || (this.send(new hD(e)), this._respectsLeft--)
    }
    givePetRespect(e)
    {
        e < 0 || this._respectsPetLeft <= 0 || (this.send(new du(e)), this._respectsPetLeft--)
    }
    sendSpecialCommandMessage(e, t=0)
    {
        this.send(new cE(e))
    }
    ignoreUser(e)
    {
        this._ignoredUsersManager && this._ignoredUsersManager.ignoreUser(e)
    }
    unignoreUser(e)
    {
        this._ignoredUsersManager && this._ignoredUsersManager.unignoreUser(e)
    }
    isUserIgnored(e)
    {
        return this._ignoredUsersManager && this._ignoredUsersManager.isIgnored(e)
    }
    getGroupBadge(e)
    {
        return this._groupInformationManager && this._groupInformationManager.getGroupBadge(e)
    }
    send(e)
    {
        this._communication.connection.send(e)
    }
    get communication()
    {
        return this._communication
    }
    get userId()
    {
        return this._userId
    }
    get userName()
    {
        return this._name
    }
    get figure()
    {
        return this._figure
    }
    get gender()
    {
        return this._gender
    }
    get realName()
    {
        return this._realName
    }
    get ignoredUsersManager()
    {
        return this._ignoredUsersManager
    }
    get groupInformationManager()
    {
        return this._groupInformationManager
    }
    get respectsReceived()
    {
        return this._respectsReceived
    }
    get respectsLeft()
    {
        return this._respectsLeft
    }
    get respectsPetLeft()
    {
        return this._respectsPetLeft
    }
    get canChangeName()
    {
        return this._canChangeName
    }
    get clubLevel()
    {
        return this._clubLevel
    }
    get securityLevel()
    {
        return this._securityLevel
    }
    get isAmbassador()
    {
        return this._isAmbassador
    }
    get isEmailVerified()
    {
        return this._isEmailVerified
    }
    get isNoob()
    {
        return this._noobnessLevel !== yl.OLD_IDENTITY
    }
    get isRealNoob()
    {
        return this._noobnessLevel === yl.REAL_NOOB
    }
    get isSystemOpen()
    {
        return this._systemOpen
    }
    get isSystemShutdown()
    {
        return this._systemShutdown
    }
    get isAuthenticHabbo()
    {
        return this._isAuthenticHabbo
    }
    get isModerator()
    {
        return this._securityLevel >= xr.MODERATOR
    }
    get isCameraFollowDisabled()
    {
        return this._isRoomCameraFollowDisabled
    }
    get uiFlags()
    {
        return this._uiFlags
    }
    get tags()
    {
        return this._tags
    }
}
class uv extends xd {
    constructor(e, t, r, i, n="")
    {
        super(e, t, r, i),
        this._jukeboxDiskId = -1,
        this._songData = n
    }
    get id()
    {
        return this._id
    }
    get length()
    {
        return this._length
    }
    get name()
    {
        return this._name
    }
    get creator()
    {
        return this._creator
    }
    get songData()
    {
        return this._songData
    }
    set songData(e)
    {
        this._songData = e
    }
    get diskId()
    {
        return this._jukeboxDiskId
    }
    set diskId(e)
    {
        this._jukeboxDiskId = e
    }
}
class H3 {
    constructor(e, t, r, i, n)
    {
        this._songId = e,
        this._startPos = t,
        this._playLength = r,
        this._fadeInSeconds = i,
        this._fadeOutSeconds = n,
        this._playRequestTime = Date.now()
    }
    get songId()
    {
        return this._songId
    }
    get startPos()
    {
        return this._startPos < 0 ? 0 : this._startPos + (Date.now() - this._playRequestTime) / 1e3
    }
    get playLength()
    {
        return this._playLength
    }
    get playRequestTime()
    {
        return this._playRequestTime
    }
    get fadeInSeconds()
    {
        return this._fadeInSeconds
    }
    get fadeOutSeconds()
    {
        return this._fadeOutSeconds
    }
}
const hv = class  extends Ye{
    constructor(s, e)
    {
        super(hv.NOTIFY_PLAYED_SONG),
        this._name = s,
        this._creator = e
    }
    get name()
    {
        return this._name
    }
    get creator()
    {
        return this._creator
    }
}
;
let DE = hv;
DE.NOTIFY_PLAYED_SONG = "UIEW_NOTIFY_PLAYED_SONG";
class Ji extends Ye {
    constructor(e, t, r, i)
    {
        super(e),
        this._id = r,
        this._position = i,
        this._priority = t
    }
    get id()
    {
        return this._id
    }
    get position()
    {
        return this._position
    }
    get priority()
    {
        return this._priority
    }
}
Ji.NPE_USER_PLAY_SONG = "NPE_USER_PLAY_SONG";
Ji.NPW_USER_STOP_SONG = "NPW_USER_STOP_SONG";
Ji.NPE_SONG_CHANGED = "NPE_SONG_CHANGED";
class pn extends Ye {
    constructor(e)
    {
        super(e)
    }
}
pn.PLUE_PLAY_LIST_UPDATED = "PLUE_PLAY_LIST_UPDATED";
pn.PLUE_PLAY_LIST_FULL = "PLUE_PLAY_LIST_FULL";
class Cl extends Ye {
    constructor(e)
    {
        super(e)
    }
}
Cl.SDIR_SONG_DISK_INVENTORY_RECEIVENT_EVENT = "SDIR_SONG_DISK_INVENTORY_RECEIVENT_EVENT";
class jl extends Ye {
    constructor(e, t)
    {
        super(e),
        this._id = t
    }
    get id()
    {
        return this._id
    }
}
jl.SIR_TRAX_SONG_INFO_RECEIVED = "SIR_TRAX_SONG_INFO_RECEIVED";
class Kc extends Ye {
    constructor(e, t)
    {
        super(e),
        this._id = t
    }
    get id()
    {
        return this._id
    }
}
Kc.TRAX_SONG_COMPLETE = "SME_TRAX_SONG_COMPLETE";
class Fs {}
Fs.PRIORITY_ROOM_PLAYLIST = 0;
Fs.PRIORITY_USER_PLAYLIST = 1;
Fs.PRIORITY_SONG_PLAY = 2;
Fs.PRIORITY_PURCHASE_PREVIEW = 3;
Fs.PRIORITY_COUNT = 4;
class j3 {
    constructor()
    {
        this._isPlaying = !1,
        this._disposed = !1,
        this._entries = [],
        this._missingSongInfo = [],
        this._messageEvents = [new AA(this.onNowPlayingMessageEvent.bind(this)), new CA(this.onJukeboxSongDisksMessageEvent.bind(this)), new SA(this.onJukeboxPlayListFullMessageEvent.bind(this))],
        this.onSongInfoReceivedEvent = this.onSongInfoReceivedEvent.bind(this)
    }
    init()
    {
        this._messageEvents.forEach(e => Ee.instance.communication.connection.addMessageEvent(e)),
        Ee.instance.soundManager.events.addEventListener(jl.SIR_TRAX_SONG_INFO_RECEIVED, this.onSongInfoReceivedEvent)
    }
    get priority()
    {
        return Fs.PRIORITY_ROOM_PLAYLIST
    }
    onNowPlayingMessageEvent(e)
    {
        const t = e.getParser();
        this._isPlaying = t.currentSongId !== -1,
        t.currentSongId >= 0 ? (Ee.instance.soundManager.musicController.playSong(t.currentSongId, Fs.PRIORITY_ROOM_PLAYLIST, t.syncCount / 1e3, 0, 1, 1), this._currentEntryId = t.currentSongId) : this.stopPlaying(),
        t.nextSongId >= 0 && Ee.instance.soundManager.musicController.addSongInfoRequest(t.nextSongId),
        this._playPosition = t.currentPosition,
        Ee.instance.soundManager.events.dispatchEvent(new Ji(Ji.NPE_SONG_CHANGED, Fs.PRIORITY_ROOM_PLAYLIST, t.currentSongId, t.currentPosition))
    }
    onJukeboxSongDisksMessageEvent(e)
    {
        const t = e.getParser();
        this._entries = [];
        for (let r = 0; r < t.songDisks.length; r++) {
            const i = t.songDisks.getWithIndex(r),
                n = t.songDisks.getKey(r);
            let o = Ee.instance.soundManager.musicController.getSongInfo(i);
            o == null && (o = new uv(i, -1, null, null, null), this._missingSongInfo.indexOf(i) < 0 && (this._missingSongInfo.push(i), Ee.instance.soundManager.musicController.requestSongInfoWithoutSamples(i))),
            o.diskId = n,
            this._entries.push(o)
        }
        this._missingSongInfo.length == 0 && Ee.instance.soundManager.events.dispatchEvent(new pn(pn.PLUE_PLAY_LIST_UPDATED))
    }
    onJukeboxPlayListFullMessageEvent(e)
    {
        Ee.instance.soundManager.events.dispatchEvent(new pn(pn.PLUE_PLAY_LIST_FULL))
    }
    onSongInfoReceivedEvent(e)
    {
        for (let r = 0; r < this.length; r++) {
            const i = this._entries[r];
            if (i.id === e.id) {
                const n = i.diskId,
                    o = Ee.instance.soundManager.musicController.getSongInfo(e.id);
                o != null && (o.diskId = n, this._entries[r] = o);
                break
            }
        }
        const t = this._missingSongInfo.indexOf(e.id);
        t >= 0 && this._missingSongInfo.splice(t, 1),
        this._missingSongInfo.length == 0 && Ee.instance.soundManager.events.dispatchEvent(new pn(pn.PLUE_PLAY_LIST_UPDATED))
    }
    stopPlaying()
    {
        Ee.instance.soundManager.musicController.stop(this.priority),
        this._currentEntryId = -1,
        this._playPosition = -1,
        this._isPlaying = !1
    }
    get length()
    {
        return this._entries ? this._entries.length : 0
    }
    get playPosition()
    {
        return this._playPosition
    }
    get nowPlayingSongId()
    {
        return this._currentEntryId
    }
    get isPlaying()
    {
        return this._isPlaying
    }
    get entries()
    {
        return this._entries
    }
    getEntry(e)
    {
        return e < 0 || e >= this._entries.length ? null : this._entries[e]
    }
    requestPlayList()
    {
        Ee.instance.communication.connection.send(new Wb)
    }
    dispose()
    {
        this._disposed || (this._disposed = !0, this.stopPlaying(), Ee.instance.soundManager.events && Ee.instance.soundManager.events.removeEventListener(jl.SIR_TRAX_SONG_INFO_RECEIVED, this.onSongInfoReceivedEvent), this._messageEvents.forEach(e => Ee.instance.communication.connection.removeMessageEvent(e)), this._messageEvents = null)
    }
}
class W3 {
    constructor(e)
    {
        this._id = e,
        this._items = []
    }
    addChannelItem(e)
    {
        this._items.push(e)
    }
    get items()
    {
        return this._items
    }
}
class Y3 {
    constructor(e, t)
    {
        this._id = e,
        this._length = t
    }
    get id()
    {
        return this._id
    }
    get length()
    {
        return this._length
    }
}
class Rf {
    constructor(e)
    {
        this._channels = [],
        this._metaData = new Map;
        let t = [];
        const r = e.split(":"),
            i = r[r.length - 1];
        if (i.indexOf("meta") > -1) {
            const n = i.split(";");
            for (const o of n) {
                const l = o.split(",");
                this._metaData.set(l[0], l[1])
            }
            t = r.slice(0, r.length - 1)
        } else
            t = r;
        for (let n = 0; n < t.length / 2; n++)
            if (t[n * 2].length > 0) {
                const o = parseInt(t[n * 2]),
                    l = t[n * 2 + 1].split(";"),
                    c = new W3(o);
                for (const u of l) {
                    const h = u.split(",");
                    if (h.length !== 2)
                        return;
                    c.addChannelItem(new Y3(parseInt(h[0]), parseInt(h[1])))
                }
                this._channels.push(c)
            }
    }
    get channels()
    {
        return this._channels
    }
    getSampleIds()
    {
        const e = [];
        for (const t of this._channels)
            for (const r of t.items)
                e.indexOf(r.id) === -1 && e.push(r.id);
        return e
    }
    get hasMetaData()
    {
        return this._metaData.has("meta")
    }
    get metaCutMode()
    {
        return this._metaData.has("c")
    }
    get metaTempo()
    {
        const e = this._metaData.get("t");
        return e ? parseInt(e) : null
    }
}
class z3 {
    constructor(e)
    {
        this._sampleUrl = e,
        this._isPlaying = !1,
        this._startPos = 0,
        this._currentPos = 0,
        this._playLength = 0,
        this._sequence = [],
        this._cache = new Map
    }
    async play(e, t, r=0, i=-1)
    {
        this.reset(),
        this._currentSong = new Rf(e),
        this._startPos = Math.trunc(r),
        this._playLength = i,
        this._currentPos = this._startPos,
        this._currentSongId = t,
        await this.preload(),
        this._isPlaying = !0,
        this.tick(),
        this._tickerInterval = window.setInterval(() => this.tick(), 1e3)
    }
    reset()
    {
        this._isPlaying = !1,
        window.clearInterval(this._tickerInterval),
        $o.Howler.stop(),
        this._currentSongId = -1,
        this._currentSong = void 0,
        this._tickerInterval = void 0,
        this._startPos = 0,
        this._playLength = 0,
        this._sequence = [],
        this._currentPos = 0
    }
    pause()
    {
        this._isPlaying = !1,
        $o.Howler.stop()
    }
    resume()
    {
        this._isPlaying = !0
    }
    stop()
    {
        const e = this._currentSongId;
        this.reset(),
        Ee.instance.soundManager.events.dispatchEvent(new Kc(Kc.TRAX_SONG_COMPLETE, e))
    }
    setVolume(e)
    {
        $o.Howler.volume(e)
    }
    getVolume()
    {
        return $o.Howler.volume()
    }
    async getSample(e)
    {
        let t = this._cache.get(e);
        return t || (t = await this.loadSong(e)), Promise.resolve(t)
    }
    async preload()
    {
        if (this._sequence = [], !!this._currentSong) {
            for (const e of this._currentSong.channels) {
                const t = [];
                for (const r of e.items) {
                    const i = await this.getSample(r.id),
                        n = Math.ceil(r.length * 2 / Math.ceil(i.duration()));
                    for (let o = 0; o < n; o++)
                        for (let l = 0; l < Math.ceil(i.duration()); l++)
                            t.push({
                                sampleId: r.id,
                                offset: l
                            })
                }
                this._sequence.push(t)
            }
            this._playLength <= 0 && (this._playLength = Math.max(...this._sequence.map(e => e.length)))
        }
    }
    async preloadSamplesForSong(e)
    {
        const t = new Rf(e);
        await Promise.all(t.getSampleIds().map(r => this.getSample(r)))
    }
    async loadSong(e)
    {
        return new Promise((t, r) => {
            const i = new $o.Howl({
                src: [this._sampleUrl.replace("%sample%", e.toString())],
                preload: !0
            });
            i.once("load", () => {
                this._cache.set(e, i),
                t(i)
            }),
            i.once("loaderror", () => {
                pe.error("failed to load sample " + e),
                r("failed to load sample " + e)
            })
        })
    }
    tick()
    {
        this._currentPos > this._playLength - 1 && this.stop(),
        this._isPlaying && (this._currentSong && this.playPosition(this._currentPos), this._currentPos++)
    }
    playPosition(e)
    {
        if (!(!this._currentSong || !this._sequence) && $o.Howler._audioUnlocked)
            for (const t of this._sequence) {
                const r = t[e];
                if (!r || r.sampleId === -1 || r.sampleId === 0)
                    continue;
                const i = this._cache.get(r.sampleId);
                i && (r.offset === 0 ? i.play() : i.playing() || (i.seek(r.offset), i.play()))
            }
    }
}
const Th = class {
    constructor()
    {
        this._priorityPlaying = -1,
        this._requestNumberPlaying = -1,
        this._previousNotificationTime = -1,
        this._timerInstance = -1,
        this._songRequestList = [],
        this._requestedSongs = new Map,
        this._availableSongs = new Map,
        this._songDiskInventory = new as,
        this._songRequestsPerPriority = [],
        this._songRequestCountsPerPriority = [],
        this._diskInventoryMissingData = [],
        this._songIdPlaying = -1,
        this._previousNotifiedSongId = -1,
        this._messageEvents = [new yA(this.onTraxSongInfoMessageEvent.bind(this)), new MA(this.onSongDiskInventoryMessage.bind(this))],
        this.onJukeboxInit = this.onJukeboxInit.bind(this),
        this.onJukeboxDispose = this.onJukeboxDispose.bind(this),
        this.onSoundMachineInit = this.onSoundMachineInit.bind(this),
        this.onSoundMachineDispose = this.onSoundMachineDispose.bind(this),
        this.onTraxSongComplete = this.onTraxSongComplete.bind(this)
    }
    init()
    {
        this._timerInstance = window.setInterval(this.onTick.bind(this), 1e3),
        this._musicPlayer = new z3(Ee.instance.getConfiguration("external.samples.url")),
        this._messageEvents.forEach(s => Ee.instance.communication.connection.addMessageEvent(s)),
        Ee.instance.roomEngine.events.addEventListener(wt.JUKEBOX_INIT, this.onJukeboxInit),
        Ee.instance.roomEngine.events.addEventListener(wt.JUKEBOX_DISPOSE, this.onJukeboxDispose),
        Ee.instance.roomEngine.events.addEventListener(wt.SOUND_MACHINE_INIT, this.onSoundMachineInit),
        Ee.instance.roomEngine.events.addEventListener(wt.SOUND_MACHINE_DISPOSE, this.onSoundMachineDispose),
        Ee.instance.soundManager.events.addEventListener(Kc.TRAX_SONG_COMPLETE, this.onTraxSongComplete)
    }
    getRoomItemPlaylist(s)
    {
        return this._roomItemPlaylist
    }
    get songDiskInventory()
    {
        return this._songDiskInventory
    }
    getSongDiskInventorySize()
    {
        return this._songDiskInventory.length
    }
    getSongDiskInventoryDiskId(s)
    {
        return s >= 0 && s < this._songDiskInventory.length ? this._songDiskInventory.getKey(s) : -1
    }
    getSongDiskInventorySongId(s)
    {
        return s >= 0 && s < this._songDiskInventory.length ? this._songDiskInventory.getWithIndex(s) : -1
    }
    getSongInfo(s)
    {
        const e = this.getSongDataEntry(s);
        return e || this.requestSongInfoWithoutSamples(s), e
    }
    getSongIdPlayingAtPriority(s)
    {
        return s !== this._priorityPlaying ? -1 : this._songIdPlaying
    }
    stop(s)
    {
        const e = s === this._priorityPlaying,
            t = this.getTopRequestPriority() === s;
        e ? (this.resetSongStartRequest(s), this.stopSongAtPriority(s)) : (this.resetSongStartRequest(s), t && this.reRequestSongAtPriority(this._priorityPlaying))
    }
    addSongInfoRequest(s)
    {
        this.requestSong(s, !0)
    }
    requestSongInfoWithoutSamples(s)
    {
        this.requestSong(s, !1)
    }
    requestUserSongDisks()
    {
        Ee.instance.communication.connection.send(new qb)
    }
    updateVolume(s)
    {
        this._musicPlayer.setVolume(s)
    }
    dispose()
    {
        this._timerInstance && (clearInterval(this._timerInstance), this._timerInstance = void 0),
        this._messageEvents.forEach(s => Ee.instance.communication.connection.removeMessageEvent(s)),
        Ee.instance.roomEngine.events.removeEventListener(wt.JUKEBOX_INIT, this.onJukeboxInit),
        Ee.instance.roomEngine.events.removeEventListener(wt.JUKEBOX_DISPOSE, this.onJukeboxDispose),
        Ee.instance.roomEngine.events.removeEventListener(wt.SOUND_MACHINE_INIT, this.onSoundMachineInit),
        Ee.instance.roomEngine.events.removeEventListener(wt.SOUND_MACHINE_DISPOSE, this.onSoundMachineDispose),
        Ee.instance.soundManager.events.removeEventListener(Kc.TRAX_SONG_COMPLETE, this.onTraxSongComplete)
    }
    get samplesIdsInUse()
    {
        let s,
            e,
            t = [];
        for (let r = 0; r < this._songRequestsPerPriority.length; r++)
            if (this._songRequestsPerPriority[r] && (s = this._songRequestsPerPriority[r], e = this._availableSongs.get(s.songId), e)) {
                const i = e.songData;
                if (i.length > 0) {
                    const n = new Rf(i);
                    t = t.concat(n.getSampleIds())
                }
            }
        return t
    }
    onSongLoaded(s)
    {
        const e = this.getTopRequestPriority();
        if (e >= 0) {
            const t = this.getSongIdRequestedAtPriority(e);
            s === t && this.playSongObject(e, s)
        }
    }
    samplesUnloaded(s)
    {
        throw new Error("Method not implemented.")
    }
    onTraxSongComplete(s)
    {
        if (this.getSongIdPlayingAtPriority(this._priorityPlaying) === s.id) {
            this.getTopRequestPriority() === this._priorityPlaying && this.getSongRequestCountAtPriority(this._priorityPlaying) == this._requestNumberPlaying && this.resetSongStartRequest(this._priorityPlaying);
            const e = this._priorityPlaying;
            this.playSongWithHighestPriority(),
            e >= Fs.PRIORITY_SONG_PLAY && Ee.instance.soundManager.events.dispatchEvent(new Ji(Ji.NPW_USER_STOP_SONG, e, s.id, -1))
        }
    }
    onTraxSongInfoMessageEvent(s)
    {
        const e = s.getParser();
        for (const t of e.songs) {
            const r = !!this.getSongDataEntry(t.id);
            if (this.areSamplesRequested(t.id), !r) {
                const i = new uv(t.id, t.length, t.name, t.creator, t.data);
                this._availableSongs.set(t.id, i);
                const n = this.getTopRequestPriority(),
                    o = this.getSongIdRequestedAtPriority(n);
                for (t.id === o && this.playSongObject(n, o), Ee.instance.soundManager.events.dispatchEvent(new jl(jl.SIR_TRAX_SONG_INFO_RECEIVED, t.id)); this._diskInventoryMissingData.indexOf(t.id) != -1;)
                    this._diskInventoryMissingData.splice(this._diskInventoryMissingData.indexOf(t.id), 1),
                    this._diskInventoryMissingData.length === 0 && Ee.instance.soundManager.events.dispatchEvent(new Cl(Cl.SDIR_SONG_DISK_INVENTORY_RECEIVENT_EVENT))
            }
        }
    }
    onSongDiskInventoryMessage(s)
    {
        const e = s.getParser();
        this._songDiskInventory.reset();
        for (let t = 0; t < e.songDiskCount; t++) {
            const r = e.getDiskId(t),
                i = e.getSongId(t);
            this._songDiskInventory.add(r, i),
            this._availableSongs.get(i) || (this._diskInventoryMissingData.push(i), this.requestSongInfoWithoutSamples(i))
        }
        this._diskInventoryMissingData.length === 0 && Ee.instance.soundManager.events.dispatchEvent(new Cl(Cl.SDIR_SONG_DISK_INVENTORY_RECEIVENT_EVENT))
    }
    onTick()
    {
        this._songRequestList.length !== 0 && (Ee.instance.communication.connection.send(new Kb(...this._songRequestList)), this._songRequestList = [])
    }
    requestSong(s, e)
    {
        this._requestedSongs.get(s) === void 0 && (this._requestedSongs.set(s, e), this._songRequestList.push(s))
    }
    areSamplesRequested(s)
    {
        return this._requestedSongs.get(s) ? this._requestedSongs.get(s) : !1
    }
    processSongEntryForPlaying(s, e=!0)
    {
        return this.getSongDataEntry(s) ? !0 : (this.addSongInfoRequest(s), !1)
    }
    playSong(s, e, t=0, r=0, i=.5, n=.5)
    {
        return !this.addSongStartRequest(e, s, t, r, i, n) || !this.processSongEntryForPlaying(s) ? !1 : (e >= this._priorityPlaying && this.playSongObject(e, s), !0)
    }
    playSongObject(s, e)
    {
        if (e === -1 || s < 0 || s >= Fs.PRIORITY_COUNT)
            return !1;
        let t = !1;
        this.stopSongAtPriority(this._priorityPlaying) && (t = !0);
        const r = this.getSongDataEntry(e);
        if (!r)
            return !1;
        if (t)
            return !0;
        this._musicPlayer.setVolume(Ee.instance.soundManager.traxVolume);
        let i = Th.SKIP_POSITION_SET,
            n = 0;
        const o = this.getSongStartRequest(s);
        return o && (i = o.startPos, n = o.playLength, o.fadeInSeconds, o.fadeOutSeconds), i >= r.length / 1e3 ? !1 : (i <= Th.SKIP_POSITION_SET && (i = 0), i = Math.trunc(i), this._priorityPlaying = s, this._requestNumberPlaying = this.getSongRequestCountAtPriority(s), this._songIdPlaying = e, this._priorityPlaying <= Th.MAXIMUM_NOTIFY_PRIORITY && this.notifySongPlaying(r), this._musicPlayer.preloadSamplesForSong(r.songData).then(() => this._musicPlayer.play(r.songData, r.id, i, n)), s > Fs.PRIORITY_ROOM_PLAYLIST && Ee.instance.soundManager.events.dispatchEvent(new Ji(Ji.NPE_USER_PLAY_SONG, s, r.id, -1)), !0)
    }
    notifySongPlaying(s)
    {
        const t = Date.now();
        s.length >= 8e3 && (this._previousNotifiedSongId != s.id || t > this._previousNotificationTime + 8e3) && (Ee.instance.soundManager.events.dispatchEvent(new DE(s.name, s.creator)), this._previousNotifiedSongId = s.id, this._previousNotificationTime = t)
    }
    addSongStartRequest(s, e, t, r, i, n)
    {
        if (s < 0 || s >= Fs.PRIORITY_COUNT)
            return !1;
        const o = new H3(e, t, r, i, n);
        return this._songRequestsPerPriority[s] = o, this._songRequestCountsPerPriority[s] = this._songRequestCountsPerPriority[s] + 1, !0
    }
    getSongDataEntry(s)
    {
        let e;
        return this._availableSongs && (e = this._availableSongs.get(s)), e
    }
    getSongStartRequest(s)
    {
        return this._songRequestsPerPriority[s]
    }
    getTopRequestPriority()
    {
        return this._songRequestsPerPriority.length - 1
    }
    getSongIdRequestedAtPriority(s)
    {
        return s < 0 || s >= Fs.PRIORITY_COUNT || !this._songRequestsPerPriority[s] ? -1 : this._songRequestsPerPriority[s].songId
    }
    getSongRequestCountAtPriority(s)
    {
        return s < 0 || s >= Fs.PRIORITY_COUNT ? -1 : this._songRequestCountsPerPriority[s]
    }
    playSongWithHighestPriority()
    {
        let s;
        this._priorityPlaying = -1,
        this._songIdPlaying = -1,
        this._requestNumberPlaying = -1;
        let t = this.getTopRequestPriority();
        for (; t >= 0;) {
            if (s = this.getSongIdRequestedAtPriority(t), s >= 0 && this.playSongObject(t, s))
                return;
            t--
        }
    }
    resetSongStartRequest(s)
    {
        s >= 0 && s < Fs.PRIORITY_COUNT && (this._songRequestsPerPriority[s] = void 0)
    }
    reRequestSongAtPriority(s)
    {
        this._songRequestCountsPerPriority[s] = this._songRequestCountsPerPriority[s] + 1
    }
    stopSongAtPriority(s)
    {
        if (s === this._priorityPlaying && this._priorityPlaying >= 0) {
            const e = this.getSongIdPlayingAtPriority(s);
            if (e >= 0)
                return this.getSongDataEntry(e), this._musicPlayer.stop(), !0
        }
        return !1
    }
    onSoundMachineInit(s)
    {
        this.disposeRoomPlaylist()
    }
    onSoundMachineDispose(s)
    {
        this.disposeRoomPlaylist()
    }
    onJukeboxInit(s)
    {
        this.disposeRoomPlaylist(),
        this._roomItemPlaylist = new j3,
        this._roomItemPlaylist.init(),
        Ee.instance.communication.connection.send(new Yb)
    }
    onJukeboxDispose(s)
    {
        this.disposeRoomPlaylist()
    }
    disposeRoomPlaylist()
    {
        this._roomItemPlaylist && (this._roomItemPlaylist.dispose(), this._roomItemPlaylist = void 0)
    }
}
;
let vE = Th;
vE.SKIP_POSITION_SET = -1;
vE.MAXIMUM_NOTIFY_PRIORITY = Fs.PRIORITY_ROOM_PLAYLIST;
class K3 extends bn {
    constructor()
    {
        super(),
        this._volumeSystem = .5,
        this._volumeFurni = .5,
        this._volumeTrax = .5,
        this._internalSamples = new as,
        this._furniSamples = new as,
        this._furnitureBeingPlayed = new as,
        this._musicController = new vE,
        this.onEvent = this.onEvent.bind(this)
    }
    onInit()
    {
        this._musicController.init(),
        Ee.instance.roomEngine.events.addEventListener(Mr.PLAY_SAMPLE, this.onEvent),
        Ee.instance.roomEngine.events.addEventListener(de.REMOVED, this.onEvent),
        Ee.instance.roomEngine.events.addEventListener(ze.DISPOSED, this.onEvent),
        Ee.instance.events.addEventListener(Lo.SETTINGS_UPDATED, this.onEvent),
        Ee.instance.events.addEventListener(Ml.PLAY_SOUND, this.onEvent)
    }
    onDispose()
    {
        this._musicController && (this._musicController.dispose(), this._musicController = null),
        Ee.instance.roomEngine.events.removeEventListener(Mr.PLAY_SAMPLE, this.onEvent),
        Ee.instance.roomEngine.events.removeEventListener(de.REMOVED, this.onEvent),
        Ee.instance.roomEngine.events.removeEventListener(ze.DISPOSED, this.onEvent),
        Ee.instance.events.removeEventListener(Lo.SETTINGS_UPDATED, this.onEvent),
        Ee.instance.events.removeEventListener(Ml.PLAY_SOUND, this.onEvent)
    }
    onEvent(e)
    {
        var t;
        switch (e.type) {
        case Mr.PLAY_SAMPLE:
            {
                const r = e;
                this.playFurniSample(r.objectId, r.sampleId, r.pitch);
                return
            }case de.REMOVED:
            {
                const r = e;
                this.stopFurniSample(r.objectId);
                return
            }case ze.DISPOSED:
            {
                this._furnitureBeingPlayed.getKeys().forEach(r => {
                    this.stopFurniSample(r)
                });
                return
            }case Lo.SETTINGS_UPDATED:
            {
                const r = e,
                    i = r.volumeFurni !== this._volumeFurni,
                    n = r.volumeTrax !== this._volumeTrax;
                this._volumeSystem = r.volumeSystem / 100,
                this._volumeFurni = r.volumeFurni / 100,
                this._volumeTrax = r.volumeTrax / 100,
                i && this.updateFurniSamplesVolume(this._volumeFurni),
                n && ((t = this._musicController) == null || t.updateVolume(this._volumeTrax));
                return
            }case Ml.PLAY_SOUND:
            {
                const r = e;
                this.playInternalSample(r.sampleCode);
                return
            }
        }
    }
    playSample(e, t, r=1)
    {
        e.volume = t,
        e.currentTime = 0;
        try {
            e.play()
        } catch (i) {
            pe.error(i)
        }
    }
    playInternalSample(e)
    {
        let t = this._internalSamples.getValue(e);
        if (!t) {
            const r = ye.getValue("sounds.url");
            t = new Audio(r.replace("%sample%", e)),
            this._internalSamples.add(e, t)
        }
        this.playSample(t, this._volumeSystem)
    }
    playFurniSample(e, t, r)
    {
        let i = this._furniSamples.getValue(t);
        if (!i) {
            const n = ye.getValue("external.samples.url");
            i = new Audio(n.replace("%sample%", t.toString())),
            this._furniSamples.add(t, i)
        }
        this._furnitureBeingPlayed.hasKey(e) || this._furnitureBeingPlayed.add(e, t),
        i.onended = n => {
            this.stopFurniSample(e)
        },
        i.onpause = n => {
            this.stopFurniSample(e)
        },
        i.onerror = n => {
            this.stopFurniSample(e)
        },
        this.playSample(i, this._volumeFurni, r)
    }
    stopInternalSample(e)
    {
        const t = this._internalSamples.getValue(e);
        if (t)
            try {
                t.pause()
            } catch (r) {
                pe.error(r)
            }
    }
    stopFurniSample(e)
    {
        const t = this._furnitureBeingPlayed.getValue(e);
        if (!t)
            return;
        const r = this._furniSamples.getValue(t);
        if (this._furnitureBeingPlayed.remove(e), !!r)
            try {
                r.pause()
            } catch (i) {
                pe.error(i)
            }
    }
    updateInternalSamplesVolume(e)
    {
        this._internalSamples.getValues().forEach(t => {
            t.volume = e
        })
    }
    updateFurniSamplesVolume(e)
    {
        this._furniSamples.getValues().forEach(t => {
            t.volume = e
        })
    }
    get traxVolume()
    {
        return this._volumeTrax
    }
    get musicController()
    {
        return this._musicController
    }
}
Ze.available;
pd.SCALE_MODE = window.devicePixelRatio % 1 ? Z_.LINEAR : Z_.NEAREST;
pd.ROUND_PIXELS = !0;
pd.GC_MAX_IDLE = 120;
const Ro = class {
    constructor(s, e)
    {
        Ro.INSTANCE || (Ro.INSTANCE = this),
        this._application = new Gs(e),
        this._core = s,
        this._events = new ti,
        this._communication = new kz(s.communication),
        this._localization = new Hz(this._communication),
        this._avatar = new mv,
        this._roomEngine = new Ei(this._communication),
        this._sessionDataManager = new V3(this._communication),
        this._roomSessionManager = new k3(this._communication, this._roomEngine),
        this._roomManager = new Ho(this._roomEngine, this._roomEngine.visualizationFactory, this._roomEngine.logicFactory),
        this._cameraManager = new GU,
        this._soundManager = new K3,
        this._linkTrackers = [],
        this._isReady = !1,
        this._isDisposed = !1,
        this._core.configuration.events.addEventListener(bi.LOADED, this.onConfigurationLoadedEvent.bind(this)),
        this._roomEngine.events.addEventListener(ze.ENGINE_INITIALIZED, this.onRoomEngineReady.bind(this))
    }
    static bootstrap()
    {
        Ro.INSTANCE && (Ro.INSTANCE.dispose(), Ro.INSTANCE = null);
        const s = document.createElement("canvas"),
            e = new this(new rU, {
                autoDensity: !1,
                width: window.innerWidth,
                height: window.innerHeight,
                resolution: window.devicePixelRatio,
                view: s
            });
        s.addEventListener("webglcontextlost", () => e.events.dispatchEvent(new Ye(Ro.WEBGL_CONTEXT_LOST)))
    }
    init()
    {
        if (!(this._isReady || this._isDisposed)) {
            if (this._avatar && this._avatar.init(), this._soundManager && this._soundManager.init(), this._roomEngine && (this._roomEngine.sessionDataManager = this._sessionDataManager, this._roomEngine.roomSessionManager = this._roomSessionManager, this._roomEngine.roomManager = this._roomManager, this._sessionDataManager && this._sessionDataManager.init(), this._roomSessionManager && this._roomSessionManager.init(), this._roomEngine.init()), !this._communication.connection)
                throw new Error("No connection found");
            new Vz(this._communication.connection),
            this._isReady = !0
        }
    }
    dispose()
    {
        this._isDisposed || (this._roomManager && (this._roomManager.dispose(), this._roomManager = null), this._roomSessionManager && (this._roomSessionManager.dispose(), this._roomSessionManager = null), this._sessionDataManager && (this._sessionDataManager.dispose(), this._sessionDataManager = null), this._roomEngine && (this._roomEngine.dispose(), this._roomEngine = null), this._avatar && (this._avatar.dispose(), this._avatar = null), this._soundManager && (this._soundManager.dispose(), this._soundManager = null), this._communication && (this._communication.dispose(), this._communication = null), this._application && (this._application.destroy(), this._application = null), this._isDisposed = !0, this._isReady = !1)
    }
    onConfigurationLoadedEvent(s)
    {
        ir().maxFPS = ye.getValue("system.fps.max", 24),
        pe.LOG_DEBUG = ye.getValue("system.log.debug", !0),
        pe.LOG_WARN = ye.getValue("system.log.warn", !1),
        pe.LOG_ERROR = ye.getValue("system.log.error", !1),
        pe.LOG_EVENTS = ye.getValue("system.log.events", !1),
        pe.LOG_PACKETS = ye.getValue("system.log.packets", !1),
        Ru.LANDSCAPES_ENABLED = ye.getValue("room.landscapes.enabled", !0)
    }
    onRoomEngineReady(s)
    {
        this.startSendingHeartBeat()
    }
    getConfiguration(s, e=null)
    {
        return ye.getValue(s, e)
    }
    getLocalization(s)
    {
        return this._localization.getValue(s)
    }
    getLocalizationWithParameter(s, e, t)
    {
        return this._localization.getValueWithParameter(s, e, t)
    }
    getLocalizationWithParameters(s, e, t)
    {
        return this._localization.getValueWithParameters(s, e, t)
    }
    addLinkEventTracker(s)
    {
        this._linkTrackers.indexOf(s) >= 0 || this._linkTrackers.push(s)
    }
    removeLinkEventTracker(s)
    {
        const e = this._linkTrackers.indexOf(s);
        e !== -1 && this._linkTrackers.splice(e, 1)
    }
    createLinkEvent(s)
    {
        if (!(!s || s === ""))
            for (const e of this._linkTrackers) {
                if (!e)
                    continue;
                const t = e.eventUrlPrefix;
                t.length > 0 ? s.substr(0, t.length) === t && e.linkReceived(s) : e.linkReceived(s)
            }
    }
    startSendingHeartBeat()
    {
        this.sendHeartBeat(),
        setInterval(this.sendHeartBeat, 1e4)
    }
    sendHeartBeat()
    {
        Gi.sendHeartBeat()
    }
    get application()
    {
        return this._application
    }
    get core()
    {
        return this._core
    }
    get events()
    {
        return this._events
    }
    get localization()
    {
        return this._localization
    }
    get communication()
    {
        return this._communication
    }
    get avatar()
    {
        return this._avatar
    }
    get roomEngine()
    {
        return this._roomEngine
    }
    get sessionDataManager()
    {
        return this._sessionDataManager
    }
    get roomSessionManager()
    {
        return this._roomSessionManager
    }
    get roomManager()
    {
        return this._roomManager
    }
    get cameraManager()
    {
        return this._cameraManager
    }
    get soundManager()
    {
        return this._soundManager
    }
    get width()
    {
        return this._application.renderer.width
    }
    get height()
    {
        return this._application.renderer.height
    }
    get isReady()
    {
        return this._isReady
    }
    get isDisposed()
    {
        return this._isDisposed
    }
    static get instance()
    {
        return this.INSTANCE || null
    }
}
;
let Ee = Ro;
Ee.WEBGL_CONTEXT_LOST = "NE_WEBGL_CONTEXT_LOST";
Ee.WEBGL_UNAVAILABLE = "NE_WEBGL_UNAVAILABLE";
Ee.READY = "NE_READY!";
Ee.INSTANCE = null;
const mt = class {
    static format(s, e="", t=3)
    {
        return s > t * mt.YEAR ? mt.getLocalization("friendlytime.years" + e, Math.round(s / mt.YEAR)) : s > t * mt.MONTH ? mt.getLocalization("friendlytime.months" + e, Math.round(s / mt.MONTH)) : s > t * mt.DAY ? mt.getLocalization("friendlytime.days" + e, Math.round(s / mt.DAY)) : s > t * mt.HOUR ? mt.getLocalization("friendlytime.hours" + e, Math.round(s / mt.HOUR)) : s > t * mt.MINUTE ? mt.getLocalization("friendlytime.minutes" + e, Math.round(s / mt.MINUTE)) : mt.getLocalization("friendlytime.seconds" + e, Math.round(s))
    }
    static shortFormat(s, e="", t=3)
    {
        return s > t * mt.YEAR ? mt.getLocalization("friendlytime.years.short" + e, Math.round(s / mt.YEAR)) : s > t * mt.MONTH ? mt.getLocalization("friendlytime.months.short" + e, Math.round(s / mt.MONTH)) : s > t * mt.DAY ? mt.getLocalization("friendlytime.days.short" + e, Math.round(s / mt.DAY)) : s > t * mt.HOUR ? mt.getLocalization("friendlytime.hours.short" + e, Math.round(s / mt.HOUR)) : s > t * mt.MINUTE ? mt.getLocalization("friendlytime.minutes.short" + e, Math.round(s / mt.MINUTE)) : mt.getLocalization("friendlytime.seconds.short" + e, Math.round(s))
    }
    static getLocalization(s, e)
    {
        return Ee.instance.getLocalizationWithParameter(s, "amount", e.toString())
    }
}
;
let _r = mt;
_r.MINUTE = 60;
_r.HOUR = 60 * mt.MINUTE;
_r.DAY = 24 * mt.HOUR;
_r.WEEK = 7 * mt.DAY;
_r.MONTH = 30 * mt.DAY;
_r.YEAR = 365 * mt.DAY;
const dv = class {
    static isBuilderClubId(s)
    {
        return s >= dv.BUILDER_CLUB_FURNI_ID_BASE
    }
}
;
let Of = dv;
Of.BUILDER_CLUB_FURNI_ID_BASE = 2147418112;
const q3 = s => s >>> 0,
    _v = s => {
        const e = q3(s);
        return e >= Math.pow(2, 31) ? e - Math.pow(2, 32) : e
    };
class PE {
    constructor(e)
    {
        if (this._id = e.id, this._isMain = e.main || !1, this._avatarSets = new Map, this._bodyParts = [], this._allBodyParts = [], e.avatarSets && e.avatarSets.length > 0)
            for (const r of e.avatarSets) {
                if (!r)
                    continue;
                const i = new PE(r);
                this._avatarSets.set(i.id, i)
            }
        if (e.bodyParts && e.bodyParts.length > 0)
            for (const r of e.bodyParts)
                r && this._bodyParts.push(r.id);
        let t = this._bodyParts.concat();
        for (const r of this._avatarSets.values())
            r && (t = t.concat(r.getBodyParts()));
        this._allBodyParts = t
    }
    findAvatarSet(e)
    {
        if (e === this._id)
            return this;
        for (const t of this._avatarSets.values())
            if (t && t.findAvatarSet(e))
                return t;
        return null
    }
    getBodyParts()
    {
        return this._allBodyParts.concat()
    }
    get id()
    {
        return this._id
    }
    get isMain()
    {
        if (this._isMain)
            return !0;
        for (const e of this._avatarSets.values())
            if (e && e.isMain)
                return !0;
        return !1
    }
}
class ui {
    constructor(e=0, t=0, r=0)
    {
        this._x = e,
        this._y = t,
        this._z = r
    }
    static dot(e, t)
    {
        return e.x * t.x + e.y * t.y + e.z * t.z
    }
    static cross(e, t)
    {
        const r = new ui;
        return r.x = e.y * t.z - e.z * t.y, r.y = e.z * t.x - e.x * t.z, r.z = e.x * t.y - e.y * t.x, r
    }
    static subtract(e, t)
    {
        return new ui(e.x - t.x, e.y - t.y, e.z - t.z)
    }
    dot(e)
    {
        return this._x * e.x + this._y * e.y + this._z * e.z
    }
    cross(e)
    {
        const t = new ui;
        return t.x = this._y * e.z - this._z * e.y, t.y = this._z * e.x - this._x * e.z, t.z = this._x * e.y - this._y * e.x, t
    }
    subtract(e)
    {
        this._x = this._x - e.x,
        this._y = this._y - e.y,
        this._z = this._z - e.z
    }
    add(e)
    {
        this._x = this._x + e.x,
        this._y = this._y + e.y,
        this._z = this._z + e.z
    }
    normalize()
    {
        const e = 1 / this.length();
        this._x = this._x * e,
        this._y = this._y * e,
        this._z = this._z * e
    }
    scaleBy(e)
    {
        this._x *= e,
        this._y *= e,
        this._z *= e
    }
    length()
    {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z)
    }
    toString()
    {
        return "Vector3D: (" + this._x + "," + this._y + "," + this._z + ")"
    }
    get x()
    {
        return this._x
    }
    set x(e)
    {
        this._x = e
    }
    get y()
    {
        return this._y
    }
    set y(e)
    {
        this._y = e
    }
    get z()
    {
        return this._z
    }
    set z(e)
    {
        this._z = e
    }
}
class gv {
    constructor(e, t, r)
    {
        this._location = new ui(e, t, r),
        this._transformedLocation = new ui,
        this._needsTransformation = !1,
        (e != 0 || t != 0 || r != 0) && (this._needsTransformation = !0)
    }
    get location()
    {
        return this._location
    }
    get transformedLocation()
    {
        return this._transformedLocation
    }
    applyTransform(e)
    {
        this._needsTransformation && (this._transformedLocation = e.vectorMultiplication(this._location))
    }
}
class Np extends gv {
    constructor(e, t=!1)
    {
        super(parseFloat(e.x), parseFloat(e.y), parseFloat(e.z)),
        this._id = e.id,
        this._radius = parseFloat(e.radius),
        this._normal = new ui(parseFloat(e.nx), parseFloat(e.ny), parseFloat(e.nz)),
        this._isDoubleSided = e.double || !1,
        this._isDynamic = t
    }
    getDistance(e)
    {
        const t = Math.abs(e.z - this.transformedLocation.z - this._radius),
            r = Math.abs(e.z - this.transformedLocation.z + this._radius);
        return Math.min(t, r)
    }
    get id()
    {
        return this._id
    }
    get normal()
    {
        return this._normal
    }
    get isDoubleSided()
    {
        return this._isDoubleSided
    }
    toString()
    {
        return this._id + ": " + this.location + " - " + this.transformedLocation
    }
    get isDynamic()
    {
        return this._isDynamic
    }
}
class X3 extends gv {
    constructor(e)
    {
        if (super(parseFloat(e.x), parseFloat(e.y), parseFloat(e.z)), this._id = e.id, this._radius = parseFloat(e.radius), this._parts = new Map, this._dynamicParts = new Map, e.items && e.items.length > 0)
            for (const t of e.items) {
                if (!t)
                    continue;
                const r = new Np(t);
                this._parts.set(r.id, r)
            }
    }
    getDynamicParts(e)
    {
        const t = this._dynamicParts.get(e),
            r = [];
        if (t)
            for (const i in t) {
                const n = t[i];
                n && r.push(n)
            }
        return r
    }
    getPartIds(e)
    {
        const t = [];
        for (const r of this._parts.values())
            r && t.push(r.id);
        if (e) {
            const r = this._dynamicParts.get(e);
            if (r)
                for (const i in r) {
                    const n = r[i];
                    n && t.push(n.id)
                }
        }
        return t
    }
    removeDynamicParts(e)
    {
        return this._dynamicParts.delete(e), !0
    }
    addPart(e, t)
    {
        if (this.hasPart(e.id, t))
            return !1;
        let r = this._dynamicParts.get(t);
        return r || (r = {}, this._dynamicParts.set(t, r)), r[e.id] = new Np(e, !0), !0
    }
    hasPart(e, t)
    {
        let r = this._parts.get(e) || null;
        return !r && this._dynamicParts.get(t) !== void 0 && (r = this._dynamicParts.get(t)[e] || null), r !== null
    }
    getParts(e, t, r, i)
    {
        const n = [];
        for (const c of this._parts.values())
            c && (c.applyTransform(e), n.push([c.getDistance(t), c]));
        const o = this._dynamicParts.get(i);
        if (o)
            for (const c in o) {
                const u = o[c];
                u && (u.applyTransform(e), n.push([u.getDistance(t), u]))
            }
        n.sort((c, u) => {
            const h = c[0],
                d = u[0];
            return h < d ? -1 : h > d ? 1 : 0
        });
        const l = [];
        for (const c of n)
            c && l.push(c[1].id);
        return l
    }
    getDistance(e)
    {
        const t = Math.abs(e.z - this.transformedLocation.z - this._radius),
            r = Math.abs(e.z - this.transformedLocation.z + this._radius);
        return Math.min(t, r)
    }
    get id()
    {
        return this._id
    }
    get radius()
    {
        return this._radius
    }
}
const En = class {
    constructor(s=0, e=0, t=0, r=0, i=0, n=0, o=0, l=0, c=0)
    {
        this._data = [s, e, t, r, i, n, o, l, c]
    }
    static getXRotationMatrix(s)
    {
        const e = s * Math.PI / 180,
            t = Math.cos(e),
            r = Math.sin(e);
        return new En(1, 0, 0, 0, t, -r, 0, r, t)
    }
    static getYRotationMatrix(s)
    {
        const e = s * Math.PI / 180,
            t = Math.cos(e),
            r = Math.sin(e);
        return new En(t, 0, r, 0, 1, 0, -r, 0, t)
    }
    static getZRotationMatrix(s)
    {
        const e = s * Math.PI / 180,
            t = Math.cos(e),
            r = Math.sin(e);
        return new En(t, -r, 0, r, t, 0, 0, 0, 1)
    }
    identity()
    {
        return this._data = [1, 0, 0, 0, 1, 0, 0, 0, 1], this
    }
    vectorMultiplication(s)
    {
        const e = s.x * this._data[0] + s.y * this._data[3] + s.z * this._data[6],
            t = s.x * this._data[1] + s.y * this._data[4] + s.z * this._data[7],
            r = s.x * this._data[2] + s.y * this._data[5] + s.z * this._data[8];
        return new ui(e, t, r)
    }
    multiply(s)
    {
        const e = this._data[0] * s.data[0] + this._data[1] * s.data[3] + this._data[2] * s.data[6],
            t = this._data[0] * s.data[1] + this._data[1] * s.data[4] + this._data[2] * s.data[7],
            r = this._data[0] * s.data[2] + this._data[1] * s.data[5] + this._data[2] * s.data[8],
            i = this._data[3] * s.data[0] + this._data[4] * s.data[3] + this._data[5] * s.data[6],
            n = this._data[3] * s.data[1] + this._data[4] * s.data[4] + this._data[5] * s.data[7],
            o = this._data[3] * s.data[2] + this._data[4] * s.data[5] + this._data[5] * s.data[8],
            l = this._data[6] * s.data[0] + this._data[7] * s.data[3] + this._data[8] * s.data[6],
            c = this._data[6] * s.data[1] + this._data[7] * s.data[4] + this._data[8] * s.data[7],
            u = this._data[6] * s.data[2] + this._data[7] * s.data[5] + this._data[8] * s.data[8];
        return new En(e, t, r, i, n, o, l, c, u)
    }
    scalarMultiply(s)
    {
        let e = 0;
        for (; e < this._data.length;)
            this._data[e] = this._data[e] * s,
            e++
    }
    rotateX(s)
    {
        const e = s * Math.PI / 180,
            t = Math.cos(e),
            r = Math.sin(e);
        return new En(1, 0, 0, 0, t, -r, 0, r, t).multiply(this)
    }
    rotateY(s)
    {
        const e = s * Math.PI / 180,
            t = Math.cos(e),
            r = Math.sin(e);
        return new En(t, 0, r, 0, 1, 0, -r, 0, t).multiply(this)
    }
    rotateZ(s)
    {
        const e = s * Math.PI / 180,
            t = Math.cos(e),
            r = Math.sin(e);
        return new En(t, -r, 0, r, t, 0, 0, 0, 1).multiply(this)
    }
    skew() {}
    transpose()
    {
        return new En(this._data[0], this._data[3], this._data[6], this._data[1], this._data[4], this._data[7], this._data[2], this._data[5], this._data[8])
    }
    equals(s)
    {
        return !1
    }
    get data()
    {
        return this._data
    }
}
;
let xc = En;
xc.IDENTITY = new En(1, 0, 0, 0, 1, 0, 0, 0, 1);
xc.TOLERANS = 1e-18;
class Q3 {
    constructor(e)
    {
        this._camera = new ui(0, 0, 10),
        this._avatarSet = new PE(e.avatarSets[0]),
        this._geometryTypes = new Map,
        this._itemIdToBodyPartMap = new Map,
        this._transformation = new xc,
        this._canvases = new Map;
        const t = e.camera;
        if (t && (this._camera.x = parseFloat(t.x), this._camera.y = parseFloat(t.y), this._camera.z = parseFloat(t.z)), e.canvases && e.canvases.length > 0)
            for (const r of e.canvases) {
                if (!r)
                    continue;
                const i = r.scale,
                    n = new Map;
                if (r.geometries && r.geometries.length > 0)
                    for (const o of r.geometries) {
                        if (!o)
                            continue;
                        const l = new IU(o, i);
                        n.set(l.id, l)
                    }
                this._canvases.set(i, n)
            }
        if (e.types && e.types.length > 0)
            for (const r of e.types) {
                if (!r)
                    continue;
                const i = new Map,
                    n = new Map;
                if (r.bodyParts && r.bodyParts.length > 0)
                    for (const o of r.bodyParts) {
                        if (!o)
                            continue;
                        const l = new X3(o);
                        i.set(l.id, l);
                        for (const c of l.getPartIds(null))
                            n.set(c, l)
                    }
                this._geometryTypes.set(r.id, i),
                this._itemIdToBodyPartMap.set(r.id, n)
            }
    }
    removeDynamicItems(e)
    {
        for (const t of this._geometryTypes.values())
            if (t)
                for (const r of t.values())
                    r && r.removeDynamicParts(e)
    }
    getBodyPartIdsInAvatarSet(e)
    {
        const t = this._avatarSet.findAvatarSet(e);
        return t ? t.getBodyParts() : []
    }
    isMainAvatarSet(e)
    {
        const t = this._avatarSet.findAvatarSet(e);
        return t ? t.isMain : !1
    }
    getCanvas(e, t)
    {
        const r = this._canvases.get(e);
        return r && r.get(t) || null
    }
    typeExists(e)
    {
        return !!this._geometryTypes.get(e)
    }
    hasBodyPart(e, t)
    {
        if (this.typeExists(e)) {
            const r = this._geometryTypes.get(e);
            if (r && r.get(t))
                return !0
        }
        return !1
    }
    getBodyPartIDs(e)
    {
        const t = this.getBodyPartsOfType(e),
            r = [];
        if (t)
            for (const i of t.values())
                i && r.push(i.id);
        return r
    }
    getBodyPartsOfType(e)
    {
        return this.typeExists(e) ? this._geometryTypes.get(e) : new Map
    }
    getBodyPart(e, t)
    {
        return this.getBodyPartsOfType(e).get(t) || null
    }
    getBodyPartOfItem(e, t, r)
    {
        const i = this._itemIdToBodyPartMap.get(e);
        if (i) {
            const n = i.get(t);
            if (n)
                return n;
            const o = this.getBodyPartsOfType(e);
            if (o) {
                for (const l of o.values())
                    if (l && l.hasPart(t, r))
                        return l
            }
        }
        return null
    }
    getBodyPartsInAvatarSet(e, t)
    {
        const r = this.getBodyPartIdsInAvatarSet(t),
            i = [];
        for (const n of r) {
            if (!n)
                continue;
            const o = e.get(n);
            o && i.push(o)
        }
        return i
    }
    getBodyPartsAtAngle(e, t, r)
    {
        if (!r)
            return [];
        const i = this.getBodyPartsOfType(r),
            n = this.getBodyPartsInAvatarSet(i, e),
            o = [],
            l = [];
        this._transformation = xc.getYRotationMatrix(t);
        for (const c of n.values())
            c && (c.applyTransform(this._transformation), o.push([c.getDistance(this._camera), c]));
        o.sort((c, u) => {
            const h = c[0],
                d = u[0];
            return h < d ? -1 : h > d ? 1 : 0
        });
        for (const c of o)
            c && l.push(c[1].id);
        return l
    }
    getParts(e, t, r, i, n)
    {
        if (this.hasBodyPart(e, t)) {
            const o = this.getBodyPartsOfType(e).get(t);
            return this._transformation = xc.getYRotationMatrix(r), o.getParts(this._transformation, this._camera, i, n)
        }
        return []
    }
}
class J3 extends ti {
    constructor(e)
    {
        super(),
        this._renderManager = e,
        this._geometry = null,
        this._figureData = new SU,
        this._partSetsData = new CU,
        this._animationData = new pU,
        this._animationManager = new _U,
        this._mandatorySetTypeIds = {},
        this._actionManager = null,
        this._defaultAction = null
    }
    init() {}
    dispose()
    {
        this.disposed || (super.dispose(), this._renderManager = null, this._figureData = null, this._partSetsData = null, this._animationData = null, this._mandatorySetTypeIds = null)
    }
    initGeometry(e)
    {
        e && (this._geometry = new Q3(e))
    }
    initActions(e, t)
    {
        t && (this._actionManager = new aU(e, t), this._defaultAction = this._actionManager.getDefaultAction())
    }
    updateActions(e)
    {
        this._actionManager.updateActions(e),
        this._defaultAction = this._actionManager.getDefaultAction()
    }
    initPartSets(e)
    {
        return e && this._partSetsData.parse(e) ? (this._partSetsData.getPartDefinition("ri").appendToFigure = !0, this._partSetsData.getPartDefinition("li").appendToFigure = !0, !0) : !1
    }
    initAnimation(e)
    {
        return e ? this._animationData.parse(e) : !1
    }
    initFigureData(e)
    {
        return e ? this._figureData.parse(e) : !1
    }
    injectFigureData(e)
    {
        this._figureData.injectJSON(e)
    }
    registerAnimations(e, t="fx", r=200)
    {
        let i = 0;
        for (; i < r;) {
            const n = e.getCollection(t + i);
            if (n) {
                const o = n.data;
                this._animationManager.registerAnimation(this, o.animations)
            }
            i++
        }
    }
    registerAnimation(e)
    {
        this._animationManager.registerAnimation(this, e)
    }
    getPartColor(e, t, r=0)
    {
        const i = e.getPartColorIds(t);
        if (!i || i.length < r)
            return null;
        const n = this._figureData.getSetType(t);
        if (n == null)
            return null;
        const o = this._figureData.getPalette(n.paletteID);
        return o ? o.getColor(i[r]) : null
    }
    getBodyPartData(e, t, r)
    {
        return this._animationManager.getLayerData(e, t, r)
    }
    getAnimation(e)
    {
        return this._animationManager.getAnimation(e)
    }
    getActionDefinition(e)
    {
        return this._actionManager.getActionDefinition(e)
    }
    getActionDefinitionWithState(e)
    {
        return this._actionManager.getActionDefinitionWithState(e)
    }
    isMainAvatarSet(e)
    {
        return this._geometry.isMainAvatarSet(e)
    }
    sortActions(e)
    {
        return this._actionManager.sortActions(e)
    }
    maxFrames(e)
    {
        let t = 0;
        for (const r of e)
            t = Math.max(t, this._animationData.getFrameCount(r.definition));
        return t
    }
    getMandatorySetTypeIds(e, t)
    {
        return this._mandatorySetTypeIds[e] || (this._mandatorySetTypeIds[e] = []), this._mandatorySetTypeIds[e][t] ? this._mandatorySetTypeIds[e][t] : (this._mandatorySetTypeIds[e][t] = this._figureData.getMandatorySetTypeIds(e, t), this._mandatorySetTypeIds[e][t])
    }
    getDefaultPartSet(e, t)
    {
        return this._figureData.getDefaultPartSet(e, t)
    }
    getCanvasOffsets(e, t, r)
    {
        return this._actionManager.getCanvasOffsets(e, t, r)
    }
    getCanvas(e, t)
    {
        return this._geometry.getCanvas(e, t)
    }
    removeDynamicItems(e)
    {
        this._geometry.removeDynamicItems(e)
    }
    getActiveBodyPartIds(e, t)
    {
        let r = [];
        const i = [],
            n = e.definition.geometryType;
        if (e.definition.isAnimation) {
            const o = e.definition.state + "." + e.actionParameter,
                l = this._animationManager.getAnimation(o);
            if (l && (r = l.getAnimatedBodyPartIds(0, e.overridingAction), l.hasAddData())) {
                const c = {
                        id: "",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: 1
                    },
                    u = {
                        setType: ""
                    };
                for (const h of l.addData) {
                    const d = this._geometry.getBodyPart(n, h.align);
                    if (d) {
                        c.id = h.id,
                        d.addPart(c, t),
                        u.setType = h.id;
                        const m = this._partSetsData.addPartDefinition(u);
                        m.appendToFigure = !0,
                        h.base === "" && (m.staticId = 1),
                        i.indexOf(d.id) === -1 && i.push(d.id)
                    }
                }
            }
            for (const c of r) {
                const u = this._geometry.getBodyPart(n, c);
                u && i.indexOf(u.id) === -1 && i.push(u.id)
            }
        } else {
            r = this._partSetsData.getActiveParts(e.definition);
            for (const o of r) {
                const l = this._geometry.getBodyPartOfItem(n, o, t);
                l && i.indexOf(l.id) === -1 && i.push(l.id)
            }
        }
        return i
    }
    getBodyPartsUnordered(e)
    {
        return this._geometry.getBodyPartIdsInAvatarSet(e)
    }
    getBodyParts(e, t, r)
    {
        const i = Kr.DIRECTION_TO_ANGLE[r];
        return this._geometry.getBodyPartsAtAngle(e, i, t)
    }
    getFrameBodyPartOffset(e, t, r, i)
    {
        const n = this._animationData.getAction(e.definition);
        return n ? n.getFrameBodyPartOffset(t, r, i) : Ph.DEFAULT_OFFSET
    }
    getParts(e, t, r, i, n, o, l, c=null)
    {
        let u = null,
            h = [],
            d = null;
        if (!r == null)
            return [];
        const m = this._partSetsData.getActiveParts(r.definition),
            p = [];
        let E = [0];
        const T = this._animationData.getAction(r.definition);
        if (r.definition.isAnimation) {
            const N = r.definition.state + "." + r.actionParameter,
                b = this._animationManager.getAnimation(N);
            if (b) {
                E = this.getPopulatedArray(b.frameCount(r.overridingAction));
                for (const v of b.getAnimatedBodyPartIds(0, r.overridingAction))
                    if (v === e) {
                        const D = this._geometry.getBodyPart(i, v);
                        if (D)
                            for (const G of D.getDynamicParts(l))
                                m.push(G.id)
                    }
            }
        }
        const I = this._geometry.getParts(i, e, n, m, l),
            S = t.getPartTypeIds();
        for (const N of S) {
            if (c && c.get(N))
                continue;
            const b = t.getPartSetId(N),
                v = t.getPartColorIds(N),
                D = this._figureData.getSetType(N);
            if (D) {
                const G = this._figureData.getPalette(D.paletteID);
                if (G) {
                    const x = D.getPartSet(b);
                    if (x) {
                        o = o.concat(x.hiddenLayers);
                        for (const F of x.parts)
                            if (I.indexOf(F.type) > -1) {
                                if (T) {
                                    const J = T.getPart(F.type);
                                    J ? h = J.frames : h = E
                                } else
                                    h = E;
                                u = r.definition,
                                m.indexOf(F.type) === -1 && (u = this._defaultAction);
                                const U = this._partSetsData.getPartDefinition(F.type);
                                let z = U ? U.flippedSetType : F.type;
                                (!z || z === "") && (z = F.type),
                                v && v.length > F.colorLayerIndex - 1 && (d = G.getColor(v[F.colorLayerIndex - 1]));
                                const Q = F.colorLayerIndex > 0,
                                    j = new S_(e, F.type, F.id.toString(), d, h, u, Q, F.paletteMap, z);
                                p.push(j)
                            }
                    }
                }
            }
        }
        const A = [];
        for (const N of I) {
            let b = null,
                v = !1;
            const D = c && c.get(N);
            for (const G of p)
                G.partType === N && (D ? b = G.color : (v = !0, o.indexOf(N) === -1 && A.push(G)));
            if (!v) {
                if (D) {
                    const G = c.get(N);
                    let x = 0,
                        F = 0;
                    for (; F < G.length;)
                        x = x + G.charCodeAt(F),
                        F++;
                    if (T) {
                        const z = T.getPart(N);
                        z ? h = z.frames : h = E
                    } else
                        h = E;
                    const U = new S_(e, N, G, b, h, r.definition, b != null, -1, N, !1, 1);
                    A.push(U)
                } else if (m.indexOf(N) > -1) {
                    const G = this._geometry.getBodyPartOfItem(i, N, l);
                    if (e === G.id) {
                        const x = this._partSetsData.getPartDefinition(N);
                        let F = !1,
                            U = 1;
                        if (x.appendToFigure) {
                            let z = "1";
                            if (r.actionParameter !== "" && (z = r.actionParameter), x.hasStaticId() && (z = x.staticId.toString()), T) {
                                const j = T.getPart(N);
                                j ? h = j.frames : h = E
                            } else
                                h = E;
                            const Q = new S_(e, N, z, null, h, r.definition, !1, -1, N, F, U);
                            A.push(Q)
                        }
                    }
                }
            }
        }
        return A
    }
    getPopulatedArray(e)
    {
        const t = [];
        let r = 0;
        for (; r < e;)
            t.push(r),
            r++;
        return t
    }
    getItemIds()
    {
        if (this._actionManager) {
            const e = this._actionManager.getActionDefinition("CarryItem").params,
                t = [];
            for (const r of e.values())
                t.push(r);
            return t
        }
        return []
    }
    get renderManager()
    {
        return this._renderManager
    }
    get figureData()
    {
        return this._figureData
    }
    get partData()
    {
        return this._partSetsData
    }
    get animationManager()
    {
        return this._animationManager
    }
}
const Z3 = {
        animations: [{
            id: "Move",
            parts: [{
                setType: "bd",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "bds",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "ss",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "lg",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "sh",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "lh",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "lhs",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "ls",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "lc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "rh",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "rhs",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "rs",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "rc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }, {
                setType: "ch",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wlk"
                }, {
                    number: 1,
                    assetPartDefinition: "wlk"
                }, {
                    number: 2,
                    assetPartDefinition: "wlk"
                }, {
                    number: 3,
                    assetPartDefinition: "wlk"
                }]
            }]
        }, {
            id: "Wave",
            parts: [{
                setType: "lh",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wav"
                }, {
                    number: 1,
                    assetPartDefinition: "wav"
                }]
            }, {
                setType: "lhs",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wav"
                }, {
                    number: 1,
                    assetPartDefinition: "wav"
                }]
            }, {
                setType: "ls",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wav"
                }, {
                    number: 1,
                    assetPartDefinition: "wav"
                }]
            }, {
                setType: "lc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wav"
                }, {
                    number: 1,
                    assetPartDefinition: "wav"
                }]
            }, {
                setType: "ch",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wav"
                }, {
                    number: 1,
                    assetPartDefinition: "wav"
                }, {
                    number: 2,
                    assetPartDefinition: "wav"
                }, {
                    number: 3,
                    assetPartDefinition: "wav"
                }]
            }]
        }, {
            id: "Talk",
            parts: [{
                setType: "hd",
                frames: [{
                    number: 0,
                    assetPartDefinition: "spk"
                }, {
                    number: 1,
                    assetPartDefinition: "spk"
                }]
            }, {
                setType: "fc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "spk"
                }, {
                    number: 1,
                    assetPartDefinition: "spk"
                }]
            }, {
                setType: "fa",
                frames: [{
                    number: 0,
                    assetPartDefinition: "spk"
                }, {
                    number: 1,
                    assetPartDefinition: "spk"
                }]
            }]
        }, {
            id: "Sign",
            parts: [{
                setType: "lh",
                frames: [{
                    number: 0,
                    assetPartDefinition: "sig"
                }]
            }, {
                setType: "li",
                frames: [{
                    number: 0,
                    assetPartDefinition: "sig"
                }]
            }, {
                setType: "ls",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wav"
                }]
            }, {
                setType: "lc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wav"
                }]
            }]
        }, {
            id: "Respect",
            parts: [{
                setType: "lh",
                frames: [{
                    number: 0,
                    assetPartDefinition: "respect",
                    repeats: 15
                }, {
                    number: 1,
                    assetPartDefinition: "respect",
                    repeats: 15
                }]
            }, {
                setType: "ls",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wav",
                    repeats: 15
                }, {
                    number: 1,
                    assetPartDefinition: "wav",
                    repeats: 15
                }]
            }, {
                setType: "lc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "wav",
                    repeats: 15
                }, {
                    number: 1,
                    assetPartDefinition: "wav",
                    repeats: 15
                }]
            }]
        }, {
            id: "Blow",
            parts: [{
                setType: "rh",
                frames: [{
                    number: 0,
                    assetPartDefinition: "blw",
                    repeats: 10
                }, {
                    number: 1,
                    assetPartDefinition: "blw",
                    repeats: 10
                }]
            }, {
                setType: "rs",
                frames: [{
                    number: 0,
                    assetPartDefinition: "drk"
                }]
            }, {
                setType: "rc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "drk"
                }]
            }, {
                setType: "ri",
                frames: [{
                    number: 0,
                    assetPartDefinition: ""
                }]
            }, {
                setType: "ey",
                frames: [{
                    number: 0,
                    assetPartDefinition: "std",
                    repeats: 10
                }, {
                    number: 0,
                    assetPartDefinition: "eyb",
                    repeats: 10
                }]
            }, {
                setType: "fc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "std",
                    repeats: 10
                }, {
                    number: 0,
                    assetPartDefinition: "blw",
                    repeats: 10
                }]
            }]
        }, {
            id: "Laugh",
            parts: [{
                setType: "rh",
                frames: [{
                    number: 0,
                    assetPartDefinition: "blw"
                }]
            }, {
                setType: "rs",
                frames: [{
                    number: 0,
                    assetPartDefinition: "drk"
                }]
            }, {
                setType: "rc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "drk"
                }]
            }, {
                setType: "ri",
                frames: [{
                    number: 0,
                    assetPartDefinition: ""
                }]
            }, {
                setType: "ey",
                frames: [{
                    number: 0,
                    assetPartDefinition: "std",
                    repeats: 2
                }]
            }, {
                setType: "fc",
                frames: [{
                    number: 0,
                    assetPartDefinition: "sml"
                }]
            }],
            offsets: {
                frames: [{
                    id: 0,
                    directions: [{
                        id: 0,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 1
                        }]
                    }, {
                        id: 1,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 1
                        }]
                    }, {
                        id: 2,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 1
                        }]
                    }, {
                        id: 3,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 1
                        }]
                    }, {
                        id: 4,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 1
                        }]
                    }, {
                        id: 5,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 1
                        }]
                    }, {
                        id: 6,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 1
                        }]
                    }, {
                        id: 7,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 1
                        }]
                    }]
                }, {
                    id: 1,
                    directions: [{
                        id: 0,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 0
                        }]
                    }, {
                        id: 1,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 0
                        }]
                    }, {
                        id: 2,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 0
                        }]
                    }, {
                        id: 3,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 0
                        }]
                    }, {
                        id: 4,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 0
                        }]
                    }, {
                        id: 5,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 0
                        }]
                    }, {
                        id: 6,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 0
                        }]
                    }, {
                        id: 7,
                        bodyParts: [{
                            id: "head",
                            dx: 0,
                            dy: 0
                        }]
                    }]
                }]
            }
        }]
    },
    $3 = {
        geometry: {
            direction: 0,
            camera: {
                x: 0,
                y: 0,
                z: 10
            },
            canvases: [{
                scale: "h",
                geometries: [{
                    id: "vertical",
                    width: 90,
                    height: 130,
                    dx: 0,
                    dy: 0
                }, {
                    id: "sitting",
                    width: 90,
                    height: 130,
                    dx: 0,
                    dy: 0
                }, {
                    id: "horizontal",
                    width: 128,
                    height: 80,
                    dx: 30,
                    dy: 0
                }, {
                    id: "swhorizontal",
                    width: 192,
                    height: 120,
                    dx: 0,
                    dy: -40
                }]
            }, {
                scale: "sh",
                geometries: [{
                    id: "vertical",
                    width: 45,
                    height: 72,
                    dx: 0,
                    dy: 0
                }, {
                    id: "sitting",
                    width: 45,
                    height: 72,
                    dx: 0,
                    dy: 0
                }, {
                    id: "horizontal",
                    width: 64,
                    height: 50,
                    dx: 15,
                    dy: -10
                }, {
                    id: "swhorizontal",
                    width: 96,
                    height: 70,
                    dx: 0,
                    dy: -20
                }, {
                    id: "swim",
                    width: 64,
                    height: 70,
                    dx: 25,
                    dy: 10
                }]
            }],
            avatarSets: [{
                id: "full",
                avatarSets: [{
                    id: "body",
                    main: !0,
                    bodyParts: [{
                        id: "top"
                    }, {
                        id: "bottom"
                    }, {
                        id: "behind"
                    }, {
                        id: "torso"
                    }, {
                        id: "leftitem"
                    }, {
                        id: "rightitem"
                    }, {
                        id: "leftarm"
                    }, {
                        id: "rightarm"
                    }]
                }, {
                    id: "head",
                    bodyParts: [{
                        id: "head"
                    }]
                }]
            }],
            types: [{
                id: "vertical",
                bodyParts: [{
                    id: "top",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: 2
                }, {
                    id: "bottom",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .001
                }, {
                    id: "behind",
                    x: 0,
                    y: 0,
                    z: .2,
                    radius: .3
                }, {
                    id: "torso",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .4,
                    items: [{
                        id: "bd",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "bds",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "ch",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "sh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lg",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ss",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "cp",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .045,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "wa",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .05,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "cc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .06,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ca",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .07,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "leftitem",
                    x: 0,
                    y: 0,
                    z: -.29,
                    radius: .3,
                    items: [{
                        id: "li",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "rightitem",
                    x: 0,
                    y: 0,
                    z: -.29,
                    radius: .3,
                    items: [{
                        id: "ri",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "leftarm",
                    x: -1,
                    y: 0,
                    z: -.51,
                    radius: .5,
                    items: [{
                        id: "lh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lhs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ls",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "rightarm",
                    x: 1,
                    y: 0,
                    z: -.51,
                    radius: .5,
                    items: [{
                        id: "rh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rhs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "head",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .5,
                    items: [{
                        id: "hd",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ey",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "hr",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "hrb",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .05,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fa",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .06,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ea",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .07,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ha",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .08,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "he",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .09,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }]
            }, {
                id: "sitting",
                bodyParts: [{
                    id: "top",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: 2
                }, {
                    id: "bottom",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .001
                }, {
                    id: "behind",
                    x: 0,
                    y: 0,
                    z: .2,
                    radius: .3
                }, {
                    id: "torso",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .4,
                    items: [{
                        id: "bd",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "bds",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "ch",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "sh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lg",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ss",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "cp",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .045,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "wa",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .05,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "cc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .06,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ca",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .07,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "leftitem",
                    x: 0,
                    y: 0,
                    z: -.29,
                    radius: .3,
                    items: [{
                        id: "li",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "rightitem",
                    x: 0,
                    y: 0,
                    z: -.29,
                    radius: .3,
                    items: [{
                        id: "ri",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "leftarm",
                    x: -1,
                    y: 0,
                    z: -.51,
                    radius: .5,
                    items: [{
                        id: "lh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lhs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ls",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "rightarm",
                    x: 1,
                    y: 0,
                    z: -.51,
                    radius: .5,
                    items: [{
                        id: "rh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rhs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "head",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .5,
                    items: [{
                        id: "hd",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ey",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "hr",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "hrb",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .05,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fa",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .06,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ea",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .07,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ha",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .08,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "he",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .09,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }]
            }, {
                id: "horizontal",
                bodyParts: [{
                    id: "torso",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .4,
                    items: [{
                        id: "bd",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "bds",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "ch",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "cp",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "sh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lg",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ss",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "wa",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .05,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "cc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .06,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ca",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .07,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "leftitem",
                    x: 0,
                    y: 0,
                    z: -.29,
                    radius: .3,
                    items: [{
                        id: "li",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "rightitem",
                    x: 0,
                    y: 0,
                    z: -.29,
                    radius: .3,
                    items: [{
                        id: "ri",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "leftarm",
                    x: -1,
                    y: 0,
                    z: -.51,
                    radius: .6,
                    items: [{
                        id: "lh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lhs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ls",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "rightarm",
                    x: 1,
                    y: 0,
                    z: -.51,
                    radius: .6,
                    items: [{
                        id: "rh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rhs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "head",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .5,
                    items: [{
                        id: "hd",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ey",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "hr",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "hrb",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .05,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fa",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .06,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ea",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .07,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ha",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .08,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "he",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .09,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }]
            }, {
                id: "swhorizontal",
                bodyParts: [{
                    id: "torso",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .4,
                    items: [{
                        id: "bd",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "bds",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "ch",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "cp",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "sh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lg",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ss",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "wa",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .05,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "cc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .06,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ca",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .07,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "leftitem",
                    x: 0,
                    y: 0,
                    z: -.29,
                    radius: .3,
                    items: [{
                        id: "li",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "rightitem",
                    x: 0,
                    y: 0,
                    z: -.29,
                    radius: .3,
                    items: [{
                        id: "ri",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "leftarm",
                    x: -1,
                    y: 0,
                    z: -.51,
                    radius: .6,
                    items: [{
                        id: "lh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lhs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ls",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "lc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "rightarm",
                    x: 1,
                    y: 0,
                    z: -.51,
                    radius: .6,
                    items: [{
                        id: "rh",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rhs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rs",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "rc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .025,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "head",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .5,
                    items: [{
                        id: "hd",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ey",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "hr",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "hrb",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .05,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fa",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .06,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ea",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .07,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ha",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .08,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "he",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .09,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }]
            }, {
                id: "swim",
                bodyParts: [{
                    id: "torso",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .4,
                    items: [{
                        id: "bds",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "ss",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }, {
                    id: "head",
                    x: 0,
                    y: 0,
                    z: 0,
                    radius: .5,
                    items: [{
                        id: "hd",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .01,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fc",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .02,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ey",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .03,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "hr",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .04,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "hrb",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .05,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !0
                    }, {
                        id: "fa",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .06,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ea",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .07,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "ha",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .08,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }, {
                        id: "he",
                        x: 0,
                        y: 0,
                        z: 0,
                        radius: .09,
                        nx: 0,
                        ny: 0,
                        nz: -1,
                        double: !1
                    }]
                }]
            }]
        }
    },
    eK = {
        partSets: {
            partSet: [{
                setType: "ri",
                flippedSetType: "ri"
            }, {
                setType: "ri",
                flippedSetType: "ri"
            }, {
                setType: "rh",
                flippedSetType: "lh"
            }, {
                setType: "rhs",
                flippedSetType: "lhs"
            }, {
                setType: "rs",
                swim: "0",
                flippedSetType: "ls"
            }, {
                setType: "rc",
                flippedSetType: "lc"
            }, {
                setType: "bd"
            }, {
                setType: "bds"
            }, {
                setType: "ss"
            }, {
                setType: "sh"
            }, {
                setType: "lg"
            }, {
                setType: "ch"
            }, {
                setType: "cp"
            }, {
                setType: "cc"
            }, {
                setType: "hd"
            }, {
                setType: "fc"
            }, {
                setType: "ey"
            }, {
                setType: "hr"
            }, {
                setType: "hrb",
                removeSetType: "hr"
            }, {
                setType: "li",
                flippedSetType: "li"
            }, {
                setType: "lh",
                flippedSetType: "rh"
            }, {
                setType: "lhs",
                flippedSetType: "rhs"
            }, {
                setType: "ls",
                flippedSetType: "rs"
            }, {
                setType: "lc",
                flippedSetType: "rc"
            }, {
                setType: "wa"
            }, {
                setType: "ea"
            }, {
                setType: "ca"
            }, {
                setType: "fa"
            }, {
                setType: "ha"
            }, {
                setType: "he"
            }],
            activePartSets: [{
                id: "figure",
                activeParts: [{
                    setType: "rh"
                }, {
                    setType: "rh"
                }, {
                    setType: "rhs"
                }, {
                    setType: "rs"
                }, {
                    setType: "rc"
                }, {
                    setType: "bd"
                }, {
                    setType: "bds"
                }, {
                    setType: "ss"
                }, {
                    setType: "sh"
                }, {
                    setType: "lg"
                }, {
                    setType: "ch"
                }, {
                    setType: "cp"
                }, {
                    setType: "cc"
                }, {
                    setType: "wa"
                }, {
                    setType: "hd"
                }, {
                    setType: "fc"
                }, {
                    setType: "ey"
                }, {
                    setType: "hr"
                }, {
                    setType: "hrb"
                }, {
                    setType: "lh"
                }, {
                    setType: "lhs"
                }, {
                    setType: "ls"
                }, {
                    setType: "lc"
                }, {
                    setType: "ea"
                }, {
                    setType: "ca"
                }, {
                    setType: "fa"
                }, {
                    setType: "ha"
                }, {
                    setType: "he"
                }]
            }, {
                id: "head",
                activeParts: [{
                    setType: "hd"
                }, {
                    setType: "fc"
                }, {
                    setType: "ey"
                }, {
                    setType: "hr"
                }, {
                    setType: "hrb"
                }, {
                    setType: "ea"
                }, {
                    setType: "fa"
                }, {
                    setType: "ha"
                }, {
                    setType: "he"
                }]
            }, {
                id: "speak",
                activeParts: [{
                    setType: "hd"
                }, {
                    setType: "hr"
                }, {
                    setType: "hrb"
                }, {
                    setType: "fc"
                }, {
                    setType: "fa"
                }, {
                    setType: "ha"
                }]
            }, {
                id: "gesture",
                activeParts: [{
                    setType: "ey"
                }, {
                    setType: "fc"
                }]
            }, {
                id: "eye",
                activeParts: [{
                    setType: "ey"
                }]
            }, {
                id: "handRight",
                activeParts: [{
                    setType: "rh"
                }, {
                    setType: "rhs"
                }, {
                    setType: "rs"
                }, {
                    setType: "rc"
                }, {
                    setType: "ri"
                }]
            }, {
                id: "handRightAndHead",
                activeParts: [{
                    setType: "rh"
                }, {
                    setType: "rhs"
                }, {
                    setType: "rs"
                }, {
                    setType: "rc"
                }, {
                    setType: "ri"
                }, {
                    setType: "ey"
                }, {
                    setType: "fc"
                }, {
                    setType: "hd"
                }]
            }, {
                id: "handLeft",
                activeParts: [{
                    setType: "lh"
                }, {
                    setType: "lhs"
                }, {
                    setType: "ls"
                }, {
                    setType: "lc"
                }, {
                    setType: "li"
                }]
            }, {
                id: "walk",
                activeParts: [{
                    setType: "bd"
                }, {
                    setType: "bds"
                }, {
                    setType: "ss"
                }, {
                    setType: "lg"
                }, {
                    setType: "lh"
                }, {
                    setType: "lhs"
                }, {
                    setType: "rh"
                }, {
                    setType: "rhs"
                }, {
                    setType: "ls"
                }, {
                    setType: "lc"
                }, {
                    setType: "rs"
                }, {
                    setType: "rc"
                }, {
                    setType: "sh"
                }]
            }, {
                id: "sit",
                activeParts: [{
                    setType: "bd"
                }, {
                    setType: "bds"
                }, {
                    setType: "ss"
                }, {
                    setType: "lg"
                }, {
                    setType: "sh"
                }, {
                    setType: "cc"
                }]
            }, {
                id: "itemRight",
                activeParts: [{
                    setType: "ri"
                }]
            }]
        }
    },
    Wn = class  extends ti{
        constructor(s, e, t, r)
        {
            super(),
            this._state = Wn.NOT_LOADED,
            this._libraryName = s,
            this._revision = e,
            this._downloadUrl = r,
            this._assets = t,
            this._animation = null,
            this._downloadUrl = this._downloadUrl.replace(/%libname%/gi, this._libraryName),
            this._downloadUrl = this._downloadUrl.replace(/%revision%/gi, this._revision),
            this._assets.getCollection(this._libraryName) && (this._state = Wn.LOADED)
        }
        async downloadAsset()
        {
            if (!this._assets || this._state === Wn.LOADING || this._state === Wn.LOADED)
                return;
            if (this._assets.getCollection(this._libraryName)) {
                this._state = Wn.LOADED,
                this.dispatchEvent(new El(El.DOWNLOAD_COMPLETE, this));
                return
            }
            if (this._state = Wn.LOADING, !await this._assets.downloadAsset(this._downloadUrl))
                return;
            this._state = Wn.LOADED;
            const t = this._assets.getCollection(this._libraryName);
            t && (this._animation = t.data.animations),
            this.dispatchEvent(new El(El.DOWNLOAD_COMPLETE, this))
        }
        get libraryName()
        {
            return this._libraryName
        }
        get animation()
        {
            return this._animation
        }
        get isLoaded()
        {
            return this._state === Wn.LOADED
        }
    }
    ;
let Cu = Wn;
Cu.DOWNLOAD_COMPLETE = "EADL_DOWNLOAD_COMPLETE";
Cu.NOT_LOADED = 0;
Cu.LOADING = 1;
Cu.LOADED = 2;
const Sf = class  extends ti{
    constructor(s, e)
    {
        super(),
        this._assets = s,
        this._structure = e,
        this._missingMandatoryLibs = ye.getValue("avatar.mandatory.effect.libraries"),
        this._effectMap = new Map,
        this._effectListeners = new Map,
        this._incompleteEffects = new Map,
        this._initDownloadBuffer = [],
        this._pendingDownloadQueue = [],
        this._currentDownloads = [],
        this._libraryNames = [],
        this._isReady = !1,
        this.onLibraryLoaded = this.onLibraryLoaded.bind(this),
        this.onAvatarRenderReady = this.onAvatarRenderReady.bind(this),
        this.loadEffectMap(),
        this._structure.renderManager.events.addEventListener(Cd.AVATAR_RENDER_READY, this.onAvatarRenderReady)
    }
    loadEffectMap()
    {
        const s = new XMLHttpRequest;
        try {
            s.open("GET", ye.getValue("avatar.effectmap.url")),
            s.send(),
            s.onloadend = e => {
                if (s.responseText) {
                    const t = JSON.parse(s.responseText);
                    this.processEffectMap(t.effects),
                    this.processMissingLibraries(),
                    this._isReady = !0,
                    this.dispatchEvent(new Ye(Sf.DOWNLOADER_READY))
                }
            },
            s.onerror = e => {
                throw new Error("invalid_avatar_effect_map")
            }
        } catch (e) {
            pe.error(e)
        }
    }
    processEffectMap(s)
    {
        if (s)
            for (const e of s) {
                if (!e)
                    continue;
                const t = e.id,
                    r = e.lib,
                    i = e.revision || "";
                if (this._libraryNames.indexOf(r) >= 0)
                    continue;
                this._libraryNames.push(r);
                const n = new Cu(r, i, this._assets, ye.getValue("avatar.asset.effect.url"));
                n.addEventListener(El.DOWNLOAD_COMPLETE, this.onLibraryLoaded);
                let o = this._effectMap.get(t);
                o || (o = []),
                o.push(n),
                this._effectMap.set(t, o)
            }
    }
    downloadAvatarEffect(s, e)
    {
        if (!this._isReady || !this._structure.renderManager.isReady) {
            this._initDownloadBuffer.push([s, e]);
            return
        }
        const t = this.getAvatarEffectPendingLibraries(s);
        if (t && t.length) {
            if (e && !e.disposed) {
                let r = this._effectListeners.get(s.toString());
                r || (r = []),
                r.push(e),
                this._effectListeners.set(s.toString(), r)
            }
            this._incompleteEffects.set(s.toString(), t);
            for (const r of t)
                r && this.downloadLibrary(r)
        } else
            e && !e.disposed && e.resetEffect(s)
    }
    onAvatarRenderReady(s)
    {
        if (s) {
            for (const [e, t] of this._initDownloadBuffer)
                this.downloadAvatarEffect(e, t);
            this._initDownloadBuffer = []
        }
    }
    onLibraryLoaded(s)
    {
        if (!s || !s.library)
            return;
        const e = [];
        this._structure.registerAnimation(s.library.animation);
        for (const [r, i] of this._incompleteEffects.entries()) {
            let n = !0;
            for (const o of i)
                if (!(!o || o.isLoaded)) {
                    n = !1;
                    break
                }
            if (n) {
                e.push(r);
                const o = this._effectListeners.get(r);
                for (const l of o)
                    !l || l.disposed || l.resetEffect(parseInt(r));
                this._effectListeners.delete(r),
                this.dispatchEvent(new Ye(Sf.LIBRARY_LOADED))
            }
        }
        for (const r of e)
            this._incompleteEffects.delete(r);
        let t = 0;
        for (; t < this._currentDownloads.length;) {
            const r = this._currentDownloads[t];
            r && r.libraryName === s.library.libraryName && this._currentDownloads.splice(t, 1),
            t++
        }
    }
    processMissingLibraries()
    {
        const s = this._missingMandatoryLibs.slice();
        for (const e of s) {
            if (!e)
                continue;
            const t = this._effectMap.get(e);
            if (t)
                for (const r of t)
                    r && this.downloadLibrary(r)
        }
    }
    isAvatarEffectReady(s)
    {
        return !this._isReady || !this._structure.renderManager.isReady ? !1 : !this.getAvatarEffectPendingLibraries(s).length
    }
    getAvatarEffectPendingLibraries(s)
    {
        const e = [];
        if (!this._structure)
            return e;
        const t = this._effectMap.get(s.toString());
        if (t)
            for (const r of t)
                !r || r.isLoaded || e.indexOf(r) === -1 && e.push(r);
        return e
    }
    downloadLibrary(s)
    {
        !s || s.isLoaded || this._pendingDownloadQueue.indexOf(s) >= 0 || this._currentDownloads.indexOf(s) >= 0 || (this._pendingDownloadQueue.push(s), this.processDownloadQueue())
    }
    processDownloadQueue()
    {
        for (; this._pendingDownloadQueue.length;)
            this._pendingDownloadQueue[0].downloadAsset(),
            this._currentDownloads.push(this._pendingDownloadQueue.shift())
    }
}
;
let Da = Sf;
Da.DOWNLOADER_READY = "EADM_DOWNLOADER_READY";
Da.LIBRARY_LOADED = "EADM_LIBRARY_LOADED";
Da.MAX_DOWNLOADS = 2;
class tK extends rn {
    constructor(e, t, r, i, n)
    {
        super(e, t, r, i, n, null)
    }
    isPlaceholder()
    {
        return !0
    }
}
const fv = class  extends bn{
    constructor()
    {
        super(),
        this._structure = null,
        this._avatarAssetDownloadManager = null,
        this._placeHolderFigure = null,
        this._figureMapReady = !1,
        this._effectMapReady = !1,
        this._actionsReady = !1,
        this._geometryReady = !1,
        this._partSetsReady = !1,
        this._animationsReady = !1,
        this._isReady = !1,
        this.onAvatarAssetDownloaderReady = this.onAvatarAssetDownloaderReady.bind(this),
        this.onAvatarAssetDownloaded = this.onAvatarAssetDownloaded.bind(this),
        this.onEffectAssetDownloaderReady = this.onEffectAssetDownloaderReady.bind(this),
        this.onEffectAssetDownloaded = this.onEffectAssetDownloaded.bind(this),
        this.onAvatarStructureDownloadDone = this.onAvatarStructureDownloadDone.bind(this)
    }
    onInit()
    {
        this._structure = new J3(this),
        this.loadGeometry(),
        this.loadPartSets(),
        this.loadActions(),
        this.loadAnimations(),
        this.loadFigureData(),
        this._aliasCollection = new lU(this, zr()),
        this._aliasCollection.init(),
        this._avatarAssetDownloadManager || (this._avatarAssetDownloadManager = new ba(zr(), this._structure), this._avatarAssetDownloadManager.addEventListener(ba.DOWNLOADER_READY, this.onAvatarAssetDownloaderReady), this._avatarAssetDownloadManager.addEventListener(ba.LIBRARY_LOADED, this.onAvatarAssetDownloaded)),
        this._effectAssetDownloadManager || (this._effectAssetDownloadManager = new Da(zr(), this._structure), this._effectAssetDownloadManager.addEventListener(Da.DOWNLOADER_READY, this.onEffectAssetDownloaderReady), this._effectAssetDownloadManager.addEventListener(Da.LIBRARY_LOADED, this.onEffectAssetDownloaded)),
        this.checkReady()
    }
    onDispose()
    {
        this._avatarAssetDownloadManager && (this._avatarAssetDownloadManager.removeEventListener(ba.DOWNLOADER_READY, this.onAvatarAssetDownloaderReady), this._avatarAssetDownloadManager.removeEventListener(ba.LIBRARY_LOADED, this.onAvatarAssetDownloaded)),
        this._effectAssetDownloadManager && (this._effectAssetDownloadManager.removeEventListener(Da.DOWNLOADER_READY, this.onEffectAssetDownloaderReady), this._effectAssetDownloadManager.removeEventListener(Da.LIBRARY_LOADED, this.onEffectAssetDownloaded))
    }
    loadGeometry()
    {
        this._structure && (this._structure.initGeometry($3.geometry), this._geometryReady = !0, this.checkReady())
    }
    loadPartSets()
    {
        this._structure && (this._structure.initPartSets(eK.partSets), this._partSetsReady = !0, this.checkReady())
    }
    loadActions()
    {
        const s = ye.getValue("avatar.default.actions");
        s && this._structure.initActions(zr(), s);
        const e = new XMLHttpRequest;
        try {
            e.open("GET", ye.getValue("avatar.actions.url")),
            e.send(),
            e.onloadend = t => {
                this._structure && (this._structure.updateActions(JSON.parse(e.responseText)), this._actionsReady = !0, this.checkReady())
            },
            e.onerror = t => {
                throw new Error("invalid_avatar_actions")
            }
        } catch (t) {
            pe.error(t)
        }
    }
    loadAnimations()
    {
        this._structure && (this._structure.initAnimation(Z3.animations), this._animationsReady = !0, this.checkReady())
    }
    loadFigureData()
    {
        const s = ye.getValue("avatar.default.figuredata");
        if (!s || typeof s == "string") {
            pe.error("XML figuredata is no longer supported");
            return
        }
        this._structure && this._structure.initFigureData(s),
        new dg(ye.getValue("avatar.figuredata.url"), this._structure.figureData).addEventListener(dg.AVATAR_STRUCTURE_DONE, this.onAvatarStructureDownloadDone)
    }
    onAvatarStructureDownloadDone(s)
    {
        this._structureReady = !0,
        this._structure.init(),
        this.checkReady()
    }
    onAvatarAssetDownloaderReady(s)
    {
        s && (this._figureMapReady = !0, this.checkReady())
    }
    onAvatarAssetDownloaded(s)
    {
        s && this._aliasCollection.reset()
    }
    onEffectAssetDownloaderReady(s)
    {
        s && (this._effectMapReady = !0, this.checkReady())
    }
    onEffectAssetDownloaded(s)
    {
        s && this._aliasCollection.reset()
    }
    checkReady()
    {
        this._isReady || !this._geometryReady || !this._partSetsReady || !this._actionsReady || !this._animationsReady || !this._figureMapReady || !this._effectMapReady || !this._structureReady || (this._isReady = !0, this.events && this.events.dispatchEvent(new Ye(Cd.AVATAR_RENDER_READY)))
    }
    createFigureContainer(s)
    {
        return new Lc(s)
    }
    isFigureContainerReady(s)
    {
        return this._avatarAssetDownloadManager ? this._avatarAssetDownloadManager.isAvatarFigureContainerReady(s) : !1
    }
    createAvatarImage(s, e, t, r=null, i=null)
    {
        if (!this._structure || !this._avatarAssetDownloadManager)
            return null;
        const n = new Lc(s);
        return t && this.validateAvatarFigure(n, t), this._avatarAssetDownloadManager.isAvatarFigureContainerReady(n) ? new rn(this._structure, this._aliasCollection, n, e, this._effectAssetDownloadManager, i) : (this._placeHolderFigure || (this._placeHolderFigure = new Lc(fv.DEFAULT_FIGURE)), this._avatarAssetDownloadManager.downloadAvatarFigure(n, r), new tK(this._structure, this._aliasCollection, this._placeHolderFigure, e, this._effectAssetDownloadManager))
    }
    downloadAvatarFigure(s, e)
    {
        this._avatarAssetDownloadManager && this._avatarAssetDownloadManager.downloadAvatarFigure(s, e)
    }
    validateAvatarFigure(s, e)
    {
        let t = !1;
        const r = this._structure.getMandatorySetTypeIds(e, 2);
        if (r) {
            const i = this._structure.figureData;
            for (const n of r)
                if (s.hasPartType(n)) {
                    const o = i.getSetType(n);
                    if (o && !o.getPartSet(s.getPartSetId(n))) {
                        const c = this._structure.getDefaultPartSet(n, e);
                        c && (s.updatePart(n, c.id, [0]), t = !0)
                    }
                } else {
                    const o = this._structure.getDefaultPartSet(n, e);
                    o && (s.updatePart(n, o.id, [0]), t = !0)
                }
        }
        return !t
    }
    getFigureClubLevel(s, e, t=null)
    {
        if (!this._structure)
            return 0;
        const r = this._structure.figureData,
            i = Array.from(s.getPartTypeIds());
        let n = 0;
        for (const o of i) {
            const l = r.getSetType(o);
            if (!l)
                continue;
            const c = s.getPartSetId(o),
                u = l.getPartSet(c);
            if (u) {
                n = Math.max(u.clubLevel, n);
                const h = r.getPalette(l.paletteID),
                    d = s.getPartColorIds(o);
                for (const m of d) {
                    const p = h.getColor(m);
                    p && (n = Math.max(p.clubLevel, n))
                }
            }
        }
        t || (t = this._structure.getBodyPartsUnordered(Ys.FULL));
        for (const o of t) {
            const l = r.getSetType(o);
            l && i.indexOf(o) === -1 && (n = Math.max(l.optionalFromClubLevel(e), n))
        }
        return n
    }
    isValidFigureSetForGender(s, e)
    {
        const r = this.structureData.getFigurePartSet(s);
        return !!(r && (r.gender.toUpperCase() === "U" || r.gender.toUpperCase() === e.toUpperCase()))
    }
    getFigureStringWithFigureIds(s, e, t)
    {
        const r = new ks;
        r.loadAvatarData(s, e);
        const i = this.resolveFigureSets(t);
        for (const n of i)
            r.savePartData(n.type, n.id, r.getColourIds(n.type));
        return r.getFigureString()
    }
    resolveFigureSets(s)
    {
        const e = this.structureData,
            t = [];
        for (const r of s) {
            const i = e.getFigurePartSet(r);
            i && t.push(i)
        }
        return t
    }
    getMandatoryAvatarPartSetIds(s, e)
    {
        return this._structure ? this._structure.getMandatorySetTypeIds(s, e) : null
    }
    getAssetByName(s)
    {
        return this._aliasCollection.getAsset(s)
    }
    get assets()
    {
        return zr()
    }
    get isReady()
    {
        return this._isReady
    }
    get structure()
    {
        return this._structure
    }
    get structureData()
    {
        return this._structure ? this._structure.figureData : null
    }
    get downloadManager()
    {
        return this._avatarAssetDownloadManager
    }
}
;
let mv = fv;
mv.DEFAULT_FIGURE = "hd-99999-99999";
class Rh {
    constructor(e, t, r)
    {
        this._layerId = e,
        this._partId = t,
        this._paletteId = r
    }
    get layerId()
    {
        return this._layerId
    }
    set layerId(e)
    {
        this._layerId = e
    }
    get partId()
    {
        return this._partId
    }
    set partId(e)
    {
        this._partId = e
    }
    get paletteId()
    {
        return this._paletteId
    }
    set paletteId(e)
    {
        this._paletteId = e
    }
}
class Nn {
    constructor(e)
    {
        this._typeId = this.getTypeId(e),
        this._paletteId = this.getPaletteId(e),
        this._color = this.getColor(e),
        this._headOnly = this.getHeadOnly(e);
        const t = this.getCustomData(e);
        this._customLayerIds = this.getCustomLayerIds(t),
        this._customPartIds = this.getCustomPartIds(t),
        this._customPaletteIds = this.getCustomPaletteIds(t),
        this._customParts = [];
        let r = 0;
        for (; r < this._customLayerIds.length;)
            this._customParts.push(new Rh(this._customLayerIds[r], this._customPartIds[r], this._customPaletteIds[r])),
            r++
    }
    get typeId()
    {
        return this._typeId
    }
    get paletteId()
    {
        return this._paletteId
    }
    get color()
    {
        return this._color
    }
    get customLayerIds()
    {
        return this._customLayerIds
    }
    get customPartIds()
    {
        return this._customPartIds
    }
    get customPaletteIds()
    {
        return this._customPaletteIds
    }
    get customParts()
    {
        return this._customParts
    }
    getCustomPart(e)
    {
        if (this._customParts) {
            for (const t of this._customParts)
                if (t.layerId === e)
                    return t
        }
        return null
    }
    get hasCustomParts()
    {
        return this._customLayerIds != null && this._customLayerIds.length > 0
    }
    get headOnly()
    {
        return this._headOnly
    }
    get figureString()
    {
        let e = this.typeId + " " + this.paletteId + " " + this.color.toString(16);
        e = e + (" " + this.customParts.length);
        for (const t of this.customParts)
            e = e + (" " + t.layerId + " " + t.partId + " " + t.paletteId);
        return e
    }
    getCustomData(e)
    {
        let t = [];
        if (e) {
            const r = e.split(" "),
                i = this._headOnly ? 1 : 0,
                n = 4 + i;
            if (r.length > n) {
                const o = 3 + i,
                    l = parseInt(r[o]);
                t = r.slice(n, n + l * 3)
            }
        }
        return t
    }
    getCustomLayerIds(e)
    {
        const t = [];
        let r = 0;
        for (; r < e.length;)
            t.push(parseInt(e[r + 0])),
            r = r + 3;
        return t
    }
    getCustomPartIds(e)
    {
        const t = [];
        let r = 0;
        for (; r < e.length;)
            t.push(parseInt(e[r + 1])),
            r = r + 3;
        return t
    }
    getCustomPaletteIds(e)
    {
        const t = [];
        let r = 0;
        for (; r < e.length;)
            t.push(parseInt(e[r + 2])),
            r = r + 3;
        return t
    }
    getTypeId(e)
    {
        if (e) {
            const t = e.split(" ");
            if (t.length >= 1)
                return parseInt(t[0])
        }
        return 0
    }
    getPaletteId(e)
    {
        if (e) {
            const t = e.split(" ");
            if (t.length >= 2)
                return parseInt(t[1])
        }
        return 0
    }
    getColor(e)
    {
        if (e) {
            const t = e.split(" ");
            if (t.length >= 3)
                return parseInt(t[2], 16)
        }
        return 16777215
    }
    getHeadOnly(e)
    {
        if (e) {
            const t = e.split(" ");
            if (t.length >= 4)
                return t[3] === "head"
        }
        return !1
    }
}
class Zd {
    constructor(e)
    {
        this._complete = !0,
        this._target = e
    }
    get running()
    {
        return this._running && !!this._target
    }
    get complete()
    {
        return this._complete
    }
    set target(e)
    {
        this._target = e
    }
    get target()
    {
        return this._target
    }
    set tag(e)
    {
        this._tag = e
    }
    get tag()
    {
        return this._tag
    }
    start()
    {
        this._running = !0
    }
    update(e) {}
    stop()
    {
        this._target = null,
        this._running = !1
    }
    tick(e) {}
}
class sK extends Zd {
    constructor(e)
    {
        super(e)
    }
    tick(e)
    {
        super.tick(e),
        this.target && (this.target.remove(), this.target = null)
    }
}
class LE extends Zd {
    constructor(e, t)
    {
        super(e),
        this._complete = !1,
        this._duration = t
    }
    get duration()
    {
        return this._duration
    }
    start()
    {
        super.start(),
        this._complete = !1,
        this._startTimeMs = Pe()
    }
    tick(e)
    {
        super.tick(e);
        const t = (e - this._startTimeMs) / this._duration;
        t < 1 ? this.update(t) : (this.update(1), this._complete = !0)
    }
}
class rK extends LE {
    constructor(e, t, r)
    {
        super(e, t),
        this._height = r
    }
    start()
    {
        super.start(),
        this._offset = 0,
        this.target.style.top = this._offset - this._height + "px"
    }
    update(e)
    {
        super.update(e),
        this.target.style.top = this._offset - this._height + this.getBounceOffset(e) * this._height + "px"
    }
    getBounceOffset(e)
    {
        return e < .364 ? 7.5625 * e * e : e < .727 ? (e = e - .545, 7.5625 * e * e + .75) : e < .909 ? (e = e - .9091, 7.5625 * e * e + .9375) : (e = e - .955, 7.5625 * e * e + .984375)
    }
    stop()
    {
        this.target.style.top = this._offset + "px",
        super.stop()
    }
}
class iK extends LE {
    constructor(e)
    {
        super(e.target, e.duration),
        this._interval = e
    }
    start()
    {
        super.start(),
        this._interval.start()
    }
    update(e)
    {
        super.update(e),
        this._interval.update(e)
    }
    stop()
    {
        super.stop(),
        this._interval.stop()
    }
}
class nK extends iK {
    constructor(e, t)
    {
        super(e),
        this._rate = t
    }
}
class aK extends nK {
    constructor(e, t)
    {
        super(e, t)
    }
    update(e)
    {
        this._interval.update(Math.pow(e, 1 / this._rate))
    }
}
class oK extends LE {
    constructor(e, t, r, i, n, o)
    {
        super(e, t),
        this._deltaX = r,
        this._deltaY = i,
        this._height = -n,
        this._numJumps = o
    }
    start()
    {
        super.start(),
        this._startX = this.target.offsetLeft,
        this._startY = this.target.offsetTop
    }
    update(e)
    {
        super.update(e),
        this.target.style.left = this._startX + this._deltaX * e + "px",
        this.target.style.top = this._startY + this._height * Math.abs(Math.sin(e * Math.PI * this._numJumps)) + this._deltaY * e + "px"
    }
}
const Je = class {
    static get TIMER_TIME()
    {
        return 1e3 / UL()
    }
    static runMotion(s)
    {
        return Je._RUNNING_MOTIONS.indexOf(s) === -1 && Je._QUEUED_MOTIONS.indexOf(s) === -1 && (Je._IS_UPDATING ? Je._QUEUED_MOTIONS.push(s) : (Je._RUNNING_MOTIONS.push(s), s.start()), Je.startTimer()), s
    }
    static removeMotion(s)
    {
        let e = Je._RUNNING_MOTIONS.indexOf(s);
        e > -1 ? Je._IS_UPDATING ? (e = Je._REMOVED_MOTIONS.indexOf(s), e == -1 && Je._REMOVED_MOTIONS.push(s)) : (Je._RUNNING_MOTIONS.splice(e, 1), s.running && s.stop(), Je._RUNNING_MOTIONS.length || Je.stopTimer()) : (e = Je._QUEUED_MOTIONS.indexOf(s), e > -1 && Je._QUEUED_MOTIONS.splice(e, 1))
    }
    static getMotionByTag(s)
    {
        for (const e of Je._RUNNING_MOTIONS)
            if (e.tag == s)
                return e;
        for (const e of Je._QUEUED_MOTIONS)
            if (e.tag == s)
                return e;
        return null
    }
    static getMotionByTarget(s)
    {
        for (const e of Je._RUNNING_MOTIONS)
            if (e.target == s)
                return e;
        for (const e of Je._QUEUED_MOTIONS)
            if (e.target == s)
                return e;
        return null
    }
    static getMotionByTagAndTarget(s, e)
    {
        for (const t of Je._RUNNING_MOTIONS)
            if (t.tag == s && t.target == e)
                return t;
        for (const t of Je._QUEUED_MOTIONS)
            if (t.tag == s && t.target == e)
                return t;
        return null
    }
    static get isRunning()
    {
        return !!Je._TIMER
    }
    static get isUpdating()
    {
        return Je._IS_UPDATING
    }
    static onTick()
    {
        Je._IS_UPDATING = !0;
        const s = Pe();
        let e = null;
        for (; e = Je._QUEUED_MOTIONS.pop();)
            Je._RUNNING_MOTIONS.push(e);
        for (; e = Je._REMOVED_MOTIONS.pop();)
            Je._RUNNING_MOTIONS.splice(Je._RUNNING_MOTIONS.indexOf(e), 1),
            e.running && e.stop();
        for (e of Je._RUNNING_MOTIONS)
            e.running ? (e.tick(s), e.complete && Je.removeMotion(e)) : Je.removeMotion(e);
        Je._RUNNING_MOTIONS.length || Je.stopTimer(),
        Je._IS_UPDATING = !1
    }
    static startTimer()
    {
        Je._TIMER || (Je._TIMER = setInterval(Je.onTick, Je.TIMER_TIME))
    }
    static stopTimer()
    {
        Je._TIMER && (clearInterval(Je._TIMER), Je._TIMER = null)
    }
    getNumRunningMotions(s)
    {
        let e = 0;
        for (const t of Je._RUNNING_MOTIONS)
            t.target === s && e++;
        return e
    }
}
;
let Ha = Je;
Ha._QUEUED_MOTIONS = [];
Ha._RUNNING_MOTIONS = [];
Ha._REMOVED_MOTIONS = [];
Ha._TIMER = null;
Ha._IS_UPDATING = !1;
class yp extends Zd {
    constructor(...e)
    {
        super(e ? e[0].target : null),
        this._queue = [];
        for (const t of e)
            this._queue.push(t);
        this._motion = e[0],
        this._complete = !this._motion
    }
    get running()
    {
        return this._running && this._motion ? this._motion.running : !1
    }
    start()
    {
        super.start(),
        this._motion.start()
    }
    update(e)
    {
        super.update(e),
        this._motion.running && this._motion.update(e)
    }
    stop()
    {
        super.stop(),
        this._motion.stop()
    }
    tick(e)
    {
        if (super.tick(e), this._motion.tick(e), this._motion.complete) {
            this._motion.stop();
            const t = this._queue.indexOf(this._motion);
            t < this._queue.length - 1 ? (this._motion = this._queue[t + 1], this._target = this._motion.target, this._motion.start()) : this._complete = !0
        }
    }
}
class lK extends Zd {
    constructor(e)
    {
        super(null),
        this._waitTimeMs = e
    }
    get running()
    {
        return this._running
    }
    start()
    {
        super.start(),
        this._complete = !1,
        this._startTimeMs = Pe()
    }
    tick(e)
    {
        super.tick(e),
        this._complete = e - this._startTimeMs >= this._waitTimeMs,
        this._complete && this.stop()
    }
}
function qe() {
    return Ee.instance
}
function Ts(s) {
    qe().addLinkEventTracker(s)
}
function bs() {
    return qe().avatar
}
function Mp(s) {
    return bs().structureData.getPalette(s)
}
function bp(s) {
    return bs().structureData.getSetType(s)
}
function Gc() {
    return qe().cameraManager
}
function cK() {
    return qe().core
}
function uK() {
    return cK().configuration
}
function ge(s) {
    s = s.startsWith("event:") ? s.substring(6) : s,
    qe().createLinkEvent(s)
}
function qc() {
    var s;
    return (s = qe()) == null ? void 0 : s.communication
}
function oe(s, e=null) {
    return ye.getValue(s, e)
}
function Cf() {
    var s;
    return (s = qc()) == null ? void 0 : s.connection
}
function Ev() {
    return qe().localization
}
const zo = s => {
    !s || !s.length || (s.startsWith("http") ? Gi.openWebPage(s) : ge(s))
};
function Rs(s) {
    qe().removeLinkEventTracker(s)
}
function re() {
    return qe().roomEngine
}
let M_ = !1,
    wu = 0,
    Fu = 0;
const xu = (s, e=1) => {
    const t = s.clientX,
        r = s.clientY;
    let i = s.type;
    switch (i === le.MOUSE_CLICK && (wu && (Fu = 1, wu >= Date.now() - 300 && Fu++), wu = Date.now(), Fu === 2 && (M_ || (i = le.DOUBLE_CLICK), Fu = 0, wu = null)), i) {
    case le.MOUSE_CLICK:
        break;
    case le.DOUBLE_CLICK:
        break;
    case le.MOUSE_MOVE:
        M_ = !0;
        break;
    case le.MOUSE_DOWN:
        M_ = !1;
        break;
    case le.MOUSE_UP:
        break;
    case le.RIGHT_CLICK:
        break;
    default:
        return
    }
    re().dispatchMouseEvent(e, t, r, i, s.altKey, s.ctrlKey || s.metaKey, s.shiftKey, !1)
};
let b_ = !1,
    Gu = 0,
    Bu = 0;
const ku = (s, e=1, t=!1, r=!1, i=!1, n=!1) => {
    let o = 0,
        l = 0;
    s.touches[0] ? (o = s.touches[0].clientX, l = s.touches[0].clientY) : s.changedTouches[0] && (o = s.changedTouches[0].clientX, l = s.changedTouches[0].clientY);
    let c = s.type;
    switch (t && (c = tr.TOUCH_LONG), (c === le.MOUSE_CLICK || c === tr.TOUCH_END) && (c = le.MOUSE_CLICK, Gu && (Bu = 1, Gu >= Date.now() - 300 && Bu++), Gu = Date.now(), Bu === 2 && (b_ || (c = le.DOUBLE_CLICK), Bu = 0, Gu = null)), c) {
    case le.MOUSE_CLICK:
        break;
    case le.DOUBLE_CLICK:
        break;
    case tr.TOUCH_START:
        c = le.MOUSE_DOWN,
        b_ = !1;
        break;
    case tr.TOUCH_MOVE:
        c = le.MOUSE_MOVE,
        b_ = !0;
        break;
    case tr.TOUCH_END:
        c = le.MOUSE_UP;
        break;
    case tr.TOUCH_LONG:
        c = le.MOUSE_DOWN_LONG;
        break;
    default:
        return
    }
    c === tr.TOUCH_START && re().dispatchMouseEvent(e, o, l, c, r, i, n, !1),
    re().dispatchMouseEvent(e, o, l, c, r, i, n, !1)
};
function vr(s) {
    if (!s || !s.model)
        return !1;
    const e = Z().userId,
        t = s.model.getValue(C.FURNITURE_OWNER_ID);
    return e === t
}
function Xc(s, e, t) {
    return s ? s.isRoomOwner || s.controllerLevel >= ct.GUEST || Z().isModerator || vr(re().getRoomObject(s.roomId, e, t)) : !1
}
function Ko() {
    return qe().roomSessionManager
}
function Do(s, e=null) {
    Ko().createSession(s, e)
}
function hK() {
    const s = qo();
    return s ? s.model.getValue(C.FIGURE_CAN_STAND_UP) : ie.POSTURE_STAND
}
function D_() {
    const s = qo();
    if (!s)
        return !1;
    const t = s.model.getValue(C.FIGURE_EFFECT);
    return !(t === 29 || t === 30 || t === 185)
}
function Z() {
    return qe().sessionDataManager
}
function hi() {
    return oe("hc.disabled", !1) ? gr.VIP : Z().clubLevel
}
class Wr {}
Wr.OKAY = 0;
Wr.MISSING_OFFER = 1;
Wr.FURNI_LIMIT_REACHED = 2;
Wr.NOT_IN_ROOM = 3;
Wr.NOT_ROOM_OWNER = 4;
Wr.GUILD_ROOM = 5;
Wr.VISITORS_IN_ROOM = 6;
class dK {
    constructor(e, t, r)
    {
        this._depth = 0,
        this._localization = "",
        this._pageId = -1,
        this._pageName = "",
        this._iconId = 0,
        this._depth = t,
        this._parent = r,
        this._localization = e.localization,
        this._pageId = e.pageId,
        this._pageName = e.pageName,
        this._iconId = e.icon,
        this._children = [],
        this._offerIds = e.offerIds,
        this._isVisible = e.visible,
        this._isActive = !1,
        this._isOpen = !1
    }
    activate()
    {
        this._isActive = !0
    }
    deactivate()
    {
        this._isActive = !1
    }
    open()
    {
        this._isOpen = !0
    }
    close()
    {
        this._isOpen = !1
    }
    addChild(e)
    {
        e && this._children.push(e)
    }
    get depth()
    {
        return this._depth
    }
    get isBranch()
    {
        return this._children.length > 0
    }
    get isLeaf()
    {
        return this._children.length === 0
    }
    get localization()
    {
        return this._localization
    }
    get pageId()
    {
        return this._pageId
    }
    get pageName()
    {
        return this._pageName
    }
    get iconId()
    {
        return this._iconId
    }
    get children()
    {
        return this._children
    }
    get offerIds()
    {
        return this._offerIds
    }
    get parent()
    {
        return this._parent
    }
    get isVisible()
    {
        return this._isVisible
    }
    get isActive()
    {
        return this._isActive
    }
    get isOpen()
    {
        return this._isOpen
    }
}
const pv = class {
    constructor(s, e, t, r, i, n=-1)
    {
        this._pageId = s,
        this._layoutCode = e,
        this._localization = t,
        this._offers = r,
        this._acceptSeasonCurrencyAsCredits = i;
        for (const o of r)
            o.page = this;
        n === -1 ? this._mode = pv.MODE_NORMAL : this._mode = n
    }
    get pageId()
    {
        return this._pageId
    }
    get layoutCode()
    {
        return this._layoutCode
    }
    get localization()
    {
        return this._localization
    }
    get offers()
    {
        return this._offers
    }
    get acceptSeasonCurrencyAsCredits()
    {
        return this._acceptSeasonCurrencyAsCredits
    }
    get mode()
    {
        return this._mode
    }
}
;
let UE = pv;
UE.MODE_NORMAL = 0;
class _s {}
_s.DUCKET_INFO = "ducket_info";
_s.CREDITS = "credits";
_s.AVATAR_EFFECTS = "avatar_effects";
_s.HC_MEMBERSHIP = "hc_membership";
_s.CLUB_GIFTS = "club_gifts";
_s.LIMITED_SOLD = "limited_sold";
_s.PET_ACCESSORIES = "pet_accessories";
_s.TRAX_SONGS = "trax_songs";
_s.NEW_ADDITIONS = "new_additions";
_s.QUEST_SHELL = "quest_shell";
_s.QUEST_SNOWFLAKES = "quest_snowflakes";
_s.VAL_QUESTS = "val_quests";
_s.GUILD_CUSTOM_FURNI = "guild_custom_furni";
_s.GIFT_SHOP = "gift_shop";
_s.HORSE_STYLES = "horse_styles";
_s.HORSE_SHOE = "horse_shoe";
_s.SET_EASTER = "set_easter";
_s.ECOTRON_TRANSFORM = "ecotron_transform";
_s.LOYALTY_INFO = "loyalty_info";
_s.ROOM_BUNDLES = "room_bundles";
_s.ROOM_BUNDLES_MOBILE = "room_bundles_mobile";
_s.HABBO_CLUB_DESKTOP = "habbo_club_desktop";
_s.MOBILE_SUBSCRIPTIONS = "mobile_subscriptions";
class _K {
    constructor(e, t)
    {
        this.breed = e,
        this.palettes = t
    }
}
class Pt {}
Pt.NONE = 0;
Pt.CONFIRM = 1;
Pt.PURCHASE = 2;
Pt.NO_CREDITS = 3;
Pt.NO_POINTS = 4;
Pt.SOLD_OUT = 5;
Pt.FAILED = 6;
class Ai {}
Ai.NORMAL = "NORMAL";
Ai.BUILDER = "BUILDERS_CLUB";
const gK = s => "",
    fK = s => "",
    Dp = (s, e) => {
        const t = s.get(e),
            r = [];
        if (t && t.length)
            for (const i of t)
                i.isVisible && r.push(i);
        return r
    },
    Iv = (s, e, t, r) => {
        if (t.isVisible && t.pageId > 0) {
            let i = !1;
            const n = [t.pageName, t.localization].join(" ").toLowerCase().replace(/ /gi, "");
            if (n.indexOf(s) > -1 && (r.push(t), i = !0), !i) {
                for (const o of e)
                    if (n.indexOf(o) >= 0) {
                        r.push(t);
                        break
                    }
            }
        }
        for (const i of t.children)
            Iv(s, e, i, r)
    };
function mK(s) {
    if (!s.length)
        return 0;
    let e = s.length - 1;
    for (; e >= 0 && !isNaN(parseInt(s.charAt(e)));)
        e--;
    return e > 0 ? parseInt(s.substring(e + 1)) : -1
}
function EK(s, e) {
    switch (s) {
    case 0:
        return [[16743226], [16750435], [16764339], [16094464], [16498012], [16704690], [15586304], [16115545], [16513201], [8694111], [11585939], [14413767], [6664599], [9553845], [12971486], [8358322], [10002885], [13292268], [10780600], [12623573], [14403561], [12418717], [14327229], [15517403], [14515069], [15764368], [16366271], [11250603], [13948116], [16777215], [14256481], [14656129], [15848130], [14005087], [14337152], [15918540], [15118118], [15531929], [9764857], [11258085]];
    case 1:
        return [[16743226], [16750435], [16764339], [16094464], [16498012], [16704690], [15586304], [16115545], [16513201], [8694111], [11585939], [14413767], [6664599], [9553845], [12971486], [8358322], [10002885], [13292268], [10780600], [12623573], [14403561], [12418717], [14327229], [15517403], [14515069], [15764368], [16366271], [11250603], [13948116], [16777215], [14256481], [14656129], [15848130], [14005087], [14337152], [15918540], [15118118], [15531929], [9764857], [11258085]];
    case 2:
        return [[16579283], [15378351], [8830016], [15257125], [9340985], [8949607], [6198292], [8703620], [9889626], [8972045], [12161285], [13162269], [8620113], [12616503], [8628101], [13827840], [9764857]];
    case 3:
        return [[16777215], [15658734], [14540253]];
    case 4:
        return [[16777215], [16053490], [15464440], [16248792], [15396319], [15007487]];
    case 5:
        return [[16777215], [15658734], [14540253]];
    case 6:
        return [[16777215], [15658734], [14540253], [16767177], [16770205], [16751331]];
    case 7:
        return [[13421772], [11447982], [16751331], [10149119], [16763290], [16743786]];
    default:
        {
            const t = [];
            for (const r of e) {
                const i = re().getPetColorResult(s, r.paletteId);
                i && (i.primaryColor === i.secondaryColor ? t.push([i.primaryColor]) : t.push([i.primaryColor, i.secondaryColor]))
            }
            return t
        }
    }
}
class Ue {}
Ue.WALL = "i";
Ue.FLOOR = "s";
Ue.EFFECT = "e";
Ue.HABBO_CLUB = "h";
Ue.BADGE = "b";
Ue.GAME_TOKEN = "GAME_TOKEN";
Ue.PET = "p";
Ue.ROBOT = "r";
const Tv = class {
    constructor(s, e, t, r, i, n, o=!1, l=0, c=0)
    {
        this._productType = s.toLowerCase(),
        this._productClassId = e,
        this._extraParam = t,
        this._productCount = r,
        this._productData = i,
        this._furnitureData = n,
        this._isUniqueLimitedItem = o,
        this._uniqueLimitedItemSeriesSize = l,
        this._uniqueLimitedItemsLeft = c
    }
    static stripAddonProducts(s)
    {
        return s.length === 1 ? s : s.filter(e => e.productType !== Ue.BADGE && e.productType !== Ue.EFFECT && e.productClassId !== Tv.EFFECT_CLASSID_NINJA_DISAPPEAR)
    }
    getIconUrl(s=null, e=null)
    {
        switch (this._productType) {
        case Ue.FLOOR:
            return re().getFurnitureFloorIconUrl(this.productClassId);
        case Ue.WALL:
            {
                if (s && this._furnitureData) {
                    let t = "";
                    switch (this._furnitureData.className) {
                    case "floor":
                        t = ["th", this._furnitureData.className, s.product.extraParam].join("_");
                        break;
                    case "wallpaper":
                        t = ["th", "wall", s.product.extraParam].join("_");
                        break;
                    case "landscape":
                        t = ["th", this._furnitureData.className, (s.product.extraParam || "").replace(".", "_"), "001"].join("_");
                        break
                    }
                    if (t !== "")
                        return `${oe("catalog.asset.url")}/${t}.png`
                }
                return re().getFurnitureWallIconUrl(this.productClassId, this._extraParam)
            }case Ue.EFFECT:
            return gK(this.productClassId);
        case Ue.HABBO_CLUB:
            return fK(this.productClassId);
        case Ue.BADGE:
            return Z().getBadgeUrl(this._extraParam);
        case Ue.ROBOT:
            return null
        }
        return null
    }
    get productType()
    {
        return this._productType
    }
    get productClassId()
    {
        return this._productClassId
    }
    get extraParam()
    {
        return this._extraParam
    }
    set extraParam(s)
    {
        this._extraParam = s
    }
    get productCount()
    {
        return this._productCount
    }
    get productData()
    {
        return this._productData
    }
    get furnitureData()
    {
        return this._furnitureData
    }
    get isUniqueLimitedItem()
    {
        return this._isUniqueLimitedItem
    }
    get uniqueLimitedItemSeriesSize()
    {
        return this._uniqueLimitedItemSeriesSize
    }
    get uniqueLimitedItemsLeft()
    {
        return this._uniqueLimitedItemsLeft
    }
    set uniqueLimitedItemsLeft(s)
    {
        this._uniqueLimitedItemsLeft = s
    }
}
;
let wo = Tv;
wo.EFFECT_CLASSID_NINJA_DISAPPEAR = 108;
const _n = class {
    constructor(s, e, t, r, i, n, o, l, c, u)
    {
        this._clubLevel = 0,
        this._bundlePurchaseAllowed = !1,
        this._offerId = s,
        this._localizationId = e,
        this._isRentOffer = t,
        this._priceInCredits = r,
        this._priceInActivityPoints = i,
        this._activityPointType = n,
        this._giftable = o,
        this._clubLevel = l,
        this._products = c,
        this._bundlePurchaseAllowed = u,
        this.setPricingModelForProducts(),
        this.setPricingType();
        for (const h of c)
            if (h.productType === Ue.BADGE) {
                this._badgeCode = h.extraParam;
                break
            }
    }
    activate() {}
    get clubLevel()
    {
        return this._clubLevel
    }
    get page()
    {
        return this._page
    }
    set page(s)
    {
        this._page = s
    }
    get offerId()
    {
        return this._offerId
    }
    get localizationId()
    {
        return this._localizationId
    }
    get priceInCredits()
    {
        return this._priceInCredits
    }
    get priceInActivityPoints()
    {
        return this._priceInActivityPoints
    }
    get activityPointType()
    {
        return this._activityPointType
    }
    get giftable()
    {
        return this._giftable
    }
    get product()
    {
        if (!this._products || !this._products.length)
            return null;
        if (this._products.length === 1)
            return this._products[0];
        const s = wo.stripAddonProducts(this._products);
        return s.length ? s[0] : null
    }
    get pricingModel()
    {
        return this._pricingModel
    }
    get priceType()
    {
        return this._priceType
    }
    get bundlePurchaseAllowed()
    {
        return this._bundlePurchaseAllowed
    }
    get isRentOffer()
    {
        return this._isRentOffer
    }
    get badgeCode()
    {
        return this._badgeCode
    }
    get localizationName()
    {
        const s = Dl(this._localizationId);
        return s ? s.name : f(this._localizationId)
    }
    get localizationDescription()
    {
        const s = Dl(this._localizationId);
        return s ? s.description : f(this._localizationId)
    }
    get isLazy()
    {
        return !1
    }
    get products()
    {
        return this._products
    }
    setPricingModelForProducts()
    {
        const s = wo.stripAddonProducts(this._products);
        s.length === 1 ? s[0].productCount === 1 ? this._pricingModel = _n.PRICING_MODEL_SINGLE : this._pricingModel = _n.PRICING_MODEL_MULTI : s.length > 1 ? this._pricingModel = _n.PRICING_MODEL_BUNDLE : this._pricingModel = _n.PRICING_MODEL_UNKNOWN
    }
    setPricingType()
    {
        this._priceInCredits > 0 && this._priceInActivityPoints > 0 ? this._priceType = _n.PRICE_TYPE_CREDITS_ACTIVITYPOINTS : this._priceInCredits > 0 ? this._priceType = _n.PRICE_TYPE_CREDITS : this._priceInActivityPoints > 0 ? this._priceType = _n.PRICE_TYPE_ACTIVITYPOINTS : this._priceType = _n.PRICE_TYPE_NONE
    }
    clone()
    {
        const s = [],
            e = Dl(this.localizationId);
        for (const r of this._products) {
            const i = Af(r.productClassId, r.productType);
            s.push(new wo(r.productType, r.productClassId, r.extraParam, r.productCount, e, i))
        }
        const t = new _n(this.offerId, this.localizationId, this.isRentOffer, this.priceInCredits, this.priceInActivityPoints, this.activityPointType, this.giftable, this.clubLevel, s, this.bundlePurchaseAllowed);
        return t.page = this.page, t
    }
}
;
let os = _n;
os.PRICING_MODEL_UNKNOWN = "pricing_model_unknown";
os.PRICING_MODEL_SINGLE = "pricing_model_single";
os.PRICING_MODEL_MULTI = "pricing_model_multi";
os.PRICING_MODEL_BUNDLE = "pricing_model_bundle";
os.PRICING_MODEL_FURNITURE = "pricing_model_furniture";
os.PRICE_TYPE_NONE = "price_type_none";
os.PRICE_TYPE_CREDITS = "price_type_credits";
os.PRICE_TYPE_ACTIVITYPOINTS = "price_type_activitypoints";
os.PRICE_TYPE_CREDITS_ACTIVITYPOINTS = "price_type_credits_and_activitypoints";
class pK {
    constructor(e)
    {
        this._furniData = e,
        this._product = new wo(this._furniData.type, this._furniData.id, this._furniData.customParams, 1, Dl(this._furniData.className), this._furniData)
    }
    activate()
    {
        B(new hN(this._furniData.rentOfferId > -1 ? this._furniData.rentOfferId : this._furniData.purchaseOfferId))
    }
    get offerId()
    {
        return this.isRentOffer ? this._furniData.rentOfferId : this._furniData.purchaseOfferId
    }
    get priceInActivityPoints()
    {
        return 0
    }
    get activityPointType()
    {
        return 0
    }
    get priceInCredits()
    {
        return 0
    }
    get page()
    {
        return this._page
    }
    set page(e)
    {
        this._page = e
    }
    get priceType()
    {
        return ""
    }
    get product()
    {
        return this._product
    }
    get products()
    {
        return [this._product]
    }
    get localizationId()
    {
        return "roomItem.name." + this._furniData.id
    }
    get bundlePurchaseAllowed()
    {
        return !1
    }
    get isRentOffer()
    {
        return this._furniData.rentOfferId > -1
    }
    get giftable()
    {
        return !1
    }
    get pricingModel()
    {
        return os.PRICING_MODEL_FURNITURE
    }
    get clubLevel()
    {
        return 0
    }
    get badgeCode()
    {
        return ""
    }
    get localizationName()
    {
        return this._furniData.name
    }
    get localizationDescription()
    {
        return this._furniData.description
    }
    get isLazy()
    {
        return !0
    }
}
const IK = (s, e, t=null) => {
    let r = null;
    switch (s.toLocaleLowerCase()) {
    case Ue.FLOOR:
        r = re().getFurnitureFloorIconUrl(e);
        break;
    case Ue.WALL:
        r = re().getFurnitureWallIconUrl(e, t);
        break
    }
    return r
};
class TK {
    constructor(e)
    {
        this._isEnabled = !1,
        this._price = null,
        this._stuffTypes = null,
        this._boxTypes = null,
        this._ribbonTypes = null,
        this._defaultStuffTypes = null,
        this._isEnabled = e.isEnabled,
        this._price = e.price,
        this._boxTypes = e.boxTypes,
        this._ribbonTypes = e.ribbonTypes,
        this._stuffTypes = e.giftWrappers,
        this._defaultStuffTypes = e.giftFurnis
    }
    get isEnabled()
    {
        return this._isEnabled
    }
    get price()
    {
        return this._price
    }
    get stuffTypes()
    {
        return this._stuffTypes
    }
    get boxTypes()
    {
        return this._boxTypes
    }
    get ribbonTypes()
    {
        return this._ribbonTypes
    }
    get defaultStuffTypes()
    {
        return this._defaultStuffTypes
    }
}
class Au {
    constructor(e, t, r, i, n, o, l, c, u=-1)
    {
        this._timeLeftMinutes = -1,
        this._offerId = e,
        this._furniId = t,
        this._furniType = r,
        this._extraData = i,
        this._stuffData = n,
        this._price = o,
        this._status = l,
        this._averagePrice = c,
        this._offerCount = u
    }
    get offerId()
    {
        return this._offerId
    }
    set offerId(e)
    {
        this._offerId = e
    }
    get furniId()
    {
        return this._furniId
    }
    get furniType()
    {
        return this._furniType
    }
    get extraData()
    {
        return this._extraData
    }
    get stuffData()
    {
        return this._stuffData
    }
    get price()
    {
        return this._price
    }
    set price(e)
    {
        this._price = e
    }
    get averagePrice()
    {
        return this._averagePrice
    }
    get image()
    {
        return this._image
    }
    set image(e)
    {
        this._image = e
    }
    get imageCallback()
    {
        return this._imageCallback
    }
    set imageCallback(e)
    {
        this._imageCallback = e
    }
    get status()
    {
        return this._status
    }
    get timeLeftMinutes()
    {
        return this._timeLeftMinutes
    }
    set timeLeftMinutes(e)
    {
        this._timeLeftMinutes = e
    }
    get offerCount()
    {
        return this._offerCount
    }
    set offerCount(e)
    {
        this._offerCount = e
    }
    get isUniqueLimitedItem()
    {
        return this.stuffData && this.stuffData.uniqueSeries > 0
    }
}
Au.TYPE_FLOOR = 1;
Au.TYPE_WALL = 2;
class Bo {}
Bo.ONGOING = 1;
Bo.ONGOING_OWN = 1;
Bo.SOLD = 2;
Bo.EXPIRED = 3;
class er {}
er.BY_ACTIVITY = 1;
er.BY_VALUE = 2;
er.ADVANCED = 3;
class Rv {
    constructor(e, t)
    {
        this._images = e,
        this._texts = t
    }
    getText(e)
    {
        let t = this._texts[e] || "";
        return t && t.length && (t = t.replace(/\r\n|\r|\n/g, "<br />")), t
    }
    getImage(e)
    {
        const t = this._images[e] || "";
        if (!t || !t.length)
            return null;
        let r = oe("catalog.asset.image.url");
        return r = r.replace("%name%", t), r
    }
}
class RK {
    constructor(e, t, r, i, n, o, l, c)
    {
        this.roomId = e,
        this.objectId = t,
        this.category = r,
        this.wallLocation = i,
        this.x = n,
        this.y = o,
        this.direction = l,
        this.offer = c
    }
    get offerId()
    {
        return this.offer.offerId
    }
    get productClassId()
    {
        return this.offer.product.productClassId
    }
    get productData()
    {
        return this.offer.product.productData
    }
    get furniData()
    {
        return this.offer.product.furnitureData
    }
    get extraParam()
    {
        return this.offer.product.extraParam
    }
}
const fl = class {
    constructor()
    {
        this._requestType = fl.REQUEST_TYPE_NONE
    }
    resetRequest()
    {
        this._requestType = fl.REQUEST_TYPE_NONE,
        this._requestById = -1,
        this._requestedByOfferId = -1,
        this._requestByName = null
    }
    get requestType()
    {
        return this._requestType
    }
    get requestById()
    {
        return this._requestById
    }
    set requestById(s)
    {
        this._requestType = fl.REQUEST_TYPE_ID,
        this._requestById = s
    }
    get requestedByOfferId()
    {
        return this._requestedByOfferId
    }
    set requestedByOfferId(s)
    {
        this._requestType = fl.REQUEST_TYPE_OFFER,
        this._requestedByOfferId = s
    }
    get requestByName()
    {
        return this._requestByName
    }
    set requestByName(s)
    {
        this._requestType = fl.REQUEST_TYPE_NAME,
        this._requestByName = s
    }
}
;
let Xn = fl;
Xn.REQUEST_TYPE_NONE = 0;
Xn.REQUEST_TYPE_ID = 1;
Xn.REQUEST_TYPE_OFFER = 2;
Xn.REQUEST_TYPE_NAME = 3;
class OK {
    constructor(e, t, r)
    {
        this.searchValue = e,
        this.offers = t,
        this.filteredNodes = r
    }
}
function Af(s, e) {
    let t = null;
    switch (e.toLowerCase()) {
    case Ue.FLOOR:
        t = Z().getFloorItemData(s);
        break;
    case Ue.WALL:
        t = Z().getWallItemData(s);
        break
    }
    return t
}
function $d(s, e, t) {
    const r = re().getRoomObject(s, e, t);
    if (!r)
        return;
    const i = r.model.getValue(C.FURNITURE_TYPE_ID);
    switch (t) {
    case V.FLOOR:
        return Z().getFloorItemData(i);
    case V.WALL:
        return Z().getWallItemData(i)
    }
    return null
}
function SK() {
    const s = qo();
    return s ? s.model.getValue(C.FIGURE_POSTURE) : ie.POSTURE_STAND
}
function Dl(s) {
    return s ? Z().getProductData(s) : null
}
function dt() {
    return Ko().getSession(-1)
}
function Nf() {
    B(new ON)
}
function vo() {
    return Z().clubLevel >= gr.CLUB
}
function Vu() {
    return Z().clubLevel >= gr.VIP
}
function CK(s) {
    const e = re().getRoomObject(dt().roomId, s, V.FLOOR);
    if (!e || !e.model)
        return !1;
    const t = Z().userId,
        r = e.model.getValue(C.FURNITURE_OWNER_ID);
    return t === r
}
function AK() {
    const s = qo();
    return s ? s.model.getValue(C.FIGURE_EFFECT) === 77 : !1
}
function NK(s) {
    Ko().startSession(s)
}
const wE = () => {
    dt() && (Nf(), Ko().removeSession(-1))
};
function qo() {
    const s = Z().userId,
        e = re().activeRoomId,
        t = V.UNIT,
        r = re().getTotalObjectsForManager(e, t);
    let i = 0;
    for (; i < r;) {
        const n = re().getRoomObjectByIndex(e, i, t);
        if (n) {
            const o = dt().userDataManager.getUserDataByIndex(n.id);
            if (o && o.webID === s)
                return n
        }
        i++
    }
    return null
}
const FE = (s, e, t, r=1) => {
        const i = re().getRoomObjectBoundingRectangle(s, e, t, r);
        return i ? (i.x = Math.round(i.x), i.y = Math.round(i.y), i) : null
    },
    Ov = (s, e, t, r=1) => {
        const i = re().getRoomObjectScreenLocation(s, e, t, r);
        return i ? (i.x = Math.round(i.x), i.y = Math.round(i.y), i) : null
    },
    yK = (s, e, t=1) => {
        const r = re(),
            i = r.activeRoomId;
        r.initializeRoomInstanceRenderingCanvas(i, t, s, e)
    };
function MK(s) {
    let e = !1;
    const t = re().getRoomObject(s.roomId, s.objectId, s.category);
    return t && t.model.getValue(C.FURNITURE_SELECTION_DISABLED) === 1 && (e = !0, Z().isModerator && (e = !1)), e
}
function Al(s, e, t) {
    re().processRoomObjectOperation(s, e, t)
}
function vp(s) {
    re().setActiveRoomId(s)
}
const B = s => Cf().send(s);
class Xr {
    static getAchievementBadgeCode(e)
    {
        if (!e)
            return null;
        let t = e.badgeId;
        return e.finalLevel || (t = Ev().getPreviousLevelBadgeId(t)), t
    }
    static getAchievementCategoryImageUrl(e, t=null, r=!1)
    {
        const i = oe("achievements.images.url");
        let n = r ? "achicon_" : "achcategory_";
        return n += e.code, t !== null && (n += `_${t > 0 ? "active" : "inactive"}`), i.replace("%image%", n)
    }
    static getAchievementCategoryMaxProgress(e)
    {
        if (!e)
            return 0;
        let t = 0;
        for (const r of e.achievements)
            t += r.levelCount;
        return t
    }
    static getAchievementCategoryProgress(e)
    {
        if (!e)
            return 0;
        let t = 0;
        for (const r of e.achievements)
            t += r.finalLevel ? r.level : r.level - 1;
        return t
    }
    static getAchievementCategoryTotalUnseen(e)
    {
        if (!e)
            return 0;
        let t = 0;
        for (const r of e.achievements)
            r.unseen > 0 && t++;
        return t
    }
    static getAchievementHasStarted(e)
    {
        return e ? !!(e.finalLevel || e.level - 1 > 0) : !1
    }
    static getAchievementIsIgnored(e)
    {
        if (!e)
            return !1;
        const t = oe("achievements.unseen.ignored"),
            r = e.badgeId.replace(/[0-9]/g, "");
        return t.indexOf(r) >= 0
    }
    static getAchievementLevel(e)
    {
        return e ? e.finalLevel ? e.level : e.level - 1 : 0
    }
}
class Pp {
    constructor(e)
    {
        this._code = e,
        this._achievements = []
    }
    getProgress()
    {
        return Xr.getAchievementCategoryProgress(this)
    }
    getMaxProgress()
    {
        return Xr.getAchievementCategoryMaxProgress(this)
    }
    get code()
    {
        return this._code
    }
    get achievements()
    {
        return this._achievements
    }
    set achievements(e)
    {
        this._achievements = e
    }
}
class Ci {}
Ci.ACTION_SAVE = "AEA_ACTION_SAVE";
Ci.ACTION_CLEAR = "AEA_ACTION_CLEAR";
Ci.ACTION_RESET = "AEA_ACTION_RESET";
Ci.ACTION_RANDOMIZE = "AEA_ACTION_RANDOMIZE";
class bK {
    constructor(e, t=!1)
    {
        this._partColor = e,
        this._isDisabled = t,
        this._isHC = this._partColor.clubLevel > 0,
        this._isSelected = !1
    }
    dispose()
    {
        this._partColor = null
    }
    get partColor()
    {
        return this._partColor
    }
    get color()
    {
        return nr.int2rgb(this._partColor.rgb)
    }
    get isDisabled()
    {
        return this._isDisabled
    }
    get isHC()
    {
        return this._isHC
    }
    get isSelected()
    {
        return this._isSelected
    }
    set isSelected(e)
    {
        this._isSelected = e,
        this.notify && this.notify()
    }
    get notify()
    {
        return this._notifier
    }
    set notify(e)
    {
        this._notifier = e
    }
}
class xE {
    constructor(e, t, r)
    {
        this._selectedPartIndex = -1,
        this._name = e,
        this._parts = t,
        this._palettes = r,
        this._selectedPartIndex = -1
    }
    static defaultColorId(e, t)
    {
        if (!e || !e.length)
            return -1;
        let r = 0;
        for (; r < e.length;) {
            const i = e[r];
            if (i.partColor && i.partColor.clubLevel <= t)
                return i.partColor.id;
            r++
        }
        return -1
    }
    init()
    {
        for (const e of this._parts)
            e && e.init()
    }
    dispose()
    {
        if (this._parts) {
            for (const e of this._parts)
                e.dispose();
            this._parts = null
        }
        if (this._palettes) {
            for (const e of this._palettes)
                for (const t of e)
                    t.dispose();
            this._palettes = null
        }
        this._selectedPartIndex = -1,
        this._paletteIndexes = null
    }
    selectPartId(e)
    {
        if (!this._parts)
            return;
        let t = 0;
        for (; t < this._parts.length;) {
            if (this._parts[t].id === e) {
                this.selectPartIndex(t);
                return
            }
            t++
        }
    }
    selectColorIds(e)
    {
        if (!e || !this._palettes)
            return;
        this._paletteIndexes = new Array(e.length);
        let t = 0;
        for (; t < this._palettes.length;) {
            const r = this.getPalette(t);
            if (r) {
                let i = 0;
                if (e.length > t)
                    i = e[t];
                else {
                    const o = r[0];
                    o && o.partColor && (i = o.partColor.id)
                }
                let n = 0;
                for (; n < r.length;) {
                    const o = r[n];
                    o.partColor.id === i ? (this._paletteIndexes[t] = n, o.isSelected = !0) : o.isSelected = !1,
                    n++
                }
            }
            t++
        }
        this.updatePartColors()
    }
    selectPartIndex(e)
    {
        if (!this._parts)
            return null;
        if (this._selectedPartIndex >= 0 && this._parts.length > this._selectedPartIndex) {
            const t = this._parts[this._selectedPartIndex];
            t && (t.isSelected = !1)
        }
        if (this._parts.length > e) {
            const t = this._parts[e];
            if (t)
                return t.isSelected = !0, this._selectedPartIndex = e, t
        }
        return null
    }
    selectColorIndex(e, t)
    {
        const r = this.getPalette(t);
        if (!r || r.length <= e)
            return null;
        this.deselectColorIndex(this._paletteIndexes[t], t),
        this._paletteIndexes[t] = e;
        const i = r[e];
        return i ? (i.isSelected = !0, this.updatePartColors(), i) : null
    }
    getCurrentColorIndex(e)
    {
        return this._paletteIndexes[e]
    }
    deselectColorIndex(e, t)
    {
        const r = this.getPalette(t);
        if (!r || r.length <= e)
            return;
        const i = r[e];
        i && (i.isSelected = !1)
    }
    getSelectedColorIds()
    {
        if (!this._paletteIndexes || !this._paletteIndexes.length || !this._palettes || !this._palettes.length)
            return null;
        const e = this._palettes[0];
        if (!e || !e.length)
            return null;
        const t = e[0];
        if (!t || !t.partColor)
            return null;
        const r = t.partColor.id,
            i = [];
        let n = 0;
        for (; n < this._paletteIndexes.length;) {
            const l = this._palettes[n];
            if (!(!l || l.length <= n))
                if (l.length > this._paletteIndexes[n]) {
                    const c = l[this._paletteIndexes[n]];
                    c && c.partColor ? i.push(c.partColor.id) : i.push(r)
                } else
                    i.push(r);
            n++
        }
        const o = this.getCurrentPart();
        return o ? i.slice(0, Math.max(o.maxColorIndex, 1)) : null
    }
    getSelectedColors()
    {
        const e = [];
        let t = 0;
        for (; t < this._paletteIndexes.length;) {
            const r = this.getSelectedColor(t);
            r ? e.push(r.partColor) : e.push(null),
            t++
        }
        return e
    }
    getSelectedColor(e)
    {
        const t = this.getPalette(e);
        return !t || t.length <= this._paletteIndexes[e] ? null : t[this._paletteIndexes[e]]
    }
    getSelectedColorId(e)
    {
        const t = this.getSelectedColor(e);
        return t && t.partColor ? t.partColor.id : 0
    }
    getPalette(e)
    {
        return !this._paletteIndexes || !this._palettes || this._palettes.length <= e ? null : this._palettes[e]
    }
    getCurrentPart()
    {
        return this._parts[this._selectedPartIndex]
    }
    updatePartColors()
    {
        const e = this.getSelectedColors();
        for (const t of this._parts)
            t && (t.partColors = e)
    }
    hasClubSelectionsOverLevel(e)
    {
        let t = !1;
        const r = this.getSelectedColors();
        if (r) {
            let n = 0;
            for (; n < r.length;) {
                const o = r[n];
                o && o.clubLevel > e && (t = !0),
                n++
            }
        }
        const i = this.getCurrentPart();
        if (i && i.partSet) {
            const n = i.partSet;
            n && n.clubLevel > e && (t = !0)
        }
        return t
    }
    hasInvalidSelectedItems(e)
    {
        const t = this.getCurrentPart();
        if (!t)
            return !1;
        const r = t.partSet;
        if (!(!r || !r.isSellable))
            return e.indexOf(r.id) > -1
    }
    stripClubItemsOverLevel(e)
    {
        const t = this.getCurrentPart();
        if (t && t.partSet && t.partSet.clubLevel > e) {
            const i = this.selectPartIndex(0);
            return i && !i.partSet && this.selectPartIndex(1), !0
        }
        return !1
    }
    stripClubColorsOverLevel(e)
    {
        const t = [],
            r = this.getSelectedColors(),
            i = this.getPalette(0);
        let n = !1;
        const o = xE.defaultColorId(i, e);
        if (o === -1)
            return !1;
        let l = 0;
        for (; l < r.length;) {
            const c = r[l];
            c ? c.clubLevel > e ? (t.push(o), n = !0) : t.push(c.id) : (t.push(o), n = !0),
            l++
        }
        return n && this.selectColorIds(t), n
    }
    get name()
    {
        return this._name
    }
    get parts()
    {
        return this._parts
    }
    get selectedPartIndex()
    {
        return this._selectedPartIndex
    }
}
class Is {
    static getGender(e)
    {
        switch (e) {
        case Me.MALE:
        case "m":
        case "M":
            e = Me.MALE;
            break;
        case Me.FEMALE:
        case "f":
        case "F":
            e = Me.FEMALE;
            break;
        default:
            e = Me.MALE
        }
        return e
    }
    static hasFigureSetId(e)
    {
        return this.FIGURE_SET_IDS.indexOf(e) >= 0
    }
    static createCategory(e, t)
    {
        if (!e || !t || !this.CURRENT_FIGURE)
            return null;
        const r = [],
            i = [];
        let n = 0;
        for (; n < this.MAX_PALETTES;)
            i.push([]),
            n++;
        const o = bp(t);
        if (!o)
            return null;
        const l = Mp(o.paletteID);
        if (!l)
            return null;
        let c = this.CURRENT_FIGURE.getColorIds(t);
        c || (c = []);
        const u = new Array(c.length),
            h = this.clubItemsDimmed,
            d = hi();
        for (const S of l.colors.getValues())
            if (S.isSelectable && (h || d >= S.clubLevel)) {
                let A = 0;
                for (; A < this.MAX_PALETTES;) {
                    const N = d < S.clubLevel,
                        b = new bK(S, N);
                    i[A].push(b),
                    A++
                }
                if (t !== Me.FACE) {
                    let N = 0;
                    for (; N < c.length;)
                        S.id === c[N] && (u[N] = S),
                        N++
                }
            }
        let m = [];
        if (h ? m = bs().getMandatoryAvatarPartSetIds(this.CURRENT_FIGURE.gender, 2) : m = bs().getMandatoryAvatarPartSetIds(this.CURRENT_FIGURE.gender, d), m.indexOf(t) === -1) {
            const S = new Qc(null, null, !1);
            S.isClear = !0,
            r.push(S)
        }
        const E = t !== Me.FACE,
            T = o.partSets;
        for (n = T.length - 1; n >= 0;) {
            const S = T.getWithIndex(n);
            let A = !1;
            if ((S.gender === Me.UNISEX || S.gender === this.CURRENT_FIGURE.gender) && (A = !0), S.isSelectable && A && (h || d >= S.clubLevel)) {
                const N = d < S.clubLevel;
                let b = !0;
                S.isSellable && (b = this.hasFigureSetId(S.id)),
                b && r.push(new Qc(S, u, E, N))
            }
            n--
        }
        for (r.sort(this.clubItemsFirst ? this.clubSorter : this.noobSorter), n = 0; n < this.MAX_PALETTES;)
            i[n].sort(this.colorSorter),
            n++;
        return new xE(t, r, i)
    }
    static clubSorter(e, t)
    {
        const r = e.partSet ? e.partSet.clubLevel : 9999999999,
            i = t.partSet ? t.partSet.clubLevel : 9999999999,
            n = e.partSet ? e.partSet.isSellable : !1,
            o = t.partSet ? t.partSet.isSellable : !1;
        return n && !o ? 1 : o && !n || r > i ? -1 : r < i ? 1 : e.partSet.id > t.partSet.id ? -1 : e.partSet.id < t.partSet.id ? 1 : 0
    }
    static colorSorter(e, t)
    {
        const r = e.partColor ? e.partColor.clubLevel : -1,
            i = t.partColor ? t.partColor.clubLevel : -1;
        return r < i ? -1 : r > i ? 1 : e.partColor.index < t.partColor.index ? -1 : e.partColor.index > t.partColor.index ? 1 : 0
    }
    static noobSorter(e, t)
    {
        const r = e.partSet ? e.partSet.clubLevel : -1,
            i = t.partSet ? t.partSet.clubLevel : -1,
            n = e.partSet ? e.partSet.isSellable : !1,
            o = t.partSet ? t.partSet.isSellable : !1;
        return n && !o ? 1 : o && !n || r < i ? -1 : r > i ? 1 : e.partSet.id < t.partSet.id ? -1 : e.partSet.id > t.partSet.id ? 1 : 0
    }
    static avatarSetFirstSelectableColor(e)
    {
        const t = bp(e);
        if (!t)
            return -1;
        const r = Mp(t.paletteID);
        if (!r)
            return -1;
        for (const i of r.colors.getValues())
            if (!(!i.isSelectable || hi() < i.clubLevel))
                return i.id;
        return -1
    }
    static get clubItemsFirst()
    {
        return oe("avatareditor.show.clubitems.first", !0)
    }
    static get clubItemsDimmed()
    {
        return oe("avatareditor.show.clubitems.dimmed", !0)
    }
}
Is.MAX_PALETTES = 2;
Is.CURRENT_FIGURE = null;
Is.FIGURE_SET_IDS = [];
Is.BOUND_FURNITURE_NAMES = [];
const tt = class {
    constructor()
    {
        this._gender = "M",
        this._direction = tt.DEFAULT_DIRECTION,
        this._avatarEffectType = -1,
        this._notifier = null
    }
    loadAvatarData(s, e)
    {
        this._data = new Map,
        this._colors = new Map,
        this._gender = e,
        this.parseFigureString(s),
        this.updateView()
    }
    parseFigureString(s)
    {
        if (!s)
            return;
        const e = s.split(".");
        if (!(!e || !e.length))
            for (const t of e) {
                const r = t.split("-");
                if (!r.length)
                    continue;
                const i = r[0],
                    n = parseInt(r[1]),
                    o = [];
                let l = 2;
                for (; l < r.length;)
                    o.push(parseInt(r[l])),
                    l++;
                o.length || o.push(0),
                this.savePartSetId(i, n, !1),
                this.savePartSetColourId(i, o, !1)
            }
    }
    getPartSetId(s)
    {
        const e = this._data.get(s);
        return e !== void 0 ? e : -1
    }
    getColorIds(s)
    {
        const e = this._colors.get(s);
        return e !== void 0 ? e : [Is.avatarSetFirstSelectableColor(s)]
    }
    getFigureString()
    {
        let s = "";
        const e = [];
        for (const [r, i] of this._data.entries()) {
            const n = this._colors.get(r);
            let o = r + "-" + i;
            if (n && n.length) {
                let l = 0;
                for (; l < n.length;)
                    o = o + ("-" + n[l]),
                    l++
            }
            e.push(o)
        }
        let t = 0;
        for (; t < e.length;)
            s = s + e[t],
            t < e.length - 1 && (s = s + "."),
            t++;
        return s
    }
    savePartData(s, e, t, r=!1)
    {
        this.savePartSetId(s, e, r),
        this.savePartSetColourId(s, t, r)
    }
    savePartSetId(s, e, t=!0)
    {
        switch (s) {
        case tt.FACE:
        case tt.HAIR:
        case tt.HAT:
        case tt.HEAD_ACCESSORIES:
        case tt.EYE_ACCESSORIES:
        case tt.FACE_ACCESSORIES:
        case tt.SHIRT:
        case tt.JACKET:
        case tt.CHEST_ACCESSORIES:
        case tt.CHEST_PRINTS:
        case tt.TROUSERS:
        case tt.SHOES:
        case tt.TROUSER_ACCESSORIES:
            e >= 0 ? this._data.set(s, e) : this._data.delete(s);
            break
        }
        t && this.updateView()
    }
    savePartSetColourId(s, e, t=!0)
    {
        switch (s) {
        case tt.FACE:
        case tt.HAIR:
        case tt.HAT:
        case tt.HEAD_ACCESSORIES:
        case tt.EYE_ACCESSORIES:
        case tt.FACE_ACCESSORIES:
        case tt.SHIRT:
        case tt.JACKET:
        case tt.CHEST_ACCESSORIES:
        case tt.CHEST_PRINTS:
        case tt.TROUSERS:
        case tt.SHOES:
        case tt.TROUSER_ACCESSORIES:
            this._colors.set(s, e);
            break
        }
        t && this.updateView()
    }
    getFigureStringWithFace(s, e=!0)
    {
        let t = "";
        const r = [tt.FACE],
            i = [];
        for (const o of r) {
            const l = this._colors.get(o);
            if (!l)
                continue;
            let c = this._data.get(o);
            o === tt.FACE && e && (c = s);
            let u = o + "-" + c;
            if (c >= 0) {
                let h = 0;
                for (; h < l.length;)
                    u = u + ("-" + l[h]),
                    h++
            }
            i.push(u)
        }
        let n = 0;
        for (; n < i.length;)
            t = t + i[n],
            n < i.length - 1 && (t = t + "."),
            n++;
        return t
    }
    updateView()
    {
        this.notify && this.notify()
    }
    get gender()
    {
        return this._gender
    }
    get direction()
    {
        return this._direction
    }
    set direction(s)
    {
        this._direction = s,
        this.updateView()
    }
    set avatarEffectType(s)
    {
        this._avatarEffectType = s
    }
    get avatarEffectType()
    {
        return this._avatarEffectType
    }
    get notify()
    {
        return this._notifier
    }
    set notify(s)
    {
        this._notifier = s
    }
}
;
let Me = tt;
Me.DEFAULT_DIRECTION = 4;
Me.MALE = "M";
Me.FEMALE = "F";
Me.UNISEX = "U";
Me.SCALE = "h";
Me.STD = "std";
Me.DEFAULT_FRAME = "0";
Me.FACE = "hd";
Me.HAIR = "hr";
Me.HAT = "ha";
Me.HEAD_ACCESSORIES = "he";
Me.EYE_ACCESSORIES = "ea";
Me.FACE_ACCESSORIES = "fa";
Me.JACKET = "cc";
Me.SHIRT = "ch";
Me.CHEST_ACCESSORIES = "ca";
Me.CHEST_PRINTS = "cp";
Me.TROUSERS = "lg";
Me.SHOES = "sh";
Me.TROUSER_ACCESSORIES = "wa";
Me.SET_TYPES = [tt.FACE, tt.HAIR, tt.HAT, tt.HEAD_ACCESSORIES, tt.EYE_ACCESSORIES, tt.FACE_ACCESSORIES, tt.JACKET, tt.SHIRT, tt.CHEST_ACCESSORIES, tt.CHEST_PRINTS, tt.TROUSERS, tt.SHOES, tt.TROUSERS];
const ml = class {
    constructor(s, e, t=!0, r=!1)
    {
        if (this._renderManager = bs(), this._partSet = s, this._partColors = e, this._useColors = t, this._isDisabled = r, this._thumbContainer = null, this._imageUrl = null, this._maxColorIndex = 0, this._isValidFigure = !1, this._isHC = !1, this._isSellable = !1, this._isClear = !1, this._isSelected = !1, this._disposed = !1, this._isInitalized = !1, s) {
            const i = s.parts;
            for (const n of i)
                this._maxColorIndex = Math.max(this._maxColorIndex, n.colorLayerIndex)
        }
    }
    init()
    {
        this._isInitalized || (this._isInitalized = !0, this.update())
    }
    dispose()
    {
        this._disposed || (this._renderManager = null, this._partSet = null, this._partColors = null, this._imageUrl = null, this._disposed = !0, this._isInitalized = !1, this._thumbContainer && (this._thumbContainer.destroy(), this._thumbContainer = null))
    }
    update()
    {
        this.updateThumbVisualization()
    }
    analyzeFigure()
    {
        if (!this._renderManager || !this._partSet || !this._partSet.parts || !this._partSet.parts.length)
            return !1;
        const s = this._renderManager.createFigureContainer(this.partSet.type + "-" + this.partSet.id);
        return this._renderManager.isFigureContainerReady(s) ? (this._isValidFigure = !0, !0) : (this._renderManager.downloadAvatarFigure(s, this), !1)
    }
    renderThumb()
    {
        if (!this._renderManager || !this._partSet || !this._isValidFigure && !this.analyzeFigure())
            return null;
        const s = this._partSet.parts.concat().sort(this.sortByDrawOrder),
            e = new Mi;
        for (const t of s) {
            if (!t)
                continue;
            let r = null,
                i = 0,
                n = !1;
            for (; !n && i < ml.THUMB_DIRECTIONS.length;) {
                const h = Me.SCALE + "_" + Me.STD + "_" + t.type + "_" + t.id + "_" + ml.THUMB_DIRECTIONS[i] + "_" + Me.DEFAULT_FRAME;
                r = this._renderManager.getAssetByName(h),
                r && r.texture ? n = !0 : i++
            }
            if (!n)
                continue;
            const o = r.offsetX,
                l = r.offsetY;
            let c = null;
            if (this._useColors && t.colorLayerIndex > 0) {
                const h = this._partColors[t.colorLayerIndex - 1];
                h && (c = h)
            }
            const u = new qt(r.texture);
            u.position.set(o, l),
            c && (u.tint = c.rgb),
            e.addChild(u)
        }
        return e
    }
    updateThumbVisualization()
    {
        if (!this._isInitalized)
            return;
        let s = this._thumbContainer;
        s || (s = this.renderThumb()),
        s && (this._partSet ? (this._isHC = this._partSet.clubLevel > 0, this._isSellable = this._partSet.isSellable) : (this._isHC = !1, this._isSellable = !1), this._isDisabled && this.setAlpha(s, .2), this._imageUrl = pt.generateImageUrl(s), this.notify && this.notify())
    }
    setAlpha(s, e)
    {
        return s.filters = [ml.ALPHA_FILTER], s
    }
    sortByDrawOrder(s, e)
    {
        const t = ml.DRAW_ORDER.indexOf(s.type),
            r = ml.DRAW_ORDER.indexOf(e.type);
        return t < r ? -1 : t > r ? 1 : s.index < e.index ? -1 : s.index > e.index ? 1 : 0
    }
    resetFigure(s)
    {
        this.analyzeFigure() && this.update()
    }
    get disposed()
    {
        return this._disposed
    }
    get id()
    {
        return this._partSet ? this._partSet.id : -1
    }
    get partSet()
    {
        return this._partSet
    }
    set partColors(s)
    {
        this._partColors = s,
        this.update()
    }
    get isDisabled()
    {
        return this._isDisabled
    }
    set thumbContainer(s)
    {
        this._thumbContainer = s,
        this.update()
    }
    get imageUrl()
    {
        return this._imageUrl
    }
    get maxColorIndex()
    {
        return this._maxColorIndex
    }
    get isHC()
    {
        return this._isHC
    }
    get isSellable()
    {
        return this._isSellable
    }
    get isClear()
    {
        return this._isClear
    }
    set isClear(s)
    {
        this._isClear = s
    }
    get isSelected()
    {
        return this._isSelected
    }
    set isSelected(s)
    {
        this._isSelected = s,
        this.notify && this.notify()
    }
    get notify()
    {
        return this._notifier
    }
    set notify(s)
    {
        this._notifier = s
    }
}
;
let Qc = ml;
Qc.ALPHA_FILTER = new wL(.2);
Qc.THUMB_DIRECTIONS = [2, 6, 0, 4, 3, 1];
Qc.DRAW_ORDER = [Te.LEFT_HAND_ITEM, Te.LEFT_HAND, Te.LEFT_SLEEVE, Te.LEFT_COAT_SLEEVE, Te.BODY, Te.SHOES, Te.LEGS, Te.CHEST, Te.CHEST_ACCESSORY, Te.COAT_CHEST, Te.CHEST_PRINT, Te.WAIST_ACCESSORY, Te.RIGHT_HAND, Te.RIGHT_SLEEVE, Te.RIGHT_COAT_SLEEVE, Te.HEAD, Te.FACE, Te.EYES, Te.HAIR, Te.HAIR_BIG, Te.FACE_ACCESSORY, Te.EYE_ACCESSORY, Te.HEAD_ACCESSORY, Te.HEAD_ACCESSORY_EXTRA, Te.RIGHT_HAND_ITEM];
class e_ {
    constructor()
    {
        this._isInitalized = !1,
        this._maxPaletteCount = 0
    }
    dispose()
    {
        this._categories = null,
        this._disposed = !0
    }
    get disposed()
    {
        return this._disposed
    }
    init()
    {
        this._categories || (this._categories = new Map)
    }
    reset()
    {
        if (this._isInitalized = !1, this._categories)
            for (const e of this._categories.values())
                e && e.dispose();
        this._categories = new Map
    }
    addCategory(e)
    {
        let t = this._categories.get(e);
        t || (t = Is.createCategory(this, e), t && (this._categories.set(e, t), this.updateSelectionsFromFigure(e)))
    }
    updateSelectionsFromFigure(e)
    {
        const t = this._categories.get(e);
        if (!t)
            return;
        const r = Is.CURRENT_FIGURE.getPartSetId(e);
        let i = Is.CURRENT_FIGURE.getColorIds(e);
        i || (i = []),
        t.selectPartId(r),
        t.selectColorIds(i)
    }
    hasClubSelectionsOverLevel(e)
    {
        if (!this._categories)
            return !1;
        for (const t of this._categories.values())
            if (t && t.hasClubSelectionsOverLevel(e))
                return !0;
        return !1
    }
    hasInvalidSelectedItems(e)
    {
        if (!this._categories)
            return !1;
        for (const t of this._categories.values())
            if (t.hasInvalidSelectedItems(e))
                return !0;
        return !1
    }
    stripClubItemsOverLevel(e)
    {
        if (!this._categories)
            return !1;
        let t = !1;
        for (const [r, i] of this._categories.entries()) {
            let n = !1;
            if (i.stripClubItemsOverLevel(e) && (n = !0), i.stripClubColorsOverLevel(e) && (n = !0), n) {
                const o = i.getCurrentPart();
                o && Is.CURRENT_FIGURE && Is.CURRENT_FIGURE.savePartData(r, o.id, i.getSelectedColorIds(), !0),
                t = !0
            }
        }
        return t
    }
    stripInvalidSellableItems()
    {
        if (!this._categories)
            return !1;
        let e = !1;
        for (const [t, r] of this._categories.entries())
            ;
        return e
    }
    selectPart(e, t)
    {
        const r = this._categories.get(e);
        if (!r)
            return;
        const i = r.selectedPartIndex;
        r.selectPartIndex(t);
        const n = r.getCurrentPart();
        if (n) {
            if (n.isDisabled) {
                r.selectPartIndex(i);
                return
            }
            this._maxPaletteCount = n.maxColorIndex,
            Is.CURRENT_FIGURE.savePartData(e, n.id, r.getSelectedColorIds(), !0)
        }
    }
    selectColor(e, t, r)
    {
        const i = this._categories.get(e);
        if (!i)
            return;
        const n = i.getCurrentColorIndex(r);
        if (i.selectColorIndex(t, r), i.getSelectedColor(r).isDisabled) {
            i.selectColorIndex(n, r);
            return
        }
        Is.CURRENT_FIGURE.savePartSetColourId(e, i.getSelectedColorIds(), !0)
    }
    getCategoryData(e)
    {
        return this._isInitalized || this.init(), this._categories ? this._categories.get(e) : null
    }
    get categories()
    {
        return this._categories
    }
    get canSetGender()
    {
        return !1
    }
    get maxPaletteCount()
    {
        return this._maxPaletteCount || 1
    }
    set maxPaletteCount(e)
    {
        this._maxPaletteCount = e
    }
    get name()
    {
        return null
    }
}
class DK extends e_ {
    constructor()
    {
        super(...arguments),
        this._imageCallBackHandled = !1
    }
    init()
    {
        super.init(),
        this.addCategory(Me.FACE),
        this._isInitalized = !0
    }
    selectColor(e, t, r)
    {
        super.selectColor(e, t, r),
        this.updateSelectionsFromFigure(Me.FACE)
    }
    updateSelectionsFromFigure(e)
    {
        if (!this._categories || !Is.CURRENT_FIGURE)
            return;
        const t = this._categories.get(e);
        if (!t)
            return;
        const r = Is.CURRENT_FIGURE.getPartSetId(e);
        let i = Is.CURRENT_FIGURE.getColorIds(e);
        i || (i = []),
        t.selectPartId(r),
        t.selectColorIds(i);
        for (const n of t.parts) {
            const o = l => {
                const c = Is.CURRENT_FIGURE.getFigureStringWithFace(n.id),
                    u = bs().createAvatarImage(c, li.LARGE, null, {
                        resetFigure: o,
                        dispose: null,
                        disposed: !1
                    }),
                    h = u.getImageAsSprite(Ys.HEAD);
                h && (h.y = 10, n.thumbContainer = h, setTimeout(() => u.dispose(), 0))
            };
            o()
        }
    }
    get canSetGender()
    {
        return !0
    }
    get name()
    {
        return Er.GENERIC
    }
}
const Ir = s => {
    if (s == null || typeof s != "object")
        return s;
    const e = new s.constructor;
    for (const t in s)
        s.hasOwnProperty(t) && (e[t] = s[t]);
    return e
};
class wr {
    static makeColorHex(e)
    {
        return "#" + e
    }
    static makeColorNumberHex(e)
    {
        return "#" + e.toString(16).padStart(6, "0")
    }
    static convertFromHex(e)
    {
        return parseInt(e.replace("#", ""), 16)
    }
    static uintHexColor(e)
    {
        const t = e >>> 0;
        return wr.makeColorHex(t.toString(16).substring(2))
    }
    static int_to_8BitVals(e)
    {
        const t = e >> 24 & 255,
            r = e >> 16 & 255,
            i = e >> 8 & 255,
            n = e & 255;
        return [t, r, i, n]
    }
    static eight_bitVals_to_int(e, t, r, i)
    {
        return (e << 24) + (t << 16) + (r << 8) + (i | 0)
    }
    static int2rgb(e)
    {
        e >>>= 0;
        const t = e & 255,
            r = (e & 65280) >>> 8;
        return "rgba(" + [(e & 16711680) >>> 16, r, t, 1].join(",") + ")"
    }
}
const uo = s => {
        let e = Math.floor(s / 86400),
            t = Math.floor(s % 86400 / 3600),
            r = Math.floor(s % 86400 % 3600 / 60),
            i = s % 86400 % 3600 % 60;
        return e.toString().padStart(2, "0") + ":" + t.toString().padStart(2, "0") + ":" + r.toString().padStart(2, "0") + ":" + i.toString().padStart(2, "0")
    },
    id = s => {
        try {
            return JSON.parse(window.localStorage.getItem(s)) ?? null
        } catch {
            return null
        }
    },
    t_ = s => {
        let e = qe().localization.getBadgeDesc(s);
        return (!e || !e.length) && (e = `badge_desc_${s}`), e
    },
    dc = s => {
        let e = qe().localization.getBadgeName(s);
        return (!e || !e.length) && (e = `badge_name_${s}`), e
    };
function nd(s) {
    return !s || isNaN(s) ? "0" : s.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ")
}
function vK(s) {
    if (!s || isNaN(s))
        return "0";
    let e = Math.abs(s);
    const t = Math.pow(10, 1),
        r = s < 0;
    let i = "";
    const n = [{
        key: "Q",
        value: Math.pow(10, 15)
    }, {
        key: "T",
        value: Math.pow(10, 12)
    }, {
        key: "B",
        value: Math.pow(10, 9)
    }, {
        key: "M",
        value: Math.pow(10, 6)
    }, {
        key: "K",
        value: 1e3
    }];
    for (const o of n) {
        let l = e / o.value;
        if (l = Math.round(l * t) / t, l >= 1) {
            e = l,
            i = o.key;
            break
        }
    }
    return (r ? "-" : "") + e + i
}
function f(s, e=null, t=null) {
    return qe().getLocalizationWithParameters(s, e, t)
}
class Nu {}
Nu.CATALOG_PLACE_MULTIPLE_OBJECTS = "catalogPlaceMultipleObjects";
Nu.CATALOG_SKIP_PURCHASE_CONFIRMATION = "catalogSkipPurchaseConfirmation";
const Sv = (s, e) => s.dispatchEvent(e),
    yf = s => Sv(qe().events, s),
    yn = new ti,
    Ms = s => Sv(yn, s);
let Cv = !1;
const Mn = s => {
        Cv && yf(new Ml(Ml.PLAY_SOUND, s))
    },
    Lp = [le.MOUSE_CLICK],
    PK = () => {
        const s = () => Lp.forEach(t => window.removeEventListener(t, e)),
            e = t => (Cv = !0) && s();
        Lp.forEach(t => window.addEventListener(t, e))
    };
PK();
class _e {}
_e.DEFAULT = 1;
_e.WALL_PAPER = 2;
_e.FLOOR = 3;
_e.LANDSCAPE = 4;
_e.POST_IT = 5;
_e.POSTER = 6;
_e.SOUND_SET = 7;
_e.TRAX_SONG = 8;
_e.PRESENT = 9;
_e.ECOTRON_BOX = 10;
_e.TROPHY = 11;
_e.CREDIT_FURNI = 12;
_e.PET_SHAMPOO = 13;
_e.PET_CUSTOM_PART = 14;
_e.PET_CUSTOM_PART_SHAMPOO = 15;
_e.PET_SADDLE = 16;
_e.GUILD_FURNI = 17;
_e.GAME_FURNI = 18;
_e.MONSTERPLANT_SEED = 19;
_e.MONSTERPLANT_REVIVAL = 20;
_e.MONSTERPLANT_REBREED = 21;
_e.MONSTERPLANT_FERTILIZE = 22;
_e.FIGURE_PURCHASABLE_SET = 23;
class Jc {
    constructor(e)
    {
        e && (this._locked = !1, this._id = e.itemId, this._type = e.spriteId, this._ref = e.ref, this._category = e.category, this._groupable = e.isGroupable && !e.rentable, this._tradeable = e.tradable, this._recyclable = e.isRecycleable, this._sellable = e.sellable, this._stuffData = e.stuffData, this._extra = e.extra, this._secondsToExpiration = e.secondsToExpiration, this._expirationTimeStamp = e.expirationTimeStamp, this._hasRentPeriodStarted = e.hasRentPeriodStarted, this._creationDay = e.creationDay, this._creationMonth = e.creationMonth, this._creationYear = e.creationYear, this._slotId = e.slotId, this._songId = e.songId, this._flatId = e.flatId, this._isRented = e.rentable, this._isWallItem = e.isWallItem)
    }
    get rentable()
    {
        return this._isRented
    }
    get id()
    {
        return this._id
    }
    get ref()
    {
        return this._ref
    }
    get category()
    {
        return this._category
    }
    get type()
    {
        return this._type
    }
    get stuffData()
    {
        return this._stuffData
    }
    set stuffData(e)
    {
        this._stuffData = e
    }
    get extra()
    {
        return this._extra
    }
    get recyclable()
    {
        return this._recyclable
    }
    get isTradable()
    {
        return this._tradeable
    }
    get isGroupable()
    {
        return this._groupable
    }
    get sellable()
    {
        return this._sellable
    }
    get secondsToExpiration()
    {
        if (this._secondsToExpiration === -1)
            return -1;
        let e = -1;
        return this._hasRentPeriodStarted ? (e = this._secondsToExpiration - (Pe() - this._expirationTimeStamp) / 1e3, e < 0 && (e = 0)) : e = this._secondsToExpiration, e
    }
    get creationDay()
    {
        return this._creationDay
    }
    get creationMonth()
    {
        return this._creationMonth
    }
    get creationYear()
    {
        return this._creationYear
    }
    get slotId()
    {
        return this._slotId
    }
    get songId()
    {
        return this._songId
    }
    get locked()
    {
        return this._locked
    }
    set locked(e)
    {
        this._locked = e
    }
    get flatId()
    {
        return this._flatId
    }
    get isWallItem()
    {
        return this._isWallItem
    }
    get hasRentPeriodStarted()
    {
        return this._hasRentPeriodStarted
    }
    get expirationTimeStamp()
    {
        return this._expirationTimeStamp
    }
    update(e)
    {
        this._type = e.spriteId,
        this._ref = e.ref,
        this._category = e.category,
        this._groupable = e.isGroupable && !e.rentable,
        this._tradeable = e.tradable,
        this._recyclable = e.isRecycleable,
        this._sellable = e.sellable,
        this._stuffData = e.stuffData,
        this._extra = e.extra,
        this._secondsToExpiration = e.secondsToExpiration,
        this._expirationTimeStamp = e.expirationTimeStamp,
        this._hasRentPeriodStarted = e.hasRentPeriodStarted,
        this._creationDay = e.creationDay,
        this._creationMonth = e.creationMonth,
        this._creationYear = e.creationYear,
        this._slotId = e.slotId,
        this._songId = e.songId,
        this._flatId = e.flatId,
        this._isRented = e.rentable,
        this._isWallItem = e.isWallItem
    }
    clone()
    {
        const e = new Jc(null);
        return e._expirationTimeStamp = this._expirationTimeStamp, e._isWallItem = this._isWallItem, e._songId = this._songId, e._locked = this._locked, e._id = this._id, e._ref = this._ref, e._category = this._category, e._type = this._type, e._stuffData = this._stuffData, e._extra = this._extra, e._recyclable = this._recyclable, e._tradeable = this._tradeable, e._groupable = this._groupable, e._sellable = this._sellable, e._secondsToExpiration = this._secondsToExpiration, e._hasRentPeriodStarted = this._hasRentPeriodStarted, e._creationDay = this._creationDay, e._creationMonth = this._creationMonth, e._creationYear = this._creationYear, e._slotId = this._slotId, e._isRented = this._isRented, e._flatId = this._flatId, e
    }
}
class GE {
    constructor(e=-1, t=-1, r=null, i=null, n=-1)
    {
        this._type = e,
        this._category = t,
        this._roomEngine = r,
        this._stuffData = i,
        this._extra = n,
        this._isWallItem = !1,
        this._iconUrl = null,
        this._name = null,
        this._description = null,
        this._locked = !1,
        this._selected = !1,
        this._hasUnseenItems = !1,
        this._items = []
    }
    clone()
    {
        const e = new GE;
        return e._type = this._type, e._category = this._category, e._roomEngine = this._roomEngine, e._stuffData = this._stuffData, e._extra = this._extra, e._isWallItem = this._isWallItem, e._iconUrl = this._iconUrl, e._name = this._name, e._description = this._description, e._locked = this._locked, e._selected = this._selected, e._hasUnseenItems = this._hasUnseenItems, e._items = this._items, e
    }
    prepareGroup()
    {
        this.setIcon(),
        this.setName(),
        this.setDescription()
    }
    dispose() {}
    getItemByIndex(e)
    {
        return this._items[e]
    }
    getItemById(e)
    {
        for (const t of this._items)
            if (t.id === e)
                return t;
        return null
    }
    getTradeItems(e)
    {
        const t = [],
            r = this.getLastItem();
        if (!r)
            return t;
        let i = 0,
            n = 0;
        for (; n < this._items.length && !(i >= e);) {
            const o = this.getItemByIndex(n);
            !o.locked && o.isTradable && o.type === r.type && (t.push(o), i++),
            n++
        }
        return t
    }
    push(e)
    {
        const t = [...this._items];
        let r = 0;
        for (; r < t.length;) {
            let i = t[r];
            if (i.id === e.id) {
                i = i.clone(),
                i.locked = !1,
                t.splice(r, 1),
                t.push(i),
                this._items = t;
                return
            }
            r++
        }
        t.push(e),
        this._items = t,
        this._items.length === 1 && this.prepareGroup()
    }
    pop()
    {
        const e = [...this._items];
        let t = null;
        if (e.length > 0) {
            const r = e.length - 1;
            t = e[r],
            e.splice(r, 1)
        }
        return this._items = e, t
    }
    remove(e)
    {
        const t = [...this._items];
        let r = 0;
        for (; r < t.length;) {
            let i = t[r];
            if (i.id === e)
                return t.splice(r, 1), this._items = t, i;
            r++
        }
        return null
    }
    getTotalCount()
    {
        if (this._category === _e.POST_IT) {
            let e = 0,
                t = 0;
            for (; t < this._items.length;) {
                const r = this.getItemByIndex(t);
                e = e + parseInt(r.stuffData.getLegacyString()),
                t++
            }
            return e
        }
        return this._items.length
    }
    getUnlockedCount()
    {
        if (this.category === _e.POST_IT)
            return this.getTotalCount();
        let e = 0,
            t = 0;
        for (; t < this._items.length;)
            this.getItemByIndex(t).locked || e++,
            t++;
        return e
    }
    getLastItem()
    {
        return this._items.length ? this.getItemByIndex(this._items.length - 1) : null
    }
    unlockAllItems()
    {
        const e = [...this._items];
        let t = 0;
        for (; t < e.length;) {
            const r = e[t];
            if (r.locked) {
                const i = r.clone();
                i.locked = !1,
                e[t] = i
            }
            t++
        }
        this._items = e
    }
    lockItemIds(e)
    {
        const t = [...this._items];
        let r = 0,
            i = !1;
        for (; r < t.length;) {
            const n = t[r],
                o = e.indexOf(n.ref) >= 0;
            if (n.locked !== o) {
                i = !0;
                const l = n.clone();
                l.locked = o,
                t[r] = l
            }
            r++
        }
        return this._items = t, i
    }
    setName()
    {
        const e = this.getLastItem();
        if (!e) {
            this._name = "";
            return
        }
        let t = "";
        switch (this._category) {
        case _e.POSTER:
            t = "poster_" + e.stuffData.getLegacyString() + "_name";
            break;
        case _e.TRAX_SONG:
            this._name = "SONG_NAME";
            return;
        default:
            this.isWallItem ? t = "wallItem.name." + e.type : t = "roomItem.name." + e.type
        }
        this._name = f(t)
    }
    setDescription()
    {
        this._description = ""
    }
    setIcon()
    {
        if (this._iconUrl)
            return;
        let e = null;
        this.isWallItem ? e = this._roomEngine.getFurnitureWallIconUrl(this._type, this._stuffData.getLegacyString()) : e = this._roomEngine.getFurnitureFloorIconUrl(this._type),
        e && (this._iconUrl = e)
    }
    get type()
    {
        return this._type
    }
    get category()
    {
        return this._category
    }
    get stuffData()
    {
        return this._stuffData
    }
    get extra()
    {
        return this._extra
    }
    get iconUrl()
    {
        return this._iconUrl
    }
    get name()
    {
        return this._name
    }
    get description()
    {
        return this._description
    }
    get hasUnseenItems()
    {
        return this._hasUnseenItems
    }
    set hasUnseenItems(e)
    {
        this._hasUnseenItems = e
    }
    get locked()
    {
        return this._locked
    }
    set locked(e)
    {
        this._locked = e
    }
    get selected()
    {
        return this._selected
    }
    set selected(e)
    {
        this._selected = e
    }
    get isWallItem()
    {
        const e = this.getItemByIndex(0);
        return e ? e.isWallItem : !1
    }
    get isGroupable()
    {
        const e = this.getItemByIndex(0);
        return e ? e.isGroupable : !1
    }
    get isSellable()
    {
        const e = this.getItemByIndex(0);
        return e ? e.sellable : !1
    }
    get items()
    {
        return this._items
    }
    set items(e)
    {
        this._items = e
    }
}
const BE = (s, e, t, r=NaN) => new GE(s, e, re(), t, r),
    LK = (s, e, t) => {
        const r = [];
        for (const n of s)
            n.type === e.type && r.push(n);
        for (const n of r)
            if (n.getItemById(e.id))
                return n;
        const i = BE(e.type, e.category, e.stuffData, e.extra);
        return i.push(e), t ? (i.hasUnseenItems = !0, s.unshift(i)) : s.push(i), i
    },
    UK = (s, e, t) => {
        let r = null;
        for (const i of s)
            if (i.type === e.type && i.isWallItem === e.isWallItem && i.isGroupable)
                if (e.category === _e.POSTER) {
                    if (i.stuffData.getLegacyString() === e.stuffData.getLegacyString()) {
                        r = i;
                        break
                    }
                } else if (e.category === _e.GUILD_FURNI) {
                    if (e.stuffData.compare(i.stuffData)) {
                        r = i;
                        break
                    }
                } else {
                    r = i;
                    break
                }
        if (r) {
            if (r.push(e), t) {
                r.hasUnseenItems = !0;
                const i = s.indexOf(r);
                i >= 0 && s.splice(i, 1),
                s.unshift(r)
            }
            return r
        }
        return r = BE(e.type, e.category, e.stuffData, e.extra), r.push(e), t ? (r.hasUnseenItems = !0, s.unshift(r)) : s.push(r), r
    },
    Up = (s, e, t) => {
        e.isGroupable ? UK(s, e, t) : LK(s, e, t)
    },
    wK = (s, e, t, r) => {
        if (e === 1)
            return s;
        r[t] = s;
        for (const n of r)
            if (!n)
                return null;
        const i = new Map;
        for (const n of r) {
            for (const [o, l] of n)
                i.set(o, l);
            n.clear()
        }
        return r = null, i
    },
    FK = s => {
        const e = [];
        for (const t of s) {
            let r = t.getTotalCount();
            t.category === _e.POST_IT && (r = 1);
            let i = 0;
            for (; i < r;)
                e.push(t.getItemByIndex(i).id),
                i++
        }
        return e
    };
let Av = !1,
    Nv = -1;
const xK = () => Av,
    yu = s => Av = s,
    Wl = () => Nv,
    s_ = s => Nv = s,
    Zc = () => {
        Wl() !== -1 && (re().cancelRoomObjectPlacement(), s_(-1), yu(!1))
    },
    Mf = (s, e=!1) => {
        const t = s.petData;
        if (!t)
            return !1;
        const r = Ko().getSession(1);
        return !r || !r.isRoomOwner && !r.allowPets ? !1 : (ge("inventory/hide"), re().processRoomObjectPlacement(za.INVENTORY, -t.id, V.UNIT, yt.PET, t.figureData.figuredata) && (s_(t.id), yu(!0)), !0)
    },
    Yl = (s, e=!1) => {
        if (!s || !s.getUnlockedCount())
            return !1;
        const t = s.getLastItem();
        if (!t)
            return !1;
        if (t.category === _e.FLOOR || t.category === _e.WALL_PAPER || t.category === _e.LANDSCAPE)
            return e || B(new Uc(t.id)), !1;
        {
            ge("inventory/hide");
            let r = 0,
                i = !1;
            t.isWallItem ? r = V.WALL : r = V.FLOOR,
            t.category === _e.POSTER ? i = re().processRoomObjectPlacement(za.INVENTORY, t.id, r, t.type, t.stuffData.getLegacyString()) : i = re().processRoomObjectPlacement(za.INVENTORY, t.id, r, t.type, t.extra.toString(), t.stuffData),
            i && (s_(t.ref), yu(!0))
        }
        return !0
    },
    bf = (s, e=!1) => {
        const t = s.botData;
        if (!t)
            return !1;
        const r = Ko().getSession(1);
        return !r || !r.isRoomOwner ? !1 : (ge("inventory/hide"), re().processRoomObjectPlacement(za.INVENTORY, -t.id, V.UNIT, yt.RENTABLE_BOT, t.figure) && (s_(t.id), yu(!0)), !0)
    };
class Ht {}
Ht.FURNI = 1;
Ht.RENTABLE = 2;
Ht.PET = 3;
Ht.BADGE = 4;
Ht.BOT = 5;
Ht.GAMES = 6;
const GK = s => s.map(e => e.petData.id),
    yv = (s, e, t=!0) => {
        const r = {
            petData: s
        };
        return t ? e.unshift(r) : e.push(r), r
    },
    Mv = (s, e) => {
        let t = 0;
        for (; t < e.length;) {
            const r = e[t];
            if (r && r.petData.id === s)
                return Wl() === r.petData.id && (Zc(), ge("inventory/open")), e.splice(t, 1), r;
            t++
        }
        return null
    },
    BK = (s, e, t) => {
        const r = GK(s),
            i = [],
            n = [];
        for (const o of e.keys())
            r.indexOf(o) === -1 && i.push(o);
        for (const o of r)
            !e.get(o) && n.push(o);
        r.length;
        for (const o of n)
            Mv(o, s);
        for (const o of i) {
            const l = e.get(o);
            l && yv(l, s, t(Ht.PET, l.id))
        }
        return s
    },
    kK = (s, e, t, r) => {
        if (e === 1)
            return s;
        r[t] = s;
        for (const n of r)
            if (!n)
                return null;
        const i = new Map;
        for (const n of r) {
            for (const [o, l] of n)
                i.set(o, l);
            n.clear()
        }
        return r = null, i
    };
class es {}
es.TRADING_STATE_READY = 0;
es.TRADING_STATE_RUNNING = 1;
es.TRADING_STATE_COUNTDOWN = 2;
es.TRADING_STATE_CONFIRMING = 3;
es.TRADING_STATE_CONFIRMED = 4;
es.TRADING_STATE_COMPLETED = 5;
es.TRADING_STATE_CANCELLED = 6;
class wp {
    constructor(e=-1, t="", r=new as, i=0, n=0, o=!1, l=!1)
    {
        this.userId = e,
        this.userName = t,
        this.userItems = r,
        this.itemCount = i,
        this.creditsCount = n,
        this.accepts = o,
        this.canTrade = l
    }
}
class ys {}
ys.ALERT_SCAM = 0;
ys.HOTEL_TRADING_DISABLED = 1;
ys.YOU_NOT_ALLOWED = 2;
ys.THEY_NOT_ALLOWED = 4;
ys.ROOM_DISABLED = 6;
ys.YOU_OPEN = 7;
ys.THEY_OPEN = 8;
ys.ERROR_WHILE_COMMIT = 9;
ys.THEY_CANCELLED = 10;
const Fp = s => {
        var e;
        return ((e = Z().getWallItemData(s)) == null ? void 0 : e.isExternalImage) || !1
    },
    xp = s => {
        const e = new as;
        if (s.length)
            for (const r of s) {
                const i = r.spriteId,
                    n = r.category;
                let o = r.furniType + i;
                (!r.isGroupable || Fp(i)) && (o = "itemid" + r.itemId),
                r.category === _e.POSTER ? o = r.itemId + "poster" + r.stuffData.getLegacyString() : r.category === _e.GUILD_FURNI && (o = "");
                let l = r.isGroupable && !Fp(r.spriteId) ? e.getValue(o) : null;
                l || (l = BE(i, n, r.stuffData), e.add(o, l)),
                l.push(new Jc(r))
            }
        return e
    },
    VK = (s, e) => {
        let t = s.toString();
        if (!(e instanceof en))
            return t;
        let r = 1;
        for (; r < 5;)
            t = t + ("," + e.getValue(r)),
            r++;
        return t
    };
class Oh {
    static getProductImageUrl(e, t, r)
    {
        let i = null;
        switch (e) {
        case oi.S:
            i = re().getFurnitureFloorIconUrl(t);
            break;
        case oi.I:
            this.getProductCategory(oi.I, t) === 1 && (i = re().getFurnitureWallIconUrl(t, r));
            break
        }
        return i
    }
    static getProductCategory(e, t)
    {
        if (e === oi.S)
            return 1;
        if (e === oi.I) {
            if (t === 3001)
                return _e.WALL_PAPER;
            if (t === 3002)
                return _e.FLOOR;
            if (t === 4057)
                return _e.LANDSCAPE
        }
        return 1
    }
}
class ad {
    static getRandomNumber(e)
    {
        return Math.floor(Math.random() * e)
    }
    static getRandomElement(e)
    {
        return e[this.getRandomNumber(e.length)]
    }
    static getRandomElements(e, t)
    {
        const r = new Array(t);
        let i = e.length;
        const n = new Array(i);
        for (; t--;) {
            var o = this.getRandomNumber(i);
            r[t] = e[o in n ? n[o] : o],
            n[o] = --i in n ? n[i] : i
        }
        return r
    }
}
const Ds = new Map;
Ds.set("r", "red");
Ds.set("b", "blue");
Ds.set("g", "green");
Ds.set("y", "yellow");
Ds.set("w", "white");
Ds.set("o", "orange");
Ds.set("c", "cyan");
Ds.set("br", "brown");
Ds.set("pr", "purple");
Ds.set("pk", "pink");
Ds.set("red", "red");
Ds.set("blue", "blue");
Ds.set("green", "green");
Ds.set("yellow", "yellow");
Ds.set("white", "white");
Ds.set("orange", "orange");
Ds.set("cyan", "cyan");
Ds.set("brown", "brown");
Ds.set("purple", "purple");
Ds.set("pink", "pink");
const HK = s => s.replace(/([\u00A0-\u9999<>&])(.|$)/g, (e, t, r) => t !== "&" || r !== "#" ? (/[\u00A0-\u9999<>&]/.test(r) && (r = "&#" + r.charCodeAt(0) + ";"), "&#" + t.charCodeAt(0) + ";" + r) : e),
    jK = s => {
        let e = "";
        if (s = HK(s), s.startsWith("@") && s.indexOf("@", 1) > -1) {
            let t = null;
            for (; (t = /@[a-zA-Z]+@/g.exec(s)) !== null;) {
                const r = t[0].toString(),
                    i = r.substr(1, r.length - 2),
                    n = s.replace(r, "");
                Ds.has(i) ? e = '<span style="color: ' + Ds.get(i) + '">' + n + "</span>" : e = n;
                break
            }
        } else
            e = s;
        return e
    },
    bv = (s, e) => window.localStorage.setItem(s, JSON.stringify(e));
class Zr {}
Zr.CAMERA_SHUTTER = "camera_shutter";
Zr.CREDITS = "credits";
Zr.DUCKETS = "duckets";
Zr.MESSENGER_NEW_THREAD = "messenger_new_thread";
Zr.MESSENGER_MESSAGE_RECEIVED = "messenger_message_received";
Zr.MODTOOLS_NEW_TICKET = "modtools_new_ticket";
function WK(s) {
    const e = s.parts;
    let t = 0;
    for (const r of e)
        t = Math.max(t, r.colorLayerIndex);
    return t
}
function YK(s, e) {
    return e = e.filter(t => s.indexOf(t) === -1), [...s, ...ad.getRandomElements(e, ad.getRandomNumber(e.length) + 1)]
}
function zK(s, e, t=0, r=[]) {
    if (!s)
        return null;
    const i = s.partSets.getValues().filter(n => !n.isSelectable || n.gender !== "U" && n.gender !== e || n.clubLevel > t || n.isSellable && r.indexOf(n.id) === -1 ? null : n);
    return !i || !i.length ? null : ad.getRandomElement(i)
}
function KK(s, e, t=0) {
    if (!s)
        return [];
    const r = s.colors.getValues().filter(i => !i.isSelectable || i.clubLevel > t ? null : i);
    return !r || !r.length ? null : ad.getRandomElements(r, WK(e))
}
function qK(s, e, t=0, r=[], i=[]) {
    const n = bs().structure,
        o = new Lc(""),
        l = YK(n.getMandatorySetTypeIds(e, t), Me.SET_TYPES);
    for (const c of i) {
        const u = s.getPartSetId(c),
            h = s.getColorIds(c);
        o.updatePart(c, u, h)
    }
    for (const c of l) {
        if (o.hasPartType(c))
            continue;
        const u = n.figureData.getSetType(c),
            h = zK(u, e, t, r);
        if (!h)
            continue;
        let d = [];
        h.isColorable && (d = KK(n.figureData.getPalette(u.paletteID), h, t).map(m => m.id)),
        o.updatePart(u.type, h.id, d)
    }
    return o.getFigureString()
}
class XK extends e_ {
    init()
    {
        super.init(),
        this.addCategory(Me.HAIR),
        this.addCategory(Me.HAT),
        this.addCategory(Me.HEAD_ACCESSORIES),
        this.addCategory(Me.EYE_ACCESSORIES),
        this.addCategory(Me.FACE_ACCESSORIES),
        this._isInitalized = !0
    }
    get name()
    {
        return Er.HEAD
    }
}
class QK extends e_ {
    init()
    {
        super.init(),
        this.addCategory(Me.TROUSERS),
        this.addCategory(Me.SHOES),
        this.addCategory(Me.TROUSER_ACCESSORIES),
        this._isInitalized = !0
    }
    get name()
    {
        return Er.LEGS
    }
}
class JK extends e_ {
    init()
    {
        super.init(),
        this.addCategory(Me.SHIRT),
        this.addCategory(Me.CHEST_PRINTS),
        this.addCategory(Me.JACKET),
        this.addCategory(Me.CHEST_ACCESSORIES),
        this._isInitalized = !0
    }
    get name()
    {
        return Er.TORSO
    }
}
class $c {}
$c.COLORMATRIX = "colormatrix";
$c.COMPOSITE = "composite";
class ZK {
    constructor(e, t)
    {
        this.texture = e,
        this.imageUrl = t
    }
}
class $K {
    constructor(e, t)
    {
        this.effectName = e,
        this.thumbnailUrl = t
    }
}
class e4 {
    constructor(e, t, r)
    {
        this._productName = e,
        this._customImage = t,
        this._furnitureClassName = r
    }
    get productName()
    {
        return this._productName
    }
    get customImage()
    {
        return this._customImage
    }
    get furnitureClassName()
    {
        return this._furnitureClassName
    }
}
class ur {}
ur.STATE_UNLOCKED = 1;
ur.STATE_LOCKED_AVAILABLE = 2;
ur.STATE_LOCKED_EXPIRED = 3;
ur.STATE_LOCKED_FUTURE = 4;
class xi {}
xi.TYPE_CHAT = 1;
xi.TYPE_ROOM_INFO = 2;
xi.TYPE_IM = 3;
const Dv = () => {
        const s = new Date;
        return `${s.getHours().toString().padStart(2, "0")}:${s.getMinutes().toString().padStart(2, "0")}`
    },
    Gp = (s=0) => {
        const e = s ? new Date(Date.now() - s * 1e3) : new Date;
        return `${e.getHours().toString().padStart(2, "0")}:${e.getMinutes().toString().padStart(2, "0")}`
    },
    vv = s => {
        if (!s || !s.length)
            return null;
        const e = s.split("/"),
            t = e[0],
            r = e[1],
            i = parseInt(e[2]);
        return {
            username: t,
            figure: r,
            userId: i
        }
    };
class dr {
    constructor()
    {
        this.id = -1,
        this.name = null,
        this.gender = 0,
        this.online = !1,
        this.followingAllowed = !1,
        this.figure = null,
        this.categoryId = 0,
        this.motto = null,
        this.realName = null,
        this.lastAccess = null,
        this.persistedMessageUser = !1,
        this.vipMember = !1,
        this.pocketHabboUser = !1,
        this.relationshipStatus = -1,
        this.unread = 0
    }
    populate(e)
    {
        this.id = e.id,
        this.name = e.name,
        this.gender = e.gender,
        this.online = e.online,
        this.followingAllowed = e.followingAllowed,
        this.figure = e.figure,
        this.categoryId = e.categoryId,
        this.motto = e.motto,
        this.realName = e.realName,
        this.lastAccess = e.lastAccess,
        this.persistedMessageUser = e.persistedMessageUser,
        this.vipMember = e.vipMember,
        this.pocketHabboUser = e.pocketHabboUser,
        this.relationshipStatus = e.relationshipStatus
    }
}
dr.RELATIONSHIP_NONE = 0;
dr.RELATIONSHIP_HEART = 1;
dr.RELATIONSHIP_SMILE = 2;
dr.RELATIONSHIP_BOBBA = 3;
class Fo {}
Fo.GROUP_CHAT = 0;
Fo.PRIVATE_CHAT = 1;
class ai {}
ai.HIDDEN = 0;
ai.SHOW = 1;
ai.UNREAD = 2;
class Bp {
    populate(e)
    {
        return e ? (this._id = e.requestId, this._name = e.requesterName, this._figureString = e.figureString, this._requesterUserId = e.requesterUserId, !0) : !1
    }
    get id()
    {
        return this._id
    }
    get name()
    {
        return this._name
    }
    get requesterUserId()
    {
        return this._requesterUserId
    }
    get figureString()
    {
        return this._figureString
    }
}
class t4 {
    constructor(e=0, t=0, r=0, i=[])
    {
        this.userFriendLimit = e,
        this.normalFriendLimit = t,
        this.extendedFriendLimit = r,
        this.categories = i
    }
}
class Zi {
    constructor(e, t, r=0, i=null, n=0)
    {
        this._type = n,
        this._senderId = e,
        this._message = t,
        this._secondsSinceSent = r,
        this._extraData = i,
        this._date = new Date
    }
    get type()
    {
        return this._type
    }
    get senderId()
    {
        return this._senderId
    }
    get message()
    {
        return this._message
    }
    get secondsSinceSent()
    {
        return this._secondsSinceSent
    }
    get extraData()
    {
        return this._extraData
    }
    get date()
    {
        return this._date
    }
}
Zi.CHAT = 0;
Zi.ROOM_INVITE = 1;
Zi.STATUS_NOTIFICATION = 2;
Zi.SECURITY_NOTIFICATION = 3;
class s4 {
    constructor(e, t=Fo.PRIVATE_CHAT)
    {
        this._userId = e,
        this._chats = [],
        this._type = t
    }
    addChat(e)
    {
        this._chats.push(e)
    }
    get userId()
    {
        return this._userId
    }
    get chats()
    {
        return this._chats
    }
    get type()
    {
        return this._type
    }
    set type(e)
    {
        this._type = e
    }
}
const Pv = class {
    constructor(s)
    {
        this._threadId = ++Pv.THREAD_ID,
        this._participant = s,
        this._groups = [],
        this._lastUpdated = new Date,
        this._unreadCount = 0
    }
    addMessage(s, e, t=0, r=null, i=0)
    {
        const n = s < 0 && r,
            o = n ? vv(r).userId : s,
            l = this.getLastGroup(o);
        if (!l)
            return;
        n && (l.type = Fo.GROUP_CHAT);
        const c = new Zi(s, e, t, r, i);
        return l.addChat(c), this._lastUpdated = new Date, this._unreadCount++, c
    }
    getLastGroup(s)
    {
        let e = this._groups[this._groups.length - 1];
        return e && e.userId === s || (e = new s4(s), this._groups.push(e)), e
    }
    setRead()
    {
        this._unreadCount = 0
    }
    get threadId()
    {
        return this._threadId
    }
    get participant()
    {
        return this._participant
    }
    get groups()
    {
        return this._groups
    }
    get lastUpdated()
    {
        return this._lastUpdated
    }
    get unreadCount()
    {
        return this._unreadCount
    }
    get unread()
    {
        return this._unreadCount > 0
    }
}
;
let kE = Pv;
kE.MESSAGE_RECEIVED = "MT_MESSAGE_RECEIVED";
kE.THREAD_ID = 0;
function r_(s=0) {
    ge(s === 0 ? "friends-messenger/toggle" : `friends-messenger/${s}`)
}
const r4 = () => Ql.RENDERER_VERSION,
    Lv = () => "2.1.1";
function Mu(s) {
    B(new Gl(s, !0))
}
function Uv(s) {
    ge(`groups/manage/${s}`)
}
function kp(s, e) {
    ge(e ? `group-members/${s}/${e}` : `group-members/${s}`)
}
const Df = class {
    constructor(s, e, t, r)
    {
        this.type = s,
        this.key = e || 0,
        this.color = t || 0,
        this.position = r || 4
    }
    get code()
    {
        return this.key === 0 && this.type !== Df.BASE ? null : Df.getCode(this.type, this.key, this.color, this.position)
    }
    static getCode(s, e, t, r)
    {
        return s + (e < 10 ? "0" : "") + e + (t < 10 ? "0" : "") + t + r
    }
}
;
let mr = Df;
mr.BASE = "b";
mr.SYMBOL = "s";
class Us {}
Us.NOT_MEMBER = 0;
Us.MEMBER = 1;
Us.REQUEST_PENDING = 2;
class Yr {}
Yr.REGULAR = 0;
Yr.EXCLUSIVE = 1;
Yr.PRIVATE = 2;
const i4 = s => {
        B(s.favourite ? new ry(s.groupId) : new qN(s.groupId))
    },
    VE = s => B(new XN(s));
class xe {}
xe.NONE = "NONE";
xe.ERROR = "ERROR";
xe.REJECTED = "REJECTED";
xe.USER_CREATE = "USER_CREATE";
xe.USER_PENDING = "USER_PENDING";
xe.USER_ONGOING = "USER_ONGOING";
xe.USER_FEEDBACK = "USER_FEEDBACK";
xe.USER_NO_HELPERS = "USER_NO_HELPERS";
xe.USER_SOMETHING_WRONG = "USER_SOMETHING_WRONG";
xe.USER_THANKS = "USER_THANKS";
xe.USER_GUIDE_DISCONNECTED = "USER_GUIDE_DISCONNECTED";
xe.GUIDE_TOOL_MENU = "GUIDE_TOOL_MENU";
xe.GUIDE_ACCEPT = "GUIDE_ACCEPT";
xe.GUIDE_ONGOING = "GUIDE_ONGOING";
xe.GUIDE_CLOSED = "GUIDE_CLOSED";
xe.GUARDIAN_CHAT_REVIEW_ACCEPT = "GUARDIAN_CHAT_REVIEW_ACCEPT";
xe.GUARDIAN_CHAT_REVIEW_WAIT_FOR_VOTERS = "GUARDIAN_CHAT_REVIEW_WAIT_FOR_VOTERS";
xe.GUARDIAN_CHAT_REVIEW_VOTE = "GUARDIAN_CHAT_REVIEW_VOTE";
xe.GUARDIAN_CHAT_REVIEW_WAIT_FOR_RESULTS = "GUARDIAN_CHAT_REVIEW_WAIT_FOR_RESULTS";
xe.GUARDIAN_CHAT_REVIEW_RESULTS = "GUARDIAN_CHAT_REVIEW_RESULTS";
class Vp {
    constructor(e, t)
    {
        this._message = e,
        this._roomId = t
    }
    get message()
    {
        return this._message
    }
    get roomId()
    {
        return this._roomId
    }
}
class Hp {
    constructor(e)
    {
        this._userId = e,
        this._messages = []
    }
    addChat(e)
    {
        this._messages.push(e)
    }
    get userId()
    {
        return this._userId
    }
    get messages()
    {
        return this._messages
    }
}
class Xi {}
Xi.ACTIVE = "active";
Xi.NONE = "none";
Xi.EXPIRED = "expired";
const n4 = "HC1",
    a4 = ["ACH_VipHC1", "ACH_VipHC2", "ACH_VipHC3", "ACH_VipHC4", "ACH_VipHC5", "HC1", "HC2", "HC3", "HC4", "HC5"],
    o4 = s => {
        let e = null;
        return a4.forEach(t => s.indexOf(t) > -1 && (e = t)), e || n4
    };
class od {}
od.TOO_MANY_PENDING_CALLS_CODE = 1;
od.HAS_ABUSIVE_CALL_CODE = 2;
const l4 = s => s === 1 ? "useless" : s === 2 ? "abusive" : "resolved";
class Ks {}
Ks.SELECT_USER = 0;
Ks.SELECT_CHATS = 1;
Ks.SELECT_TOPICS = 2;
Ks.INPUT_REPORT_MESSAGE = 3;
Ks.REPORT_SUMMARY = 4;
class Lt {}
Lt.EMERGENCY = 1;
Lt.GUIDE = 2;
Lt.IM = 3;
Lt.ROOM = 4;
Lt.BULLY = 6;
Lt.THREAD = 7;
Lt.MESSAGE = 8;
Lt.PHOTO = 9;
const c4 = s => {
    switch (s) {
    case 1:
    case 2:
        return "Normal";
    case 3:
        return "Automatic";
    case 4:
        return "Automatic IM";
    case 5:
        return "Guide System";
    case 6:
        return "IM";
    case 7:
        return "Room";
    case 8:
        return "Panic";
    case 9:
        return "Guardian";
    case 10:
        return "Automatic Helper";
    case 11:
        return "Discussion";
    case 12:
        return "Selfie";
    case 14:
        return "Photo";
    case 15:
        return "Ambassador"
    }
    return "Unknown"
};
class Ct {
    constructor(e, t, r, i, n)
    {
        this._actionId = e,
        this._name = t,
        this._actionType = r,
        this._sanctionTypeId = i,
        this._actionLengthHours = n
    }
    get actionId()
    {
        return this._actionId
    }
    get name()
    {
        return this._name
    }
    get actionType()
    {
        return this._actionType
    }
    get sanctionTypeId()
    {
        return this._sanctionTypeId
    }
    get actionLengthHours()
    {
        return this._actionLengthHours
    }
}
Ct.ALERT = 1;
Ct.MUTE = 2;
Ct.BAN = 3;
Ct.KICK = 4;
Ct.TRADE_LOCK = 5;
Ct.MESSAGE = 6;
class Et {}
Et.NONE = 0;
Et.START_DOORBELL = 1;
Et.START_PASSWORD = 2;
Et.STATE_PENDING_SERVER = 3;
Et.UPDATE_STATE = 4;
Et.STATE_WAITING = 5;
Et.STATE_NO_ANSWER = 6;
Et.STATE_WRONG_PASSWORD = 7;
Et.STATE_ACCEPTED = 8;
class Yn {}
Yn.LIST = 0;
Yn.THUMBNAILS = 1;
Yn.FORCED_THUMBNAILS = 2;
const u4 = () => {
        const s = [];
        for (let e = 10; e <= 100; e = e + 10)
            s.push(e);
        return s
    },
    jp = u4(),
    el = [{
        name: "anything",
        query: null
    }, {
        name: "room.name",
        query: "roomname"
    }, {
        name: "owner",
        query: "owner"
    }, {
        name: "tag",
        query: "tag"
    }, {
        name: "group",
        query: "group"
    }];
function _i(s) {
    B(new Yc(s, !1, !0))
}
class we {}
we.DEFAULT = "default";
we.MOTD = "motd";
we.MODERATION = "moderation";
we.EVENT = "event";
we.NITRO = "nitro";
we.SEARCH = "search";
we.ALERT = "alert";
const vf = class {
    constructor(s, e=we.DEFAULT, t=null, r=null, i=null, n=null)
    {
        vf.ITEM_ID += 1,
        this._id = vf.ITEM_ID,
        this._messages = s,
        this._alertType = e,
        this._clickUrl = t,
        this._clickUrlText = r,
        this._title = i,
        this._imageUrl = n
    }
    get id()
    {
        return this._id
    }
    get messages()
    {
        return this._messages
    }
    set alertType(s)
    {
        this._alertType = s
    }
    get alertType()
    {
        return this._alertType
    }
    get clickUrl()
    {
        return this._clickUrl
    }
    get clickUrlText()
    {
        return this._clickUrlText
    }
    get title()
    {
        return this._title
    }
    get imageUrl()
    {
        return this._imageUrl
    }
}
;
let Pf = vf;
Pf.ITEM_ID = -1;
class Wt {}
Wt.FRIENDOFFLINE = "friendoffline";
Wt.FRIENDONLINE = "friendonline";
Wt.THIRDPARTYFRIENDOFFLINE = "thirdpartyfriendoffline";
Wt.THIRDPARTYFRIENDONLINE = "thirdpartyfriendonline";
Wt.ACHIEVEMENT = "achievement";
Wt.BADGE_RECEIVED = "badge_received";
Wt.INFO = "info";
Wt.RECYCLEROK = "recyclerok";
Wt.RESPECT = "respect";
Wt.CLUB = "club";
Wt.SOUNDMACHINE = "soundmachine";
Wt.PETLEVEL = "petlevel";
Wt.CLUBGIFT = "clubgift";
Wt.BUYFURNI = "buyfurni";
Wt.VIP = "vip";
Wt.ROOMMESSAGESPOSTED = "roommessagesposted";
const Lf = class {
    constructor(s, e=Wt.INFO, t=null, r=null)
    {
        Lf.ITEM_ID += 1,
        this._id = Lf.ITEM_ID,
        this._message = s,
        this._notificationType = e,
        this._iconUrl = t,
        this._linkUrl = r
    }
    get id()
    {
        return this._id
    }
    get message()
    {
        return this._message
    }
    get notificationType()
    {
        return this._notificationType
    }
    get iconUrl()
    {
        return this._iconUrl
    }
    get linkUrl()
    {
        return this._linkUrl
    }
}
;
let wv = Lf;
wv.ITEM_ID = -1;
const Uf = class {
    constructor(s, e, t, r, i, n, o)
    {
        Uf.ITEM_ID += 1,
        this._id = Uf.ITEM_ID,
        this._confirmType = s,
        this._message = e,
        this._onConfirm = t,
        this._onCancel = r,
        this._confirmText = i,
        this._cancelText = n,
        this._title = o
    }
    get id()
    {
        return this._id
    }
    get confirmType()
    {
        return this._confirmType
    }
    get message()
    {
        return this._message
    }
    get onConfirm()
    {
        return this._onConfirm
    }
    get onCancel()
    {
        return this._onCancel
    }
    get confirmText()
    {
        return this._confirmText
    }
    get cancelText()
    {
        return this._cancelText
    }
    get title()
    {
        return this._title
    }
}
;
let Fv = Uf;
Fv.ITEM_ID = -1;
class HE {
    constructor()
    {
        this._credits = 0,
        this._activityPoints = new Map,
        this._clubDays = 0,
        this._clubPeriods = 0,
        this._isVIP = !1,
        this._pastClubDays = 0,
        this._pastVipDays = 0,
        this._isExpiring = !1,
        this._minutesUntilExpiration = 0,
        this._minutesSinceLastModified = 0,
        this._lastUpdated = 0
    }
    static from(e)
    {
        const t = new HE;
        return t._credits = e._credits, t._activityPoints = e._activityPoints, t._clubDays = e._clubDays, t._clubPeriods = e._clubPeriods, t._isVIP = e._isVIP, t._pastClubDays = e._pastClubDays, t._pastVipDays = e._pastVipDays, t._isExpiring = e._isExpiring, t._minutesUntilExpiration = e._minutesUntilExpiration, t._minutesSinceLastModified = e._minutesSinceLastModified, t._lastUpdated = e._lastUpdated, t
    }
    get credits()
    {
        return this._credits
    }
    set credits(e)
    {
        this._lastUpdated = Pe(),
        this._credits = e
    }
    get activityPoints()
    {
        return this._activityPoints
    }
    set activityPoints(e)
    {
        this._lastUpdated = Pe(),
        this._activityPoints = e
    }
    get clubDays()
    {
        return this._clubDays
    }
    set clubDays(e)
    {
        this._lastUpdated = Pe(),
        this._clubDays = e
    }
    get clubPeriods()
    {
        return this._clubPeriods
    }
    set clubPeriods(e)
    {
        this._lastUpdated = Pe(),
        this._clubPeriods = e
    }
    get hasClubLeft()
    {
        return this._clubDays > 0 || this._clubPeriods > 0
    }
    get isVip()
    {
        return this._isVIP
    }
    set isVip(e)
    {
        this._isVIP = e
    }
    get pastClubDays()
    {
        return this._pastClubDays
    }
    set pastClubDays(e)
    {
        this._lastUpdated = Pe(),
        this._pastClubDays = e
    }
    get pastVipDays()
    {
        return this._pastVipDays
    }
    set pastVipDays(e)
    {
        this._lastUpdated = Pe(),
        this._pastVipDays = e
    }
    get isExpiring()
    {
        return this._isExpiring
    }
    set isExpiring(e)
    {
        this._isExpiring = e
    }
    get minutesUntilExpiration()
    {
        var e = (Pe() - this._lastUpdated) / 6e4,
            t = this._minutesUntilExpiration - e;
        return t > 0 ? t : 0
    }
    set minutesUntilExpiration(e)
    {
        this._lastUpdated = Pe(),
        this._minutesUntilExpiration = e
    }
    get minutesSinceLastModified()
    {
        return this._minutesSinceLastModified
    }
    set minutesSinceLastModified(e)
    {
        this._lastUpdated = Pe(),
        this._minutesSinceLastModified = e
    }
    get lastUpdated()
    {
        return this._lastUpdated
    }
    get clubLevel()
    {
        return this.clubDays === 0 && this.clubPeriods === 0 ? gr.NO_CLUB : this.isVip ? gr.VIP : gr.CLUB
    }
}
class bu extends Ye {}
class zn extends bu {
    constructor(e, t)
    {
        super(e),
        this._id = -1,
        this._numQuestions = 0,
        this._startMessage = "",
        this._endMessage = "",
        this._questionArray = null,
        this._pollType = "",
        this._npsPoll = !1,
        this._id = t
    }
    get id()
    {
        return this._id
    }
    get summary()
    {
        return this._summary
    }
    set summary(e)
    {
        this._summary = e
    }
    get headline()
    {
        return this._headline
    }
    set headline(e)
    {
        this._headline = e
    }
    get numQuestions()
    {
        return this._numQuestions
    }
    set numQuestions(e)
    {
        this._numQuestions = e
    }
    get startMessage()
    {
        return this._startMessage
    }
    set startMessage(e)
    {
        this._startMessage = e
    }
    get endMessage()
    {
        return this._endMessage
    }
    set endMessage(e)
    {
        this._endMessage = e
    }
    get questionArray()
    {
        return this._questionArray
    }
    set questionArray(e)
    {
        this._questionArray = e
    }
    get pollType()
    {
        return this._pollType
    }
    set pollType(e)
    {
        this._pollType = e
    }
    get npsPoll()
    {
        return this._npsPoll
    }
    set npsPoll(e)
    {
        this._npsPoll = e
    }
}
zn.OFFER = "RWPUW_OFFER";
zn.ERROR = "RWPUW_ERROR";
zn.CONTENT = "RWPUW_CONTENT";
class Ua extends bu {
    constructor(e, t=0, r=0, i=0)
    {
        super(e),
        this._hue = t,
        this._saturation = r,
        this._lightness = i
    }
    get hue()
    {
        return this._hue
    }
    get saturation()
    {
        return this._saturation
    }
    get lightness()
    {
        return this._lightness
    }
}
Ua.PREVIEW = "RWUBCPE_PREVIEW";
Ua.CLEAR_PREVIEW = "RWUBCPE_CLEAR_PREVIEW";
const xv = class  extends bu{
    constructor(s, e)
    {
        super(xv.CHAT_INPUT_CONTENT),
        this._chatMode = "",
        this._userName = "",
        this._chatMode = s,
        this._userName = e
    }
    get chatMode()
    {
        return this._chatMode
    }
    get userName()
    {
        return this._userName
    }
}
;
let ja = xv;
ja.CHAT_INPUT_CONTENT = "RWUCICE_CHAT_INPUT_CONTENT";
ja.WHISPER = "whisper";
ja.SHOUT = "shout";
const Gv = class  extends bu{
    constructor(s, e, t, r, i, n, o)
    {
        super(Gv.UPDATE_CHAT),
        this._objectId = s,
        this._category = e,
        this._botId = t,
        this._chat = r,
        this._automaticChat = i,
        this._chatDelay = n,
        this._mixSentences = o
    }
    get objectId()
    {
        return this._objectId
    }
    get category()
    {
        return this._category
    }
    get botId()
    {
        return this._botId
    }
    get chat()
    {
        return this._chat
    }
    get automaticChat()
    {
        return this._automaticChat
    }
    get chatDelay()
    {
        return this._chatDelay
    }
    get mixSentences()
    {
        return this._mixSentences
    }
}
;
let jE = Gv;
jE.UPDATE_CHAT = "RWURBCE_UPDATE_CHAT";
class lt extends bu {
    constructor(e, t, r, i)
    {
        super(e),
        this._id = t,
        this._category = r,
        this._roomId = i
    }
    get id()
    {
        return this._id
    }
    get category()
    {
        return this._category
    }
    get roomId()
    {
        return this._roomId
    }
}
lt.OBJECT_SELECTED = "RWUROE_OBJECT_SELECTED";
lt.OBJECT_DESELECTED = "RWUROE_OBJECT_DESELECTED";
lt.USER_REMOVED = "RWUROE_USER_REMOVED";
lt.FURNI_REMOVED = "RWUROE_FURNI_REMOVED";
lt.FURNI_ADDED = "RWUROE_FURNI_ADDED";
lt.USER_ADDED = "RWUROE_USER_ADDED";
lt.OBJECT_ROLL_OVER = "RWUROE_OBJECT_ROLL_OVER";
lt.OBJECT_ROLL_OUT = "RWUROE_OBJECT_ROLL_OUT";
lt.OBJECT_REQUEST_MANIPULATION = "RWUROE_OBJECT_REQUEST_MANIPULATION";
lt.OBJECT_DOUBLE_CLICKED = "RWUROE_OBJECT_DOUBLE_CLICKED";
class zl {
    constructor(e)
    {
        this.type = e,
        this.id = 0,
        this.category = 0,
        this.name = "",
        this.description = "",
        this.image = null,
        this.isWallItem = !1,
        this.isStickie = !1,
        this.isRoomOwner = !1,
        this.roomControllerLevel = 0,
        this.isAnyRoomController = !1,
        this.expiration = -1,
        this.purchaseCatalogPageId = -1,
        this.purchaseOfferId = -1,
        this.extraParam = "",
        this.isOwner = !1,
        this.stuffData = null,
        this.groupId = 0,
        this.ownerId = 0,
        this.ownerName = "",
        this.usagePolicy = 0,
        this.rentCatalogPageId = -1,
        this.rentOfferId = -1,
        this.purchaseCouldBeUsedForBuyout = !1,
        this.rentCouldBeUsedForBuyout = !1,
        this.availableForBuildersClub = !1,
        this.tileSizeX = 1,
        this.tileSizeY = 1
    }
}
zl.FURNI = "IFI_FURNI";
class Bv {
    constructor(e, t, r, i, n, o=!1)
    {
        this.roomIndex = e,
        this.category = t,
        this.id = r,
        this.name = i,
        this.userType = n,
        this.isFriend = o
    }
}
class Kl {
    constructor(e)
    {
        this.type = e,
        this.level = 0,
        this.maximumLevel = 0,
        this.experience = 0,
        this.levelExperienceGoal = 0,
        this.energy = 0,
        this.maximumEnergy = 0,
        this.happyness = 0,
        this.maximumHappyness = 0,
        this.respectsPetLeft = 0,
        this.respect = 0,
        this.age = 0,
        this.name = "",
        this.id = -1,
        this.image = null,
        this.petType = 0,
        this.petBreed = 0,
        this.petFigure = "",
        this.posture = "std",
        this.isOwner = !1,
        this.ownerId = -1,
        this.ownerName = "",
        this.canRemovePet = !1,
        this.roomIndex = 0,
        this.unknownRarityLevel = 0,
        this.saddle = !1,
        this.rider = !1,
        this.breedable = !1,
        this.skillTresholds = [],
        this.publiclyRideable = 0,
        this.fullyGrown = !1,
        this.dead = !1,
        this.rarityLevel = 0,
        this.maximumTimeToLive = 0,
        this.remainingTimeToLive = 0,
        this.remainingGrowTime = 0,
        this.publiclyBreedable = !1
    }
}
Kl.PET_INFO = "IPI_PET_INFO";
class ql {
    constructor(e)
    {
        this.type = e,
        this.name = "",
        this.motto = "",
        this.webID = 0,
        this.figure = "",
        this.badges = [],
        this.carryItem = 0,
        this.roomIndex = 0,
        this.amIOwner = !1,
        this.amIAnyRoomController = !1,
        this.roomControllerLevel = 0,
        this.ownerId = -1,
        this.ownerName = "",
        this.botSkills = []
    }
}
ql.RENTABLE_BOT = "IRBI_RENTABLE_BOT";
const kv = class {
    constructor(s)
    {
        this.type = s,
        this.name = "",
        this.motto = "",
        this.achievementScore = 0,
        this.webID = 0,
        this.xp = 0,
        this.userType = -1,
        this.figure = "",
        this.badges = [],
        this.groupId = 0,
        this.groupName = "",
        this.groupBadgeId = "",
        this.carryItem = 0,
        this.roomIndex = 0,
        this.isSpectatorMode = !1,
        this.allowNameChange = !1,
        this.amIOwner = !1,
        this.amIAnyRoomController = !1,
        this.roomControllerLevel = 0,
        this.canBeKicked = !1,
        this.canBeBanned = !1,
        this.canBeMuted = !1,
        this.respectLeft = 0,
        this.isIgnored = !1,
        this.isGuildRoom = !1,
        this.canTrade = !1,
        this.canTradeReason = 0,
        this.targetRoomControllerLevel = 0,
        this.isAmbassador = !1
    }
    get isOwnUser()
    {
        return this.type === kv.OWN_USER
    }
}
;
let $t = kv;
$t.OWN_USER = "IUI_OWN_USER";
$t.PEER = "IUI_PEER";
$t.BOT = "IUI_BOT";
$t.TRADE_REASON_OK = 0;
$t.TRADE_REASON_SHUTDOWN = 2;
$t.TRADE_REASON_NO_TRADING = 3;
$t.DEFAULT_BOT_BADGE_ID = "BOT";
class tl {
    static getObjectName(e, t)
    {
        const r = dt();
        let i = -1,
            n = null,
            o = 0;
        switch (t) {
        case V.FLOOR:
        case V.WALL:
            {
                const l = re().getRoomObject(r.roomId, e, t);
                if (!l)
                    break;
                if (l.type.indexOf("poster") === 0)
                    n = f("${poster_" + parseInt(l.type.replace("poster", "")) + "_name}");
                else {
                    let c = null;
                    const u = l.model.getValue(C.FURNITURE_TYPE_ID);
                    if (t === V.FLOOR ? c = Z().getFloorItemData(u) : t === V.WALL && (c = Z().getWallItemData(u)), !c)
                        break;
                    i = c.id,
                    n = c.name
                }
                break
            }case V.UNIT:
            {
                const l = r.userDataManager.getUserDataByIndex(e);
                if (!l)
                    break;
                i = l.webID,
                n = l.name,
                o = l.type;
                break
            }
        }
        return !n || !n.length ? null : new Bv(e, t, i, n, o)
    }
    static getFurniInfo(e, t)
    {
        const r = dt(),
            i = new zl(zl.FURNI);
        i.id = e,
        i.category = t;
        const n = re().getRoomObject(r.roomId, e, t);
        if (!n)
            return;
        const o = n.model;
        o.getValue(Zt.INFOSTAND_EXTRA_PARAM) && (i.extraParam = o.getValue(Zt.INFOSTAND_EXTRA_PARAM));
        const l = o.getValue(C.FURNITURE_DATA_FORMAT),
            c = Tn.getData(l);
        c.initializeFromRoomObjectModel(o),
        i.stuffData = c;
        const u = n.type;
        if (u.indexOf("poster") === 0) {
            const E = parseInt(u.replace("poster", ""));
            i.name = f("${poster_" + E + "_name}"),
            i.description = f("${poster_" + E + "_desc}")
        } else {
            const E = o.getValue(C.FURNITURE_TYPE_ID);
            let T = null;
            t === V.FLOOR ? T = Z().getFloorItemData(E) : t === V.WALL && (T = Z().getWallItemData(E)),
            T && (i.name = T.name, i.description = T.description, i.purchaseOfferId = T.purchaseOfferId, i.purchaseCouldBeUsedForBuyout = T.purchaseCouldBeUsedForBuyout, i.rentOfferId = T.rentOfferId, i.rentCouldBeUsedForBuyout = T.rentCouldBeUsedForBuyout, i.availableForBuildersClub = T.availableForBuildersClub, i.tileSizeX = T.tileSizeX, i.tileSizeY = T.tileSizeY)
        }
        u.indexOf("post_it") > -1 && (i.isStickie = !0);
        const h = o.getValue(C.FURNITURE_EXPIRY_TIME),
            d = o.getValue(C.FURNITURE_EXPIRTY_TIMESTAMP);
        i.expiration = h < 0 ? h : Math.max(0, h - (Pe() - d) / 1e3);
        let m = re().getRoomObjectImage(r.roomId, e, t, new w(180), 64, null);
        (!m.data || m.data.width > 140 || m.data.height > 200) && (m = re().getRoomObjectImage(r.roomId, e, t, new w(180), 1, null)),
        i.image = m.getImage(),
        i.isWallItem = t === V.WALL,
        i.isRoomOwner = r.isRoomOwner,
        i.roomControllerLevel = r.controllerLevel,
        i.isAnyRoomController = Z().isModerator,
        i.ownerId = o.getValue(C.FURNITURE_OWNER_ID),
        i.ownerName = o.getValue(C.FURNITURE_OWNER_NAME),
        i.usagePolicy = o.getValue(C.FURNITURE_USAGE_POLICY);
        const p = o.getValue(C.FURNITURE_GUILD_CUSTOMIZED_GUILD_ID);
        return p !== 0 && (i.groupId = p), vr(n) && (i.isOwner = !0), i
    }
    static getUserInfo(e, t)
    {
        const r = dt();
        let i = $t.OWN_USER;
        t.webID !== Z().userId && (i = $t.PEER);
        const n = new $t(i);
        n.isSpectatorMode = r.isSpectator,
        n.name = t.name,
        n.motto = t.custom,
        n.achievementScore = t.activityPoints,
        n.webID = t.webID,
        n.roomIndex = t.roomIndex,
        n.userType = yt.USER;
        const o = re().getRoomObject(r.roomId, t.roomIndex, e);
        if (o && (n.carryItem = o.model.getValue(C.FIGURE_CARRY_OBJECT) || 0), i === $t.OWN_USER && (n.allowNameChange = Z().canChangeName), n.amIOwner = r.isRoomOwner, n.isGuildRoom = r.isGuildRoom, n.roomControllerLevel = r.controllerLevel, n.amIAnyRoomController = Z().isModerator, n.isAmbassador = Z().isAmbassador, i === $t.PEER) {
            if (o) {
                const u = o.model.getValue(C.FIGURE_FLAT_CONTROL);
                u !== null && (n.targetRoomControllerLevel = u),
                n.canBeMuted = this.canBeMuted(n),
                n.canBeKicked = this.canBeKicked(n),
                n.canBeBanned = this.canBeBanned(n)
            }
            n.isIgnored = Z().isUserIgnored(t.name),
            n.respectLeft = Z().respectsLeft;
            const l = Z().isSystemShutdown,
                c = r.tradeMode;
            if (l)
                n.canTrade = !1;
            else
                switch (c) {
                case Po.ROOM_CONTROLLER_REQUIRED:
                    {
                        const u = n.roomControllerLevel !== ct.NONE && n.roomControllerLevel !== ct.GUILD_MEMBER,
                            h = n.targetRoomControllerLevel !== ct.NONE && n.targetRoomControllerLevel !== ct.GUILD_MEMBER;
                        n.canTrade = u || h;
                        break
                    }case Po.NO_TRADING:
                    n.canTrade = !0;
                    break;
                default:
                    n.canTrade = !1;
                    break
                }
            n.canTradeReason = $t.TRADE_REASON_OK,
            l && (n.canTradeReason = $t.TRADE_REASON_SHUTDOWN),
            c !== Po.FREE_TRADING && (n.canTradeReason = $t.TRADE_REASON_NO_TRADING)
        }
        return n.groupId = t.groupId, n.groupBadgeId = Z().getGroupBadge(n.groupId), n.groupName = t.groupName, n.badges = r.userDataManager.getUserBadges(t.webID), n.figure = t.figure, n
    }
    static getBotInfo(e, t)
    {
        const r = dt(),
            i = new $t($t.BOT);
        i.name = t.name,
        i.motto = t.custom,
        i.webID = t.webID,
        i.roomIndex = t.roomIndex,
        i.userType = t.type;
        const n = re().getRoomObject(r.roomId, t.roomIndex, e);
        return n && (i.carryItem = n.model.getValue(C.FIGURE_CARRY_OBJECT) || 0), i.amIOwner = r.isRoomOwner, i.isGuildRoom = r.isGuildRoom, i.roomControllerLevel = r.controllerLevel, i.amIAnyRoomController = Z().isModerator, i.isAmbassador = Z().isAmbassador, i.badges = [$t.DEFAULT_BOT_BADGE_ID], i.figure = t.figure, i
    }
    static getRentableBotInfo(e, t)
    {
        const r = dt(),
            i = new ql(ql.RENTABLE_BOT);
        i.name = t.name,
        i.motto = t.custom,
        i.webID = t.webID,
        i.roomIndex = t.roomIndex,
        i.ownerId = t.ownerId,
        i.ownerName = t.ownerName,
        i.botSkills = t.botSkills;
        const n = re().getRoomObject(r.roomId, t.roomIndex, e);
        return n && (i.carryItem = n.model.getValue(C.FIGURE_CARRY_OBJECT) || 0), i.amIOwner = r.isRoomOwner, i.roomControllerLevel = r.controllerLevel, i.amIAnyRoomController = Z().isModerator, i.badges = [$t.DEFAULT_BOT_BADGE_ID], i.figure = t.figure, i
    }
    static getPetInfo(e)
    {
        const t = dt(),
            r = t.userDataManager.getPetData(e.id);
        if (!r)
            return;
        const i = new Nn(r.figure);
        let n = null;
        i.typeId === Le.MONSTERPLANT && (e.level >= e.adultLevel ? n = "std" : n = "grw" + e.level);
        const o = e.ownerId === Z().userId,
            l = new Kl(Kl.PET_INFO);
        return l.name = r.name, l.id = e.id, l.ownerId = e.ownerId, l.ownerName = e.ownerName, l.rarityLevel = e.rarityLevel, l.petType = i.typeId, l.petBreed = i.paletteId, l.petFigure = r.figure, l.posture = n, l.isOwner = o, l.roomIndex = r.roomIndex, l.level = e.level, l.maximumLevel = e.maximumLevel, l.experience = e.experience, l.levelExperienceGoal = e.levelExperienceGoal, l.energy = e.energy, l.maximumEnergy = e.maximumEnergy, l.happyness = e.happyness, l.maximumHappyness = e.maximumHappyness, l.respect = e.respect, l.respectsPetLeft = Z().respectsPetLeft, l.age = e.age, l.saddle = e.saddle, l.rider = e.rider, l.breedable = e.breedable, l.fullyGrown = e.fullyGrown, l.dead = e.dead, l.rarityLevel = e.rarityLevel, l.skillTresholds = e.skillTresholds, l.canRemovePet = !1, l.publiclyRideable = e.publiclyRideable, l.maximumTimeToLive = e.maximumTimeToLive, l.remainingTimeToLive = e.remainingTimeToLive, l.remainingGrowTime = e.remainingGrowTime, l.publiclyBreedable = e.publiclyBreedable, (o || t.isRoomOwner || Z().isModerator || t.controllerLevel >= ct.GUEST) && (l.canRemovePet = !0), l
    }
    static checkGuildSetting(e)
    {
        return e.isGuildRoom ? e.roomControllerLevel >= ct.GUILD_ADMIN : e.roomControllerLevel >= ct.GUEST
    }
    static isValidSetting(e, t)
    {
        const r = dt();
        if (!r.isPrivateRoom)
            return !1;
        const i = r.moderationSettings;
        let n = !1;
        return i && (n = t(e, i)), n && e.targetRoomControllerLevel < ct.ROOM_OWNER
    }
    static canBeMuted(e)
    {
        const t = (r, i) => {
            switch (i.allowMute) {
            case Ns.MODERATION_LEVEL_USER_WITH_RIGHTS:
                return this.checkGuildSetting(r);
            default:
                return r.roomControllerLevel >= ct.ROOM_OWNER
            }
        };
        return this.isValidSetting(e, t)
    }
    static canBeKicked(e)
    {
        const t = (r, i) => {
            switch (i.allowKick) {
            case Ns.MODERATION_LEVEL_ALL:
                return !0;
            case Ns.MODERATION_LEVEL_USER_WITH_RIGHTS:
                return this.checkGuildSetting(r);
            default:
                return r.roomControllerLevel >= ct.ROOM_OWNER
            }
        };
        return this.isValidSetting(e, t)
    }
    static canBeBanned(e)
    {
        const t = (r, i) => {
            switch (i.allowBan) {
            case Ns.MODERATION_LEVEL_USER_WITH_RIGHTS:
                return this.checkGuildSetting(r);
            default:
                return r.roomControllerLevel >= ct.ROOM_OWNER
            }
        };
        return this.isValidSetting(e, t)
    }
}
class rt {}
rt.GENERIC_SKILL = 0;
rt.DRESS_UP = 1;
rt.SETUP_CHAT = 2;
rt.RANDOM_WALK = 3;
rt.DANCE = 4;
rt.CHANGE_BOT_NAME = 5;
rt.SERVE_BEVERAGE = 6;
rt.INCLIENT_LINK = 7;
rt.NUX_PROCEED = 8;
rt.CHANGE_BOT_MOTTO = 9;
rt.NUX_TAKE_TOUR = 10;
rt.NO_PICK_UP = 12;
rt.NAVIGATOR_SEARCH = 14;
rt.DONATE_TO_USER = 24;
rt.DONATE_TO_ALL = 25;
const Vv = class {
    constructor(s=-1, e=-1, t=-1, r="", i="", n="", o=null, l=0, c=0, u=null, h=null)
    {
        this.senderId = s,
        this.senderCategory = e,
        this.roomId = t,
        this.text = r,
        this.formattedText = i,
        this.username = n,
        this.location = o,
        this.type = l,
        this.styleId = c,
        this.imageUrl = u,
        this.color = h,
        this.id = -1,
        this.width = 0,
        this.height = 0,
        this.elementRef = null,
        this.skipMovement = !1,
        this._top = 0,
        this._left = 0,
        this.id = ++Vv.BUBBLE_COUNTER
    }
    get top()
    {
        return this._top
    }
    set top(s)
    {
        this._top = s,
        this.elementRef && (this.elementRef.style.top = this._top + "px")
    }
    get left()
    {
        return this._left
    }
    set left(s)
    {
        this._left = s,
        this.elementRef && (this.elementRef.style.left = this._left + "px")
    }
}
;
let Hv = Vv;
Hv.BUBBLE_COUNTER = 0;
class Qi {}
Qi.CHAT_DEFAULT = 0;
Qi.CHAT_WHISPER = 1;
Qi.CHAT_SHOUT = 2;
class Wp {
    constructor(e=0, t=0, r=0, i=0)
    {
        this.id = e,
        this.type = t,
        this.color = r,
        this.light = i
    }
}
const h4 = (s, e, t, r=0) => !(s.left + r + s.width < e.left + r || s.left + r > e.left + r + e.width || s.top + s.height < e.top + t || s.top > e.top + t + e.height);
class Hr {
    static savePreset(e, t, r, i, n)
    {
        dt().updateMoodlightData(e, t, r, i, n)
    }
    static changeState()
    {
        dt().toggleMoodlightState()
    }
    static previewDimmer(e, t, r)
    {
        re().updateObjectRoomColor(dt().roomId, e, t, r)
    }
    static scaleBrightness(e)
    {
        return ~~((e - this.MIN_BRIGHTNESS) * (100 - 0) / (this.MAX_BRIGHTNESS - this.MIN_BRIGHTNESS) + 0)
    }
}
Hr.AVAILABLE_COLORS = [7665141, 21495, 15161822, 15353138, 15923281, 8581961, 0];
Hr.HTML_COLORS = ["#74F5F5", "#0053F7", "#E759DE", "#EA4532", "#F2F851", "#82F349", "#000000"];
Hr.MIN_BRIGHTNESS = 76;
Hr.MAX_BRIGHTNESS = 255;
const d4 = 130,
    _4 = 100,
    g4 = 130,
    f4 = 100,
    m4 = 130,
    E4 = 100,
    jv = s => {
        let e = 0,
            t = 0,
            r = 0,
            i = 0;
        for (; i < s.length;) {
            switch (i % 3) {
            case 0:
                e = e + s.charCodeAt(i) * 37;
                break;
            case 1:
                t = t + s.charCodeAt(i) * 37;
                break;
            case 2:
                r = r + s.charCodeAt(i) * 37;
                break
            }
            i++
        }
        return e = e % _4 + d4, t = t % f4 + g4, r = r % E4 + m4, `rgb(${e},${t},${r})`
    };
class vl {
    static getMergedMannequinFigureContainer(e, t)
    {
        const r = bs().createFigureContainer(e),
            i = bs().createFigureContainer(t);
        for (const n of this.MANNEQUIN_CLOTHING_PART_TYPES)
            r.removePart(n);
        for (const n of i.getPartTypeIds())
            r.updatePart(n, i.getPartSetId(n), i.getPartColorIds(n));
        return r
    }
    static transformAsMannequinFigure(e)
    {
        for (const t of e.getPartTypeIds())
            this.MANNEQUIN_CLOTHING_PART_TYPES.indexOf(t) >= 0 || e.removePart(t);
        e.updatePart(this.MANNEQUIN_FIGURE[0], this.MANNEQUIN_FIGURE[1], this.MANNEQUIN_FIGURE[2])
    }
}
vl.MANNEQUIN_FIGURE = ["hd", 99999, [99998]];
vl.MANNEQUIN_CLOTHING_PART_TYPES = [Te.CHEST_ACCESSORY, Te.COAT_CHEST, Te.CHEST, Te.LEGS, Te.SHOES, Te.WAIST_ACCESSORY];
class ld {}
ld.POSTURE_STAND = 0;
ld.POSTURE_SIT = 1;
class Nl {
    constructor(e, t, r)
    {
        this._id = e,
        this._category = t,
        this._name = r
    }
    get id()
    {
        return this._id
    }
    get category()
    {
        return this._category
    }
    get name()
    {
        return this._name
    }
}
class p4 {
    constructor(e, t, r, i, n, o, l)
    {
        this.id = e,
        this.category = t,
        this.name = r,
        this.requestRoomObjectId = i,
        this.targetRoomObjectId = n,
        this.requestInventoryStripId = o,
        this.replace = l
    }
}
const cd = "0",
    Wv = "1";
class Li {}
Li.UNSTARTED = -1;
Li.ENDED = 0;
Li.PLAYING = 1;
Li.PAUSED = 2;
Li.BUFFERING = 3;
Li.CUED = 5;
function Fr(s) {
    B(new rD(s))
}
const Du = s => {
    const e = Math.floor(s / 2);
    return s % 2 ? (e + .5).toString() : e.toString()
};
class je {}
je.TOGGLE_FURNI_STATE = 0;
je.RESET = 1;
je.SET_FURNI_STATE = 3;
je.MOVE_FURNI = 4;
je.GIVE_SCORE = 6;
je.CHAT = 7;
je.TELEPORT = 8;
je.JOIN_TEAM = 9;
je.LEAVE_TEAM = 10;
je.CHASE = 11;
je.FLEE = 12;
je.MOVE_AND_ROTATE_FURNI = 13;
je.GIVE_SCORE_TO_PREDEFINED_TEAM = 14;
je.TOGGLE_TO_RANDOM_STATE = 15;
je.MOVE_FURNI_TO = 16;
je.GIVE_REWARD = 17;
je.CALL_ANOTHER_STACK = 18;
je.KICK_FROM_ROOM = 19;
je.MUTE_USER = 20;
je.BOT_TELEPORT = 21;
je.BOT_MOVE = 22;
je.BOT_TALK = 23;
je.BOT_GIVE_HAND_ITEM = 24;
je.BOT_FOLLOW_AVATAR = 25;
je.BOT_CHANGE_FIGURE = 26;
je.BOT_TALK_DIRECT_TO_AVTR = 27;
class ke {}
ke.STATES_MATCH = 0;
ke.FURNIS_HAVE_AVATARS = 1;
ke.ACTOR_IS_ON_FURNI = 2;
ke.TIME_ELAPSED_MORE = 3;
ke.TIME_ELAPSED_LESS = 4;
ke.USER_COUNT_IN = 5;
ke.ACTOR_IS_IN_TEAM = 6;
ke.HAS_STACKED_FURNIS = 7;
ke.STUFF_TYPE_MATCHES = 8;
ke.STUFFS_IN_FORMATION = 9;
ke.ACTOR_IS_GROUP_MEMBER = 10;
ke.ACTOR_IS_WEARING_BADGE = 11;
ke.ACTOR_IS_WEARING_EFFECT = 12;
ke.NOT_STATES_MATCH = 13;
ke.FURNI_NOT_HAVE_HABBO = 14;
ke.NOT_ACTOR_ON_FURNI = 15;
ke.NOT_USER_COUNT_IN = 16;
ke.NOT_ACTOR_IN_TEAM = 17;
ke.NOT_HAS_STACKED_FURNIS = 18;
ke.NOT_FURNI_IS_OF_TYPE = 19;
ke.NOT_STUFFS_IN_FORMATION = 20;
ke.NOT_ACTOR_IN_GROUP = 21;
ke.NOT_ACTOR_WEARS_BADGE = 22;
ke.NOT_ACTOR_WEARING_EFFECT = 23;
ke.DATE_RANGE_ACTIVE = 24;
ke.ACTOR_HAS_HANDITEM = 25;
ke.PERFORMING_ACTION = 32;
const Yp = s => `${s.getFullYear()}/${("0" + (s.getMonth() + 1)).slice(-2)}/${("0" + s.getDate()).slice(-2)} ${("0" + s.getHours()).slice(-2)}:${("0" + s.getMinutes()).slice(-2)}`;
class Re {}
Re.STUFF_SELECTION_OPTION_NONE = 0;
Re.STUFF_SELECTION_OPTION_BY_ID = 1;
Re.STUFF_SELECTION_OPTION_BY_ID_OR_BY_TYPE = 2;
Re.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT = 3;
const I4 = `
attribute vec2 aVertexPosition;
attribute vec2 aTextureCoord;
uniform mat3 projectionMatrix;
varying vec2 vTextureCoord;
void main(void)
{
    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);
    vTextureCoord = aTextureCoord;
}`








    ,
    T4 = `
varying vec2 vTextureCoord;
uniform sampler2D uSampler;
uniform vec3 lineColor;
uniform vec3 color;
void main(void) {
    vec4 currentColor = texture2D(uSampler, vTextureCoord);
    vec3 colorLine = lineColor * currentColor.a;
    vec3 colorOverlay = color * currentColor.a;

    if(currentColor.r == 0.0 && currentColor.g == 0.0 && currentColor.b == 0.0 && currentColor.a > 0.0) {
        gl_FragColor = vec4(colorLine.r, colorLine.g, colorLine.b, currentColor.a);
    } else if(currentColor.a > 0.0) {
        gl_FragColor = vec4(colorOverlay.r, colorOverlay.g, colorOverlay.b, currentColor.a);
    }
}`














    ;
class R4 extends _T {
    constructor(e, t)
    {
        super(I4, T4),
        this.uniforms.lineColor = new Float32Array(3),
        this.uniforms.color = new Float32Array(3),
        this.lineColor = e,
        this.color = t
    }
    get lineColor()
    {
        return this._lineColor
    }
    set lineColor(e)
    {
        const t = this.uniforms.lineColor;
        typeof e == "number" ? (nr.hex2rgb(e, t), this._lineColor = e) : (t[0] = e[0], t[1] = e[1], t[2] = e[2], this._lineColor = nr.rgb2hex(t))
    }
    get color()
    {
        return this._color
    }
    set color(e)
    {
        const t = this.uniforms.color;
        typeof e == "number" ? (nr.hex2rgb(e, t), this._color = e) : (t[0] = e[0], t[1] = e[1], t[2] = e[2], this._color = nr.rgb2hex(t))
    }
}
const gn = class {
    static show(s)
    {
        gn.applySelectionShader(gn.getRoomObject(s))
    }
    static hide(s)
    {
        gn.clearSelectionShader(gn.getRoomObject(s))
    }
    static clearSelectionShaderFromFurni(s)
    {
        for (const e of s)
            gn.clearSelectionShader(gn.getRoomObject(e))
    }
    static applySelectionShaderToFurni(s)
    {
        for (const e of s)
            gn.applySelectionShader(gn.getRoomObject(e))
    }
    static getRoomObject(s)
    {
        const e = re();
        return e.getRoomObject(e.activeRoomId, s, V.FLOOR)
    }
    static applySelectionShader(s)
    {
        if (!s)
            return;
        const e = s.visualization;
        if (e)
            for (const t of e.sprites)
                t.blendMode !== 1 && (t.filters = [gn._selectionShader])
    }
    static clearSelectionShader(s)
    {
        if (!s)
            return;
        const e = s.visualization;
        if (e)
            for (const t of e.sprites)
                t.filters = []
    }
}
;
let Pl = gn;
Pl._selectionShader = new R4([1, 1, 1], [.6, .6, .6]);
const Xl = "    ";
class Ft {}
Ft.AVATAR_SAYS_SOMETHING = 0;
Ft.AVATAR_WALKS_ON_FURNI = 1;
Ft.AVATAR_WALKS_OFF_FURNI = 2;
Ft.EXECUTE_ONCE = 3;
Ft.TOGGLE_FURNI = 4;
Ft.EXECUTE_PERIODICALLY = 6;
Ft.AVATAR_ENTERS_ROOM = 7;
Ft.GAME_STARTS = 8;
Ft.GAME_ENDS = 9;
Ft.SCORE_ACHIEVED = 10;
Ft.COLLISION = 11;
Ft.EXECUTE_PERIODICALLY_LONG = 12;
Ft.BOT_REACHED_STUFF = 13;
Ft.BOT_REACHED_AVATAR = 14;
Ft.AVATAR_CLICKS_FURNI = 18;
Ft.AVATAR_CLICKS_TILE = 21;
const k = s => {
        const {ref: e=null, innerRef: t=null, display: r=null, fit: i=!1, fitV: n=!1, grow: o=!1, shrink: l=!1, fullWidth: c=!1, fullHeight: u=!1, overflow: h=null, position: d=null, float: m=null, pointer: p=!1, visible: E=null, textColor: T=null, classNames: I=[], className: S="", style: A={}, children: N=null, ...b} = s,
            v = _.useMemo(() => {
                const x = [];
                return r && r.length && x.push("d-" + r), (i || c) && x.push("w-100"), (i || u) && x.push("h-100"), n && x.push("vw-100", "vh-100"), o && x.push("flex-grow-1"), l && x.push("flex-shrink-0"), h && x.push("overflow-" + h), d && x.push("position-" + d), m && x.push("float-" + m), p && x.push("cursor-pointer"), E !== null && x.push(E ? "visible" : "invisible"), T && x.push("text-" + T), I.length && x.push(...I), x
            }, [r, i, n, o, l, c, u, h, d, m, p, E, T, I]),
            D = _.useMemo(() => {
                let x = v.join(" ");
                return S.length && (x += " " + S), x.trim()
            }, [v, S]),
            G = _.useMemo(() => {
                let x = {};
                return Object.keys(A).length && (x = {
                    ...x,
                    ...A
                }), x
            }, [A]);
        return a("div", {
            ref: t,
            className: D,
            style: G,
            ...b,
            children: N
        })
    },
    Yv = _.createContext({
        isCssGrid: !1
    }),
    O4 = s => a(Yv.Provider, {
        value: s.value,
        children: s.children
    }),
    S4 = () => _.useContext(Yv),
    fe = s => {
        const {inline: e=!1, gap: t=2, maxContent: r=!1, columnCount: i=0, center: n=!1, alignSelf: o=null, alignItems: l=null, justifyContent: c=null, fullHeight: u=!0, classNames: h=[], style: d={}, ...m} = s,
            p = _.useMemo(() => {
                const T = [];
                return e ? T.push("inline-grid") : T.push("grid"), t ? T.push("gap-" + t) : t === 0 && T.push("gap-0"), r && T.push("flex-basis-max-content"), o && T.push("align-self-" + o), l && T.push("align-items-" + l), c && T.push("justify-content-" + c), !l && !c && n && T.push("align-items-center", "justify-content-center"), h.length && T.push(...h), T
            }, [e, t, r, o, l, c, n, h]),
            E = _.useMemo(() => {
                let T = {};
                return i && (T["--bs-columns"] = i.toString()), Object.keys(d).length && (T = {
                    ...T,
                    ...d
                }), T
            }, [i, d]);
        return a(O4, {
            value: {
                isCssGrid: !0
            },
            children: a(k, {
                fullHeight: u,
                classNames: p,
                style: E,
                ...m
            })
        })
    },
    Mt = s => {
        const {columnMinWidth: e=40, columnMinHeight: t=40, columnCount: r=0, fullHeight: i=!1, maxContent: n=!0, overflow: o="auto", style: l={}, ...c} = s,
            u = _.useMemo(() => {
                let h = {};
                return h["--nitro-grid-column-min-height"] = t + "px", r > 1 && (h.gridTemplateColumns = `repeat(auto-fill, minmax(${e}px, 1fr))`), Object.keys(l).length && (h = {
                    ...h,
                    ...l
                }), h
            }, [e, t, r, l]);
        return a(fe, {
            columnCount: r,
            fullHeight: i,
            overflow: o,
            style: u,
            ...c
        })
    },
    P = s => {
        const {display: e="flex", column: t=void 0, reverse: r=!1, gap: i=null, center: n=!1, alignSelf: o=null, alignItems: l=null, justifyContent: c=null, classNames: u=[], ...h} = s,
            d = _.useMemo(() => {
                const m = [];
                return t ? r ? m.push("flex-column-reverse") : m.push("flex-column") : r && m.push("flex-row-reverse"), i && m.push("gap-" + i), o && m.push("align-self-" + o), l && m.push("align-items-" + l), c && m.push("justify-content-" + c), !l && !c && n && m.push("align-items-center", "justify-content-center"), u.length && m.push(...u), m
            }, [t, r, i, n, o, l, c, u]);
        return a(k, {
            display: e,
            classNames: d,
            ...h
        })
    },
    H = s => {
        const {variant: e="primary", size: t="sm", active: r=!1, disabled: i=!1, classNames: n=[], ...o} = s,
            l = _.useMemo(() => {
                const c = ["btn"];
                return e && c.push("btn-" + e), t && c.push("btn-" + t), r && c.push("active"), i && c.push("disabled"), n.length && c.push(...n), c
            }, [e, t, r, i, n]);
        return a(P, {
            center: !0,
            classNames: l,
            ...o
        })
    },
    An = s => {
        const {classNames: e=[], ...t} = s,
            r = _.useMemo(() => {
                const i = ["btn-group"];
                return e.length && i.push(...e), i
            }, [e]);
        return a(k, {
            classNames: r,
            ...t
        })
    },
    zv = _.createContext({
        closers: null,
        setClosers: null,
        closeAll: null
    }),
    C4 = s => a(zv.Provider, {
        ...s
    }),
    A4 = () => _.useContext(zv),
    ud = s => {
        const {alignItems: e="center", gap: t=1, children: r=null, ...i} = s;
        return a(P, {
            alignItems: e,
            gap: t,
            ...i,
            children: r
        })
    },
    hd = s => {
        const {headerText: e="", isExpanded: t=!1, gap: r=0, classNames: i=[], children: n=null, ...o} = s,
            [l, c] = _.useState(!1),
            {setClosers: u=null, closeAll: h=null} = A4(),
            d = () => {
                h(),
                c(E => !E)
            },
            m = _.useCallback(() => c(!1), []),
            p = _.useMemo(() => {
                const E = ["nitro-card-accordion-set"];
                return l && E.push("active"), i && i.length && E.push(...i), E
            }, [l, i]);
        return _.useEffect(() => {
            c(t)
        }, [t]), _.useEffect(() => {
            const E = m;
            return u(T => {
                const I = [...T];
                return I.push(E), I
            }), () => {
                u(T => {
                    const I = [...T],
                        S = I.indexOf(E);
                    return S >= 0 && I.splice(S, 1), I
                })
            }
        }, [m, u]), g(M, {
            classNames: p,
            gap: r,
            ...o,
            children: [g(P, {
                pointer: !0,
                justifyContent: "between",
                className: "nitro-card-accordion-set-header px-2 py-1",
                onClick: d,
                children: [a(y, {
                    children: e
                }), l && a(Bf, {
                    className: "fa-icon"
                }), !l && a(kf, {
                    className: "fa-icon"
                })]
            }), l && a(M, {
                fullHeight: !0,
                overflow: "auto",
                gap: 0,
                className: "nitro-card-accordion-set-content",
                children: n
            })]
        })
    },
    N4 = s => {
        const {...e} = s,
            [t, r] = _.useState([]),
            i = _.useCallback(() => {
                for (const n of t)
                    n()
            }, [t]);
        return a(C4, {
            value: {
                closers: t,
                setClosers: r,
                closeAll: i
            },
            children: a(M, {
                gap: 0,
                ...e
            })
        })
    },
    Ie = s => {
        const {overflow: e="auto", classNames: t=[], ...r} = s,
            i = _.useMemo(() => {
                const n = ["container-fluid", "content-area"];
                return t.length && n.push(...t), n
            }, [t]);
        return a(M, {
            classNames: i,
            overflow: e,
            ...r
        })
    },
    y4 = _.createContext({
        theme: null
    }),
    M4 = s => a(y4.Provider, {
        value: s.value,
        children: s.children
    }),
    Oe = s => {
        const {headerText: e=null, isGalleryPhoto: t=!1, noCloseButton: r=!1, onReportPhoto: i=null, onCloseClick: n=null, justifyContent: o="center", alignItems: l="center", classNames: c=[], children: u=null, ...h} = s,
            d = _.useMemo(() => {
                const p = ["drag-handler", "container-fluid", "nitro-card-header"];
                return c.length && p.push(...c), p
            }, [c]);
        return a(M, {
            center: !0,
            position: "relative",
            classNames: d,
            ...h,
            children: g(P, {
                fullWidth: !0,
                center: !0,
                children: [a("span", {
                    className: "nitro-card-header-text",
                    children: e
                }), t && a(k, {
                    position: "absolute",
                    className: "end-4 nitro-card-header-report-camera",
                    onClick: i,
                    children: a(iL, {
                        className: "fa-icon"
                    })
                }), a(P, {
                    center: !0,
                    position: "absolute",
                    className: "end-2 nitro-card-header-close",
                    onMouseDownCapture: p => {
                        p.stopPropagation(),
                        p.nativeEvent.stopImmediatePropagation()
                    },
                    onClick: n,
                    children: !r && a(mi, {
                        className: "fa-icon w-12 h-12"
                    })
                })]
            })
        })
    },
    Kv = s => {
        const {justifyContent: e="center", classNames: t=[], variant: r="muted", ...i} = s,
            n = _.useMemo(() => {
                const o = ["container-fluid", "p-1"];
                return t.length && o.push(...t), o.push("bg-" + r), o
            }, [t, r]);
        return a(P, {
            justifyContent: e,
            classNames: n,
            ...i
        })
    };
class qs {}
qs.CENTER = "DWP_CENTER";
qs.TOP_CENTER = "DWP_TOP_CENTER";
qs.TOP_LEFT = "DWP_TOP_LEFT";
qs.NOTHING = "DWP_NOTHING";
const Un = [],
    zp = 0,
    Kp = 0,
    so = s => {
        const {uniqueKey: e=null, handleSelector: t=".drag-handler", windowPosition: r=qs.CENTER, disableDrag: i=!1, dragStyle: n={}, children: o=null, offsetLeft: l=0, offsetTop: c=0} = s,
            [u, h] = _.useState(null),
            [d, m] = _.useState(null),
            [p, E] = _.useState({
                x: 0,
                y: 0
            }),
            [T, I] = _.useState(!1),
            [S, A] = _.useState(null),
            N = _.useRef(),
            b = _.useCallback(() => {
                let K = 400;
                for (const be of Un)
                    K += 1,
                    be.style.zIndex = K.toString()
            }, []),
            v = _.useCallback(() => {
                const K = Un.indexOf(N.current);
                if (K === -1)
                    Un.push(N.current);
                else {
                    if (K === Un.length - 1)
                        return;
                    K >= 0 && (Un.splice(K, 1), Un.push(N.current))
                }
                b()
            }, [b]),
            D = _.useCallback(K => {
                v()
            }, [v]),
            G = _.useCallback(K => {
                v()
            }, [v]),
            x = _.useCallback((K, be) => {
                E({
                    x: K,
                    y: be
                }),
                I(!0)
            }, []),
            F = _.useCallback(K => {
                x(K.clientX, K.clientY)
            }, [x]),
            U = _.useCallback(K => {
                const be = K.touches[0];
                x(be.clientX, be.clientY)
            }, [x]),
            z = _.useCallback(K => {
                h({
                    x: K.clientX - p.x,
                    y: K.clientY - p.y
                })
            }, [p]),
            Q = _.useCallback(K => {
                const be = K.touches[0];
                h({
                    x: be.clientX - p.x,
                    y: be.clientY - p.y
                })
            }, [p]),
            j = _.useCallback(() => {
                if (!N.current || !S)
                    return;
                let K = d.x + u.x,
                    be = d.y + u.y;
                const he = N.current.offsetLeft + K,
                    et = N.current.offsetTop + be;
                if (et < zp ? be = -N.current.offsetTop : et + S.offsetHeight >= document.body.offsetHeight - zp && (be = document.body.offsetHeight - N.current.offsetHeight - N.current.offsetTop), he + N.current.offsetWidth < Kp ? K = -N.current.offsetLeft : he >= document.body.offsetWidth - Kp && (K = document.body.offsetWidth - N.current.offsetWidth - N.current.offsetLeft), h({
                    x: 0,
                    y: 0
                }), m({
                    x: K,
                    y: be
                }), I(!1), e !== null) {
                    const Ut = {
                        ...id(`nitro.windows.${e}`)
                    };
                    Ut.offset = {
                        x: K,
                        y: be
                    },
                    bv(`nitro.windows.${e}`, Ut)
                }
            }, [S, u, d, e]),
            J = _.useCallback(K => {
                j()
            }, [j]),
            X = _.useCallback(K => {
                j()
            }, [j]);
        return _.useEffect(() => {
            const K = N.current;
            if (!K)
                return;
            if (Un.push(K), b(), !i) {
                const et = K.querySelector(t);
                et && A(et)
            }
            let be = 0,
                he = 0;
            switch (r) {
            case qs.TOP_CENTER:
                K.style.top = 50 + c + "px",
                K.style.left = `calc(50vw - ${K.offsetWidth / 2 + l}px)`;
                break;
            case qs.CENTER:
                K.style.top = `calc(50vh - ${K.offsetHeight / 2 + c}px)`,
                K.style.left = `calc(50vw - ${K.offsetWidth / 2 + l}px)`;
                break;
            case qs.TOP_LEFT:
                K.style.top = 50 + c + "px",
                K.style.left = 50 + l + "px";
                break
            }
            return h({
                x: 0,
                y: 0
            }), m({
                x: be,
                y: he
            }), () => {
                const et = Un.indexOf(K);
                et >= 0 && Un.splice(et, 1)
            }
        }, [t, r, e, i, l, c, b]), _.useEffect(() => {
            if (!d && !u)
                return;
            const K = N.current;
            K && (K.style.transform = `translate(${d.x + u.x}px, ${d.y + u.y}px)`, K.style.visibility = "visible")
        }, [d, u]), _.useEffect(() => {
            if (S)
                return S.addEventListener(le.MOUSE_DOWN, F), S.addEventListener(tr.TOUCH_START, U), () => {
                    S.removeEventListener(le.MOUSE_DOWN, F),
                    S.removeEventListener(tr.TOUCH_START, U)
                }
        }, [S, F, U]), _.useEffect(() => {
            if (T)
                return document.addEventListener(le.MOUSE_UP, J), document.addEventListener(tr.TOUCH_END, X), document.addEventListener(le.MOUSE_MOVE, z), document.addEventListener(tr.TOUCH_MOVE, Q), () => {
                    document.removeEventListener(le.MOUSE_UP, J),
                    document.removeEventListener(tr.TOUCH_END, X),
                    document.removeEventListener(le.MOUSE_MOVE, z),
                    document.removeEventListener(tr.TOUCH_MOVE, Q)
                }
        }, [T, J, z, X, Q]), _.useEffect(() => {
            if (!e)
                return;
            const K = id(`nitro.windows.${e}`);
            !K || !K.offset || (h({
                x: 0,
                y: 0
            }), K.offset && m(K.offset))
        }, [e]), Vf.createPortal(a(k, {
            position: "absolute",
            innerRef: N,
            className: "draggable-window",
            onMouseDownCapture: D,
            onTouchStartCapture: G,
            style: n,
            children: o
        }), document.getElementById("draggable-windows-container"))
    },
    Se = s => {
        const {theme: e="primary", uniqueKey: t=null, handleSelector: r=".drag-handler", windowPosition: i=qs.CENTER, disableDrag: n=!1, overflow: o="hidden", position: l="relative", gap: c=0, classNames: u=[], ...h} = s,
            d = _.useRef(),
            m = _.useMemo(() => {
                const p = ["nitro-card", "rounded", "shadow"];
                return p.push(`theme-${e || "primary"}`), u.length && p.push(...u), p
            }, [e, u]);
        return a(M4, {
            value: {
                theme: e
            },
            children: a(so, {
                uniqueKey: t,
                handleSelector: r,
                windowPosition: i,
                disableDrag: n,
                children: a(M, {
                    innerRef: d,
                    overflow: o,
                    position: l,
                    gap: c,
                    classNames: m,
                    ...h
                })
            })
        })
    },
    rs = s => {
        const {figure: e="", gender: t="M", headOnly: r=!1, direction: i=0, scale: n=1, classNames: o=[], style: l={}, ...c} = s,
            [u, h] = _.useState(null),
            [d, m] = _.useState(-1),
            p = _.useRef(!1),
            E = _.useMemo(() => {
                const I = ["avatar-image"];
                return o.length && I.push(...o), I
            }, [o]),
            T = _.useMemo(() => {
                let I = {};
                return u && u.length && (I.backgroundImage = `url('${u}')`), n !== 1 && (I.transform = `scale(${n})`, n % 1 || (I.imageRendering = "pixelated")), Object.keys(l).length && (I = {
                    ...I,
                    ...l
                }), I
            }, [u, n, l]);
        return _.useEffect(() => {
            const I = bs().createAvatarImage(e, li.LARGE, t, {
                resetFigure: N => {
                    p.current || m(Math.random())
                },
                dispose: () => {},
                disposed: !1
            }, null);
            if (!I)
                return;
            let S = Ys.FULL;
            r && (S = Ys.HEAD),
            I.setDirection(S, i);
            const A = I.getCroppedImage(S);
            A && h(A.src),
            I.dispose()
        }, [e, t, i, r, d]), _.useEffect(() => (p.current = !1, () => {
            p.current = !0
        }), []), a(k, {
            classNames: E,
            style: T,
            ...c
        })
    },
    qv = s => {
        const {imageUrl: e=null, fit: t=!0, style: r=null, ...i} = s,
            n = _.useMemo(() => {
                const o = {
                    ...r
                };
                return e && (o.background = `url(${e}) center no-repeat`), o
            }, [r, e]);
        return a(k, {
            fit: t,
            style: n,
            ...i
        })
    },
    Vt = s => {
        const {badgeCode: e=null, isGroup: t=!1, showInfo: r=!1, customTitle: i=null, isGrayscale: n=!1, scale: o=1, classNames: l=[], style: c={}, children: u=null, ...h} = s,
            [d, m] = _.useState(null),
            p = _.useMemo(() => {
                const T = ["badge-image"];
                return t && T.push("group-badge"), n && T.push("grayscale"), l.length && T.push(...l), T
            }, [l, t, n]),
            E = _.useMemo(() => {
                let T = {};
                return d && (T.backgroundImage = `url(${t ? d.src : oe("badge.asset.url").replace("%badgename%", e.toString())})`, T.width = d.width, T.height = d.height, o !== 1 && (T.transform = `scale(${o})`, o % 1 || (T.imageRendering = "pixelated"), T.width = d.width * o, T.height = d.height * o)), Object.keys(c).length && (T = {
                    ...T,
                    ...c
                }), T
            }, [d, o, c]);
        return _.useEffect(() => {
            if (!e || !e.length)
                return;
            let T = !1;
            const I = A => {
                if (A.badgeId !== e)
                    return;
                const N = pt.generateImage(new qt(A.image));
                N.onload = () => m(N),
                T = !0,
                Z().events.removeEventListener(wa.IMAGE_READY, I)
            };
            Z().events.addEventListener(wa.IMAGE_READY, I);
            const S = t ? Z().getGroupBadgeImage(e) : Z().getBadgeImage(e);
            if (S && !T) {
                const A = pt.generateImage(new qt(S));
                A.onload = () => m(A)
            }
            return () => Z().events.removeEventListener(wa.IMAGE_READY, I)
        }, [e, t]), g(k, {
            classNames: p,
            style: E,
            ...h,
            children: [r && oe("badge.descriptions.enabled", !0) && g(k, {
                className: "badge-information text-black py-1 px-2 small",
                children: [a("div", {
                    className: "fw-bold mb-1",
                    children: t ? i : dc(e)
                }), a("div", {
                    children: t ? f("group.badgepopup.body") : t_(e)
                })]
            }), u]
        })
    },
    b4 = s => {
        const {day: e="00", hour: t="00", minutes: r="00", seconds: i="00", classNames: n=[], children: o=null, ...l} = s,
            c = _.useMemo(() => {
                const u = ["nitro-counter-time"];
                return n.length && u.push(...n), u
            }, [n]);
        return g(P, {
            gap: 1,
            children: [a(k, {
                classNames: c,
                ...l,
                children: g("div", {
                    children: [e != "00" ? e : t, e != "00" ? f("countdown_clock_unit_days") : f("countdown_clock_unit_hours")]
                })
            }), a(k, {
                style: {
                    marginTop: "3px"
                },
                children: ":"
            }), a(k, {
                classNames: c,
                ...l,
                children: g("div", {
                    children: [r, f("countdown_clock_unit_minutes")]
                })
            }), a(k, {
                style: {
                    marginTop: "3px"
                },
                children: ":"
            }), a(k, {
                classNames: c,
                ...l,
                children: g("div", {
                    children: [i, f("countdown_clock_unit_seconds")]
                })
            }), o]
        })
    },
    us = s => {
        const {type: e="", classNames: t=[], style: r={}, ...i} = s,
            n = _.useMemo(() => {
                const c = ["nitro-currency-icon"];
                return t.length && c.push(...t), c
            }, [t]),
            o = _.useMemo(() => {
                let c = oe("currency.asset.icon.url", "");
                return c = c.replace("%type%", e.toString()), `url(${c})`
            }, [e]),
            l = _.useMemo(() => {
                let c = {};
                return c.backgroundImage = o, Object.keys(r).length && (c = {
                    ...c,
                    ...r
                }), c
            }, [r, o]);
        return a(k, {
            classNames: n,
            style: l,
            ...i
        })
    },
    WE = s => {
        const {productType: e="s", productClassId: t=-1, direction: r=2, extraData: i="", scale: n=1, style: o={}, ...l} = s,
            [c, u] = _.useState(null),
            h = _.useMemo(() => {
                var m;
                let d = {};
                return (m = c == null ? void 0 : c.src) != null && m.length && (d.backgroundImage = `url('${c.src}')`, d.width = c.width, d.height = c.height), n !== 1 && (d.transform = `scale(${n})`, n % 1 || (d.imageRendering = "pixelated")), Object.keys(o).length && (d = {
                    ...d,
                    ...o
                }), d
            }, [c, n, o]);
        return _.useEffect(() => {
            let d = null;
            const m = {
                imageReady: (p, E, T) => {
                    !T && E && (T = pt.generateImage(E)),
                    T.onload = () => u(T)
                },
                imageFailed: null
            };
            switch (e.toLocaleLowerCase()) {
            case Ue.FLOOR:
                d = re().getFurnitureFloorImage(t, new w(r), 64, m, 0, i);
                break;
            case Ue.WALL:
                d = re().getFurnitureWallImage(t, new w(r), 64, m, 0, i);
                break
            }
            if (d) {
                const p = d.getImage();
                p.onload = () => u(p)
            }
        }, [e, t, r, i]), c ? a(k, {
            classNames: ["furni-image"],
            style: h,
            ...l
        }) : null
    },
    Xv = s => {
        const {figure: e=null, userName: t=null, message: r=null, editable: i=!1, onChange: n=null} = s;
        return g(P, {
            overflow: "hidden",
            className: "nitro-gift-card text-black",
            children: [g("div", {
                className: "d-flex align-items-center justify-content-center gift-face flex-shrink-0",
                children: [!t && a("div", {
                    className: "gift-incognito"
                }), e && a("div", {
                    className: "gift-avatar",
                    children: a(rs, {
                        figure: e,
                        direction: 2,
                        headOnly: !0
                    })
                })]
            }), a(P, {
                overflow: "hidden",
                className: "w-100 pt-4 pb-4 pe-4 ps-3",
                children: g(M, {
                    grow: !0,
                    overflow: "auto",
                    justifyContent: "between",
                    children: [!i && a(y, {
                        textBreak: !0,
                        className: "gift-message",
                        children: r
                    }), i && n !== null && a("textarea", {
                        className: "gift-message h-100",
                        maxLength: 140,
                        value: r,
                        onChange: o => n(o.target.value),
                        placeholder: f("catalog.gift_wrapping_new.message_hint")
                    }), t && a(y, {
                        italics: !0,
                        textEnd: !0,
                        className: "pe-1",
                        children: f("catalog.gift_wrapping_new.message_from", ["name"], [t])
                    })]
                })
            })]
        })
    },
    M = s => {
        const {size: e=0, offset: t=0, column: r=!0, gap: i=2, classNames: n=[], ...o} = s,
            {isCssGrid: l=!1} = S4(),
            c = _.useMemo(() => {
                const u = [];
                if (e) {
                    let h = `col-${e}`;
                    l && (h = `g-${h}`),
                    u.push(h)
                }
                if (t) {
                    let h = `offset-${t}`;
                    l && (h = `g-start-${t}`),
                    u.push(h)
                }
                return n.length && u.push(...n), u
            }, [e, t, l, n]);
        return a(P, {
            classNames: c,
            column: r,
            gap: i,
            ...o
        })
    },
    Wa = s => {
        const {count: e=0, position: t="absolute", classNames: r=[], children: i=null, ...n} = s,
            o = _.useMemo(() => {
                const l = ["badge", "border", "border-black", "bg-danger", "px-1", "nitro-item-count"];
                return r.length && l.push(...r), l
            }, [r]);
        return g(k, {
            position: "absolute",
            classNames: o,
            ...n,
            children: [e, i]
        })
    },
    eu = s => {
        const {value: e=0} = s,
            t = e.toString().split("");
        return a(q, {
            children: t.map((r, i) => a("i", {
                className: "limited-edition-number n-" + r
            }, i))
        })
    },
    Qv = s => {
        const {uniqueNumber: e=0, uniqueSeries: t=0, classNames: r=[], children: i=null, ...n} = s,
            o = _.useMemo(() => {
                const l = ["unique-compact-plate", "z-index-1"];
                return r.length && l.push(...r), l
            }, [r]);
        return g(k, {
            classNames: o,
            ...n,
            children: [a("div", {
                children: a(eu, {
                    value: e
                })
            }), a("div", {
                children: a(eu, {
                    value: t
                })
            }), i]
        })
    },
    D4 = s => {
        const {uniqueLimitedItemsLeft: e=0, uniqueLimitedSeriesSize: t=0, classNames: r=[], ...i} = s,
            n = _.useMemo(() => {
                const o = ["unique-complete-plate"];
                return r.length && o.push(...r), o
            }, [r]);
        return a(k, {
            classNames: n,
            ...i,
            children: g(M, {
                className: "plate-container",
                gap: 0,
                children: [g(P, {
                    justifyContent: "between",
                    alignItems: "center",
                    children: [f("unique.items.left"), a("div", {
                        children: a(eu, {
                            value: e
                        })
                    })]
                }), g(P, {
                    justifyContent: "between",
                    alignItems: "center",
                    children: [f("unique.items.number.sold"), a("div", {
                        children: a(eu, {
                            value: t
                        })
                    })]
                })]
            })
        })
    },
    $e = s => {
        const {itemImage: e=void 0, itemColor: t=void 0, itemActive: r=!1, itemCount: i=1, itemCountMinimum: n=1, itemUniqueSoldout: o=!1, itemUniqueNumber: l=-2, itemUnseen: c=!1, itemHighlight: u=!1, disabled: h=!1, center: d=!0, column: m=!0, style: p={}, classNames: E=[], position: T="relative", overflow: I="hidden", children: S=null, ...A} = s,
            N = _.useMemo(() => {
                const v = ["layout-grid-item", "border", "border-2", "border-muted", "rounded"];
                return r && v.push("active"), (o || l > 0) && v.push("unique-item"), o && v.push("sold-out"), c && v.push("unseen"), u && v.push("has-highlight"), h && v.push("disabled"), e === null && v.push("icon", "loading-icon"), E.length && v.push(...E), v
            }, [r, o, l, c, u, h, e, E]),
            b = _.useMemo(() => {
                let v = {
                    ...p
                };
                return e && !(o || l > 0) && (v.backgroundImage = `url(${e})`), t && (v.backgroundColor = t), Object.keys(p).length && (v = {
                    ...v,
                    ...p
                }), v
            }, [p, e, t, o, l]);
        return g(M, {
            center: d,
            pointer: !0,
            position: T,
            overflow: I,
            column: m,
            classNames: N,
            style: b,
            ...A,
            children: [i > n && a(Wa, {
                count: i
            }), l > 0 && g(q, {
                children: [a(k, {
                    fit: !0,
                    className: "unique-bg-override",
                    style: {
                        backgroundImage: `url(${e})`
                    }
                }), a("div", {
                    className: "position-absolute bottom-0 unique-item-counter",
                    children: a(eu, {
                        value: l
                    })
                })]
            }), S]
        })
    },
    vn = s => {
        const {imageUrl: e=null, className: t="", ...r} = s;
        return a("img", {
            src: e,
            className: "no-select " + t,
            alt: "",
            ...r
        })
    },
    YE = s => {
        const {...e} = s;
        return g(k, {
            classNames: ["spinner-container"],
            ...e,
            children: [a(k, {
                className: "spinner"
            }), a(k, {
                className: "spinner"
            }), a(k, {
                className: "spinner"
            })]
        })
    },
    v4 = s => {
        const {roomId: e=-1, textureReceiver: t=null, onClose: r=null} = s,
            i = _.useRef(),
            n = () => {
                if (!i || !i.current)
                    return null;
                const l = i.current.getBoundingClientRect();
                return new gT(Math.floor(l.x), Math.floor(l.y), Math.floor(l.width), Math.floor(l.height))
            },
            o = () => {
                Mn(Zr.CAMERA_SHUTTER),
                t(re().createTextureFromRoom(e, 1, n()))
            };
        return a(so, {
            handleSelector: ".nitro-room-thumbnail-camera",
            children: g("div", {
                className: "nitro-room-thumbnail-camera px-2",
                children: [a("div", {
                    ref: i,
                    className: "camera-frame"
                }), g("div", {
                    className: "d-flex align-items-end h-100 pb-2",
                    children: [a("button", {
                        className: "btn btn-sm btn-danger w-100 mb-1 me-2",
                        onClick: r,
                        children: f("cancel")
                    }), a("button", {
                        className: "btn btn-sm btn-success w-100 mb-1",
                        onClick: o,
                        children: f("navigator.thumbeditor.save")
                    })]
                })]
            })
        })
    },
    i_ = s => {
        const {title: e="", onClose: t=null, classNames: r=[], children: i=null, type: n=we.DEFAULT, ...o} = s,
            l = _.useMemo(() => {
                const c = ["nitro-alert"];
                return c.push("nitro-alert-" + n), r.length && c.push(...r), c
            }, [r, n]);
        return g(Se, {
            classNames: l,
            theme: "habbo",
            ...o,
            children: [a(Oe, {
                headerText: e,
                onCloseClick: t
            }), a(Ie, {
                grow: !0,
                justifyContent: "between",
                overflow: "hidden",
                className: "text-black",
                gap: 0,
                children: i
            })]
        })
    };
class ws {}
ws.BOUNCE = "bounce";
ws.SLIDE_LEFT = "slideLeft";
ws.SLIDE_RIGHT = "slideRight";
ws.FLIP_X = "flipX";
ws.FADE_IN = "fadeIn";
ws.FADE_DOWN = "fadeDown";
ws.FADE_UP = "fadeUp";
ws.HEAD_SHAKE = "headShake";
function P4(s, e, t=300) {
    switch (s) {
    case ws.BOUNCE:
        switch (e) {
        default:
            return {};
        case pa:
            return {
                animationName: "bounceIn",
                animationDuration: `${t}ms`
            };
        case co:
            return {
                animationName: "bounceOut",
                animationDuration: `${t}ms`
            }
        }
    case ws.SLIDE_LEFT:
        switch (e) {
        default:
            return {};
        case pa:
            return {
                animationName: "slideInLeft",
                animationDuration: `${t}ms`
            };
        case co:
            return {
                animationName: "slideOutLeft",
                animationDuration: `${t}ms`
            }
        }
    case ws.SLIDE_RIGHT:
        switch (e) {
        default:
            return {};
        case pa:
            return {
                animationName: "slideInRight",
                animationDuration: `${t}ms`
            };
        case co:
            return {
                animationName: "slideOutRight",
                animationDuration: `${t}ms`
            }
        }
    case ws.FLIP_X:
        switch (e) {
        default:
            return {};
        case pa:
            return {
                animationName: "flipInX",
                animationDuration: `${t}ms`
            };
        case co:
            return {
                animationName: "flipOutX",
                animationDuration: `${t}ms`
            }
        }
    case ws.FADE_UP:
        switch (e) {
        default:
            return {};
        case pa:
            return {
                animationName: "fadeInUp",
                animationDuration: `${t}ms`
            };
        case co:
            return {
                animationName: "fadeOutDown",
                animationDuration: `${t}ms`
            }
        }
    case ws.FADE_IN:
        switch (e) {
        default:
            return {};
        case pa:
            return {
                animationName: "fadeIn",
                animationDuration: `${t}ms`
            };
        case co:
            return {
                animationName: "fadeOut",
                animationDuration: `${t}ms`
            }
        }
    case ws.FADE_DOWN:
        switch (e) {
        default:
            return {};
        case pa:
            return {
                animationName: "fadeInDown",
                animationDuration: `${t}ms`
            };
        case co:
            return {
                animationName: "fadeOutUp",
                animationDuration: `${t}ms`
            }
        }
    case ws.HEAD_SHAKE:
        switch (e) {
        default:
            return {};
        case pa:
            return {
                animationName: "headShake",
                animationDuration: `${t}ms`
            }
        }
    }
    return null
}
const vu = s => {
        const {type: e=null, inProp: t=!1, timeout: r=300, className: i=null, children: n=null} = s,
            [o, l] = _.useState(!1);
        return _.useEffect(() => {
            let c = null;
            return t ? l(!0) : c = setTimeout(() => {
                l(!1),
                clearTimeout(r)
            }, r), () => {
                c && clearTimeout(c)
            }
        }, [t, r]), a(nL, {
            in: t,
            timeout: r,
            children: c => a("div", {
                className: (i ?? "") + " animate__animated",
                style: {
                    ...P4(e, c, r)
                },
                children: o && n
            })
        })
    },
    zE = s => {
        const {fadesOut: e=!0, timeoutMs: t=8e3, onClose: r=null, overflow: i="hidden", classNames: n=[], ...o} = s,
            [l, c] = _.useState(!1),
            u = _.useMemo(() => {
                const h = ["nitro-notification-bubble", "rounded"];
                return n.length && h.push(...n), h
            }, [n]);
        return _.useEffect(() => (c(!0), () => c(!1)), []), _.useEffect(() => {
            if (!e)
                return;
            const h = setTimeout(() => {
                c(!1),
                setTimeout(() => r(), 300)
            }, t);
            return () => clearTimeout(h)
        }, [e, t, r]), a(vu, {
            type: ws.FADE_IN,
            inProp: l,
            timeout: 300,
            children: a(P, {
                overflow: i,
                classNames: u,
                onClick: r,
                ...o
            })
        })
    },
    In = s => {
        const {figure: e="", typeId: t=-1, paletteId: r=-1, petColor: i=16777215, customParts: n=[], posture: o="std", headOnly: l=!1, direction: c=0, scale: u=1, style: h={}, ...d} = s,
            [m, p] = _.useState(null),
            [E, T] = _.useState(0),
            [I, S] = _.useState(0),
            A = _.useRef(!1),
            N = _.useMemo(() => {
                let b = {};
                return m && m.length && (b.backgroundImage = `url(${m})`), u !== 1 && (b.transform = `scale(${u})`, u % 1 || (b.imageRendering = "pixelated")), b.width = E, b.height = I, Object.keys(h).length && (b = {
                    ...b,
                    ...h
                }), b
            }, [m, u, h, E, I]);
        return _.useEffect(() => {
            let b = t,
                v = r,
                D = i,
                G = n,
                x = l;
            if (e && e.length) {
                const U = new Nn(e);
                b = U.typeId,
                v = U.paletteId,
                D = U.color,
                G = U.customParts
            }
            b === 16 && (x = !1);
            const F = re().getRoomObjectPetImage(b, v, D, new w(c * 45), 64, {
                imageReady: (U, z, Q) => {
                    A.current || (Q ? (p(Q.src), T(Q.width), S(Q.height)) : z && (p(pt.generateImageUrl(z)), T(z.width), S(z.height)))
                },
                imageFailed: U => {}
            }, x, 0, G, o);
            if (F) {
                const U = F.getImage();
                U && (p(U.src), T(U.width), S(U.height))
            }
        }, [e, t, r, i, n, o, l, c]), _.useEffect(() => (A.current = !1, () => {
            A.current = !0
        }), []), a(k, {
            classNames: ["pet-image"],
            style: N,
            ...d
        })
    },
    KE = s => {
        const {text: e="", progress: t=0, maxProgress: r=100, position: i="relative", justifyContent: n="center", classNames: o=[], children: l=null, ...c} = s,
            u = _.useMemo(() => {
                const h = ["nitro-progress-bar", "text-white"];
                return o.length && h.push(...o), h
            }, [o]);
        return g(M, {
            position: i,
            justifyContent: n,
            classNames: u,
            ...c,
            children: [e && e.length > 0 && a(P, {
                fit: !0,
                center: !0,
                position: "absolute",
                className: "nitro-progress-bar-text small",
                children: e
            }), a("div", {
                className: "nitro-progress-bar-inner",
                children: a(k, {
                    className: "nitro-progress-bar-fill",
                    style: {
                        width: ~~((t - 0) * (100 - 0) / (r - 0) + 0) + "%"
                    }
                })
            }), l]
        })
    },
    qE = s => {
        const {level: e=0, classNames: t=[], children: r=null, ...i} = s,
            n = _.useMemo(() => {
                const o = ["nitro-rarity-level"];
                return t.length && o.push(...t), o
            }, [t]);
        return g(k, {
            classNames: n,
            ...i,
            children: [a("div", {
                children: e
            }), r]
        })
    },
    n_ = s => {
        const {roomPreviewer: e=null, height: t=0, children: r=null} = s,
            [i, n] = _.useState(null),
            o = _.useRef(),
            l = c => {
                e && (c.shiftKey ? e.changeRoomObjectDirection() : e.changeRoomObjectState())
            };
        return _.useEffect(() => {
            if (!e)
                return;
            const c = h => {
                !e || !i || !o.current || (e.updatePreviewRoomView(), i.canvasUpdated && (o.current.style.backgroundImage = `url(${pt.generateImageUrl(i.master)})`))
            };
            if (!i && o.current && e) {
                let d = document.defaultView.getComputedStyle(o.current, null).backgroundColor;
                d = nr.rgbStringToHex(d),
                d = d.replace("#", "0x"),
                e.backgroundColor = parseInt(d, 16);
                const m = o.current.parentElement.clientWidth;
                e.getRoomCanvas(m, t);
                const p = e.getRenderingCanvas();
                n(p),
                p.canvasUpdated = !0,
                c()
            }
            ir().add(c);
            const u = new ResizeObserver(() => {
                if (!e || !o.current)
                    return;
                const h = o.current.parentElement.offsetWidth;
                e.modifyRoomCanvas(h, t),
                c()
            });
            return u.observe(o.current), () => {
                u.disconnect(),
                ir().remove(c)
            }
        }, [i, e, o, t]), g("div", {
            className: "room-preview-container",
            children: [a("div", {
                ref: o,
                className: "room-preview-image",
                style: {
                    height: t
                },
                onClick: l
            }), r]
        })
    },
    a_ = s => {
        const {roomId: e=-1, customUrl: t=null, shrink: r=!0, overflow: i="hidden", classNames: n=[], children: o=null, ...l} = s,
            c = _.useMemo(() => {
                const h = ["room-thumbnail", "rounded", "border"];
                return n.length && h.push(...n), h
            }, [n]),
            u = _.useMemo(() => t && t.length ? oe("image.library.url") + t : oe("thumbnails.url").replace("%thumbnail%", e.toString()), [t, e]);
        return g(k, {
            shrink: r,
            overflow: i,
            classNames: c,
            ...l,
            children: [u && a("img", {
                alt: "",
                src: u
            }), o]
        })
    },
    Jv = s => {
        const {color: e="", message: t="", date: r="", senderName: i="", customTitle: n=null, onCloseClick: o=null} = s;
        return a(so, {
            handleSelector: ".drag-handler",
            children: g(M, {
                gap: 0,
                alignItems: "center",
                className: `nitro-layout-trophy trophy-${e}`,
                children: [g(P, {
                    center: !0,
                    fullWidth: !0,
                    position: "relative",
                    className: "trophy-header drag-handler",
                    children: [a(k, {
                        position: "absolute",
                        pointer: !0,
                        className: "trophy-close",
                        onClick: o
                    }), a(y, {
                        bold: !0,
                        children: f("widget.furni.trophy.title")
                    })]
                }), g(M, {
                    className: "trophy-content py-1",
                    gap: 1,
                    children: [n && a(y, {
                        bold: !0,
                        children: n
                    }), t]
                }), g(P, {
                    alignItems: "center",
                    justifyContent: "between",
                    className: "trophy-footer mt-1",
                    children: [a(y, {
                        bold: !0,
                        children: r
                    }), a(y, {
                        bold: !0,
                        children: i
                    })]
                })]
            })
        })
    },
    gi = s => {
        const {userId: e=0, userName: t=null, classNames: r=[], pointer: i=!0, children: n=null, ...o} = s,
            l = _.useMemo(() => {
                const c = ["nitro-friends-spritesheet", "icon-profile-sm"];
                return r.length && c.push(...r), c
            }, [r]);
        return a(k, {
            classNames: l,
            pointer: i,
            onClick: c => Fr(e),
            ...o,
            children: n
        })
    },
    sn = s => {
        const {isActive: e=!1, count: t=0, overflow: r="hidden", position: i="relative", pointer: n=!0, classNames: o=[], children: l=null, ...c} = s,
            u = _.useMemo(() => {
                const h = ["nav-item", "rounded-top", "border"];
                return e && h.push("active"), o.length && h.push(...o), h
            }, [e, o]);
        return g(P, {
            overflow: r,
            pointer: n,
            position: i,
            classNames: u,
            ...c,
            children: [a(P, {
                shrink: !0,
                center: !0,
                children: l
            }), t > 0 && a(Wa, {
                count: t
            })]
        })
    },
    _a = s => {
        const {justifyContent: e="center", gap: t=1, classNames: r=[], children: i=null, ...n} = s,
            o = _.useMemo(() => {
                const l = ["container-fluid", "nitro-card-tabs", "pt-1"];
                return r.length && l.push(...r), l
            }, [r]);
        return a(P, {
            justifyContent: e,
            gap: t,
            classNames: o,
            ...n,
            children: i
        })
    },
    cr = (...s) => s.filter(Boolean).join(" "),
    L4 = s => {
        const {classNames: e=[], ...t} = s,
            r = _.useMemo(() => {
                const i = ["form-group"];
                return e.length && i.push(...e), i
            }, [e]);
        return a(P, {
            classNames: r,
            ...t
        })
    },
    U4 = s => {
        const {variant: e="black", height: t=1, classNames: r=[], style: i={}, ...n} = s,
            o = _.useMemo(() => {
                const c = [];
                return e && c.push("bg-" + e), r.length && c.push(...r), c
            }, [e, r]),
            l = _.useMemo(() => {
                let c = {
                    display: "list-item"
                };
                return t > 0 && (c.height = t), Object.keys(i).length && (c = {
                    ...c,
                    ...i
                }), c
            }, [t, i]);
        return a(k, {
            classNames: o,
            style: l,
            ...n
        })
    },
    o_ = s => {
        var I,
            S;
        const {rows: e=[], overscan: t=5, scrollToBottom: r=!1, rowRender: i=null} = s,
            [n, o] = _.useState(e.length - 1),
            [l, c] = _.useState(!0),
            u = _.useRef(null),
            {virtualItems: h=[], totalSize: d=0, scrollToIndex: m=null} = aL({
                parentRef: u,
                size: e.length,
                overscan: t
            });
        _.useEffect(() => {
            o(e.length - 1)
        }, [e]),
        _.useEffect(() => {
            r && m && l && m(n)
        }, [r, n, m, l]);
        const p = () => {
                if (u.current) {
                    const {scrollTop: A, clientHeight: N, scrollHeight: b} = u.current,
                        v = 10;
                    c(b - (A + N) <= v)
                }
            },
            E = h.length > 0 && ((I = h[0]) == null ? void 0 : I.start) || 0,
            T = h.length > 0 ? d - (((S = h[h.length - 1]) == null ? void 0 : S.end) || 0) : 0;
        return g(k, {
            fit: !0,
            innerRef: u,
            position: "relative",
            overflow: "auto",
            onScroll: p,
            children: [E > 0 && a("div", {
                style: {
                    minHeight: `${E}px`
                }
            }), h.map(A => {
                const N = e[A.index];
                return N ? a("div", {
                    "data-index": A.index,
                    ref: A.measureRef,
                    children: i(N)
                }, A.key) : a(_.Fragment, {}, A.key)
            }), T > 0 && a("div", {
                style: {
                    minHeight: `${T}px`
                }
            })]
        })
    },
    y = s => {
        const {variant: e="black", fontWeight: t=null, fontSize: r=0, align: i=null, bold: n=!1, underline: o=!1, italics: l=!1, truncate: c=!1, center: u=!1, textEnd: h=!1, small: d=!1, wrap: m=!1, noWrap: p=!1, textBreak: E=!1, ...T} = s,
            I = _.useMemo(() => {
                const S = ["d-inline"];
                return e && S.push("text-" + e), n && S.push("fw-bold"), t && S.push("fw-" + t), r && S.push("fs-" + r), i && S.push("text-" + i), o && S.push("text-decoration-underline"), l && S.push("fst-italic"), c && S.push("text-truncate"), u && S.push("text-center"), h && S.push("text-end"), d && S.push("small"), m && S.push("text-wrap"), p && S.push("text-nowrap"), E && S.push("text-break"), S
            }, [e, t, r, i, n, o, l, c, u, h, d, m, p, E]);
        return a(k, {
            classNames: I,
            ...T
        })
    },
    w4 = s => {
        const {isError: e=!1, message: t="", percent: r=0} = s;
        return a(M, {
            fullHeight: !0,
            position: "relative",
            className: "nitro-loading",
            children: a(k, {
                fullHeight: !0,
                className: "container h-100",
                children: g(M, {
                    fullHeight: !0,
                    alignItems: "center",
                    justifyContent: "end",
                    children: [a(k, {
                        className: "connecting-duck"
                    }), a(M, {
                        size: 6,
                        className: "text-center py-4",
                        children: e && t && t.length ? a(k, {
                            className: "fs-4 text-shadow",
                            children: t
                        }) : g(q, {
                            children: [g(y, {
                                fontSize: 4,
                                variant: "white",
                                className: "text-shadow",
                                children: [r.toFixed(), "%"]
                            }), a(KE, {
                                progress: r,
                                className: "loading-view-progress-bar mt-2 large"
                            })]
                        })
                    })]
                })
            })
        })
    },
    ga = (s, e, t, r=!0) => {
        _.useEffect(() => {
            if (r)
                return Array.isArray(s) ? s.map(i => e.addEventListener(i, t)) : e.addEventListener(s, t), () => {
                    Array.isArray(s) ? s.map(i => e.removeEventListener(i, t)) : e.removeEventListener(s, t)
                }
        }, [s, e, r, t])
    },
    qp = (s, e) => ga(s, uK().events, e),
    F4 = (s, e) => ga(s, qe().cameraManager.events, e),
    x4 = (s, e) => ga(s, qe().localization.events, e),
    ho = (s, e) => ga(s, qe().events, e),
    at = (s, e) => ga(s, re().events, e),
    jt = (s, e) => ga(s, Ko().events, e),
    G4 = (s, e) => ga(s, Z().events, e),
    Co = (s, e, t=!0) => ga(s, qe().soundManager.events, e, t),
    W = (s, e) => {
        _.useEffect(() => {
            const t = new s(e);
            return qc().registerMessageEvent(t), () => qc().removeMessageEvent(t)
        }, [s, e])
    },
    hs = (s, e, t=!0) => ga(s, yn, e, t),
    B4 = () => {
        const [s, e] = _.useState(!0),
            [t, r] = _.useState([]),
            [i, n] = _.useState(null),
            [o, l] = _.useState(-1),
            [c, u] = _.useState(0),
            h = _.useMemo(() => {
                let S = 0;
                return t.forEach(A => S += Xr.getAchievementCategoryTotalUnseen(A)), S
            }, [t]),
            d = _.useMemo(() => {
                let S = 0;
                return t.forEach(A => S += A.getProgress()), S
            }, [t]),
            m = _.useMemo(() => {
                let S = 0;
                return t.forEach(A => S += A.getMaxProgress()), S
            }, [t]),
            p = _.useMemo(() => ~~((d - 0) * (100 - 0) / (m - 0) + 0), [d, m]),
            E = _.useMemo(() => i === null ? null : t.find(S => S.code === i), [t, i]),
            T = _.useMemo(() => o === -1 || !E ? null : E.achievements.find(S => S.achievementId === o), [E, o]),
            I = _.useCallback((S, A) => {
                r(N => {
                    const b = [...N];
                    for (const v of b)
                        if (v.code === S)
                            for (const D of v.achievements)
                                D.achievementId === A && (D.unseen = 0);
                    return b
                })
            }, []);
        return W(nS, S => {
            const N = S.getParser().achievement;
            r(b => {
                const v = [...b],
                    D = v.findIndex(G => G.code === N.category);
                if (D === -1) {
                    const G = new Pp(N.category);
                    G.achievements.push(N),
                    v.push(G)
                } else {
                    const G = Ir(v[D]),
                        x = [...G.achievements],
                        F = x.findIndex(z => z.achievementId === N.achievementId);
                    let U = null;
                    F === -1 ? x.push(N) : (U = x[F], x[F] = N),
                    Xr.getAchievementIsIgnored(N) || (N.unseen++, U && (N.unseen += U.unseen)),
                    G.achievements = x,
                    v[D] = G
                }
                return v
            })
        }), W(aS, S => {
            const A = S.getParser(),
                N = [];
            for (const b of A.achievements) {
                const v = b.category;
                let D = N.find(G => G.code === v);
                D || (D = new Pp(v), N.push(D)),
                D.achievements.push(b)
            }
            r(N)
        }), W(oS, S => {
            const A = S.getParser();
            u(A.score)
        }), _.useEffect(() => {
            s && (B(new zA), e(!1))
        }, [s]), _.useEffect(() => {
            !i || o === -1 || I(i, o)
        }, [i, o, I]), {
            achievementCategories: t,
            selectedCategoryCode: i,
            setSelectedCategoryCode: n,
            selectedAchievementId: o,
            setSelectedAchievementId: l,
            achievementScore: c,
            getTotalUnseen: h,
            getProgress: d,
            getMaxProgress: m,
            scaledProgressPercent: p,
            selectedCategory: E,
            selectedAchievement: T,
            setAchievementSeen: I
        }
    },
    l_ = () => ds(B4),
    k4 = () => {
        const [s, e] = _.useState([]),
            [t, r] = _.useState([]),
            [i, n] = _.useState(-1),
            [o, l] = _.useState(10),
            [c, u] = _.useState(null);
        return F4(Nh.INITIALIZED, h => {
            e(Array.from(Gc().effects.values()))
        }), W(sO, h => {
            const d = h.getParser();
            u({
                credits: d.creditPrice,
                duckets: d.ducketPrice,
                publishDucketPrice: d.publishDucketPrice
            })
        }), _.useEffect(() => {
            if (!Gc().isLoaded) {
                Gc().init(),
                B(new eN);
                return
            }
        }, []), {
            availableEffects: s,
            cameraRoll: t,
            setCameraRoll: r,
            selectedPictureIndex: i,
            setSelectedPictureIndex: n,
            myLevel: o,
            price: c
        }
    },
    Zv = () => ds(k4);
class $r extends Ye {}
$r.SHOW_CATALOG = "CE_SHOW_CATALOG";
$r.HIDE_CATALOG = "CE_HIDE_CATALOG";
$r.TOGGLE_CATALOG = "CE_TOGGLE_CATALOG";
$r.SOLD_OUT = "CE_SOLD_OUT";
$r.APPROVE_NAME_RESULT = "CE_APPROVE_NAME_RESULT";
$r.PURCHASE_APPROVED = "CE_PURCHASE_APPROVED";
$r.INIT_GIFT = "CE_INIT_GIFT";
$r.CATALOG_RESET = "CE_RESET";
$r.CATALOG_INVISIBLE_PAGE_VISITED = "CE_CATALOG_INVISIBLE_PAGE_VISITED";
class V4 extends $r {
    constructor(e, t, r)
    {
        super($r.INIT_GIFT),
        this._pageId = e,
        this._offerId = t,
        this._extraData = r
    }
    get pageId()
    {
        return this._pageId
    }
    get offerId()
    {
        return this._offerId
    }
    get extraData()
    {
        return this._extraData
    }
}
const $v = class  extends $r{
    constructor(s)
    {
        super($v.POST_MARKETPLACE),
        this._item = s
    }
    get item()
    {
        return this._item
    }
}
;
let XE = $v;
XE.POST_MARKETPLACE = "CE_POST_MARKETPLACE";
const eP = class  extends Ye{
    constructor(s)
    {
        super(eP.PURCHASE_SUCCESS),
        this._purchase = s
    }
    get purchase()
    {
        return this._purchase
    }
}
;
let oa = eP;
oa.PURCHASE_SUCCESS = "CPE_PURCHASE_SUCCESS";
const tP = class  extends Ye{
    constructor(s)
    {
        super(tP.PURCHASE_FAILED),
        this._code = s
    }
    get code()
    {
        return this._code
    }
}
;
let ko = tP;
ko.PURCHASE_FAILED = "CPFE_PURCHASE_FAILED";
const sP = class  extends Ye{
    constructor(s)
    {
        super(sP.NOT_ALLOWED),
        this._code = s
    }
    get code()
    {
        return this._code
    }
}
;
let dd = sP;
dd.NOT_ALLOWED = "CPNAE_NOT_ALLOWED";
class Vs extends Ye {}
Vs.WIDGETS_INITIALIZED = "CWE_CWE_WIDGETS_INITIALIZED";
Vs.SELECT_PRODUCT = "CWE_SELECT_PRODUCT";
Vs.SET_EXTRA_PARM = "CWE_CWE_SET_EXTRA_PARM";
Vs.PURCHASE = "CWE_PURCHASE";
Vs.COLOUR_ARRAY = "CWE_COLOUR_ARRAY";
Vs.MULTI_COLOUR_ARRAY = "CWE_MULTI_COLOUR_ARRAY";
Vs.COLOUR_INDEX = "CWE_COLOUR_INDEX";
Vs.TEXT_INPUT = "CWE_TEXT_INPUT";
Vs.DROPMENU_SELECT = "CWE_CWE_DROPMENU_SELECT";
Vs.PURCHASE_OVERRIDE = "CWE_PURCHASE_OVERRIDE";
Vs.SELLABLE_PET_PALETTES = "CWE_SELLABLE_PET_PALETTES";
Vs.UPDATE_ROOM_PREVIEW = "CWE_UPDATE_ROOM_PREVIEW";
Vs.GUILD_SELECTED = "CWE_GUILD_SELECTED";
Vs.TOTAL_PRICE_WIDGET_INITIALIZED = "CWE_TOTAL_PRICE_WIDGET_INITIALIZED";
Vs.PRODUCT_OFFER_UPDATED = "CWE_CWE_PRODUCT_OFFER_UPDATED";
Vs.SET_PREVIEWER_STUFFDATA = "CWE_CWE_SET_PREVIEWER_STUFFDATA";
Vs.EXTRA_PARAM_REQUIRED_FOR_BUY = "CWE_CWE_EXTRA_PARAM_REQUIRED_FOR_BUY";
Vs.TOGGLE = "CWE_CWE_TOGGLE";
Vs.BUILDER_SUBSCRIPTION_UPDATED = "CWE_CWE_BUILDER_SUBSCRIPTION_UPDATED";
Vs.ROOM_CHANGED = "CWE_CWE_ROOM_CHANGED";
Vs.SHOW_WARNING_TEXT = "CWE_CWE_SHOW_WARNING_TEXT";
const rP = class  extends Ye{
    constructor()
    {
        super(rP.SOLD_OUT)
    }
}
;
let _d = rP;
_d.SOLD_OUT = "CPSOE_SOLD_OUT";
const iP = class  extends Ye{
    constructor(s, e)
    {
        super(iP.UPDATE_STUFF_DATA),
        this._offer = s,
        this._stuffData = e
    }
    get offer()
    {
        return this._offer
    }
    get stuffData()
    {
        return this._stuffData
    }
}
;
let H4 = iP;
H4.UPDATE_STUFF_DATA = "SRPSA_UPDATE_STUFF_DATA";
class hr extends Ye {}
hr.SHOW_GUIDE_TOOL = "GTE_SHOW_GUIDE_TOOL";
hr.HIDE_GUIDE_TOOL = "GTE_HIDE_GUIDE_TOOL";
hr.TOGGLE_GUIDE_TOOL = "GTE_TOGGLE_GUIDE_TOOL";
hr.CREATE_HELP_REQUEST = "GTE_CREATE_HELP_REQUEST";
hr.CREATE_BULLY_REQUEST = "GTE_CREATE_BULLY_REQUEST";
class gd extends Ye {}
gd.INIT = "HC_NAME_CHANGE_INIT";
const nP = class  extends Ye{
    constructor(s, e, t)
    {
        super(nP.FURNI_ADDED),
        this.id = s,
        this.spriteId = e,
        this.category = t
    }
}
;
let fd = nP;
fd.FURNI_ADDED = "IFAE_FURNI_ADDED";
class qi extends Ye {}
qi.SHOW_THUMBNAIL = "NE_SHOW_THUMBNAIL";
qi.HIDE_THUMBNAIL = "NE_HIDE_THUMBNAIL";
qi.TOGGLE_THUMBNAIL = "NE_TOGGLE_THUMBNAIL";
const Xp = s => s && s.length ? s.replace(/\\r/g, "\r") : "",
    Qp = s => {
        const e = "0" + s;
        return e.substr(e.length - 2, e.length)
    };
let mc = null;
const j4 = () => {
        const [s, e] = _.useState([]),
            [t, r] = _.useState([]),
            [i, n] = _.useState([]),
            [o, l] = _.useState(!1),
            [c, u] = _.useState(!1),
            h = () => oe("notification", {}),
            d = F => {
                const U = h();
                return U ? U[F] : null
            },
            m = (F, U, z, Q) => {
                if (F.has(z))
                    return F.get(z);
                const j = ["notification", U, z].join(".");
                return qe().localization.hasValue(j) || Q ? f(j, Array.from(F.keys()), Array.from(F.values())) : null
            },
            p = (F, U) => {
                let z = F.get("image");
                return z || (z = oe("image.library.notifications.url", "").replace("%image%", U.replace(/\./g, "_"))), f(z)
            },
            E = _.useCallback((F, U=null, z=null, Q=null, j=null, J=null) => {
                (!j || !j.length) && (j = f("notifications.broadcast.title")),
                (!U || !U.length) && (U = we.DEFAULT);
                const X = new Pf([Xp(F)], U, z, Q, j, J);
                e(K => [X, ...K])
            }, []),
            T = _.useCallback(() => E(null, we.NITRO), [E]),
            I = _.useCallback((F, U, z=null, Q=null) => {
                if (o)
                    return;
                const j = new wv(F, U, z, Q);
                r(J => [j, ...J])
            }, [o]),
            S = (F, U=null) => {
                U || (U = new Map);
                const z = d("notification." + F);
                if (z)
                    for (const be in z)
                        U.set(be, z[be]);
                F === "floorplan_editor.error" && U.set("message", U.get("message").replace(/[^a-zA-Z._ ]/g, ""));
                const Q = m(U, F, "title", !0),
                    j = m(U, F, "message", !0).replace(/\\r/g, "\r"),
                    J = m(U, F, "linkTitle", !1),
                    X = m(U, F, "linkUrl", !1),
                    K = p(U, F);
                U.get("display") === "BUBBLE" ? I(f(j), Wt.INFO, K, X) : E(f(j), F, X, J, Q, K),
                U.get("sound") && Mn(U.get("sound"))
            },
            A = _.useCallback((F, U, z, Q=null, j=null, J=null, X=null) => {
                (!Q || !Q.length) && (Q = f("generic.confirm")),
                (!j || !j.length) && (j = f("generic.cancel")),
                (!J || !J.length) && (J = f("notifications.broadcast.title"));
                const K = new Fv(X, F, U, z, Q, j, J);
                n(be => [K, ...be])
            }, []),
            N = (F, U=null, z=!0) => {
                E(F, we.DEFAULT, U, f("mod.alert.link"), f("mod.alert.title"))
            },
            b = _.useCallback((F, U="") => {
                switch (F) {
                case ys.ALERT_SCAM:
                    E(f("inventory.trading.warning.other_not_offering"), null, null, null, f("inventory.trading.notification.title"));
                    return;
                case ys.HOTEL_TRADING_DISABLED:
                case ys.YOU_NOT_ALLOWED:
                case ys.THEY_NOT_ALLOWED:
                case ys.ROOM_DISABLED:
                case ys.YOU_OPEN:
                case ys.THEY_OPEN:
                    E(f(`inventory.trading.openfail.${F}`, ["otherusername"], [U]), null, null, null, f("inventory.trading.openfail.title"));
                    return;
                case ys.ERROR_WHILE_COMMIT:
                    E(`${f("inventory.trading.notification.caption")}, ${f("inventory.trading.notification.commiterror.info")}`, null, null, null, f("inventory.trading.notification.title"));
                    return;
                case ys.THEY_CANCELLED:
                    E(f("inventory.trading.info.closed"), null, null, null, f("inventory.trading.notification.title"));
                    return
                }
            }, [E]),
            v = _.useCallback(F => {
                e(U => {
                    const z = [...U],
                        Q = z.findIndex(j => F === j);
                    return Q >= 0 && z.splice(Q, 1), z
                })
            }, []),
            D = _.useCallback(F => {
                r(U => {
                    const z = [...U],
                        Q = z.findIndex(j => F === j);
                    return Q >= 0 && z.splice(Q, 1), z
                })
            }, []),
            G = _.useCallback(F => {
                n(U => {
                    const z = [...U],
                        Q = z.findIndex(j => F === j);
                    return Q >= 0 && z.splice(Q, 1), z
                })
            }, []);
        W(qm, F => {
            const U = F.getParser();
            if (U.userId !== Z().userId)
                return;
            const z = f("notifications.text.respect.1"),
                Q = f("notifications.text.respect.2", ["count"], [U.respectsReceived.toString()]);
            I(z, Wt.RESPECT),
            I(Q, Wt.RESPECT)
        }),
        W(EC, F => {
            const U = F.getParser();
            E(U.message.replace(/\\r/g, "\r"), null, null, f("notifications.broadcast.title"))
        }),
        W(_C, F => {
            const U = F.getParser(),
                z = f("achievements.levelup.desc"),
                Q = dc(U.data.badgeCode),
                j = Z().getBadgeUrl(U.data.badgeCode),
                J = "questengine/achievements/" + U.data.category;
            I(z + " " + Q, Wt.ACHIEVEMENT, j, J)
        }),
        W(fC, F => {
            const U = F.getParser();
            U.numGifts <= 0 || I(U.numGifts.toString(), Wt.CLUBGIFT, null, "catalog/open/" + oe("catalog.links")["hc.hc_gifts"])
        }),
        W(HS, F => {
            const U = F.getParser();
            N(U.message, U.url, !1)
        }),
        W(xm, F => {
            const U = F.getParser();
            if (U.amountChanged <= 0 || U.type !== 5)
                return;
            const z = oe("currency.asset.icon.url", "").replace("%type%", U.type.toString());
            I(f("notifications.text.loyalty.received", ["AMOUNT"], [U.amountChanged.toString()]), Wt.INFO, z)
        }),
        W(qS, F => {
            const U = F.getParser();
            N(U.message)
        }),
        W(jR, F => {
            const U = F.getParser();
            E(f("opening.hours." + (U.userThrowOutAtClose ? "disconnected" : "closed"), ["h", "m"], [Qp(U.openHour), Qp(U.openMinute)]), we.DEFAULT, null, null, f("opening.hours.title"))
        }),
        W(mS, F => {
            const U = F.getParser(),
                z = f("notifications.text." + (U.boughtAsGift ? "petbought" : "petreceived"));
            let Q = null;
            const j = re().getRoomObjectPetImage(U.pet.typeId, U.pet.paletteId, parseInt(U.pet.color, 16), new w(45 * 3), 64, null, !0);
            j && (Q = j.getImage().src),
            I(z, Wt.PETLEVEL, Q)
        }),
        W(IC, F => {
            const z = F.getParser().messages.map(j => Xp(j)),
                Q = new Pf(z, we.MOTD, null, null, f("notifications.motd.title"));
            e(j => [Q, ...j])
        }),
        W(RC, F => {
            const U = F.getParser();
            let z = null;
            const Q = re().getRoomObjectPetImage(U.figureData.typeId, U.figureData.paletteId, parseInt(U.figureData.color, 16), new w(45 * 3), 64, null, !0);
            Q && (z = Q.getImage().src),
            I(f("notifications.text.petlevel", ["pet_name", "level"], [U.petName, U.level.toString()]), Wt.PETLEVEL, z)
        }),
        W(pC, F => {
            const U = F.getParser();
            l(!U.enabled)
        }),
        W(hO, F => {
            const U = F.getParser();
            if (!U.products || !U.products.length)
                return;
            const z = U.products[0];
            z && I(f("notifications.text.club_gift.selected"), Wt.INFO, Oh.getProductImageUrl(z.productType, z.furniClassId, z.extraParam))
        }),
        W(YR, F => {
            const U = F.getParser();
            E(f("maintenance.shutdown", ["m", "d"], [U.minutesUntilMaintenance.toString(), U.duration.toString()]), we.DEFAULT, null, null, f("opening.hours.title"))
        }),
        W(kS, F => {
            const U = F.getParser();
            N(U.message, U.url)
        }),
        W(TC, F => {
            const U = F.getParser();
            S(U.type, U.parameters)
        }),
        W(WR, F => {
            const U = F.getParser();
            E(f("opening.hours.shutdown", ["m"], [U.openMinute.toString()]), we.DEFAULT, null, null, f("opening.hours.title"))
        }),
        W(HR, F => {
            const U = F.getParser();
            E(f("opening.hours.disconnected", ["h", "m"], [U.openHour.toString(), U.openMinute.toString()]), we.DEFAULT, null, null, f("opening.hours.title"))
        }),
        W(mC, F => {
            const U = F.getParser();
            switch (U.errorCode) {
            default:
            case 0:
                E(f("connection.server.error.desc", ["errorCode"], [U.errorCode.toString()]), we.ALERT, null, null, f("connection.server.error.title"));
                break;
            case 1001:
            case 1002:
            case 1003:
            case 1004:
            case 1005:
            case 1006:
            case 1007:
            case 1008:
            case 1009:
            case 1010:
            case 1011:
            case 1012:
            case 1013:
            case 1014:
            case 1015:
            case 1016:
            case 1017:
            case 1018:
            case 1019:
                F.connection.dispose();
                break;
            case 4013:
                E(f("connection.room.maintenance.desc"), we.ALERT, null, null, f("connection.room.maintenance.title"));
                break
            }
        }),
        W(SC, F => {
            const U = F.getParser();
            E(f(U.alertMessage), we.DEFAULT, null, null, f(U.titleMessage ? U.titleMessage : "notifications.broadcast.title"))
        });
        const x = _.useCallback(() => {
            if (!c)
                if (xs.isRunning()) {
                    if (mc)
                        return;
                    mc = setTimeout(() => {
                        x()
                    }, xs.totalRunningTime + 5e3)
                } else
                    mc && (clearTimeout(mc), mc = null),
                    I(f("mod.chatdisclaimer"), Wt.INFO),
                    u(!0)
        }, [c, I]);
        return W(Gh, x), {
            alerts: s,
            bubbleAlerts: t,
            confirms: i,
            simpleAlert: E,
            showNitroAlert: T,
            showTradeAlert: b,
            showConfirm: A,
            showSingleBubble: I,
            closeAlert: v,
            closeBubbleAlert: D,
            closeConfirm: G
        }
    },
    Yt = () => ds(j4),
    W4 = (s, e) => {
        const [t, r] = _.useState(() => {
            if (typeof window > "u")
                return e;
            try {
                return id(s) ?? e
            } catch {
                return e
            }
        });
        return [t, n => {
            try {
                const o = n instanceof Function ? n(t) : n;
                r(o),
                typeof window < "u" && bv(s, o)
            } catch (o) {
                pe.error(o)
            }
        }]
    },
    c_ = W4,
    Y4 = () => c_(Nu.CATALOG_PLACE_MULTIPLE_OBJECTS, !1),
    aP = () => ds(Y4),
    z4 = () => c_(Nu.CATALOG_SKIP_PURCHASE_CONFIRMATION, !1),
    oP = () => ds(z4),
    K4 = -12345678,
    q4 = () => {
        const [s, e] = _.useState(!1),
            [t, r] = _.useState(!1),
            [i, n] = _.useState(-1),
            [o, l] = _.useState(-1),
            [c, u] = _.useState(Ai.NORMAL),
            [h, d] = _.useState(null),
            [m, p] = _.useState(null),
            [E, T] = _.useState(null),
            [I, S] = _.useState(null),
            [A, N] = _.useState([]),
            [b, v] = _.useState(null),
            [D, G] = _.useState([]),
            [x, F] = _.useState(null),
            [U, z] = _.useState(!1),
            [Q, j] = _.useState({
                quantity: 1,
                extraData: null,
                extraParamRequired: !1,
                previewStuffData: null
            }),
            [J, X] = _.useState({}),
            [K, be] = _.useState(!1),
            [he, et] = aP(),
            [Ut, fs] = oP(),
            [Xt, ms] = _.useState(null),
            [ut, Ps] = _.useState(null),
            [Cr, It] = _.useState(0),
            [Ve, Dt] = _.useState(0),
            [Hs, Fe] = _.useState(0),
            [_t, is] = _.useState(0),
            [Gr, Ke] = _.useState(0),
            [Ot, Ti] = _.useState(0),
            {simpleAlert: no=null} = Yt(),
            Br = _.useRef(new Xn),
            Uu = _.useCallback(() => {
                n(-1),
                l(-1),
                d(null),
                p(null),
                T(null),
                S(null),
                N([]),
                v(null),
                G([]),
                e(!1)
            }, []),
            _c = _.useCallback($ => {
                if (!$)
                    return Wr.MISSING_OFFER;
                if (Cr < 0 || Cr >= Ve)
                    return Wr.FURNI_LIMIT_REACHED;
                const ne = dt();
                if (!ne)
                    return Wr.NOT_IN_ROOM;
                if (!ne.isRoomOwner)
                    return Wr.NOT_ROOM_OWNER;
                if (_t <= 0) {
                    const ue = re();
                    let Ae = ue.getRoomObjectCount(ne.roomId, V.UNIT);
                    for (; Ae > 0;) {
                        const gt = ue.getRoomObjectByIndex(ne.roomId, Ae, V.UNIT),
                            zt = ne.userDataManager.getUserDataByIndex(gt.id);
                        if (zt && zt.type === yt.USER && zt.roomIndex !== ne.ownRoomIndex && !zt.isModerator)
                            return Wr.VISITORS_IN_ROOM;
                        Ae--
                    }
                }
                return Wr.OKAY
            }, [Cr, Ve, _t]),
            ao = _.useCallback($ => {
                const ne = dt();
                return !!((ne && $.page && $.page.layoutCode !== "sold_ltd_items" && c === Ai.NORMAL && (ne.isRoomOwner || ne.isGuildRoom && ne.controllerLevel >= ct.GUILD_MEMBER) || c === Ai.BUILDER && _c($) === Wr.OKAY) && $.pricingModel !== os.PRICING_MODEL_BUNDLE && $.product.productType !== Ue.EFFECT && $.product.productType !== Ue.HABBO_CLUB)
            }, [c, _c]),
            oo = _.useCallback($ => {
                if (!ao($))
                    return;
                const ne = $.product;
                if (!ne)
                    return;
                let ue = 0;
                switch (ne.productType) {
                case Ue.FLOOR:
                    ue = V.FLOOR;
                    break;
                case Ue.WALL:
                    ue = V.WALL;
                    break
                }
                re().processRoomObjectPlacement(za.CATALOG, -$.offerId, ue, ne.productClassId, ne.extraParam) && (ms($), be(!0), e(!1))
            }, [ao]),
            Jo = _.useCallback(($, ne) => {
                const ue = re();
                let Ae = ue.getRoomInstanceVariable(ue.activeRoomId, C.ROOM_WALL_TYPE),
                    gt = ue.getRoomInstanceVariable(ue.activeRoomId, C.ROOM_FLOOR_TYPE),
                    zt = ue.getRoomInstanceVariable(ue.activeRoomId, C.ROOM_LANDSCAPE_TYPE);
                switch (Ae = Ae && Ae.length ? Ae : "101", gt = gt && gt.length ? gt : "101", zt = zt && zt.length ? zt : "1.1", $) {
                case "floor":
                    ue.updateRoomInstancePlaneType(ue.activeRoomId, ne, Ae, zt, !0);
                    return;
                case "wallpaper":
                    ue.updateRoomInstancePlaneType(ue.activeRoomId, gt, ne, zt, !0);
                    return;
                case "landscape":
                    ue.updateRoomInstancePlaneType(ue.activeRoomId, gt, Ae, ne, !0);
                    return;
                default:
                    ue.updateRoomInstancePlaneType(ue.activeRoomId, gt, Ae, zt, !0);
                    return
                }
            }, []),
            gc = _.useCallback(() => {
                Xt && (re().cancelRoomObjectInsert(), be(!1), ms(null))
            }, [Xt]),
            Ea = _.useCallback(($=!0) => {
                be(ne => (ne && $ && ge("catalog/open"), !1))
            }, []),
            lo = _.useCallback(($=!1) => {
                $ || Ea(),
                Ps(ne => {
                    if (ne)
                        switch (ne.category) {
                        case V.FLOOR:
                            re().removeRoomObjectFloor(ne.roomId, ne.objectId);
                            break;
                        case V.WALL:
                            {
                                switch (ne.furniData.className) {
                                case "floor":
                                case "wallpaper":
                                case "landscape":
                                    Jo("reset", "");
                                    break;
                                default:
                                    re().removeRoomObjectWall(ne.roomId, ne.objectId);
                                    break
                                }
                                break
                            }default:
                            re().deleteRoomObject(ne.objectId, ne.category);
                            break
                        }
                    return null
                })
            }, [Ea, Jo]),
            ar = _.useCallback(($, ne) => {
                if (ne.pageId === $ && ne !== h)
                    return ne;
                for (const ue of ne.children) {
                    const Ae = ar($, ue);
                    if (Ae)
                        return Ae
                }
                return null
            }, [h]),
            un = _.useCallback(($, ne) => {
                if (ne.pageName === $ && ne !== h)
                    return ne;
                for (const ue of ne.children) {
                    const Ae = un($, ue);
                    if (Ae)
                        return Ae
                }
                return null
            }, [h]),
            Zo = _.useCallback(($, ne=!1) => {
                if (!m || !m.size)
                    return null;
                if (ne) {
                    const ue = [],
                        Ae = m.get($);
                    if (Ae && Ae.length)
                        for (const gt of Ae)
                            gt.isVisible && ue.push(gt);
                    if (ue.length)
                        return ue
                }
                return m.get($)
            }, [m]),
            hn = _.useCallback(($, ne) => {
                $ < 0 || (r(!0), n($), $ > -1 && B(new lN($, ne, c)))
            }, [c]),
            HP = _.useCallback(($, ne, ue, Ae, gt, zt) => {
                const js = new UE($, ne, ue, Ae, zt);
                if (T(js), l(Qe => $ !== -1 ? $ : Qe), z(!1), gt > -1 && js.offers.length) {
                    for (const Qe of js.offers)
                        if (Qe.offerId === gt) {
                            S(Qe);
                            break
                        }
                }
            }, []),
            Ln = _.useCallback(($, ne=-1) => {
                if (gc(), $.parent.pageName === "root" && $.children.length) {
                    for (const gt of $.children)
                        if (gt.isVisible) {
                            $ = gt;
                            break
                        }
                }
                const ue = [];
                let Ae = $;
                for (; Ae && Ae.pageName !== "root";)
                    ue.push(Ae),
                    Ae = Ae.parent;
                ue.reverse(),
                N(gt => {
                    const zt = gt.indexOf($) >= 0,
                        js = $.isOpen;
                    for (const Qe of gt)
                        Qe.deactivate(),
                        ue.indexOf(Qe) === -1 && Qe.close();
                    for (const Qe of ue)
                        Qe.activate(),
                        Qe.parent && Qe.open(),
                        Qe === $.parent && Qe.children.length && Qe.open();
                    return zt && js ? $.close() : $.open(), ue
                }),
                $.pageId > -1 && hn($.pageId, ne)
            }, [N, hn, gc]),
            fc = _.useCallback($ => {
                if ($ !== -1 && v(null), !s)
                    Br.current.requestById = $,
                    e(!0);
                else {
                    const ne = ar($, h);
                    ne && Ln(ne)
                }
            }, [s, h, ar, Ln]),
            m_ = _.useCallback($ => {
                if (v(null), !s)
                    Br.current.requestByName = $,
                    e(!0);
                else {
                    const ne = un($, h);
                    ne && Ln(ne)
                }
            }, [s, h, un, Ln]),
            E_ = _.useCallback($ => {
                if (v(null), !s)
                    Br.current.requestedByOfferId = $,
                    e(!0);
                else {
                    const ne = Zo($);
                    if (!ne || !ne.length)
                        return;
                    Ln(ne[0], $)
                }
            }, [s, Zo, Ln]),
            np = _.useCallback(() => {}, []);
        return W(cO, $ => {
            const ne = $.getParser(),
                ue = new Map,
                Ae = (gt, zt, js) => {
                    const Qe = new dK(gt, zt, js);
                    for (const Ri of Qe.offerIds)
                        ue.has(Ri) ? ue.get(Ri).push(Qe) : ue.set(Ri, [Qe]);
                    zt++;
                    for (const Ri of gt.children)
                        Qe.addChild(Ae(Ri, zt, Qe));
                    return Qe
                };
            d(Ae(ne.root, 0, null)),
            p(ue)
        }), W(lO, $ => {
            const ne = $.getParser();
            if (ne.catalogType !== c)
                return;
            const ue = [];
            for (const Ae of ne.offers) {
                const gt = [],
                    zt = Dl(Ae.localizationId);
                for (const Qe of Ae.products) {
                    const Ri = Af(Qe.furniClassId, Qe.productType);
                    gt.push(new wo(Qe.productType, Qe.furniClassId, Qe.extraParam, Qe.productCount, zt, Ri, Qe.uniqueLimitedItem, Qe.uniqueLimitedSeriesSize, Qe.uniqueLimitedItemsLeft))
                }
                if (!gt.length)
                    continue;
                const js = new os(Ae.offerId, Ae.localizationId, Ae.rent, Ae.priceCredits, Ae.priceActivityPoints, Ae.priceActivityPointsType, Ae.giftable, Ae.clubLevel, gt, Ae.bundlePurchaseAllowed);
                (c === Ai.NORMAL || js.pricingModel !== os.PRICING_MODEL_BUNDLE && js.pricingModel !== os.PRICING_MODEL_MULTI) && ue.push(js)
            }
            ne.frontPageItems && ne.frontPageItems.length && G(ne.frontPageItems),
            r(!1),
            i === ne.pageId && HP(ne.pageId, ne.layoutCode, new Rv(ne.localization.images.concat(), ne.localization.texts.concat()), ue, ne.offerId, ne.acceptSeasonCurrencyAsCredits)
        }), W(IO, $ => {
            const ne = $.getParser();
            Ms(new oa(ne.offer))
        }), W(EO, $ => {
            const ne = $.getParser();
            Ms(new ko(ne.code))
        }), W(pO, $ => {
            const ne = $.getParser();
            Ms(new dd(ne.code))
        }), W(fO, $ => {
            $.getParser(),
            Ms(new _d)
        }), W(mO, $ => {
            const ue = $.getParser().offer;
            if (!ue || !ue.products.length)
                return;
            ue.products[0].uniqueLimitedItem;
            const gt = [],
                zt = Dl(ue.localizationId);
            for (const Qe of ue.products) {
                const Ri = Af(Qe.furniClassId, Qe.productType);
                gt.push(new wo(Qe.productType, Qe.furniClassId, Qe.extraParam, Qe.productCount, zt, Ri, Qe.uniqueLimitedItem, Qe.uniqueLimitedSeriesSize, Qe.uniqueLimitedItemsLeft))
            }
            const js = new os(ue.offerId, ue.localizationId, ue.rent, ue.priceCredits, ue.priceActivityPoints, ue.priceActivityPointsType, ue.giftable, ue.clubLevel, gt, ue.bundlePurchaseAllowed);
            (c === Ai.NORMAL || js.pricingModel !== os.PRICING_MODEL_BUNDLE && js.pricingModel !== os.PRICING_MODEL_MULTI) && (js.page = E, S(js), js.product && js.product.productType === Ue.WALL && j(Qe => {
                const Ri = {
                    ...Qe
                };
                return Ri.extraData = js.product.extraParam || null, Ri
            }))
        }), W(RO, $ => {
            const ne = $.getParser(),
                ue = new _K(ne.productCode, ne.palettes.slice());
            X(Ae => {
                const gt = [];
                Ae.petPalettes && gt.push(...Ae.petPalettes);
                for (let zt = 0; zt < gt.length; zt++)
                    if (gt[zt].breed === ue.breed) {
                        gt.splice(zt, 1);
                        break
                    }
                return gt.push(ue), {
                    ...Ae,
                    petPalettes: gt
                }
            })
        }), W(gO, $ => {
            const ne = $.getParser();
            X(ue => {
                const Ae = ne.offers;
                return {
                    ...ue,
                    clubOffers: Ae
                }
            })
        }), W(wA, $ => {
            const ne = $.getParser();
            X(ue => {
                const Ae = ne.groups;
                return {
                    ...ue,
                    groups: Ae
                }
            })
        }), W(_O, $ => {
            const ne = $.getParser();
            X(ue => {
                const Ae = new TK(ne);
                return {
                    ...ue,
                    giftConfiguration: Ae
                }
            })
        }), W(PS, $ => {
            const ne = $.getParser();
            if (!ne)
                return;
            let ue = "";
            ne.result === 1 ? ue = f("inventory.marketplace.result.title.success") : ue = f("inventory.marketplace.result.title.failure");
            const Ae = f(`inventory.marketplace.result.${ne.result}`);
            no(Ae, we.DEFAULT, null, null, ue)
        }), W(Cm, $ => {
            const ne = $.getParser();
            X(ue => ({
                ...ue,
                clubGifts: ne
            }))
        }), W(uO, $ => {
            const ne = s;
            Uu(),
            ne && no(f("catalog.alert.published.description"), we.ALERT, null, null, f("catalog.alert.published.title"))
        }), W(aO, $ => {
            const ne = $.getParser();
            It(ne.furniCount),
            np()
        }), W(oO, $ => {
            const ne = $.getParser();
            Dt(ne.furniLimit),
            Fe(ne.maxFurniLimit),
            is(ne.secondsLeft),
            Ke(Pe()),
            Ti(ne.secondsLeftWithGrace),
            np()
        }), hs(oa.PURCHASE_SUCCESS, $ => Mn(Zr.CREDITS)), at(ag.PLACED, $ => {
            if (!K || $.type !== ag.PLACED)
                return;
            if (lo(!0), !Xt) {
                Ea();
                return
            }
            let ne = !1;
            const ue = Xt.product;
            if ($.category === V.WALL)
                switch (ue.furnitureData.className) {
                case "floor":
                case "wallpaper":
                case "landscape":
                    ne = $.placedOnFloor || $.placedOnWall;
                    break;
                default:
                    ne = $.placedInRoom;
                    break
                }
            else
                ne = $.placedInRoom;
            if (!ne) {
                Ea();
                return
            }
            switch (Ps(new RK($.roomId, $.objectId, $.category, $.wallLocation, $.x, $.y, $.direction, Xt)), c) {
            case Ai.NORMAL:
                {
                    switch ($.category) {
                    case V.FLOOR:
                        re().addFurnitureFloor($.roomId, $.objectId, ue.productClassId, new w($.x, $.y, $.z), new w($.direction), 0, new Lr);
                        break;
                    case V.WALL:
                        switch (ue.furnitureData.className) {
                        case "floor":
                        case "wallpaper":
                        case "landscape":
                            Jo(ue.furnitureData.className, ue.extraParam);
                            break;
                        default:
                            re().addFurnitureWall($.roomId, $.objectId, ue.productClassId, new w($.x, $.y, $.z), new w($.direction * 45), 0, $.instanceData, 0);
                            break
                        }
                    }
                    const Ae = re().getRoomObject($.roomId, $.objectId, $.category);
                    Ae && Ae.model.setValue(C.FURNITURE_ALPHA_MULTIPLIER, .5),
                    Ut && B(new uu(i, Xt.offerId, ue.extraParam, 1)),
                    he && oo(Xt);
                    break
                }case Ai.BUILDER:
                {
                    let Ae = Xt.page.pageId;
                    switch (Ae === K4 && (Ae = -1), $.category) {
                    case V.FLOOR:
                        B(new rN(Ae, Xt.offerId, ue.extraParam, $.x, $.y, $.direction));
                        break;
                    case V.WALL:
                        B(new iN(Ae, Xt.offerId, ue.extraParam, $.wallLocation));
                        break
                    }
                    he && oo(Xt);
                    break
                }
            }
        }), hs(fd.FURNI_ADDED, $ => {
            const ne = re();
            if (!(!ut || ut.productClassId !== $.spriteId || ut.roomId !== ne.activeRoomId)) {
                switch ($.category) {
                case _e.FLOOR:
                    {
                        const ue = ne.getRoomInstanceVariable(ne.activeRoomId, C.ROOM_FLOOR_TYPE);
                        ut.extraParam !== ue && B(new Uc($.id));
                        break
                    }case _e.WALL_PAPER:
                    {
                        const ue = ne.getRoomInstanceVariable(ne.activeRoomId, C.ROOM_WALL_TYPE);
                        ut.extraParam !== ue && B(new Uc($.id));
                        break
                    }case _e.LANDSCAPE:
                    {
                        const ue = ne.getRoomInstanceVariable(ne.activeRoomId, C.ROOM_LANDSCAPE_TYPE);
                        ut.extraParam !== ue && B(new Uc($.id));
                        break
                    }default:
                    B(new aE($.id, ut.category, ut.wallLocation, ut.x, ut.y, ut.direction))
                }
                he || lo()
            }
        }), _.useEffect(() => () => S(null), [E]), _.useEffect(() => {
            if (!(!s || !h || !m || !Br.current))
                switch (Br.current.requestType) {
                case Xn.REQUEST_TYPE_NONE:
                    if (E)
                        return;
                    if (h.isBranch) {
                        for (const $ of h.children)
                            if ($ && $.isVisible) {
                                Ln($);
                                return
                            }
                    }
                    return;
                case Xn.REQUEST_TYPE_ID:
                    fc(Br.current.requestById),
                    Br.current.resetRequest();
                    return;
                case Xn.REQUEST_TYPE_OFFER:
                    E_(Br.current.requestedByOfferId),
                    Br.current.resetRequest();
                    return;
                case Xn.REQUEST_TYPE_NAME:
                    m_(Br.current.requestByName),
                    Br.current.resetRequest();
                    return
                }
        }, [s, h, m, E, Ln, fc, E_, m_]), _.useEffect(() => {
            !b && E && E.pageId === -1 && fc(o)
        }, [b, E, o, fc]), _.useEffect(() => {
            I && j({
                quantity: 1,
                extraData: null,
                extraParamRequired: !1,
                previewStuffData: null
            })
        }, [I]), _.useEffect(() => {
            !s || h || (B(new uN), B(new Xm), B(new oN(c)), B(new nN))
        }, [s, h, c]), _.useEffect(() => (F(new Jr(re(), ++Jr.PREVIEW_COUNTER)), () => {
            F($ => ($.dispose(), null))
        }), []), {
            isVisible: s,
            setIsVisible: e,
            isBusy: t,
            pageId: i,
            previousPageId: o,
            currentType: c,
            rootNode: h,
            offersToNodes: m,
            currentPage: E,
            setCurrentPage: T,
            currentOffer: I,
            setCurrentOffer: S,
            activeNodes: A,
            searchResult: b,
            setSearchResult: v,
            frontPageItems: D,
            roomPreviewer: x,
            navigationHidden: U,
            setNavigationHidden: z,
            purchaseOptions: Q,
            setPurchaseOptions: j,
            catalogOptions: J,
            setCatalogOptions: X,
            getNodeById: ar,
            getNodeByName: un,
            activateNode: Ln,
            openPageById: fc,
            openPageByName: m_,
            openPageByOfferId: E_,
            requestOfferToMover: oo
        }
    },
    bt = () => ds(q4),
    X4 = 1e3,
    Q4 = 10,
    J4 = 1e3;
let Z4 = 0,
    $4 = 0;
const eq = () => {
        const [s, e] = _.useState([]),
            [t, r] = _.useState([]),
            [i, n] = _.useState([]),
            [o, l] = _.useState(!1),
            c = d => {
                d.id = Z4++,
                e(m => {
                    const p = [...m];
                    return p.push(d), p.length > X4 && p.shift(), p
                })
            },
            u = d => {
                r(m => {
                    const p = [...m];
                    return p.push(d), p.length > Q4 && p.shift(), p
                })
            },
            h = d => {
                d.id = $4++,
                n(m => {
                    const p = [...m];
                    return p.push(d), p.length > J4 && p.shift(), p
                })
            };
        return jt(Ce.STARTED, d => l(!0)), W(na, d => {
            if (!o)
                return;
            const m = d.getParser();
            t.length && t[t.length - 1].id === m.data.roomId || (c({
                id: -1,
                webId: -1,
                entityId: -1,
                name: m.data.roomName,
                timestamp: Dv(),
                type: xi.TYPE_ROOM_INFO,
                roomId: m.data.roomId
            }), u({
                id: m.data.roomId,
                name: m.data.roomName
            }), l(!1))
        }), W(Am, d => {
            const m = d.getParser();
            h({
                id: -1,
                webId: m.senderId,
                entityId: -1,
                name: "",
                message: m.messageText,
                roomId: -1,
                timestamp: Gp(m.secondsSinceSent),
                type: xi.TYPE_IM
            })
        }), W(ym, d => {
            const m = d.getParser();
            h({
                id: -1,
                webId: m.senderId,
                entityId: -1,
                name: "",
                message: m.messageText,
                roomId: -1,
                timestamp: Gp(),
                type: xi.TYPE_IM
            })
        }), {
            addChatEntry: c,
            chatHistory: s,
            roomHistory: t,
            messengerHistory: i
        }
    },
    u_ = () => ds(eq),
    tq = () => {
        const [s, e] = _.useState([]),
            [t, r] = _.useState([]),
            [i, n] = _.useState([]),
            [o, l] = _.useState([]),
            [c, u] = _.useState(null),
            h = _.useMemo(() => {
                const A = s.filter(N => N.online);
                return A.sort((N, b) => N.name < b.name ? -1 : N.name > b.name ? 1 : 0), A
            }, [s]),
            d = _.useMemo(() => {
                const A = s.filter(N => !N.online);
                return A.sort((N, b) => N.name < b.name ? -1 : N.name > b.name ? 1 : 0), A
            }, [s]),
            m = A => B(new kd(A.id)),
            p = (A, N) => N !== A.relationshipStatus && B(new Ol(A.id, N)),
            E = A => {
                for (const N of s)
                    if (N.id === A)
                        return N;
                return null
            },
            T = A => !(A === Z().userId || E(A) || t.find(N => N.requesterUserId === A) || i.indexOf(A) >= 0),
            I = (A, N) => {
                if (!T(A))
                    return !1;
                n(b => {
                    const v = [...b];
                    return v.push(A), v
                }),
                B(new Jm(N))
            },
            S = (A, N) => {
                A === -1 && !N ? (B(new Qg(!0)), r([])) : r(b => {
                    const v = [...b],
                        D = v.findIndex(G => G.id === A);
                    return D === -1 ? b : (B(N ? new CN(v[D].id) : new Qg(!1, v[D].id)), v.splice(D, 1), v)
                })
            };
        return W(UO, A => {
            const N = A.getParser();
            u(new t4(N.userFriendLimit, N.normalFriendLimit, N.extendedFriendLimit, N.categories)),
            B(new yN)
        }), W(DO, A => {
            const N = A.getParser();
            e(b => {
                const v = [...b];
                for (const D of N.fragment) {
                    const G = v.findIndex(F => F.id === D.id),
                        x = new dr;
                    x.populate(D),
                    G > -1 ? v[G] = x : v.push(x)
                }
                return v
            })
        }), W(vO, A => {
            const N = A.getParser();
            e(b => {
                const v = [...b],
                    D = G => {
                        const x = v.findIndex(F => F.id === G.id);
                        if (x === -1) {
                            const F = new dr;
                            F.populate(G),
                            v.unshift(F)
                        } else
                            v[x].populate(G)
                    };
                for (const G of N.addedFriends)
                    D(G);
                for (const G of N.updatedFriends)
                    D(G);
                for (const G of N.removedFriendIds) {
                    const x = v.findIndex(F => F.id === G);
                    x > -1 && v.splice(x, 1)
                }
                return v
            })
        }), W(PO, A => {
            const N = A.getParser();
            r(b => {
                const v = [...b];
                for (const D of N.requests) {
                    const G = v.findIndex(x => x.requesterUserId === D.requesterUserId);
                    if (G > 0)
                        v[G] = Ir(v[G]),
                        v[G].populate(D);
                    else {
                        const x = new Bp;
                        x.populate(D),
                        v.push(x)
                    }
                }
                return v
            })
        }), W(Nm, A => {
            const b = A.getParser().request;
            r(v => {
                const D = [...v];
                if (D.findIndex(x => x.requesterUserId === b.requesterUserId) === -1) {
                    const x = new Bp;
                    x.populate(b),
                    D.push(x)
                }
                return D
            })
        }), _.useEffect(() => {
            B(new bN);
            const A = setInterval(() => B(new NN), 12e4);
            return () => {
                clearInterval(A)
            }
        }, []), {
            friends: s,
            requests: t,
            sentRequests: i,
            dismissedRequestIds: o,
            setDismissedRequestIds: l,
            settings: c,
            onlineFriends: h,
            offlineFriends: d,
            getFriend: E,
            canRequestFriend: T,
            requestFriend: I,
            requestResponse: S,
            followFriend: m,
            updateRelationship: p
        }
    },
    ri = () => ds(tq),
    sq = () => {
        const [s, e] = _.useState([]),
            [t, r] = _.useState(-1),
            [i, n] = _.useState([]),
            [o, l] = _.useState(ai.HIDDEN),
            {getFriend: c=null} = ri(),
            {simpleAlert: u=null} = Yt(),
            h = _.useMemo(() => s.filter(T => i.indexOf(T.threadId) === -1), [s, i]),
            d = _.useMemo(() => t > 0 && h.find(T => T.threadId === t || null), [t, h]),
            m = T => {
                let I = s.find(S => S.participant && S.participant.id === T);
                if (I) {
                    const S = i.indexOf(I.threadId);
                    S >= 0 && n(A => {
                        const N = [...A];
                        return N.splice(S, 1), N
                    })
                } else {
                    const S = c(T);
                    if (!S)
                        return null;
                    I = new kE(S),
                    I.addMessage(null, f("messenger.moderationinfo"), 0, null, Zi.SECURITY_NOTIFICATION),
                    I.setRead(),
                    e(A => {
                        const N = [...A];
                        return N.push(I), N
                    })
                }
                return I
            },
            p = T => {
                n(I => {
                    const S = [...I];
                    return S.indexOf(T) >= 0 ? I : (S.push(T), S)
                }),
                t === T && r(-1)
            },
            E = (T, I, S, A=0, N=null, b=Zi.CHAT) => {
                if (!T || !S || !S.length)
                    return;
                const v = I === Z().userId;
                v && S.length <= 255 && B(new vN(T.participant.id, S)),
                e(D => {
                    const G = [...D],
                        x = G.findIndex(F => F.threadId === T.threadId);
                    return x === -1 ? D : (T = Ir(G[x]), v && T.groups.length === 1 && Mn(Zr.MESSENGER_NEW_THREAD), T.addMessage(b === Zi.ROOM_INVITE ? null : I, S, A, N, b), t === T.threadId && T.setRead(), G[x] = T, !v && T.unread && Mn(Zr.MESSENGER_MESSAGE_RECEIVED), G)
                })
            };
        return W(Am, T => {
            const I = T.getParser(),
                S = m(I.senderId);
            S && E(S, I.senderId, I.messageText, I.secondsSinceSent, I.extraData)
        }), W(ym, T => {
            const I = T.getParser(),
                S = m(I.senderId);
            S && E(S, I.senderId, I.messageText, 0, null, Zi.ROOM_INVITE)
        }), W(wO, T => {
            const I = T.getParser();
            u(`Received room invite error: ${I.errorCode},recipients: ${I.failedRecipients}`, we.DEFAULT, null, null, f("friendlist.alert.title"))
        }), _.useEffect(() => {
            t <= 0 || e(T => {
                const I = [...T],
                    S = I.findIndex(A => A.threadId === t);
                return S >= 0 && (I[S] = Ir(I[S]), I[S].setRead()), I
            })
        }, [t]), _.useEffect(() => {
            l(T => {
                if (!h.length)
                    return ai.HIDDEN;
                let I = !1;
                for (const S of h)
                    if (S.unreadCount > 0) {
                        I = !0;
                        break
                    }
                return I ? ai.UNREAD : ai.SHOW
            })
        }, [h]), {
            messageThreads: s,
            activeThread: d,
            iconState: o,
            visibleThreads: h,
            getMessageThread: m,
            setActiveThreadId: r,
            closeThread: p,
            sendMessage: E
        }
    },
    lP = () => ds(sq),
    rq = () => {
        const [s, e] = _.useState(!1),
            [t, r] = _.useState(null),
            [i, n] = _.useState(null),
            [o, l] = _.useState(null),
            [c, u] = _.useState(!1),
            [h, d] = _.useState(null);
        return W(xO, m => {
            let p = m.getParser();
            !p || p && !p.games.length || (n(p.games[0]), r(p.games))
        }), W(FO, m => {
            let p = m.getParser();
            p && l(p)
        }), W(GO, m => {
            let p = m.getParser();
            p && u(p.isInMaintenance)
        }), W(Mm, m => {
            let p = m.getParser();
            if (p)
                switch (p.gameTypeId) {
                case 2:
                    return console.log("snowwar");
                default:
                    return d(p.url)
                }
        }), _.useEffect(() => {
            s && (B(new wN), wE())
        }, [s]), {
            isVisible: s,
            setIsVisible: e,
            games: t,
            accountStatus: o,
            selectedGame: i,
            setSelectedGame: n,
            gameOffline: c,
            gameURL: h,
            setGameURL: d
        }
    },
    h_ = () => ds(rq),
    iq = () => {
        const [s, e] = _.useState(null);
        return W(bm, t => {
            const r = t.getParser(),
                i = {
                    badgeBases: [],
                    badgeSymbols: [],
                    badgePartColors: [],
                    groupColorsA: [],
                    groupColorsB: []
                };
            r.bases.forEach((o, l) => i.badgeBases.push({
                id: l,
                images: o
            })),
            r.symbols.forEach((o, l) => i.badgeSymbols.push({
                id: l,
                images: o
            })),
            r.partColors.forEach((o, l) => i.badgePartColors.push({
                id: l,
                color: o
            })),
            r.colorsA.forEach((o, l) => i.groupColorsA.push({
                id: l,
                color: o
            })),
            r.colorsB.forEach((o, l) => i.groupColorsB.push({
                id: l,
                color: o
            }));
            const n = (o, l) => o.id < l.id ? -1 : o.id > l.id ? 1 : 0;
            i.badgeBases.sort(n),
            i.badgeSymbols.sort(n),
            i.badgePartColors.sort(n),
            i.groupColorsA.sort(n),
            i.groupColorsB.sort(n),
            e(i)
        }), _.useEffect(() => {
            B(new jN)
        }, []), {
            groupCustomize: s
        }
    },
    Pu = () => ds(iq),
    nq = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState(null),
            {simpleAlert: i=null, showConfirm: n=null} = Yt(),
            o = (l, c) => {
                const u = {
                    reportType: l,
                    reportedUserId: -1,
                    reportedChats: [],
                    cfhCategory: -1,
                    cfhTopic: -1,
                    roomId: -1,
                    roomName: "",
                    messageId: -1,
                    threadId: -1,
                    groupId: -1,
                    extraData: "",
                    roomObjectId: -1,
                    message: "",
                    currentStep: 0
                };
                switch (l) {
                case Lt.BULLY:
                case Lt.EMERGENCY:
                case Lt.IM:
                    u.reportedUserId = c.reportedUserId,
                    u.currentStep = Ks.SELECT_CHATS;
                    break;
                case Lt.ROOM:
                    u.roomId = c.roomId,
                    u.roomName = c.roomName,
                    u.currentStep = Ks.SELECT_TOPICS;
                    break;
                case Lt.THREAD:
                    u.groupId = c.groupId,
                    u.threadId = c.threadId,
                    u.currentStep = Ks.SELECT_TOPICS;
                    break;
                case Lt.MESSAGE:
                    u.groupId = c.groupId,
                    u.threadId = c.threadId,
                    u.messageId = c.messageId,
                    u.currentStep = Ks.SELECT_TOPICS;
                    break;
                case Lt.PHOTO:
                    u.extraData = c.extraData,
                    u.roomId = c.roomId,
                    u.reportedUserId = c.reportedUserId,
                    u.roomObjectId = c.roomObjectId,
                    u.currentStep = Ks.SELECT_TOPICS;
                    break
                }
                e(u)
            };
        return W(QO, l => {
            const c = l.getParser();
            let u = c.messageText;
            switch (c.resultType) {
            case od.TOO_MANY_PENDING_CALLS_CODE:
                B(new fy),
                i(f("help.cfh.error.pending"), we.MODERATION, null, null, f("help.cfh.error.title"));
                break;
            case od.HAS_ABUSIVE_CALL_CODE:
                i(f("help.cfh.error.abusive"), we.MODERATION, null, null, f("help.cfh.error.title"));
                break;
            default:
                u.trim().length === 0 && (u = f("help.cfh.sent.text")),
                i(u, we.MODERATION, null, null, f("help.cfh.sent.title"))
            }
        }), W(iS, l => {
            const c = l.getParser(),
                u = c.messageText.length === 0 ? f("help.cfh.closed." + l4(c.closeReason)) : c.messageText;
            i(u, we.MODERATION, null, null, f("mod.alert.title"))
        }), W(qO, l => {
            const c = l.getParser();
            c.count > 0 && n(f("help.emergency.pending.title") + `
`
            + c.pendingCalls[0].message, () => {
                B(new _y)
            }, null, f("help.emergency.pending.button.discard"), f("help.emergency.pending.button.keep"), f("help.emergency.pending.message.subtitle"))
        }), W(KO, l => {
            i("Your pending calls were deleted", we.MODERATION, null, null, f("mod.alert.title"))
        }), W(XO, l => {
            const c = l.getParser();
            i(c.message, we.MODERATION, null, null, f("help.cfh.reply.title"))
        }), W(zO, l => {
            const c = l.getParser();
            i(f("help.emergency.global_mute.message"), we.MODERATION, c.infoUrl, f("help.emergency.global_mute.link"), f("help.emergency.global_mute.subtitle"))
        }), W(ZR, l => {
            const c = l.getParser();
            r(c)
        }), {
            activeReport: s,
            setActiveReport: e,
            sanctionInfo: t,
            setSanctionInfo: r,
            report: o
        }
    },
    Vi = () => ds(nq),
    d_ = () => {
        const [s, e] = _.useState([]),
            t = _.useMemo(() => !!s.length, [s]),
            r = _.useCallback(() => {
                let n = -1;
                return e(o => {
                    const l = [...o];
                    return n = l.length ? l[l.length - 1] + 1 : 0, l.push(n), l
                }), n
            }, []),
            i = _.useCallback(n => {
                e(o => {
                    const l = [...o],
                        c = l.indexOf(n);
                    return c === -1 ? o : (l.splice(c, 1), l)
                })
            }, []);
        return {
            isVisible: t,
            activate: r,
            deactivate: i
        }
    },
    aq = s => B(new wy(s)),
    oq = (s, e) => B(new Fy(s, ...e)),
    lq = () => {
        const [s, e] = _.useState(new Map),
            t = _.useCallback(c => {
                var u;
                return ((u = s.get(c)) == null ? void 0 : u.length) || 0
            }, [s]),
            r = _.useMemo(() => {
                let c = 0;
                for (const u of s.keys())
                    c += t(u);
                return c
            }, [s, t]),
            i = _.useCallback(c => {
                let u = !0;
                return e(h => {
                    if (!h.has(c))
                        return u = !1, h;
                    const d = new Map(h);
                    return d.delete(c), aq(c), d
                }), u
            }, []),
            n = _.useCallback((c, u) => {
                let h = !0;
                return e(d => {
                    if (!d.has(c))
                        return h = !1, d;
                    const m = new Map(d),
                        p = m.get(c);
                    if (p)
                        for (const E of u)
                            p.splice(p.indexOf(E), 1);
                    return oq(c, u), m
                }), h
            }, []),
            o = _.useCallback((c, u) => s.has(c) ? s.get(c).indexOf(u) >= 0 : !1, [s]),
            l = _.useCallback((c, u) => {
                e(h => {
                    if (!h.has(c))
                        return h;
                    const d = new Map(h),
                        m = d.get(c),
                        p = m.indexOf(u);
                    return p >= 0 && m.splice(p, 1), d
                })
            }, []);
        return W(CC, c => {
            const u = c.getParser();
            e(h => {
                const d = new Map(h);
                for (const m of u.categories) {
                    let p = d.get(m);
                    p || (p = [], d.set(m, p));
                    const E = u.getItemsByCategory(m);
                    for (const T of E)
                        p.indexOf(T) === -1 && p.push(T)
                }
                return d
            })
        }), {
            getCount: t,
            getFullCount: r,
            resetCategory: i,
            resetItems: n,
            isUnseen: o,
            removeUnseen: l
        }
    },
    pi = () => ds(lq),
    cq = () => {
        const [s, e] = _.useState(!0),
            [t, r] = _.useState([]),
            [i, n] = _.useState(new Map),
            [o, l] = _.useState([]),
            [c, u] = _.useState(null),
            {isVisible: h=!1, activate: d=null, deactivate: m=null} = d_(),
            {isUnseen: p=null, resetCategory: E=null} = pi(),
            T = oe("user.badges.max.slots", 5),
            I = b => o.indexOf(b) >= 0,
            S = () => o.length < T,
            A = b => {
                l(v => {
                    const D = [...v],
                        G = D.indexOf(b);
                    if (G === -1) {
                        if (!S())
                            return v;
                        D.push(b)
                    } else
                        D.splice(G, 1);
                    const x = new Ay;
                    for (let F = 0; F < T; F++)
                        x.addActivatedBadge(D[F] ?? "");
                    return B(x), D
                })
            },
            N = b => t.indexOf(b) === -1 ? 0 : i.get(b) ?? 0;
        return W(cS, b => {
            const v = b.getParser(),
                D = [];
            n(G => {
                const x = new Map(G);
                return v.getAllBadgeCodes().forEach(F => {
                    const U = t.indexOf(F) >= 0,
                        z = v.getBadgeId(F);
                    x.set(F, z),
                    !U && D.push(F)
                }), x
            }),
            l(v.getActiveBadgeCodes()),
            r(G => [...G, ...D])
        }), W(lS, b => {
            const v = b.getParser(),
                D = p(Ht.BADGE, v.badgeId);
            r(G => {
                const x = [...G];
                return D ? x.unshift(v.badgeCode) : x.push(v.badgeCode), x
            }),
            n(G => {
                const x = new Map(G);
                return x.set(v.badgeCode, v.badgeId), x
            })
        }), _.useEffect(() => {
            !t || !t.length || u(b => {
                let v = b;
                return v && t.indexOf(v) === -1 && (v = null), v || (v = t[0]), v
            })
        }, [t]), _.useEffect(() => {
            if (h)
                return () => {
                    E(Ht.BADGE)
                }
        }, [h, E]), _.useEffect(() => {
            !h || !s || (B(new Cy), e(!1))
        }, [h, s]), {
            badgeCodes: t,
            activeBadgeCodes: o,
            selectedBadgeCode: c,
            setSelectedBadgeCode: u,
            isWearingBadge: I,
            canWearBadges: S,
            toggleBadge: A,
            getBadgeId: N,
            activate: d,
            deactivate: m
        }
    },
    __ = () => ds(cq),
    uq = () => {
        const [s, e] = _.useState(!0),
            [t, r] = _.useState([]),
            [i, n] = _.useState(null),
            {isVisible: o=!1, activate: l=null, deactivate: c=null} = d_(),
            {isUnseen: u=null, resetCategory: h=null} = pi();
        return W(qR, d => {
            const m = d.getParser();
            r(p => {
                const E = [...p],
                    T = E.map(S => S.botData.id),
                    I = [];
                for (const S of m.items.values())
                    T.indexOf(S.id) === -1 && I.push(S);
                for (const S of T) {
                    let A = !0;
                    for (const v of m.items.values())
                        if (v.id === S) {
                            A = !1;
                            break
                        }
                    if (!A)
                        continue;
                    const N = E.findIndex(v => v.botData.id === S),
                        b = E[N];
                    N === -1 || !b || (Wl() === b.botData.id && (Zc(), ge("inventory/open")), E.splice(N, 1))
                }
                for (const S of I) {
                    const A = {
                        botData: S
                    };
                    u(Ht.BOT, S.id) ? E.unshift(A) : E.push(A)
                }
                return E
            })
        }), W(KR, d => {
            const m = d.getParser();
            r(p => {
                const E = [...p];
                if (E.findIndex(A => A.botData.id === m.item.id) >= 0)
                    return p;
                const I = {
                    botData: m.item
                };
                return u(Ht.BOT, I.botData.id) ? E.unshift(I) : E.push(I), E
            })
        }), W(XR, d => {
            const m = d.getParser();
            r(p => {
                const E = [...p],
                    T = E.findIndex(I => I.botData.id === m.itemId);
                return T === -1 ? p : (E.splice(T, 1), Wl() === m.itemId && (Zc(), ge("inventory/show")), E)
            })
        }), _.useEffect(() => {
            !t || !t.length || n(d => {
                let m = d;
                return m && t.indexOf(m) === -1 && (m = null), m || (m = t[0]), m
            })
        }, [t]), _.useEffect(() => {
            if (o)
                return () => {
                    h(Ht.BOT)
                }
        }, [o, h]), _.useEffect(() => {
            !o || !s || (B(new $g), e(!1))
        }, [o, s]), {
            botItems: t,
            selectedBot: i,
            setSelectedBot: n,
            activate: l,
            deactivate: c
        }
    },
    cP = () => ds(uq);
let Hu = null;
const hq = () => {
        const [s, e] = _.useState(!0),
            [t, r] = _.useState([]),
            [i, n] = _.useState(null),
            {isVisible: o=!1, activate: l=null, deactivate: c=null} = d_(),
            {isUnseen: u=null, resetCategory: h=null} = pi(),
            d = E => {
                if (!(!t || !t.length))
                    return t.filter(T => T.type === E)
            },
            m = E => {
                if (!(!t || !t.length)) {
                    for (const T of t) {
                        const I = T.getItemById(E);
                        if (I && I.isWallItem)
                            return T
                    }
                    return null
                }
            },
            p = E => {
                if (!(!t || !t.length)) {
                    for (const T of t) {
                        const I = T.getItemById(E);
                        if (I && !I.isWallItem)
                            return T
                    }
                    return null
                }
            };
        return W(Um, E => {
            const T = E.getParser();
            r(I => {
                const S = [...I];
                for (const A of T.items) {
                    let N = 0,
                        b = null;
                    for (; N < S.length;) {
                        const v = S[N];
                        let D = 0;
                        for (; D < v.items.length;) {
                            const G = v.items[D];
                            if (G.id === A.itemId) {
                                G.update(A);
                                const x = [...v.items];
                                x[D] = G,
                                v.items = x,
                                b = v;
                                break
                            }
                            D++
                        }
                        if (b)
                            break;
                        N++
                    }
                    if (b)
                        b.hasUnseenItems = !0,
                        S[N] = Ir(b);
                    else {
                        const v = new Jc(A);
                        Up(S, v, u(Ht.FURNI, A.itemId)),
                        Ms(new fd(v.id, v.type, v.category))
                    }
                }
                return S
            })
        }), W(wh, E => {
            const T = E.getParser();
            Hu || (Hu = new Array(T.totalFragments));
            const I = wK(T.fragment, T.totalFragments, T.fragmentNumber, Hu);
            I && (r(S => {
                const A = [...S],
                    N = FK(A);
                for (const b of N) {
                    if (I.get(b))
                        continue;
                    let v = 0;
                    for (; v < A.length;) {
                        const D = A[v],
                            G = D.remove(b);
                        if (!G) {
                            v++;
                            continue
                        }
                        Wl() === G.ref && (Zc(), Yl(D) || ge("inventory/show")),
                        D.getTotalCount() <= 0 && (A.splice(v, 1), D.dispose());
                        break
                    }
                }
                for (const b of I.keys()) {
                    if (N.indexOf(b) >= 0)
                        continue;
                    const v = I.get(b);
                    if (!v)
                        continue;
                    const D = new Jc(v);
                    Up(A, D, u(Ht.FURNI, b)),
                    Ms(new fd(D.id, D.type, D.category))
                }
                return A
            }), Hu = null)
        }), W(hS, E => {
            e(!0)
        }), W(wm, E => {
            const T = E.getParser();
            r(I => {
                const S = [...I];
                let A = 0;
                for (; A < S.length;) {
                    const N = S[A],
                        b = N.remove(T.itemId);
                    if (!b) {
                        A++;
                        continue
                    }
                    Wl() === b.ref && (Zc(), Yl(N) || ge("inventory/show")),
                    N.getTotalCount() <= 0 && (S.splice(A, 1), N.dispose());
                    break
                }
                return S
            })
        }), W(dS, E => {}), _.useEffect(() => {
            !t || !t.length || n(E => {
                let T = E;
                return T && t.indexOf(T) === -1 && (T = null), T || (T = t[0]), T
            })
        }, [t]), _.useEffect(() => {
            if (o)
                return () => {
                    h(Ht.FURNI) && r(E => {
                        const T = [...E];
                        for (const I of T)
                            I.hasUnseenItems = !1;
                        return T
                    })
                }
        }, [o, h]), _.useEffect(() => {
            !o || !s || (B(new Ny), e(!1))
        }, [o, s]), {
            isVisible: o,
            groupItems: t,
            setGroupItems: r,
            selectedItem: i,
            setSelectedItem: n,
            activate: l,
            deactivate: c,
            getWallItemById: m,
            getFloorItemById: p,
            getItemsByType: d
        }
    },
    Xo = () => ds(hq);
let ju = null;
const dq = () => {
        const [s, e] = _.useState(!0),
            [t, r] = _.useState([]),
            [i, n] = _.useState(null),
            {isVisible: o=!1, activate: l=null, deactivate: c=null} = d_(),
            {isUnseen: u=null, resetCategory: h=null} = pi();
        return W(fS, d => {
            const m = d.getParser();
            ju || (ju = new Array(m.totalFragments));
            const p = kK(m.fragment, m.totalFragments, m.fragmentNumber, ju);
            p && (r(E => {
                const T = [...E];
                return BK(T, p, u), T
            }), ju = null)
        }), W(gS, d => {
            const m = d.getParser();
            r(p => {
                const E = [...p];
                return yv(m.pet, E, u(Ht.PET, m.pet.id)), E
            })
        }), W(ES, d => {
            const m = d.getParser();
            r(p => {
                const E = [...p];
                return Mv(m.petId, E), E
            })
        }), _.useEffect(() => {
            !t || !t.length || n(d => {
                let m = d;
                return m && t.indexOf(m) === -1 && (m = null), m || (m = t[0]), m
            })
        }, [t]), _.useEffect(() => {
            if (o)
                return () => {
                    h(Ht.PET)
                }
        }, [o, h]), _.useEffect(() => {
            !o || !s || (B(new ef), e(!1))
        }, [o, s]), {
            petItems: t,
            selectedPet: i,
            setSelectedPet: n,
            activate: l,
            deactivate: c
        }
    },
    uP = () => ds(dq),
    _q = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState(null),
            [i, n] = _.useState(es.TRADING_STATE_READY),
            {groupItems: o=[], setGroupItems: l=null, activate: c=null, deactivate: u=null} = Xo(),
            {simpleAlert: h=null, showTradeAlert: d=null} = Yt(),
            m = i >= es.TRADING_STATE_RUNNING,
            p = () => {
                l(S => {
                    const A = [...S];
                    for (const N of A)
                        N.unlockAllItems();
                    return A
                })
            },
            E = () => {
                switch (i) {
                case es.TRADING_STATE_RUNNING:
                    !t.itemCount && !s.accepts && h(f("inventory.trading.warning.other_not_offering"), null, null, null),
                    s.accepts ? B(new Uy) : B(new yy);
                    return;
                case es.TRADING_STATE_CONFIRMING:
                    B(new Dy),
                    n(es.TRADING_STATE_CONFIRMED);
                    return
                }
            },
            T = S => {
                const A = S.getLastItem();
                A && B(new Py(A.id))
            },
            I = () => {
                if (m)
                    switch (i) {
                    case es.TRADING_STATE_RUNNING:
                        B(new by);
                        return;
                    default:
                        B(new My);
                        return
                    }
            };
        return W(pS, S => {
            const A = S.getParser();
            !s || !t || (s.userId === A.userID ? e(N => {
                const b = Ir(N);
                return b.accepts = A.userAccepts, b
            }) : t.userId === A.userID && r(N => {
                const b = Ir(N);
                return b.accepts = A.userAccepts, b
            }))
        }), W(IS, S => {
            const A = S.getParser();
            A.reason === _m.ERROR_WHILE_COMMIT ? d(ys.ERROR_WHILE_COMMIT) : s && A.userID !== s.userId && d(ys.THEY_CANCELLED),
            p(),
            e(null),
            r(null),
            n(es.TRADING_STATE_READY)
        }), W(TS, S => {
            S.getParser(),
            p(),
            e(null),
            r(null),
            n(es.TRADING_STATE_READY)
        }), W(RS, S => {
            S.getParser(),
            n(es.TRADING_STATE_COUNTDOWN)
        }), W(OS, S => {
            const A = S.getParser(),
                N = xp(A.firstUserItemArray),
                b = xp(A.secondUserItemArray);
            e(v => {
                const D = Ir(v);
                D.userId === A.firstUserID ? (D.creditsCount = A.firstUserNumCredits, D.itemCount = A.firstUserNumItems, D.userItems = N) : (D.creditsCount = A.secondUserNumCredits, D.itemCount = A.secondUserNumItems, D.userItems = b);
                const G = [];
                for (const x of D.userItems.getValues()) {
                    let F = 0;
                    for (; F < x.getTotalCount();) {
                        const U = x.getItemByIndex(F);
                        U && G.push(U.ref),
                        F++
                    }
                }
                return l(x => {
                    const F = [...x];
                    for (const U of F)
                        U.lockItemIds(G);
                    return F
                }), D
            }),
            r(v => {
                const D = Ir(v);
                return D.userId === A.firstUserID ? (D.creditsCount = A.firstUserNumCredits, D.itemCount = A.firstUserNumItems, D.userItems = N) : (D.creditsCount = A.secondUserNumCredits, D.itemCount = A.secondUserNumItems, D.userItems = b), D
            })
        }), W(SS, S => {
            S.getParser()
        }), W(CS, S => {
            const A = S.getParser(),
                N = new wp,
                b = dt().userDataManager.getUserData(A.userID);
            N.userItems = new as;
            const v = new wp,
                D = dt().userDataManager.getUserData(A.otherUserID);
            v.userItems = new as,
            b.webID === Z().userId ? (N.userId = b.webID, N.userName = b.name, N.canTrade = A.userCanTrade, v.userId = D.webID, v.userName = D.name, v.canTrade = A.otherUserCanTrade) : D.webID === Z().userId && (N.userId = D.webID, N.userName = D.name, N.canTrade = A.otherUserCanTrade, v.userId = b.webID, v.userName = b.name, v.canTrade = A.userCanTrade),
            e(N),
            r(v),
            n(es.TRADING_STATE_RUNNING)
        }), W(AS, S => {
            const A = S.getParser();
            d(A.reason, A.otherUserName)
        }), W(NS, S => {
            S.getParser(),
            d(ys.THEY_NOT_ALLOWED)
        }), W(yS, S => {
            S.getParser(),
            d(ys.YOU_NOT_ALLOWED)
        }), _.useEffect(() => {
            if (i === es.TRADING_STATE_READY)
                return;
            const S = c();
            return () => u(S)
        }, [i, c, u]), {
            ownUser: s,
            otherUser: t,
            tradeState: i,
            setTradeState: n,
            isTrading: m,
            groupItems: o,
            progressTrade: E,
            removeItem: T,
            stopTrading: I
        }
    },
    hP = () => ds(_q),
    gq = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState([]),
            [i, n] = _.useState([]),
            [o, l] = _.useState([]),
            [c, u] = _.useState([]),
            [h, d] = _.useState([]),
            [m, p] = _.useState([]),
            [E, T] = _.useState([]),
            {simpleAlert: I=null} = Yt(),
            S = j => {
                t.indexOf(j) >= 0 || r(J => [...J, j])
            },
            A = j => {
                r(J => {
                    const X = [...J],
                        K = X.indexOf(j);
                    return K >= 0 && X.splice(K), X
                })
            },
            N = j => {
                t.indexOf(j) >= 0 ? A(j) : S(j)
            },
            b = j => {
                i.indexOf(j) >= 0 || n(J => [...J, j])
            },
            v = j => {
                n(J => {
                    const X = [...J],
                        K = X.indexOf(j);
                    return K >= 0 && X.splice(K), X
                })
            },
            D = j => {
                i.indexOf(j) >= 0 ? v(j) : b(j)
            },
            G = j => {
                o.indexOf(j) >= 0 || l(J => [...J, j])
            },
            x = j => {
                l(J => {
                    const X = [...J],
                        K = X.indexOf(j);
                    return K >= 0 && X.splice(K), X
                })
            },
            F = j => {
                o.indexOf(j) >= 0 ? x(j) : G(j)
            },
            U = j => {
                c.indexOf(j) >= 0 || u(J => [...J, j])
            },
            z = j => {
                u(J => {
                    const X = [...J],
                        K = X.indexOf(j);
                    return K >= 0 && X.splice(K), X
                })
            },
            Q = j => {
                i.indexOf(j) >= 0 ? z(j) : U(j)
            };
        return W(VS, j => {
            const X = j.getParser().data;
            e(X),
            d(X.issues),
            p(X.messageTemplates)
        }), W(xS, j => {
            const J = j.getParser();
            d(X => {
                const K = [...X],
                    be = K.findIndex(he => he.issueId === J.issueData.issueId);
                return be >= 0 ? K[be] = J.issueData : (K.push(J.issueData), Mn(Zr.MODTOOLS_NEW_TICKET)), K
            })
        }), W(WS, j => {
            j.getParser()
        }), W(GS, j => {
            j.getParser() && I("Failed to pick issue", we.DEFAULT, null, null, "Error")
        }), W(FS, j => {
            const J = j.getParser();
            d(X => {
                const K = [...X],
                    be = K.findIndex(he => he.issueId === J.issueId);
                return be >= 0 && K.splice(be, 1), K
            })
        }), W(BS, j => {
            j.getParser().success ? I("Moderation action was successfull", we.MODERATION, null, null, "Success") : I("There was a problem applying tht moderation action", we.MODERATION, null, null, "Error")
        }), W(JR, j => {
            const J = j.getParser();
            T(J.callForHelpCategories)
        }), W(QR, j => {
            j.getParser()
        }), {
            settings: s,
            openRooms: t,
            openRoomChatlogs: i,
            openUserChatlogs: c,
            openUserInfos: o,
            cfhCategories: E,
            tickets: h,
            messageTemplates: m,
            openRoomInfo: S,
            closeRoomInfo: A,
            toggleRoomInfo: N,
            openRoomChatlog: b,
            closeRoomChatlog: v,
            toggleRoomChatlog: D,
            openUserInfo: G,
            closeUserInfo: x,
            toggleUserInfo: F,
            openUserChatlog: U,
            closeUserChatlog: z,
            toggleUserChatlog: Q
        }
    },
    ro = () => ds(gq),
    fq = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState(null),
            [i, n] = _.useState(null),
            [o, l] = _.useState(null),
            [c, u] = _.useState({
                roomInfo: null,
                state: Et.NONE
            }),
            [h, d] = _.useState(null),
            [m, p] = _.useState(0),
            [E, T] = _.useState([]),
            [I, S] = _.useState({
                settingsReceived: !1,
                homeRoomId: 0,
                enteredGuestRoom: null,
                currentRoomOwner: !1,
                currentRoomId: 0,
                currentRoomIsStaffPick: !1,
                createdFlatId: 0,
                avatarId: 0,
                roomPicker: !1,
                eventMod: !1,
                currentRoomRating: 0,
                canRate: !0
            }),
            {simpleAlert: A=null} = Yt();
        return W(uC, N => {
            const b = N.getParser();
            B(new Yc(b.roomId, !1, !1))
        }), W(eC, N => {
            const b = N.getParser();
            b.canCreate || A(f(`navigator.cannotcreateevent.error.${b.errorCode}`), null, null, null, f("navigator.cannotcreateevent.title"))
        }), W(xl, N => {
            B(new uM),
            B(new eE)
        }), W(jm, N => {
            const b = N.getParser();
            S(v => {
                const D = {
                    ...v
                };
                return D.eventMod = b.securityLevel >= xr.MODERATOR, D.roomPicker = b.securityLevel >= xr.COMMUNITY, D
            })
        }), W(kC, N => {
            const b = N.getParser();
            _i(b.roomId)
        }), W(km, N => {
            const b = N.getParser();
            S(v => {
                const D = {
                    ...v
                };
                return D.enteredGuestRoom = null, D.currentRoomOwner = b.isOwner, D.currentRoomId = b.roomId, D
            }),
            B(new Yc(b.roomId, !0, !1)),
            Ze.available && Ze.call("legacyTrack", "navigator", "private", [b.roomId])
        }), W(na, N => {
            const b = N.getParser();
            if (b.roomEnter)
                u({
                    roomInfo: null,
                    state: Et.NONE
                }),
                S(v => {
                    const D = {
                        ...v
                    };
                    return D.enteredGuestRoom = b.data, D.currentRoomIsStaffPick = b.staffPick, !(D.createdFlatId === b.data.roomId) && b.data.displayRoomEntryAd && oe("roomenterad.habblet.enabled", !1) && Gi.openRoomEnterAd(), D.createdFlatId = 0, D.enteredGuestRoom && D.enteredGuestRoom.habboGroupId > 0, D
                });
            else if (b.roomForward) {
                if (b.data.ownerName !== Z().userName && !b.isGroupMember)
                    switch (b.data.doorMode) {
                    case nt.DOORBELL_STATE:
                        u(v => {
                            const D = {
                                ...v
                            };
                            return D.roomInfo = b.data, D.state = Et.START_DOORBELL, D
                        });
                        return;
                    case nt.PASSWORD_STATE:
                        u(v => {
                            const D = {
                                ...v
                            };
                            return D.roomInfo = b.data, D.state = Et.START_PASSWORD, D
                        });
                        return
                    }
                if (b.data.doorMode === nt.NOOB_STATE && !Z().isAmbassador && !Z().isRealNoob && !Z().isModerator)
                    return;
                Do(b.data.roomId)
            } else
                S(v => {
                    const D = {
                        ...v
                    };
                    return D.enteredGuestRoom = b.data, D.currentRoomIsStaffPick = b.staffPick, D
                })
        }), W(jC, N => {
            const b = N.getParser();
            S(v => {
                const D = {
                    ...v
                };
                return D.currentRoomRating = b.totalLikes, D.canRate = b.canLike, D
            })
        }), W(Fm, N => {
            const b = N.getParser();
            (!b.userName || b.userName.length === 0) && u(v => {
                const D = {
                    ...v
                };
                return D.state = Et.STATE_WAITING, D
            })
        }), W(xh, N => {
            const b = N.getParser();
            (!b.userName || b.userName.length === 0) && u(v => {
                const D = {
                    ...v
                };
                return D.state = Et.STATE_ACCEPTED, D
            })
        }), W(Fh, N => {
            const b = N.getParser();
            (!b.userName || b.userName.length === 0) && u(v => {
                const D = {
                    ...v
                };
                return D.state = Et.STATE_NO_ANSWER, D
            })
        }), W(Uh, N => {
            switch (N.getParser().errorCode) {
            case -100002:
                u(v => {
                    const D = {
                        ...v
                    };
                    return D.state = Et.STATE_WRONG_PASSWORD, D
                });
                return;
            case 4009:
                A(f("navigator.alert.need.to.be.vip"), we.DEFAULT, null, null, f("generic.alert.title"));
                return;
            case 4010:
                A(f("navigator.alert.invalid_room_name"), we.DEFAULT, null, null, f("generic.alert.title"));
                return;
            case 4011:
                A(f("navigator.alert.cannot_perm_ban"), we.DEFAULT, null, null, f("generic.alert.title"));
                return;
            case 4013:
                A(f("navigator.alert.room_in_maintenance"), we.DEFAULT, null, null, f("generic.alert.title"));
                return
            }
        }), W(nC, N => {
            const b = N.getParser();
            l(b.topLevelContexts),
            n(b.topLevelContexts.length ? b.topLevelContexts[0] : null)
        }), W(oC, N => {
            const b = N.getParser();
            n(v => {
                let D = v;
                if (D || (D = o && o.length && o[0] || null), !D)
                    return null;
                if (b.result.code !== D.code && o && o.length)
                    for (const G of o)
                        G.code === b.result.code && (D = G);
                for (const G of o)
                    G.code === b.result.code && (D = G);
                return D
            }),
            d(b.result)
        }), W(dC, N => {
            const b = N.getParser();
            e(b.categories)
        }), W(hC, N => {
            const b = N.getParser();
            r(b.categories)
        }), W(rC, N => {
            const b = N.getParser();
            Do(b.roomId)
        }), W(iC, N => {
            const b = N.getParser();
            let v = !1;
            if (S(x => {
                v = x.settingsReceived;
                const F = {
                    ...x
                };
                return F.homeRoomId = b.homeRoomId, F.settingsReceived = !0, F
            }), v)
                return;
            let D = -1,
                G = -1;
            oe("friend.id") !== void 0 && parseInt(oe("friend.id")) > 0 && (D = 0, B(new kd(parseInt(oe("friend.id"))))),
            oe("forward.type") !== void 0 && oe("forward.id") !== void 0 && (D = parseInt(oe("forward.type")), G = parseInt(oe("forward.id"))),
            D === 2 ? _i(G) : D === -1 && b.roomIdToEnter > 0 && (ge("navigator/close"), b.roomIdToEnter !== b.homeRoomId ? Do(b.roomIdToEnter) : Do(b.homeRoomId))
        }), W(BC, N => {
            const b = N.getParser();
            switch (b.reason) {
            case Fa.REASON_FULL:
                A(f("navigator.guestroomfull.text"), we.DEFAULT, null, null, f("navigator.guestroomfull.title"));
                break;
            case Fa.REASON_QUEUE_ERROR:
                A(f(`room.queue.error.${b.parameter}`), we.DEFAULT, null, null, f("room.queue.error.title"));
                break;
            case Fa.REASON_BANNED:
                A(f("navigator.banned.text"), we.DEFAULT, null, null, f("navigator.banned.title"));
                break;
            default:
                A(f("room.queue.error.title"), we.DEFAULT, null, null, f("room.queue.error.title"));
                break
            }
            wE()
        }), W(aC, N => ge("navigator/show")), W(sC, N => {
            const b = N.getParser();
            p(b.limit),
            T(b.favoriteRoomIds)
        }), W(tC, N => {
            const {added: b, flatId: v} = N.getParser();
            T(D => b && !D.includes(v) ? [...D, v] : b ? D : D.filter(G => G !== v))
        }), {
            categories: s,
            doorData: c,
            setDoorData: u,
            topLevelContext: i,
            topLevelContexts: o,
            searchResult: h,
            navigatorData: I,
            favourites: E,
            favouritesLimit: m
        }
    },
    fi = () => ds(fq),
    mq = () => {
        const [s, e] = _.useState(new HE),
            t = _.useMemo(() => oe("hc.disabled", !1), []),
            r = _.useMemo(() => t || s.clubDays > 0 ? Xi.ACTIVE : s.pastVipDays > 0 || s.pastVipDays > 0 ? Xi.EXPIRED : Xi.NONE, [s, t]),
            i = n => {
                if (n === -1)
                    return s.credits;
                for (const [o, l] of s.activityPoints.entries())
                    if (o === n)
                        return l;
                return 0
            };
        return W(BA, n => {
            const o = n.getParser();
            e(l => {
                const c = Ir(l);
                return c.credits = parseFloat(o.credits), l.credits !== c.credits && Mn(Zr.CREDITS), c
            })
        }), W(kA, n => {
            const o = n.getParser();
            e(l => {
                const c = Ir(l);
                return c.activityPoints = o.currencies, c
            })
        }), W(xm, n => {
            const o = n.getParser();
            e(l => {
                const c = Ir(l);
                return c.activityPoints = new Map(c.activityPoints), c.activityPoints.set(o.type, o.amount), o.type === 0 && Mn(Zr.DUCKETS), c
            })
        }), W(VA, n => {
            const o = n.getParser(),
                l = o.productName;
            l !== "club_habbo" && l !== "habbo_club" || e(c => {
                const u = Ir(c);
                return u.clubDays = Math.max(0, o.daysToPeriodEnd), u.clubPeriods = Math.max(0, o.periodsSubscribedAhead), u.isVip = o.isVip, u.pastClubDays = o.pastClubDays, u.pastVipDays = o.pastVipDays, u.isExpiring = o.responseType === Jl.RESPONSE_TYPE_DISCOUNT_AVAILABLE, u.minutesUntilExpiration = o.minutesUntilExpiration, u.minutesSinceLastModified = o.minutesSinceLastModified, u
            })
        }), _.useEffect(() => {
            if (t)
                return;
            B(new uf("habbo_club"));
            const n = setInterval(() => B(new uf("habbo_club")), 5e4);
            return () => clearInterval(n)
        }, [t]), _.useEffect(() => {
            B(new nD)
        }, []), {
            purse: s,
            hcDisabled: t,
            clubStatus: r,
            getCurrencyAmount: i
        }
    },
    Qo = () => ds(mq),
    Eq = (s, e) => {
        _.useEffect(() => {
            if (!s)
                return;
            const t = r => e(r);
            return yn.addEventListener(lt.FURNI_ADDED, t), () => {
                yn.removeEventListener(lt.FURNI_ADDED, t)
            }
        }, [s, e])
    },
    Ii = (s, e) => {
        _.useEffect(() => {
            if (!s)
                return;
            const t = r => e(r);
            return yn.addEventListener(lt.FURNI_REMOVED, t), () => {
                yn.removeEventListener(lt.FURNI_REMOVED, t)
            }
        }, [s, e])
    },
    pq = s => {
        hs(lt.OBJECT_DESELECTED, s)
    },
    Iq = s => {
        hs(lt.OBJECT_ROLL_OUT, s)
    },
    Tq = s => {
        hs(lt.OBJECT_ROLL_OVER, s)
    },
    QE = s => {
        hs(lt.OBJECT_SELECTED, s)
    },
    dP = (s, e) => {
        _.useEffect(() => {
            if (!s)
                return;
            const t = r => e(r);
            return yn.addEventListener(lt.USER_ADDED, t), () => {
                yn.removeEventListener(lt.USER_ADDED, t)
            }
        }, [s, e])
    },
    _P = (s, e) => {
        _.useEffect(() => {
            if (!s)
                return;
            const t = r => e(r);
            return yn.addEventListener(lt.USER_REMOVED, t), () => {
                yn.removeEventListener(lt.USER_REMOVED, t)
            }
        }, [s, e])
    },
    Rq = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState(!1);
        return W(lC, i => {
            const n = i.getParser();
            n && e(n)
        }), {
            promoteInformation: s,
            isExtended: t,
            setPromoteInformation: e,
            setIsExtended: r
        }
    },
    JE = () => ds(Rq),
    Oq = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState(null),
            [i, n] = _.useState(null),
            [o, l] = _.useState(0),
            c = (h, d, m, p=!1) => {
                if (!t)
                    return;
                const E = nr.hslToRGB(((h & 255) << 16) + ((d & 255) << 8) + (m & 255));
                p && l(E),
                !h && !d && !m ? t.tint = 0 : t.tint = E
            },
            u = h => {
                if (!i)
                    return;
                const d = h >> 16 & 255,
                    m = h >> 8 & 255,
                    p = h & 255;
                i.red = d / 255,
                i.green = m / 255,
                i.blue = p / 255
            };
        return hs(Ua.PREVIEW, h => c(h.hue, h.saturation, h.lightness)), hs(Ua.CLEAR_PREVIEW, h => {
            t && (t.tint = o)
        }), at(Mh.ROOM_BACKGROUND_COLOR, h => {
            On.isRoomPreviewerId(h.roomId) || (h.enable ? c(h.hue, h.saturation, h.lightness, !0) : c(0, 0, 0, !0))
        }), at(qf.ROOM_COLOR, h => {
            if (On.isRoomPreviewerId(h.roomId))
                return;
            let d = 0,
                m = 255;
            h.bgOnly || (d = h.color, m = h.brightness),
            u(nr.hslToRGB((nr.rgbToHSL(d) & 16776960) + m))
        }), at([ze.INITIALIZED, ze.DISPOSED], h => {
            if (On.isRoomPreviewerId(h.roomId))
                return;
            const d = dt();
            if (d)
                switch (h.type) {
                case ze.INITIALIZED:
                    vp(h.roomId),
                    e(d);
                    return;
                case ze.DISPOSED:
                    e(null);
                    return
                }
        }), jt([Ce.CREATED, Ce.ENDED], h => {
            switch (h.type) {
            case Ce.CREATED:
                NK(h.session);
                return;
            case Ce.ENDED:
                e(null);
                return
            }
        }), at([de.SELECTED, de.DESELECTED, de.ADDED, de.REMOVED, de.PLACED, de.REQUEST_MOVE, de.REQUEST_ROTATE, de.MOUSE_ENTER, de.MOUSE_LEAVE, de.DOUBLE_CLICK], h => {
            if (On.isRoomPreviewerId(h.roomId))
                return;
            let d = null;
            switch (h.type) {
            case de.SELECTED:
                MK(h) || (d = new lt(lt.OBJECT_SELECTED, h.objectId, h.category, h.roomId), B(new Gb(h.objectId)));
                break;
            case de.DESELECTED:
                d = new lt(lt.OBJECT_DESELECTED, h.objectId, h.category, h.roomId);
                break;
            case de.ADDED:
                {
                    let m = null;
                    switch (h.category) {
                    case V.FLOOR:
                    case V.WALL:
                        m = lt.FURNI_ADDED;
                        break;
                    case V.UNIT:
                        m = lt.USER_ADDED;
                        break
                    }
                    m && (d = new lt(m, h.objectId, h.category, h.roomId));
                    break
                }case de.REMOVED:
                {
                    let m = null;
                    switch (h.category) {
                    case V.FLOOR:
                    case V.WALL:
                        m = lt.FURNI_REMOVED;
                        break;
                    case V.UNIT:
                        m = lt.USER_REMOVED;
                        break
                    }
                    m && (d = new lt(m, h.objectId, h.category, h.roomId));
                    break
                }case de.REQUEST_MOVE:
                Xc(s, h.objectId, h.category) && Al(h.objectId, h.category, Ne.OBJECT_MOVE);
                break;
            case de.REQUEST_ROTATE:
                Xc(s, h.objectId, h.category) && Al(h.objectId, h.category, Ne.OBJECT_ROTATE_POSITIVE);
                break;
            case de.MOUSE_ENTER:
                d = new lt(lt.OBJECT_ROLL_OVER, h.objectId, h.category, h.roomId);
                break;
            case de.MOUSE_LEAVE:
                d = new lt(lt.OBJECT_ROLL_OUT, h.objectId, h.category, h.roomId);
                break;
            case de.DOUBLE_CLICK:
                d = new lt(lt.OBJECT_DOUBLE_CLICKED, h.objectId, h.category, h.roomId);
                break
            }
            d && Ms(d)
        }), _.useEffect(() => {
            if (!s)
                return;
            const h = qe(),
                d = re(),
                m = s.roomId,
                p = 1,
                E = Math.floor(window.innerWidth),
                T = Math.floor(window.innerHeight),
                I = h.application.renderer;
            I && (I.view.style.width = `${E}px`, I.view.style.height = `${T}px`, I.resolution = window.devicePixelRatio, I.resize(E, T));
            const S = d.getRoomInstanceDisplay(m, p, E, T, qa.SCALE_ZOOMED_IN),
                A = re().getRoomInstanceRenderingCanvas(m, p);
            if (!S || !A)
                return;
            const N = new qt(jf.WHITE),
                b = new dT,
                v = A.master;
            N.tint = 0,
            N.width = E,
            N.height = T,
            v.addChildAt(N, 0),
            v.filters = [b],
            r(N),
            n(b);
            const D = d.getRoomInstanceGeometry(m, p);
            if (D) {
                const F = d.getRoomInstanceVariable(m, Nt.ROOM_MIN_X) || 0,
                    U = d.getRoomInstanceVariable(m, Nt.ROOM_MAX_X) || 0,
                    z = d.getRoomInstanceVariable(m, Nt.ROOM_MIN_Y) || 0,
                    Q = d.getRoomInstanceVariable(m, Nt.ROOM_MAX_Y) || 0;
                let j = (F + U) / 2,
                    J = (z + Q) / 2;
                const X = 20;
                j = j + (X - 1),
                J = J + (X - 1);
                const K = Math.sqrt(X * X + X * X) * Math.tan(30 / 180 * Math.PI);
                D.location = new w(j, J, K)
            }
            const G = h.application.stage;
            if (!G)
                return;
            G.addChild(S),
            vp(s.roomId);
            const x = F => {
                const U = Math.floor(window.innerWidth),
                    z = Math.floor(window.innerHeight);
                I.view.style.width = `${U}px`,
                I.view.style.height = `${z}px`,
                I.resolution = window.devicePixelRatio,
                I.resize(U, z),
                N.width = U,
                N.height = z,
                yK(U, z, 1),
                h.application.render()
            };
            return window.addEventListener("resize", x), () => {
                r(null),
                n(null),
                l(0),
                window.removeEventListener("resize", x)
            }
        }, [s]), {
            roomSession: s
        }
    },
    vt = () => ds(Oq),
    Sq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(0),
            {roomSession: o=null} = vt(),
            l = () => {
                const h = nr.rgbToHSL(i),
                    [d, m, p, E] = wr.int_to_8BitVals(h);
                B(new Eb(s, m, p, E))
            },
            c = () => o.useMultistateItem(s),
            u = () => {
                Ms(new Ua(Ua.CLEAR_PREVIEW)),
                e(-1),
                r(-1),
                n(0)
            };
        return at(ee.REQUEST_BACKGROUND_COLOR, h => {
            if (!Xc(o, h.objectId, h.category))
                return;
            const m = re().getRoomObject(h.roomId, h.objectId, h.category).model;
            e(h.objectId),
            r(h.category);
            const p = parseInt(m.getValue(C.FURNITURE_ROOM_BACKGROUND_COLOR_HUE)),
                E = parseInt(m.getValue(C.FURNITURE_ROOM_BACKGROUND_COLOR_SATURATION)),
                T = parseInt(m.getValue(C.FURNITURE_ROOM_BACKGROUND_COLOR_LIGHTNESS)),
                I = wr.eight_bitVals_to_int(0, p, E, T),
                S = nr.hslToRGB(I);
            n(S)
        }), Ii(s !== -1 && t !== -1, h => {
            h.id !== s || h.category !== t || u()
        }), _.useEffect(() => {
            if (s === -1 || t === -1)
                return;
            const h = nr.rgbToHSL(i),
                [d, m, p, E] = wr.int_to_8BitVals(h);
            Ms(new Ua(Ua.PREVIEW, m, p, E))
        }, [s, t, i]), {
            objectId: s,
            color: i,
            setColor: n,
            applyToner: l,
            toggleToner: c,
            onClose: u
        }
    },
    Cq = Sq,
    Aq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState("1"),
            [o, l] = _.useState(""),
            [c, u] = _.useState(""),
            [h, d] = _.useState(""),
            [m, p] = _.useState(""),
            {simpleAlert: E=null} = Yt(),
            T = () => {
                e(-1),
                r(-1),
                n("1"),
                l(""),
                u(""),
                d(""),
                p("")
            };
        return at([ee.REQUEST_BADGE_DISPLAY_ENGRAVING, ee.REQUEST_ACHIEVEMENT_RESOLUTION_ENGRAVING], I => {
            const S = re().getRoomObject(I.roomId, I.objectId, I.category);
            if (!S)
                return;
            const A = new en;
            A.initializeFromRoomObjectModel(S.model),
            e(I.objectId),
            r(I.category),
            n("1"),
            l(dc(A.getValue(1))),
            u(t_(A.getValue(1))),
            d(A.getValue(2)),
            p(A.getValue(3))
        }), at(ee.REQUEST_ACHIEVEMENT_RESOLUTION_FAILED, I => {
            const S = re().getRoomObject(I.roomId, I.objectId, I.category);
            !S || S.model.getValue(C.FURNITURE_OWNER_ID) !== Z().userId || E(`${f("resolution.failed.subtitle")} ${f("resolution.failed.text")}`, null, null, null, f("resolution.failed.title"))
        }), Ii(s !== -1 && t !== -1, I => {
            I.id !== s || I.category !== t || T()
        }), {
            objectId: s,
            category: t,
            color: i,
            badgeName: o,
            badgeDesc: c,
            date: h,
            senderName: m,
            onClose: T
        }
    },
    Nq = Aq,
    wf = "MONSTERPLANT_SEED_CONFIRMATION",
    Ff = "PURCHASABLE_CLOTHING_CONFIRMATION",
    gP = "GROUP_FURNITURE",
    fP = "EFFECTBOX_OPEN",
    yq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(null),
            [i, n] = _.useState(null),
            [o, l] = _.useState(-1),
            [c, u] = _.useState(null),
            [h, d] = _.useState(!1),
            [m, p] = _.useState(-1),
            {roomSession: E=null} = vt(),
            T = () => {
                e(-1),
                u(null),
                d(!1),
                r(null)
            },
            I = () => {
                n(null),
                l(-1)
            },
            S = A => {
                if (A)
                    switch (A) {
                    case "use_friend_furni":
                        E.useMultistateItem(s);
                        break;
                    case "use_monsterplant_seed":
                        n(wf),
                        l(s);
                        break;
                    case "use_random_teleport":
                        re().useRoomObject(s, V.FLOOR);
                        break;
                    case "use_purchaseable_clothing":
                        n(Ff),
                        l(s);
                        break;
                    case "use_mystery_box":
                        E.useMultistateItem(s);
                        break;
                    case "join_group":
                        VE(c.guildId),
                        d(!0);
                        return;
                    case "go_to_group_homeroom":
                        c && _i(c.guildHomeRoomId);
                        break
                    }
                T()
            };
        return at([ee.OPEN_FURNI_CONTEXT_MENU, ee.CLOSE_FURNI_CONTEXT_MENU, ee.REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG, ee.REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG, ee.REQUEST_EFFECTBOX_OPEN_DIALOG, ee.REQUEST_MYSTERYBOX_OPEN_DIALOG], A => {
            const N = re().getRoomObject(E.roomId, A.objectId, A.category);
            if (N)
                switch (p(N.model.getValue(C.FURNITURE_OWNER_ID)), A.type) {
                case ee.REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG:
                    if (!vr(N))
                        return;
                    l(N.id),
                    n(wf),
                    T();
                    return;
                case ee.REQUEST_EFFECTBOX_OPEN_DIALOG:
                    if (!vr(N))
                        return;
                    l(N.id),
                    n(fP),
                    T();
                    return;
                case ee.REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG:
                    if (!vr(N))
                        return;
                    l(N.id),
                    n(Ff),
                    T();
                    return;
                case ee.REQUEST_MYSTERYBOX_OPEN_DIALOG:
                    E.useMultistateItem(N.id),
                    T();
                    return;
                case ee.OPEN_FURNI_CONTEXT_MENU:
                    switch (e(N.id), A.contextMenu) {
                    case xt.FRIEND_FURNITURE:
                        r(xt.FRIEND_FURNITURE);
                        return;
                    case xt.MONSTERPLANT_SEED:
                        vr(N) && r(xt.MONSTERPLANT_SEED);
                        return;
                    case xt.MYSTERY_BOX:
                        r(xt.MYSTERY_BOX);
                        return;
                    case xt.RANDOM_TELEPORT:
                        r(xt.RANDOM_TELEPORT);
                        return;
                    case xt.PURCHASABLE_CLOTHING:
                        vr(N) && r(xt.PURCHASABLE_CLOTHING);
                        return
                    }
                    return;
                case ee.CLOSE_FURNI_CONTEXT_MENU:
                    N.id === s && T();
                    return
                }
        }), W(KC, A => {
            const N = A.getParser();
            e(N.objectId),
            u(N),
            d(N.userIsMember),
            r(gP)
        }), {
            objectId: s,
            mode: t,
            confirmMode: i,
            confirmingObjectId: o,
            groupData: c,
            isGroupMember: h,
            objectOwnerId: m,
            closeConfirm: I,
            processAction: S,
            onClose: T
        }
    },
    Mq = yq,
    bq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState([]),
            [i, n] = _.useState(null),
            [o, l] = _.useState([]),
            [c, u] = _.useState(null),
            [h, d] = _.useState(new Map),
            [m, p] = _.useState(!1),
            {groupItems: E=[], getItemsByType: T=null, activate: I=null, deactivate: S=null} = Xo(),
            {simpleAlert: A=null} = Yt(),
            N = i && h.get(i.name) || null,
            b = () => {
                r([]),
                n(null),
                l([]),
                d(new Map)
            },
            v = () => {
                e(-1),
                b()
            },
            D = () => {
                p(!0),
                B(new IN(s, i.name))
            },
            G = x => {
                n(x),
                h.get(x.name) || B(new RN(x.name))
            };
        return at(ee.OPEN_WIDGET, x => {
            x.widget === ve.CRAFTING && (e(x.objectId), b(), B(new TN(x.objectId)))
        }), W(NO, x => {
            const F = x.getParser();
            if (!F.isActive()) {
                e(-1);
                return
            }
            r(U => {
                const z = [];
                for (const Q of F.recipes) {
                    const j = re().roomContentLoader._activeObjectTypeIds.get(Q.itemName),
                        J = re().getFurnitureFloorIconUrl(j);
                    z.push({
                        name: Q.recipeName,
                        localizedName: f("roomItem.name." + j),
                        iconUrl: J
                    })
                }
                return z
            }),
            u(F.ingredients)
        }), W(yO, x => {
            const F = x.getParser();
            d(U => {
                const z = new Map(U);
                return z.set(i.name, F.ingredients), z
            })
        }), W(bO, x => {
            n(null),
            p(!1),
            x.getParser().result && A(f("crafting.info.result.ok"))
        }), W(MO, x => {}), _.useEffect(() => {
            !c || !c.length || l(x => {
                const F = [];
                for (const U of c) {
                    const z = re().roomContentLoader._activeObjectTypeIds.get(U),
                        Q = re().getFurnitureFloorIconUrl(z),
                        j = T(z);
                    let J = 0;
                    if (j)
                        for (const X of j)
                            J += X.items.length;
                    F.push({
                        name: U,
                        iconUrl: Q,
                        count: J
                    })
                }
                return F
            })
        }, [E, c, T]), _.useEffect(() => {
            if (s === -1)
                return;
            const x = I();
            return () => S(x)
        }, [s, I, S]), {
            objectId: s,
            recipes: t,
            ingredients: o,
            selectedRecipe: i,
            requiredIngredients: N,
            isCrafting: m,
            selectRecipe: G,
            craft: D,
            onClose: v
        }
    },
    Dq = bq,
    vq = () => {
        const [s, e] = _.useState([]),
            [t, r] = _.useState(0),
            [i, n] = _.useState(0),
            [o, l] = _.useState(0),
            [c, u] = _.useState(0),
            [h, d] = _.useState(16777215),
            [m, p] = _.useState(255),
            [E, T] = _.useState(0),
            [I, S] = _.useState(0),
            [A, N] = _.useState(0),
            {roomSession: b=null} = vt(),
            v = () => b.isRoomOwner || b.controllerLevel >= ct.GUEST || Z().isModerator,
            D = x => {
                const F = s[x - 1];
                F && (r(F.id), T(F.type), S(F.color), N(F.light))
            },
            G = () => {
                if (i === 0)
                    return;
                const x = t - 1;
                if (t < 1 || t > s.length)
                    return;
                const F = s[x];
                !F || E === F.type && I === F.color && A === F.light || (e(U => {
                    const z = [...U];
                    return z[x] = new Wp(F.id, E, I, A), z
                }), Hr.savePreset(F.id, E, I, A, !0))
            };
        return at(ee.REQUEST_DIMMER, x => {
            v() && b.requestMoodlightSettings()
        }), jt(Dh.ROOM_DIMMER_PRESETS, x => {
            const F = [];
            let U = 0;
            for (; U < x.presetCount;) {
                const z = x.getPreset(U);
                z && F.push(new Wp(z.id, z.type, z.color, z.brightness)),
                U++
            }
            e(F),
            r(x.selectedPresetId)
        }), at(Qf.ROOM_COLOR, x => {
            On.isRoomPreviewerId(x.roomId) || (l(i), n(x.state), r(x.presetId), u(x.effectId), T(x.effectId), d(x.color), S(x.color), p(x.brightness), N(x.brightness))
        }), _.useEffect(() => {
            i === 0 && o === 0 || Hr.previewDimmer(I, A, E === 2)
        }, [i, o, I, A, E]), {
            presets: s,
            selectedPresetId: t,
            dimmerState: i,
            lastDimmerState: o,
            effectId: c,
            color: h,
            brightness: m,
            selectedEffectId: E,
            setSelectedEffectId: T,
            selectedColor: I,
            setSelectedColor: S,
            selectedBrightness: A,
            setSelectedBrightness: N,
            selectPresetId: D,
            applyChanges: G
        }
    },
    Pq = vq,
    Lq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(0),
            o = () => {
                e(-1),
                r(-1),
                n(0)
            },
            l = () => {
                dt().connection.send(new ub(s)),
                o()
            };
        return at(ee.REQUEST_CREDITFURNI, c => {
            const u = re().getRoomObject(c.roomId, c.objectId, c.category);
            !u || !vr(u) || (e(c.objectId), r(c.category), n(u.model.getValue(C.FURNITURE_CREDIT_VALUE) || 0))
        }), Ii(s !== -1 && t !== -1, c => {
            c.id !== s || c.category !== t || o()
        }), {
            objectId: s,
            value: i,
            redeem: l,
            onClose: o
        }
    },
    Uq = Lq,
    wq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(-1),
            [o, l] = _.useState([]),
            {roomSession: c=null} = vt(),
            u = () => {
                e(-1),
                r(-1),
                n(-1),
                l([])
            };
        return at(ee.REQUEST_EXTERNAL_IMAGE, h => {
            const d = re().getRoomObject(h.roomId, h.objectId, h.category),
                m = re().getRoomObjects(c == null ? void 0 : c.roomId, V.WALL);
            if (!d)
                return;
            const p = [];
            m.forEach(T => {
                if (T.type !== "external_image_wallitem_poster_small")
                    return null;
                const I = T.model.getValue(C.FURNITURE_DATA),
                    S = JSON.parse(I);
                p.push(S)
            }),
            e(h.objectId),
            r(h.category),
            l(p);
            const E = JSON.parse(d.model.getValue(C.FURNITURE_DATA));
            n(T => {
                let I = 0;
                return E && (I = p.findIndex(S => S.u === E.u)), I < 0 && (I = 0), I
            })
        }), Ii(s !== -1 && t !== -1, h => {
            h.id !== s || h.category !== t || u()
        }), {
            objectId: s,
            currentPhotoIndex: i,
            currentPhotos: o,
            onClose: u
        }
    },
    Fq = wq,
    xq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(0),
            [o, l] = _.useState([]),
            [c, u] = _.useState([]),
            [h, d] = _.useState(null),
            [m, p] = _.useState(0),
            E = () => {
                e(-1),
                r(-1),
                n(0),
                l([]),
                u([]),
                d(null)
            },
            T = I => {
                dt().connection.send(new SN(s, I)),
                E()
            };
        return W(QC, I => {
            const S = I.getParser();
            e(S.furniId),
            p(S.start ? 1 : 2)
        }), W(qC, I => E()), W(XC, I => E()), at(ee.REQUEST_FRIEND_FURNITURE_ENGRAVING, I => {
            const S = re().getRoomObject(I.roomId, I.objectId, I.category);
            if (!S)
                return;
            const A = S.model.getValue(C.FURNITURE_DATA),
                N = S.model.getValue(C.FURNITURE_FRIENDFURNI_ENGRAVING);
            A[0] !== "1" || A.length !== 6 || (e(I.objectId), r(I.category), n(N), l([A[1], A[2]]), u([A[3], A[4]]), d(A[5]), p(0))
        }), Ii(s !== -1 && t !== -1, I => {
            I.id !== s || I.category !== t || E()
        }), {
            objectId: s,
            type: i,
            usernames: o,
            figures: c,
            date: h,
            stage: m,
            onClose: E,
            respond: T
        }
    },
    Gq = xq,
    Bq = ["perteam", "mostwins", "classic"],
    kq = ["alltime", "daily", "weekly", "monthly"],
    Vq = () => {
        const [s, e] = _.useState(new Map),
            {roomSession: t=null} = vt(),
            r = n => Bq[n],
            i = n => kq[n];
        return at(ee.REQUEST_HIGH_SCORE_DISPLAY, n => {
            const o = re().getRoomObject(n.roomId, n.objectId, n.category);
            if (!o)
                return;
            const l = o.model.getValue(C.FURNITURE_DATA_FORMAT),
                c = Tn.getData(l);
            c.initializeFromRoomObjectModel(o.model),
            e(u => {
                const h = new Map(u);
                return h.set(o.id, c), h
            })
        }), at(ee.REQUEST_HIDE_HIGH_SCORE_DISPLAY, n => {
            n.roomId === t.roomId && e(o => {
                const l = new Map(o);
                return l.delete(n.objectId), l
            })
        }), {
            stuffDatas: s,
            getScoreType: r,
            getClearType: i
        }
    },
    Hq = Vq,
    jq = "internalLink",
    Wq = () => (at(ee.REQUEST_INTERNAL_LINK, s => {
        const e = re().getRoomObject(s.roomId, s.objectId, s.category);
        if (!e)
            return;
        let r = e.model.getValue(C.FURNITURE_DATA)[jq];
        (!r || !r.length) && (r = e.model.getValue(C.FURNITURE_INTERNAL_LINK)),
        r && r.length && ge(r)
    }), {}),
    Yq = Wq,
    zq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(null),
            [o, l] = _.useState(null),
            [c, u] = _.useState(gr.NO_CLUB),
            [h, d] = _.useState(null),
            m = () => {
                e(-1),
                r(-1),
                n(null),
                l(null),
                d(null)
            },
            p = () => {
                s !== -1 && (B(new gb(s)), m())
            },
            E = () => {
                s !== -1 && (B(new Bl(s)), m())
            },
            T = () => {
                s !== -1 && B(new fb(s, h))
            };
        return at(ee.REQUEST_MANNEQUIN, I => {
            const S = re().getRoomObject(I.roomId, I.objectId, I.category);
            if (!S)
                return;
            const A = S.model,
                N = A.getValue(C.FURNITURE_MANNEQUIN_FIGURE) || null,
                b = A.getValue(C.FURNITURE_MANNEQUIN_GENDER) || null,
                v = bs().createFigureContainer(N),
                D = bs().getFigureClubLevel(v, b, vl.MANNEQUIN_CLOTHING_PART_TYPES);
            e(I.objectId),
            r(I.category),
            n(N),
            l(b),
            u(D),
            d(A.getValue(C.FURNITURE_MANNEQUIN_NAME) || null)
        }), Ii(s !== -1 && t !== -1, I => {
            I.id !== s || I.category !== t || m()
        }), {
            objectId: s,
            figure: i,
            gender: o,
            clubLevel: c,
            name: h,
            setName: d,
            saveFigure: p,
            wearFigure: E,
            saveName: T,
            onClose: m
        }
    },
    Kq = zq,
    qq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(-1),
            [o, l] = _.useState(new as),
            [c, u] = _.useState([]),
            {roomSession: h=null} = vt(),
            {showSingleBubble: d=null, simpleAlert: m=null} = Yt(),
            p = () => {
                e(-1),
                r(-1)
            },
            E = _.useCallback((A, N) => B(new jb(A, N)), []),
            T = _.useCallback(A => B(new Xb(A)), []),
            I = _.useCallback((A, N) => B(new Bl(A, N)), []);
        at(ee.REQUEST_PLAYLIST_EDITOR, A => {
            var b,
                v,
                D;
            const N = re().getRoomObject(A.roomId, A.objectId, A.category);
            if (N) {
                if (vr(N)) {
                    e(A.objectId),
                    r(A.category),
                    (b = qe().soundManager.musicController) == null || b.requestUserSongDisks(),
                    (D = (v = qe().soundManager.musicController) == null ? void 0 : v.getRoomItemPlaylist()) == null || D.requestPlayList();
                    return
                }
                (h.isRoomOwner || h.controllerLevel >= ct.GUEST || Z().isModerator) && B(new Bl(A.objectId, -2))
            }
        }),
        Ii(s !== -1 && t !== -1, A => {
            A.id !== s || A.category !== t || p()
        }),
        Co(Ji.NPE_SONG_CHANGED, A => {
            n(A.position)
        }),
        Co(DE.NOTIFY_PLAYED_SONG, A => {
            d(f("soundmachine.notification.playing", ["songname", "songauthor"], [A.name, A.creator]), Wt.SOUNDMACHINE)
        }),
        Co(Cl.SDIR_SONG_DISK_INVENTORY_RECEIVENT_EVENT, A => {
            var N;
            l((N = qe().soundManager.musicController) == null ? void 0 : N.songDiskInventory.clone())
        }),
        Co(pn.PLUE_PLAY_LIST_UPDATED, A => {
            var N,
                b;
            u((b = (N = qe().soundManager.musicController) == null ? void 0 : N.getRoomItemPlaylist()) == null ? void 0 : b.entries.concat())
        }),
        Co(pn.PLUE_PLAY_LIST_FULL, A => {
            m(f("playlist.editor.alert.playlist.full"), we.ALERT, "", "", f("playlist.editor.alert.playlist.full.title"))
        });
        const S = _.useCallback(A => {
            var N,
                b;
            A instanceof wh ? A.getParser().fragmentNumber === 0 && ((N = qe().soundManager.musicController) == null || N.requestUserSongDisks()) : (b = qe().soundManager.musicController) == null || b.requestUserSongDisks()
        }, []);
        return W(wh, S), W(wm, S), W(Um, S), {
            objectId: s,
            diskInventory: o,
            playlist: c,
            currentPlayingIndex: i,
            onClose: p,
            addToPlaylist: E,
            removeFromPlaylist: T,
            togglePlayPause: I
        }
    },
    Xq = qq,
    Jp = "floor",
    Qq = "wallpaper",
    Zp = "landscape",
    Jq = "poster",
    Zq = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(null),
            [o, l] = _.useState(null),
            [c, u] = _.useState(!1),
            [h, d] = _.useState(null),
            [m, p] = _.useState(null),
            [E, T] = _.useState(-1),
            [I, S] = _.useState(null),
            [A, N] = _.useState(!1),
            [b, v] = _.useState(null),
            {roomSession: D=null} = vt(),
            G = () => {
                e(-1),
                r(-1),
                n(null),
                l(null),
                u(!1),
                d(null),
                p(null),
                T(-1),
                S(null),
                N(!1),
                v(null)
            },
            x = () => {
                s !== -1 && (D.openGift(s), re().changeObjectModelData(re().activeRoomId, s, V.FLOOR, C.FURNITURE_DISABLE_PICKING_ANIMATION, 1))
            },
            F = _.useMemo(() => ({
                imageReady: (U, z, Q) => {
                    !Q && z && (Q = pt.generateImage(z)),
                    v(Q.src)
                },
                imageFailed: null
            }), []);
        return jt(vh.RSPE_PRESENT_OPENED, U => {
            let z = null;
            U.itemType === Ue.FLOOR ? z = Z().getFloorItemData(U.classId) : U.itemType === Ue.WALL && (z = Z().getWallItemData(U.classId));
            let Q = !1;
            if (U.placedInRoom) {
                const j = re().getRoomObject(D.roomId, U.placedItemId, V.FLOOR);
                j && (Q = vr(j))
            }
            switch (U.itemType) {
            case Ue.WALL:
                {
                    if (z)
                        switch (z.className) {
                        case Jp:
                        case Zp:
                        case Qq:
                            let j = null;
                            z.className === Jp ? j = f("inventory.furni.item.floor.name") : z.className === Zp ? j = f("inventory.furni.item.landscape.name") : j = f("inventory.furni.item.wallpaper.name"),
                            l(j);
                            break;
                        case Jq:
                            {
                                const J = U.productCode;
                                let X = null;
                                J.indexOf("poster") === 0 && (X = J.replace("poster", ""));
                                const K = Z().getProductData(J);
                                let be = null;
                                K ? be = K.name : z && (be = z.name),
                                l(be),
                                v(re().getFurnitureWallIconUrl(U.classId, X));
                                break
                            }default:
                            {
                                l(z.name || null),
                                v(re().getFurnitureWallIconUrl(U.classId));
                                break
                            }
                        }
                    break
                }case Ue.HABBO_CLUB:
                l(f("widget.furni.present.hc"));
                break;
            default:
                {
                    if (U.placedItemType === Ue.PET) {
                        const J = U.petFigureString;
                        if (J && J.length) {
                            const X = new Nn(J),
                                K = re().getRoomObjectPetImage(X.typeId, X.paletteId, X.color, new w(90), 64, F, !0, 0, X.customParts);
                            K && v(K.getImage().src)
                        }
                    } else {
                        const J = re().getFurnitureFloorImage(U.classId, new w(90), 64, F);
                        J && v(J.getImage().src)
                    }
                    const j = Z().getProductData(U.productCode);
                    l(j && j.name || z.name);
                    break
                }
            }
            e(0),
            r(U.classId),
            n(U.itemType),
            u(Q),
            T(U.placedItemId),
            S(U.placedItemType),
            N(U.placedInRoom)
        }), at(ee.REQUEST_PRESENT, U => {
            const z = re().getRoomObject(U.roomId, U.objectId, U.category);
            if (!z)
                return null;
            G(),
            e(U.objectId),
            r(-1),
            l(z.model.getValue(C.FURNITURE_DATA) || ""),
            u(vr(z)),
            d(z.model.getValue(C.FURNITURE_PURCHASER_NAME) || null),
            p(z.model.getValue(C.FURNITURE_PURCHASER_FIGURE) || null)
        }), Ii(s !== -1, U => {
            U.id === s && G(),
            U.id === E && A && N(!1)
        }), {
            objectId: s,
            classId: t,
            itemType: i,
            text: o,
            isOwnerOfFurniture: c,
            senderName: h,
            senderFigure: m,
            placedItemId: E,
            placedItemType: I,
            placedInRoom: A,
            imageUrl: b,
            openPresent: x,
            onClose: G
        }
    },
    $q = Zq,
    e6 = "internalLink",
    t6 = () => {
        const [s, e] = _.useState(0);
        return at(ee.REQUEST_ROOM_LINK, t => {
            const r = re().getRoomObject(t.roomId, t.objectId, t.category);
            if (!r)
                return;
            let n = r.model.getValue(C.FURNITURE_DATA)[e6];
            (!n || !n.length) && (n = r.model.getValue(C.FURNITURE_INTERNAL_LINK)),
            !(!n || !n.length) && (n = parseInt(n, 10), !isNaN(n) && (e(n), B(new Yc(n, !1, !1))))
        }), W(na, t => {
            !s || t.getParser().data.roomId !== s || e(0)
        }), {}
    },
    s6 = t6,
    r6 = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(""),
            [o, l] = _.useState(""),
            [c, u] = _.useState("0"),
            [h, d] = _.useState(""),
            [m, p] = _.useState(!1),
            {getWallItemById: E=null} = Xo(),
            T = () => {
                B(new eb(s, o, c, h)),
                e(-1),
                r(-1),
                n(""),
                l(""),
                u("0"),
                d(""),
                p(!1)
            };
        return W(JC, I => {
            const S = I.getParser();
            e(S.itemId),
            r(V.WALL);
            const A = E(S.itemId);
            let N = "post_it";
            if (A) {
                const b = re().getFurnitureWallName(A.type);
                b.match("post_it_") && (N = b)
            }
            n(N),
            l(S.location),
            u("FFFF33"),
            d(""),
            p(!0)
        }), {
            objectId: s,
            color: c,
            setColor: u,
            text: h,
            setText: d,
            canModify: m,
            onClose: T
        }
    },
    i6 = r6,
    v_ = 40,
    n6 = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(0),
            [o, l] = _.useState(-1),
            c = () => {
                e(-1),
                r(-1),
                n(0),
                l(-1)
            },
            u = (h, d=!1) => {
                h || (h = 0),
                h = Math.abs(h),
                d || h > v_ && (h = v_),
                n(parseFloat(h.toFixed(2))),
                d || l(h * 100)
            };
        return W(zC, h => {
            const d = h.getParser();
            s === d.furniId && u(d.height, !0)
        }), at(ee.REQUEST_STACK_HEIGHT, h => {
            if (!Xc(dt(), h.objectId, h.category))
                return;
            const d = re().getRoomObject(h.roomId, h.objectId, h.category);
            d && (e(h.objectId), r(h.category), n(d.getLocation().z), l(-1))
        }), Ii(s !== -1 && t !== -1, h => {
            h.id !== s || h.category !== t || c()
        }), _.useEffect(() => {
            if (s === -1 || o === -1)
                return;
            const h = setTimeout(() => B(new Qh(s, ~~o)), 10);
            return () => clearTimeout(h)
        }, [s, o]), {
            objectId: s,
            height: i,
            maxHeight: v_,
            onClose: c,
            updateHeight: u
        }
    },
    a6 = n6,
    o6 = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState("0"),
            [o, l] = _.useState(""),
            [c, u] = _.useState(""),
            [h, d] = _.useState(!1),
            m = () => {
                e(-1),
                r(-1),
                n("0"),
                l(""),
                u(""),
                d(!1)
            },
            p = I => {
                I !== i && (n(I), re().modifyRoomObjectData(s, t, I, o))
            },
            E = I => {
                l(I),
                re().modifyRoomObjectData(s, t, i, I)
            },
            T = () => re().deleteRoomObject(s, t);
        return at(ee.REQUEST_STICKIE, I => {
            const S = re().getRoomObject(I.roomId, I.objectId, I.category);
            if (!S)
                return;
            const A = S.model.getValue(C.FURNITURE_ITEMDATA);
            if (A.length < 6)
                return;
            let N = null,
                b = null;
            A.indexOf(" ") > 0 ? (N = A.slice(0, A.indexOf(" ")), b = A.slice(A.indexOf(" ") + 1, A.length)) : N = A,
            e(I.objectId),
            r(I.category),
            n(N || "0"),
            l(b || ""),
            u(S.type || "post_it"),
            d(dt().isRoomOwner || Z().isModerator || vr(S))
        }), Ii(s !== -1 && t !== -1, I => {
            I.id !== s || I.category !== t || m()
        }), {
            objectId: s,
            color: i,
            text: o,
            type: c,
            canModify: h,
            updateColor: p,
            updateText: E,
            trash: T,
            onClose: m
        }
    },
    l6 = o6,
    c6 = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState("1"),
            [o, l] = _.useState(""),
            [c, u] = _.useState(""),
            [h, d] = _.useState(""),
            m = () => {
                e(-1),
                r(-1),
                n("1"),
                l(""),
                u(""),
                d("")
            };
        return at(ee.REQUEST_TROPHY, p => {
            const E = re().getRoomObject(p.roomId, p.objectId, p.category);
            if (!E)
                return;
            let T = E.model.getValue(C.FURNITURE_DATA);
            E.model.getValue(C.FURNITURE_EXTRAS),
            e(p.objectId),
            r(p.category),
            n(E.model.getValue(C.FURNITURE_COLOR) || "1");
            const I = T.substring(0, T.indexOf("    "));
            T = T.substring(I.length + 1, T.length);
            const S = T.substring(0, T.indexOf("    ")),
                A = T.substr(S.length + 1, T.length);
            l(I),
            u(S),
            d(A)
        }), Ii(s !== -1 && t !== -1, p => {
            p.id !== s || p.category !== t || m()
        }), {
            objectId: s,
            color: i,
            senderName: o,
            date: c,
            message: h,
            onClose: m
        }
    },
    u6 = c6,
    h6 = 0,
    d6 = 1,
    _6 = 2,
    g6 = 3,
    f6 = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(null),
            [o, l] = _.useState(null),
            [c, u] = _.useState(null),
            [h, d] = _.useState(-1),
            [m, p] = _.useState(null),
            [E, T] = _.useState(null),
            [I, S] = _.useState(!1),
            A = () => {
                e(-1),
                r(-1),
                n(null),
                l(null),
                u(null),
                d(-1),
                p(null),
                T(null),
                S(!1)
            },
            N = () => B(new Rc(s, h6)),
            b = () => B(new Rc(s, d6)),
            v = () => I && i && i.length && B(new Rc(s, _6)),
            D = () => I && i && i.length && B(new Rc(s, g6)),
            G = x => {
                if (m === x) {
                    p(null),
                    B(new lf(s, ""));
                    return
                }
                p(x),
                B(new lf(s, x))
            };
        return at(ee.REQUEST_YOUTUBE, x => {
            if (On.isRoomPreviewerId(x.roomId))
                return;
            const F = re().getRoomObject(x.roomId, x.objectId, x.category);
            F && (e(x.objectId), r(x.category), S(Z().hasSecurity(xr.EMPLOYEE) || vr(F)), B(new Ib(x.objectId)))
        }), W(tA, x => {
            const F = x.getParser();
            s === -1 || s !== F.furniId || (n(F.videoId), l(F.startAtSeconds), u(F.endAtSeconds), d(F.state))
        }), W(eA, x => {
            const F = x.getParser();
            s === -1 || s !== F.furniId || (T(F.playlists), p(F.selectedPlaylistId), n(null), d(-1), u(null), l(null))
        }), W($C, x => {
            const F = x.getParser();
            if (!(s === -1 || s !== F.furniId))
                switch (F.commandId) {
                case 1:
                    d(Li.PLAYING);
                    break;
                case 2:
                    d(Li.PAUSED);
                    break
                }
        }), Ii(s !== -1 && t !== -1, x => {
            x.id !== s || x.category !== t || A()
        }), {
            objectId: s,
            videoId: i,
            videoStart: o,
            videoEnd: c,
            currentVideoState: h,
            selectedVideo: m,
            playlists: E,
            onClose: A,
            previous: N,
            next: b,
            pause: v,
            play: D,
            selectVideo: G
        }
    },
    m6 = f6,
    E6 = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState([]),
            [i, n] = _.useState(""),
            [o, l] = _.useState([]),
            [c, u] = _.useState(0),
            [h, d] = _.useState(Re.STUFF_SELECTION_OPTION_NONE),
            {showConfirm: m=null} = Yt(),
            p = () => {
                const T = I => {
                    I && (I instanceof Om ? B(new kb(I.id, t, i, o, c, I.stuffTypeSelectionCode)) : I instanceof Rm ? B(new Hb(I.id, t, i, o, I.stuffTypeSelectionCode)) : I instanceof Tm && B(new Vb(I.id, t, i, o, I.stuffTypeSelectionCode)))
                };
                CK(s.id) ? T(s) : m(f("wiredfurni.nonowner.change.confirm.body"), () => {
                    T(s)
                }, null, null, null, f("wiredfurni.nonowner.change.confirm.title"))
            },
            E = (T, I) => {
                !s || !h || T <= 0 || l(S => {
                    const A = [...S],
                        N = S.indexOf(T);
                    return N >= 0 ? (A.splice(N, 1), Pl.hide(T)) : A.length < s.maximumItemSelectionCount && (A.push(T), Pl.show(T)), A
                })
            };
        return W(fA, T => {
            T.getParser(),
            e(null)
        }), W(dA, T => {
            const I = T.getParser();
            e(I.definition)
        }), W(_A, T => {
            const I = T.getParser();
            e(I.definition)
        }), W(gA, T => {
            const I = T.getParser();
            e(I.definition)
        }), _.useEffect(() => {
            if (s)
                return () => {
                    r([]),
                    n(""),
                    u(0),
                    l(T => (T && T.length && Pl.clearSelectionShaderFromFurni(T), [])),
                    d(Re.STUFF_SELECTION_OPTION_NONE)
                }
        }, [s]), {
            trigger: s,
            setTrigger: e,
            intParams: t,
            setIntParams: r,
            stringParam: i,
            setStringParam: n,
            furniIds: o,
            setFurniIds: l,
            actionDelay: c,
            setActionDelay: u,
            setAllowsFurni: d,
            saveWired: p,
            selectObjectForWired: E
        }
    },
    st = () => ds(E6),
    p6 = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState(null),
            [i, n] = _.useState([]),
            [o, l] = _.useState([]),
            [c, u] = _.useState(null),
            [h, d] = _.useState(-1),
            [m, p] = _.useState(!1),
            {friends: E=[]} = ri(),
            {selectObjectForWired: T=null} = st(),
            {roomSession: I=null} = vt(),
            S = D => {
                n(G => {
                    const x = [...G];
                    return x.splice(D, 1), x
                })
            },
            A = D => {
                l(G => {
                    const x = [...G],
                        F = x.splice(D, 1)[0];
                    return c === F && u(null), x
                })
            },
            N = D => {
                u(D),
                l([])
            },
            b = (D, G) => {
                const x = tl.getObjectName(D, G);
                x && (r(x), G !== V.UNIT && l([]))
            },
            v = (D, G) => {
                let x = null;
                switch (G) {
                case V.FLOOR:
                case V.WALL:
                    x = tl.getFurniInfo(D, G),
                    x && T(D, G);
                    break;
                case V.UNIT:
                    {
                        const F = I.userDataManager.getUserDataByIndex(D);
                        if (!F)
                            break;
                        switch (F.type) {
                        case yt.PET:
                            I.userDataManager.requestPetInfo(F.webID),
                            d(F.webID);
                            break;
                        case yt.USER:
                            x = tl.getUserInfo(G, F);
                            break;
                        case yt.BOT:
                            x = tl.getBotInfo(G, F);
                            break;
                        case yt.RENTABLE_BOT:
                            x = tl.getRentableBotInfo(G, F);
                            break
                        }
                    }
                }
                x && e(x)
            };
        return jt(rm.USER_DATA_UPDATED, D => {
            if (!D.addedUsers.length)
                return;
            let G = [];
            D.addedUsers.forEach(x => {
                x.webID !== Z().userId && E.find(F => F.id === x.webID) && G.push(new Bv(x.roomIndex, V.UNIT, x.webID, x.name, x.type, !0))
            }),
            G.length && n(x => {
                const F = [...x];
                return G.forEach(U => {
                    const z = F.findIndex(Q => Q.id === U.id);
                    z > -1 && F.splice(z, 1),
                    F.push(U)
                }), F
            })
        }), jt(em.PET_INFO, D => {
            const G = D.petInfo;
            if (!G || G.id !== h)
                return;
            const x = tl.getPetInfo(G);
            x && (e(x), d(-1))
        }), jt(tm.PET_STATUS_UPDATE, D => {}), at(Ul.USE_PRODUCT_FROM_INVENTORY, D => {}), at(Ul.USE_PRODUCT_FROM_ROOM, D => {
            const G = re().getRoomObject(I.roomId, D.objectId, V.FLOOR);
            if (!G || !vr(G))
                return;
            const x = G.model.getValue(C.FURNITURE_OWNER_ID),
                F = G.model.getValue(C.FURNITURE_TYPE_ID),
                U = Z().getFloorItemData(F),
                z = U.customParams.split(" "),
                Q = z.length ? parseInt(z[0]) : -1;
            if (Q === -1)
                return;
            const j = [],
                J = re().getRoomObjects(I.roomId, V.UNIT);
            for (const X of J) {
                const K = I.userDataManager.getUserDataByIndex(X.id);
                let be = !1;
                if (!(!K || K.type !== yt.PET)) {
                    if (K.ownerId === x) {
                        K.hasSaddle && U.specialType === _e.PET_SADDLE && (be = !0);
                        const he = K.figure.split(" ");
                        if ((he.length ? parseInt(he[0]) : -1) === Q) {
                            if (U.specialType === _e.MONSTERPLANT_REVIVAL && !K.canRevive || U.specialType === _e.MONSTERPLANT_REBREED && (K.petLevel < 7 || K.canRevive || K.canBreed) || U.specialType === _e.MONSTERPLANT_FERTILIZE && (K.petLevel >= 7 || K.canRevive))
                                continue;
                            j.push(new p4(K.roomIndex, V.UNIT, K.name, D.objectId, X.id, -1, be))
                        }
                    }
                }
            }
            u(null),
            j.length && l(j)
        }), at(de.REQUEST_MANIPULATION, D => {
            Xc(I, D.objectId, D.category) && p(!0)
        }), QE(D => {
            v(D.id, D.category)
        }), pq(D => {
            e(null),
            l([])
        }), Tq(D => {
            s || D.category !== V.UNIT || b(D.id, D.category)
        }), Iq(D => {
            !t || D.category !== V.UNIT || t.roomIndex !== D.id || r(null)
        }), hs([lt.FURNI_REMOVED, lt.USER_REMOVED], D => {
            if (t && t.category === D.category && t.roomIndex === D.id && r(null), D.category === V.UNIT) {
                let G = i.findIndex(x => x.roomIndex === D.id);
                G > -1 && n(x => x.filter(F => F.roomIndex === D.id)),
                G = o.findIndex(x => x.id === D.id),
                G > -1 && l(x => x.filter(F => F.id !== D.id))
            } else
                D.category === V.FLOOR && o.findIndex(x => x.id === D.id) > -1 && l(x => x.filter(F => F.requestRoomObjectId !== D.id));
            s && (s instanceof zl ? s.id === D.id && e(null) : (s instanceof $t || s instanceof ql || s instanceof Kl) && s.roomIndex === D.id && e(null))
        }), _.useEffect(() => {
            s && (r(null), n([]), l([]))
        }, [s]), _.useEffect(() => {
            t && n([])
        }, [t]), _.useEffect(() => {
            I.isDecorating = m
        }, [I, m]), {
            avatarInfo: s,
            setAvatarInfo: e,
            activeNameBubble: t,
            setActiveNameBubble: r,
            nameBubbles: i,
            productBubbles: o,
            confirmingProduct: c,
            isDecorating: m,
            setIsDecorating: p,
            removeNameBubble: S,
            removeProductBubble: A,
            updateConfirmingProduct: N,
            getObjectName: b
        }
    },
    I6 = p6,
    T6 = () => {
        const [s, e] = _.useState(""),
            [t, r] = _.useState(!1),
            [i, n] = _.useState(!1),
            [o, l] = _.useState(!1),
            [c, u] = _.useState(!1),
            [h, d] = _.useState(0),
            {showNitroAlert: m=null, showConfirm: p=null} = Yt(),
            {roomSession: E=null} = vt(),
            T = (I, S, A="", N=0) => {
                if (I === "")
                    return null;
                const b = I.split(" ");
                if (b.length > 0) {
                    const v = b[0];
                    let D = "";
                    if (b.length > 1 && (D = b[1]), v.charAt(0) === ":" && D === "x") {
                        const G = re().selectedAvatarId;
                        if (G > -1) {
                            const x = E.userDataManager.getUserDataByIndex(G);
                            x && (D = x.name, I = I.replace(" x", " " + x.name))
                        }
                    }
                    switch (v.toLowerCase()) {
                    case ":shake":
                        return di.init(2500, 5e3), di.turnVisualizationOn(), null;
                    case ":d":
                    case ";d":
                        hi() === gr.VIP && E.sendExpressionMessage(rr.LAUGH.ordinal);
                        break;
                    case "o/":
                    case "_o/":
                        return E.sendExpressionMessage(rr.WAVE.ordinal), null;
                    case ":kiss":
                        if (hi() === gr.VIP)
                            return E.sendExpressionMessage(rr.BLOW.ordinal), null;
                        break;
                    case ":jump":
                        if (hi() === gr.VIP)
                            return E.sendExpressionMessage(rr.JUMP.ordinal), null;
                        break;
                    case ":idle":
                        return E.sendExpressionMessage(rr.IDLE.ordinal), null;
                    case "_b":
                        return E.sendExpressionMessage(rr.RESPECT.ordinal), null;
                    case ":sign":
                        return E.sendSignMessage(parseInt(D)), null;
                    case ":iddqd":
                    case ":flip":
                        return re().events.dispatchEvent(new bh(E.roomId, -1, !0)), null;
                    case ":zoom":
                        return re().events.dispatchEvent(new bh(E.roomId, parseFloat(D), !1)), null;
                    case ":screenshot":
                        const G = re().createTextureFromRoom(E.roomId, 1),
                            x = new Image;
                        return x.src = pt.generateImageUrl(G), window.open("").document.write(x.outerHTML), null;
                    case ":pickall":
                        return (E.isRoomOwner || Z().isModerator) && p(f("room.confirm.pick_all"), () => {
                            Z().sendSpecialCommandMessage(":pickall")
                        }, null, null, null, f("generic.alert.title")), null;
                    case ":ejectall":
                        return (E.isRoomOwner || Z().isModerator || E.controllerLevel >= ct.GUEST) && p(f("room.confirm.eject_all"), () => {
                            Z().sendSpecialCommandMessage(":ejectall")
                        }, null, null, null, f("generic.alert.title")), null;
                    case ":furni":
                        return ge("furni-chooser/"), null;
                    case ":chooser":
                        return ge("user-chooser/"), null;
                    case ":floor":
                    case ":bcfloor":
                        return E.controllerLevel >= ct.ROOM_OWNER && ge("floor-editor/show"), null;
                    case ":togglefps":
                        return ir().maxFPS > 0 ? ir().maxFPS = 0 : ir().maxFPS = oe("system.animation.fps"), null;
                    case ":client":
                    case ":nitro":
                    case ":billsonnn":
                        return m(), null;
                    case ":settings":
                        return (E.isRoomOwner || Z().isModerator) && B(new rE(E.roomId)), null
                    }
                }
                switch (S) {
                case Qi.CHAT_DEFAULT:
                    E.sendChatMessage(I, N);
                    break;
                case Qi.CHAT_SHOUT:
                    E.sendShoutMessage(I, N);
                    break;
                case Qi.CHAT_WHISPER:
                    E.sendWhisperMessage(A, I, N);
                    break
                }
            };
        return jt(He.FLOOD_EVENT, I => {
            u(!0),
            d(parseFloat(I.message))
        }), QE(I => {
            if (I.category !== V.UNIT)
                return;
            const S = E.userDataManager.getUserDataByIndex(I.id);
            S && e(S.name)
        }), at(de.DESELECTED, I => e("")), _.useEffect(() => {
            if (!c)
                return;
            let I = 0;
            const S = setInterval(() => {
                d(A => (I = (A || 0) - 1, I)),
                I < 0 && (clearInterval(S), u(!1))
            }, 1e3);
            return () => clearInterval(S)
        }, [c]), _.useEffect(() => {
            if (!o)
                return;
            let I = null;
            return o && (I = setTimeout(() => {
                l(!1),
                r(!1)
            }, 1e4)), () => clearTimeout(I)
        }, [o]), _.useEffect(() => {
            t ? i || (n(!0), E.sendChatTypingMessage(t)) : i && (n(!1), E.sendChatTypingMessage(t))
        }, [E, t, i]), {
            selectedUsername: s,
            floodBlocked: c,
            floodBlockedSeconds: h,
            setIsTyping: r,
            setIsIdle: l,
            sendChat: T
        }
    },
    R6 = T6,
    $p = new Map,
    eI = new Map,
    tI = new Map,
    O6 = () => {
        const [s, e] = _.useState([]),
            [t, r] = _.useState({
                mode: Tt.CHAT_MODE_FREE_FLOW,
                weight: Tt.CHAT_BUBBLE_WIDTH_NORMAL,
                speed: Tt.CHAT_SCROLL_SPEED_NORMAL,
                distance: 50,
                protection: Tt.FLOOD_FILTER_NORMAL
            }),
            {roomSession: i=null} = vt(),
            {addChatEntry: n} = u_(),
            o = _.useRef(!1),
            l = _.useMemo(() => {
                if (!t)
                    return 6e3;
                switch (t.speed) {
                case Tt.CHAT_SCROLL_SPEED_FAST:
                    return 3e3;
                case Tt.CHAT_SCROLL_SPEED_NORMAL:
                    return 6e3;
                case Tt.CHAT_SCROLL_SPEED_SLOW:
                    return 12e3
                }
            }, [t]),
            c = d => {
                const m = bs().createAvatarImage(d, li.LARGE, null, {
                    resetFigure: T => {
                        o.current || c(T)
                    },
                    dispose: () => {},
                    disposed: !1
                });
                if (!m)
                    return;
                const p = m.getCroppedImage(Ys.HEAD),
                    E = m.getPartColor(Te.CHEST);
                return $p.set(d, E && E.rgb || 16777215), m.dispose(), eI.set(d, p.src), p.src
            },
            u = d => {
                let m = eI.get(d);
                return m || (m = c(d)), m
            },
            h = (d, m, p, E=64, T=null) => {
                let I = tI.get(d + T);
                if (I)
                    return I;
                const S = new Nn(d),
                    A = S.typeId,
                    N = re().getRoomObjectPetImage(A, S.paletteId, S.color, new w(m * 45), E, null, !1, 0, S.customParts, T);
                return N && (I = pt.generateImageUrl(N.data), tI.set(d + T, I)), I
            };
        return jt(He.CHAT_EVENT, d => {
            const m = re().getRoomObject(i.roomId, d.objectId, V.UNIT),
                p = m ? Ov(i.roomId, m == null ? void 0 : m.id, V.UNIT) : new wi,
                E = m ? i.userDataManager.getUserDataByIndex(d.objectId) : new lv(-1);
            let T = "",
                I = 0,
                S = null,
                A = d.chatType,
                N = d.style,
                b = 0,
                v = d.message;
            if (E) {
                b = E.type;
                const F = E.figure;
                switch (b) {
                case yt.PET:
                    S = h(F, 2, !0, 64, m.model.getValue(C.FIGURE_POSTURE)),
                    new Nn(F).typeId;
                    break;
                case yt.USER:
                    S = u(F);
                    break;
                case yt.RENTABLE_BOT:
                case yt.BOT:
                    N = qn.BOT;
                    break
                }
                I = $p.get(F),
                T = E.name
            }
            switch (A) {
            case He.CHAT_TYPE_RESPECT:
                v = f("widgets.chatbubble.respect", ["username"], [T]),
                oe("respect.options").enabled && Mn(oe("respect.options").sound);
                break;
            case He.CHAT_TYPE_PETREVIVE:
            case He.CHAT_TYPE_PET_REBREED_FERTILIZE:
            case He.CHAT_TYPE_PET_SPEED_FERTILIZE:
                {
                    let F = "widget.chatbubble.petrevived";
                    A === He.CHAT_TYPE_PET_REBREED_FERTILIZE ? F = "widget.chatbubble.petrefertilized;" : A === He.CHAT_TYPE_PET_SPEED_FERTILIZE && (F = "widget.chatbubble.petspeedfertilized");
                    let U = null;
                    if (re().getRoomObject(i.roomId, d.extraParam, V.UNIT)) {
                        const Q = i.userDataManager.getUserDataByIndex(m.id);
                        Q && (U = Q.name)
                    }
                    v = f(F, ["petName", "userName"], [T, U]);
                    break
                }case He.CHAT_TYPE_PETRESPECT:
                v = f("widget.chatbubble.petrespect", ["petname"], [T]);
                break;
            case He.CHAT_TYPE_PETTREAT:
                v = f("widget.chatbubble.pettreat", ["petname"], [T]);
                break;
            case He.CHAT_TYPE_HAND_ITEM_RECEIVED:
                v = f("widget.chatbubble.handitem", ["username", "handitem"], [T, f("handitem" + d.extraParam)]);
                break;
            case He.CHAT_TYPE_MUTE_REMAINING:
                {
                    const F = (d.extraParam > 0 ? Math.floor(d.extraParam / 3600) : 0).toString(),
                        U = (d.extraParam > 0 ? Math.floor(d.extraParam % 3600 / 60) : 0).toString(),
                        z = (d.extraParam % 60).toString();
                    v = f("widget.chatbubble.mutetime", ["hours", "minutes", "seconds"], [F, U, z]);
                    break
                }
            }
            const D = jK(v),
                G = I && ("#" + I.toString(16).padStart(6, "0") || null),
                x = new Hv(E.roomIndex, V.UNIT, i.roomId, v, D, T, new wi(p.x, p.y), A, N, S, G);
            e(F => [...F, x]),
            n({
                id: -1,
                webId: E.webID,
                entityId: E.roomIndex,
                name: T,
                imageUrl: S,
                style: N,
                chatType: A,
                entityType: E.type,
                message: D,
                timestamp: Dv(),
                type: xi.TYPE_CHAT,
                roomId: i.roomId,
                color: G
            })
        }), at(Xf.ROOM_DRAG, d => {
            if (!s.length || d.roomId !== i.roomId)
                return;
            const m = d.offsetX;
            s.forEach(p => p.elementRef && (p.left += m))
        }), W(na, d => {
            const m = d.getParser();
            m.roomEnter && r(m.chat)
        }), W(HC, d => {
            const m = d.getParser();
            r(m.chat)
        }), _.useEffect(() => (o.current = !1, () => {
            o.current = !0
        }), []), {
            chatMessages: s,
            setChatMessages: e,
            chatSettings: t,
            getScrollSpeed: l
        }
    },
    S6 = O6,
    C6 = () => {
        const [s, e] = _.useState([]),
            t = n => {
                s.indexOf(n) >= 0 || e([...s, n])
            },
            r = n => {
                const o = s.indexOf(n);
                if (o === -1)
                    return;
                const l = [...s];
                l.splice(o, 1),
                e(l)
            },
            i = (n, o) => {
                dt().sendDoorbellApprovalMessage(n, o),
                r(n)
            };
        return jt(Pi.DOORBELL, n => t(n.userName)), jt(Pi.RSDE_REJECTED, n => r(n.userName)), jt(Pi.RSDE_ACCEPTED, n => r(n.userName)), {
            users: s,
            addUser: t,
            removeUser: r,
            answer: i
        }
    },
    A6 = C6,
    N6 = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState(!1),
            i = () => r(!1);
        return W(cC, n => {
            const o = n.getParser();
            r(!0),
            e(o.words)
        }), {
            wordsFilter: s,
            isVisible: t,
            setWordsFilter: e,
            onClose: i
        }
    },
    y6 = N6,
    M6 = () => {
        const [s, e] = _.useState([]),
            {requests: t=[], dismissedRequestIds: r=[], setDismissedRequestIds: i=null} = ri(),
            n = _.useMemo(() => s.filter(l => r.indexOf(l.request.requesterUserId) === -1), [s, r]),
            o = l => {
                i(c => {
                    if (c.indexOf(l) >= 0)
                        return c;
                    const u = [...c];
                    return u.push(l), u
                })
            };
        return dP(!0, l => {
            if (l.category !== V.UNIT)
                return;
            const c = dt().userDataManager.getUserDataByIndex(l.id);
            if (!c || c.type !== it.getTypeNumber(it.USER))
                return;
            const u = t.find(d => d.requesterUserId === c.webID);
            if (!u || s.find(d => d.request.requesterUserId === c.webID))
                return;
            const h = [...s];
            h.push({
                roomIndex: c.roomIndex,
                request: u
            }),
            e(h)
        }), _P(!0, l => {
            if (l.category !== V.UNIT)
                return;
            const c = s.findIndex(h => h.roomIndex === l.id);
            if (c === -1)
                return;
            const u = [...s];
            u.splice(c, 1),
            e(u)
        }), _.useEffect(() => {
            const l = [];
            for (const c of t) {
                const u = dt().userDataManager.getUserData(c.requesterUserId);
                u && l.push({
                    roomIndex: u.roomIndex,
                    request: c
                })
            }
            e(l)
        }, [t]), {
            displayedRequests: n,
            hideFriendRequest: o
        }
    },
    b6 = M6,
    D6 = () => {
        const [s, e] = _.useState(null),
            {roomSession: t=null} = vt(),
            r = () => e(null),
            i = o => o && re().selectRoomObject(dt().roomId, o.id, o.category),
            n = () => {
                const o = Z(),
                    l = re().getRoomObjects(t.roomId, V.WALL),
                    c = re().getRoomObjects(t.roomId, V.FLOOR),
                    u = l.map(d => {
                        if (d.id < 0)
                            return null;
                        let m = d.type;
                        if (m.startsWith("poster"))
                            m = f(`poster_${m.replace("poster", "")}_name`);
                        else {
                            const p = d.model.getValue(C.FURNITURE_TYPE_ID),
                                E = o.getWallItemData(p);
                            E && E.name.length && (m = E.name)
                        }
                        return new Nl(d.id, V.WALL, m)
                    }),
                    h = c.map(d => {
                        if (d.id < 0)
                            return null;
                        let m = d.type;
                        const p = d.model.getValue(C.FURNITURE_TYPE_ID),
                            E = o.getFloorItemData(p);
                        return E && E.name.length && (m = E.name), new Nl(d.id, V.FLOOR, m)
                    });
                e([...u, ...h].sort((d, m) => d.name < m.name ? -1 : 1))
            };
        return Eq(!!s, o => {
            if (o.id < 0)
                return;
            const l = re().getRoomObject(dt().roomId, o.id, o.category);
            if (!l)
                return;
            let c = null;
            switch (o.category) {
            case V.WALL:
                {
                    let u = l.type;
                    if (u.startsWith("poster"))
                        u = f(`poster_${u.replace("poster", "")}_name`);
                    else {
                        const h = l.model.getValue(C.FURNITURE_TYPE_ID),
                            d = Z().getWallItemData(h);
                        d && d.name.length && (u = d.name)
                    }
                    c = new Nl(l.id, V.WALL, u);
                    break
                }case V.FLOOR:
                {
                    let u = l.type;
                    const h = l.model.getValue(C.FURNITURE_TYPE_ID),
                        d = Z().getFloorItemData(h);
                    d && d.name.length && (u = d.name),
                    c = new Nl(l.id, V.FLOOR, u)
                }
            }
            e(u => [...u, c].sort((h, d) => h.name < d.name ? -1 : 1))
        }), Ii(!!s, o => {
            o.id < 0 || e(l => {
                const c = [...l];
                for (let u = 0; u < c.length; u++) {
                    const h = c[u];
                    if (!(h.id !== o.id || h.category !== o.category)) {
                        c.splice(u, 1);
                        break
                    }
                }
                return c
            })
        }), {
            items: s,
            onClose: r,
            selectItem: i,
            populateChooser: n
        }
    },
    v6 = D6,
    P6 = () => {
        const [s, e] = _.useState(!1),
            [t, r] = _.useState(-1),
            [i, n] = _.useState(""),
            [o, l] = _.useState(""),
            [c, u] = _.useState(""),
            h = () => {
                u(""),
                l(""),
                n(""),
                r(-1),
                e(!1)
            },
            d = () => {
                B(new oE(t, o))
            },
            m = E => {
                l(E),
                c.length > 0 && u("")
            },
            p = E => {
                if (!(!E || E === 0))
                    switch (E) {
                    case 1:
                        return f("catalog.alert.petname.long");
                    case 2:
                        return f("catalog.alert.petname.short");
                    case 3:
                        return f("catalog.alert.petname.chars");
                    case 4:
                    default:
                        return f("catalog.alert.petname.bobba")
                    }
            };
        return jt(Pa.RSOPPE_OPEN_PET_PACKAGE_REQUESTED, E => {
            if (!E)
                return;
            const T = re().getRoomObject(E.session.roomId, E.objectId, V.FLOOR);
            r(E.objectId),
            n(T.type),
            e(!0)
        }), jt(Pa.RSOPPE_OPEN_PET_PACKAGE_RESULT, E => {
            E && (E.nameValidationStatus === 0 && h(), E.nameValidationStatus !== 0 && u(p(E.nameValidationStatus)))
        }), {
            isVisible: s,
            errorResult: c,
            petName: o,
            objectType: i,
            onChangePetName: m,
            onConfirm: d,
            onClose: h
        }
    },
    L6 = P6,
    U6 = () => {
        const {roomSession: s=null} = vt(),
            e = i => s.sendPollStartMessage(i),
            t = i => s.sendPollRejectMessage(i),
            r = (i, n, o) => s.sendPollAnswerMessage(i, n, o);
        return jt(Ni.OFFER, i => {
            const n = new zn(zn.OFFER, i.id);
            n.summary = i.summary,
            n.headline = i.headline,
            Ms(n)
        }), jt(Ni.ERROR, i => {
            const n = new zn(zn.ERROR, i.id);
            n.summary = i.summary,
            n.headline = i.headline,
            Ms(n)
        }), jt(Ni.CONTENT, i => {
            const n = new zn(zn.CONTENT, i.id);
            n.startMessage = i.startMessage,
            n.endMessage = i.endMessage,
            n.numQuestions = i.numQuestions,
            n.questionArray = i.questionArray,
            n.npsPoll = i.npsPoll,
            Ms(n)
        }), {
            startPoll: e,
            rejectPoll: t,
            answerPoll: r
        }
    },
    w6 = U6,
    F6 = () => {
        const [s, e] = _.useState(null);
        vt();
        const t = () => e(null),
            r = n => n && re().selectRoomObject(dt().roomId, n.id, n.category),
            i = () => {
                const n = dt(),
                    o = re().getRoomObjects(n.roomId, V.UNIT);
                e(o.map(l => {
                    if (l.id < 0)
                        return null;
                    const c = n.userDataManager.getUserDataByIndex(l.id);
                    return c ? new Nl(c.roomIndex, V.UNIT, c.name) : null
                }).sort((l, c) => l.name < c.name ? -1 : 1))
            };
        return dP(!!s, n => {
            if (n.id < 0)
                return;
            const o = dt().userDataManager.getUserDataByIndex(n.id);
            o && e(l => {
                const c = [...l];
                return c.push(new Nl(o.roomIndex, V.UNIT, o.name)), c.sort((u, h) => u.name < h.name ? -1 : 1), c
            })
        }), _P(!!s, n => {
            n.id < 0 || e(o => {
                const l = [...o];
                for (let c = 0; c < l.length; c++) {
                    const u = l[c];
                    if (!(u.id !== n.id || u.category !== n.category)) {
                        l.splice(c, 1);
                        break
                    }
                }
                return l
            })
        }), {
            items: s,
            onClose: t,
            selectItem: r,
            populateChooser: i
        }
    },
    x6 = F6,
    sI = 4e3,
    G6 = 3,
    B6 = () => {
        const [s, e] = _.useState(-1),
            [t, r] = _.useState(null),
            [i, n] = _.useState(!1),
            [o, l] = _.useState(null),
            [c, u] = _.useState(new Map),
            [h, d] = _.useState(new Map),
            {answerPoll: m=null} = w6(),
            {roomSession: p=null} = vt(),
            E = () => {
                e(-1),
                r(null)
            },
            T = I => {
                i || !t || (m(s, t.id, [I]), n(!0))
            };
        return jt(yi.ANSWERED, I => {
            const S = p.userDataManager.getUserData(I.userId);
            S && (u(I.answerCounts), d(A => {
                if (!A.has(S.roomIndex)) {
                    const N = new Map(h);
                    return N.set(S.roomIndex, {
                        value: I.value,
                        secondsLeft: G6
                    }), N
                }
                return A
            }), re().updateRoomObjectUserGesture(p.roomId, S.roomIndex, ie.getGestureId(I.value === "0" ? ie.GESTURE_SAD : ie.GESTURE_SMILE)))
        }), jt(yi.FINISHED, I => {
            t && t.id === I.questionId && (u(I.answerCounts), n(!0), l(S => (S && clearTimeout(S), setTimeout(() => E(), sI)))),
            d(new Map)
        }), jt(yi.QUESTION, I => {
            e(I.id),
            r(I.question),
            n(!1),
            u(new Map),
            d(new Map),
            l(S => {
                if (S && clearTimeout(S), I.duration > 0) {
                    const A = I.duration < 1e3 ? sI : I.duration;
                    return setTimeout(() => E(), A)
                }
                return null
            })
        }), _.useEffect(() => {
            const I = () => {
                    d(A => {
                        const N = [];
                        if (A.forEach((v, D) => {
                            v.secondsLeft--,
                            v.secondsLeft <= 0 && N.push(D)
                        }), N.length === 0)
                            return A;
                        const b = new Map(A);
                        return N.forEach(v => b.delete(v)), b
                    })
                },
                S = setInterval(() => I(), 1e3);
            return () => clearInterval(S)
        }, []), _.useEffect(() => () => {
            l(I => (I && clearTimeout(I), null))
        }, []), {
            question: t,
            answerSent: i,
            answerCounts: c,
            userAnswers: h,
            vote: T
        }
    },
    k6 = B6,
    V6 = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState(null),
            [i, n] = _.useState(0),
            [o, l] = _.useState(0),
            [c, u] = _.useState(0),
            [h, d] = c_("nitro.screensize", {
                width: window.innerWidth,
                height: window.innerHeight
            }),
            m = T => {
                n(T),
                B(new Nb(T))
            },
            p = T => {
                Z().giveRespect(T),
                l(Z().respectsLeft)
            },
            E = T => {
                Z().givePetRespect(T),
                u(Z().respectsPetLeft)
            };
        return W(xl, T => {
            const I = T.getParser();
            e(I.userInfo),
            r(I.userInfo.figure),
            l(I.userInfo.respectsRemaining),
            u(I.userInfo.respectsPetRemaining)
        }), W(Sm, T => {
            const I = T.getParser();
            r(I.figure)
        }), W(zm, T => {
            const I = T.getParser();
            n(I.chatType)
        }), _.useEffect(() => {
            const T = id("nitro.screensize");
            if (T && (T.width !== window.innerWidth || T.height !== window.innerHeight)) {
                let S = window.localStorage.length;
                for (; S > 0;) {
                    const A = window.localStorage.key(S);
                    A && A.startsWith("nitro.window") && window.localStorage.removeItem(A),
                    S--
                }
            }
            const I = S => d({
                width: window.innerWidth,
                height: window.innerHeight
            });
            return window.addEventListener("resize", I), () => {
                window.removeEventListener("resize", I)
            }
        }, [d]), {
            userInfo: s,
            userFigure: t,
            chatStyleId: i,
            userRespectRemaining: o,
            petRespectRemaining: c,
            respectUser: p,
            respectPet: E,
            updateChatStyleId: m
        }
    },
    fa = () => ds(V6),
    H6 = s => _.useEffect(s, []),
    mP = s => H6(() => s()),
    EP = s => {
        const {achievement: e=null, scale: t=1, ...r} = s;
        return e ? a(Vt, {
            badgeCode: Xr.getAchievementBadgeCode(e),
            isGrayscale: !Xr.getAchievementHasStarted(e),
            scale: t,
            ...r
        }) : null
    },
    j6 = s => {
        const {achievement: e=null} = s,
            {selectedAchievement: t=null, setSelectedAchievementId: r=null} = l_();
        return e ? a($e, {
            itemActive: t === e,
            itemUnseen: e.unseen > 0,
            onClick: i => r(e.achievementId),
            children: a(EP, {
                achievement: e
            })
        }) : null
    },
    W6 = s => {
        const {achievements: e=null} = s;
        return a(Mt, {
            columnCount: 6,
            columnMinWidth: 62,
            columnMinHeight: 60,
            gap: 0,
            className: "achievement-category-badge-list",
            children: e && e.length > 0 && e.map((t, r) => a(j6, {
                achievement: t
            }, r))
        })
    },
    Y6 = s => {
        const {achievement: e=null} = s;
        return e ? g(P, {
            shrink: !0,
            className: "achievement-details-view rounded p-2 text-black align-items-start",
            gap: 4,
            overflow: "hidden",
            children: [g(M, {
                center: !0,
                gap: 1,
                children: [a(EP, {
                    className: "nitro-achievements-badge-image",
                    achievement: e,
                    scale: 1.85
                }), a(y, {
                    fontWeight: "bold",
                    children: f("achievements.details.level", ["level", "limit"], [Xr.getAchievementLevel(e).toString(), e.levelCount.toString()])
                })]
            }), g(M, {
                fullWidth: !0,
                justifyContent: "center",
                overflow: "hidden",
                className: "mt-3",
                children: [g(M, {
                    gap: 1,
                    children: [a(y, {
                        fontWeight: "bold",
                        truncate: !0,
                        children: dc(Xr.getAchievementBadgeCode(e))
                    }), a(y, {
                        textBreak: !0,
                        children: t_(Xr.getAchievementBadgeCode(e))
                    })]
                }), (e.levelRewardPoints > 0 || e.scoreLimit > 0) && g(M, {
                    gap: 1,
                    children: [e.levelRewardPoints > 0 && g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a(y, {
                            truncate: !0,
                            children: f("achievements.details.reward")
                        }), g(P, {
                            center: !0,
                            className: "fw-bold",
                            gap: 1,
                            children: [e.levelRewardPoints, a(us, {
                                type: e.levelRewardPointType
                            })]
                        })]
                    }), e.scoreLimit > 0 && e.currentPoints < e.scoreLimit && a(KE, {
                        className: "achievement-progress-bar",
                        text: f("achievements.details.progress", ["progress", "limit"], [(e.currentPoints + e.scoreAtStartOfLevel).toString(), (e.scoreLimit + e.scoreAtStartOfLevel).toString()]),
                        progress: e.currentPoints + e.scoreAtStartOfLevel,
                        maxProgress: e.scoreLimit + e.scoreAtStartOfLevel
                    })]
                })]
            })]
        }) : null
    },
    z6 = s => {
        const {category: e=null} = s,
            {selectedAchievement: t=null, setSelectedAchievementId: r=null} = l_();
        return _.useEffect(() => {
            var i,
                n;
            e && (t || r((n = (i = e == null ? void 0 : e.achievements) == null ? void 0 : i[0]) == null ? void 0 : n.achievementId))
        }, [e, t, r]), e ? g(M, {
            fullHeight: !0,
            justifyContent: "between",
            children: [a(W6, {
                achievements: e.achievements
            }), !!t && a(Y6, {
                achievement: t
            })]
        }) : null
    },
    K6 = s => {
        const {category: e=null, selectedCategoryCode: t=null, setSelectedCategoryCode: r=null} = s;
        if (!e)
            return null;
        const i = Xr.getAchievementCategoryProgress(e),
            n = Xr.getAchievementCategoryMaxProgress(e),
            o = Xr.getAchievementCategoryImageUrl(e, i),
            l = Xr.getAchievementCategoryTotalUnseen(e);
        return g($e, {
            className: "py-2",
            itemActive: t === e.code,
            itemCount: l,
            itemCountMinimum: 0,
            gap: 0,
            onClick: c => r(e.code),
            children: [a(y, {
                fullWidth: !0,
                center: !0,
                fontWeight: "bold",
                className: "category-name pt-1",
                children: f(`quests.${e.code}.name`)
            }), a(qv, {
                position: "relative",
                imageUrl: o,
                children: g(y, {
                    small: !0,
                    fullWidth: !0,
                    center: !0,
                    position: "absolute",
                    variant: "white",
                    fontWeight: "bold",
                    style: {
                        fontSize: 11,
                        bottom: 8
                    },
                    children: [i, " / ", n]
                })
            })]
        })
    },
    q6 = s => {
        const {categories: e=null, selectedCategoryCode: t=null, setSelectedCategoryCode: r=null} = s;
        return a(Mt, {
            columnCount: 3,
            columnMinWidth: 112,
            columnMinHeight: 112,
            gap: 2,
            className: "achievement-category-list",
            children: e && e.length > 0 && e.map((i, n) => a(K6, {
                category: i,
                selectedCategoryCode: t,
                setSelectedCategoryCode: r
            }, n))
        })
    },
    X6 = s => {
        const [e, t] = _.useState(!1),
            {achievementCategories: r=[], selectedCategoryCode: i=null, setSelectedCategoryCode: n=null, achievementScore: o=0, getProgress: l=0, getMaxProgress: c=0, selectedCategory: u=null} = l_();
        return _.useEffect(() => {
            const h = {
                linkReceived: d => {
                    const m = d.split("/");
                    if (!(m.length < 2))
                        switch (m[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(p => !p);
                            return
                        }
                },
                eventUrlPrefix: "achievements/"
            };
            return Ts(h), () => Rs(h)
        }, []), e ? g(Se, {
            uniqueKey: "achievements",
            className: "nitro-achievements",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("inventory.achievements"),
                onCloseClick: h => t(!1)
            }), u && g(Kv, {
                position: "relative",
                className: "achievement-category-sub-header justify-content-center align-items-center cursor-pointer py-3 px-3",
                gap: 3,
                children: [a(k, {
                    onClick: h => n(null),
                    className: "nitro-achievements-back-arrow"
                }), g(M, {
                    grow: !0,
                    gap: 1,
                    children: [a(y, {
                        variant: "white",
                        fontSize: 4,
                        fontWeight: "bold",
                        className: "text-small",
                        children: f(`quests.${u.code}.name`)
                    }), a(y, {
                        variant: "white",
                        fontWeight: "bold",
                        children: f("achievements.details.categoryprogress", ["progress", "limit"], [u.getProgress().toString(), u.getMaxProgress().toString()])
                    })]
                }), a(vn, {
                    imageUrl: Xr.getAchievementCategoryImageUrl(u, null, !0)
                })]
            }), g(Ie, {
                gap: 1,
                children: [!u && g(q, {
                    children: [a(q6, {
                        categories: r,
                        selectedCategoryCode: i,
                        setSelectedCategoryCode: n
                    }), g(M, {
                        grow: !0,
                        justifyContent: "end",
                        gap: 1,
                        children: [a(KE, {
                            className: "achievement-progress-bar",
                            text: f("achievements.categories.totalprogress", ["progress", "limit"], [l.toString(), c.toString()]),
                            progress: l,
                            maxProgress: c
                        }), a(y, {
                            fontWeight: "bold",
                            center: !0,
                            children: f("achievements.categories.score", ["score"], [o.toString()])
                        })]
                    })]
                }), u && a(z6, {
                    category: u
                })]
            })]
        }) : null
    },
    Ya = s => {
        const {icon: e=null, selected: t=!1, classNames: r=[], children: i=null, ...n} = s,
            o = _.useMemo(() => {
                const l = ["nitro-avatar-editor-spritesheet"];
                return e && e.length && l.push(e + "-icon"), t && l.push("selected"), r.length && l.push(...r), l
            }, [e, t, r]);
        return a(k, {
            classNames: o,
            ...n
        })
    },
    Q6 = s => {
        const {figureData: e=null} = s,
            [t, r] = _.useState(-1),
            i = n => {
                n < Kr.MIN_DIRECTION && (n = Kr.MAX_DIRECTION + (n + 1)),
                n > Kr.MAX_DIRECTION && (n = n - (Kr.MAX_DIRECTION + 1)),
                e.direction = n
            };
        return _.useEffect(() => {
            if (e)
                return e.notify = () => r(n => n + 1), () => {
                    e.notify = null
                }
        }, [e]), g(M, {
            className: "figure-preview-container",
            overflow: "hidden",
            position: "relative",
            children: [a(rs, {
                figure: e.getFigureString(),
                direction: e.direction,
                scale: 2
            }), a(Ya, {
                className: "avatar-spotlight",
                icon: "spotlight"
            }), a(k, {
                className: "avatar-shadow"
            }), g(k, {
                className: "arrow-container",
                children: [a(Ya, {
                    pointer: !0,
                    icon: "arrow-left",
                    onClick: n => i(e.direction + 1)
                }), a(Ya, {
                    pointer: !0,
                    icon: "arrow-right",
                    onClick: n => i(e.direction - 1)
                })]
            })]
        })
    },
    J6 = s => {
        const {partItem: e=null, children: t=null, ...r} = s,
            [i, n] = _.useState(-1),
            o = oe("hc.disabled", !1);
        return _.useEffect(() => {
            const l = () => n(c => c + 1);
            return e.notify = l, () => e.notify = null
        }, [e]), g($e, {
            itemImage: e.isClear ? void 0 : e.imageUrl,
            itemActive: e.isSelected,
            ...r,
            children: [!o && e.isHC && a(us, {
                className: "position-absolute end-1 bottom-1",
                type: "hc"
            }), e.isClear && a(Ya, {
                icon: "clear"
            }), e.isSellable && a(Ya, {
                icon: "sellable",
                position: "absolute",
                className: "end-1 bottom-1"
            }), t]
        })
    },
    Z6 = s => {
        const {model: e=null, category: t=null, setMaxPaletteCount: r=null} = s,
            i = _.useRef(null),
            n = _.useCallback(o => {
                const l = t.parts.indexOf(o);
                if (l === -1)
                    return;
                e.selectPart(t.name, l);
                const c = t.getCurrentPart();
                r(c.maxColorIndex || 1)
            }, [e, t, r]);
        return _.useEffect(() => {
            !e || !t || !i || !i.current || (i.current.scrollTop = 0)
        }, [e, t]), a(Mt, {
            innerRef: i,
            columnCount: 3,
            columnMinHeight: 50,
            children: t.parts.length > 0 && t.parts.map((o, l) => a(J6, {
                partItem: o,
                onClick: c => n(o)
            }, l))
        })
    },
    $6 = s => {
        const {colorItem: e=null, children: t=null, ...r} = s,
            [i, n] = _.useState(-1),
            o = oe("hc.disabled", !1);
        return _.useEffect(() => {
            const l = () => n(c => c + 1);
            return e.notify = l, () => e.notify = null
        }, [e]), g($e, {
            itemHighlight: !0,
            itemColor: e.color,
            itemActive: e.isSelected,
            className: "clear-bg",
            ...r,
            children: [!o && e.isHC && a(us, {
                className: "position-absolute end-1 bottom-1",
                type: "hc"
            }), t]
        })
    },
    rI = s => {
        const {model: e=null, category: t=null, paletteSet: r=[], paletteIndex: i=-1} = s,
            n = _.useRef(null),
            o = _.useCallback(l => {
                const c = r.indexOf(l);
                c !== -1 && e.selectColor(t.name, c, i)
            }, [e, t, r, i]);
        return _.useEffect(() => {
            !e || !t || !n || !n.current || (n.current.scrollTop = 0)
        }, [e, t]), a(Mt, {
            innerRef: n,
            gap: 1,
            columnCount: 5,
            columnMinWidth: 30,
            children: r.length > 0 && r.map((l, c) => a($6, {
                colorItem: l,
                onClick: u => o(l)
            }, c))
        })
    },
    eX = s => {
        const {model: e=null, gender: t=null, setGender: r=null} = s,
            [i, n] = _.useState(null),
            [o, l] = _.useState(1),
            c = _.useCallback(u => {
                const h = e.categories.get(u);
                if (h) {
                    h.init(),
                    n(h);
                    for (const d of h.parts)
                        if (!(!d || !d.isSelected)) {
                            l(d.maxColorIndex || 1);
                            break
                        }
                }
            }, [e]);
        return _.useEffect(() => {
            e.init();
            for (const u of e.categories.keys()) {
                c(u);
                break
            }
        }, [e, c]), !e || !i ? null : g(fe, {
            children: [g(M, {
                size: 2,
                children: [e.canSetGender && g(q, {
                    children: [a(P, {
                        center: !0,
                        pointer: !0,
                        className: "category-item",
                        onClick: u => r(Me.MALE),
                        children: a(Ya, {
                            icon: "male",
                            selected: t === Me.MALE
                        })
                    }), a(P, {
                        center: !0,
                        pointer: !0,
                        className: "category-item",
                        onClick: u => r(Me.FEMALE),
                        children: a(Ya, {
                            icon: "female",
                            selected: t === Me.FEMALE
                        })
                    })]
                }), !e.canSetGender && e.categories && e.categories.size > 0 && Array.from(e.categories.keys()).map(u => {
                    const h = e.categories.get(u);
                    return a(P, {
                        center: !0,
                        pointer: !0,
                        className: "category-item",
                        onClick: d => c(u),
                        children: a(Ya, {
                            icon: h.name,
                            selected: i === h
                        })
                    }, u)
                })]
            }), a(M, {
                size: 5,
                overflow: "hidden",
                children: a(Z6, {
                    model: e,
                    category: i,
                    setMaxPaletteCount: l
                })
            }), g(M, {
                size: 5,
                overflow: "hidden",
                children: [o >= 1 && a(rI, {
                    model: e,
                    category: i,
                    paletteSet: i.getPalette(0),
                    paletteIndex: 0
                }), o === 2 && a(rI, {
                    model: e,
                    category: i,
                    paletteSet: i.getPalette(1),
                    paletteIndex: 1
                })]
            })]
        })
    },
    tX = s => {
        const {figureData: e=null, savedFigures: t=[], setSavedFigures: r=null, loadAvatarInEditor: i=null} = s,
            n = oe("hc.disabled", !1),
            o = _.useCallback(h => {
                if (h >= t.length || h < 0)
                    return;
                const [d, m] = t[h];
                i(d.getFigureString(), m)
            }, [t, i]),
            l = _.useCallback(h => {
                if (!e || h >= t.length || h < 0)
                    return;
                const d = [...t],
                    m = e.getFigureString(),
                    p = e.gender;
                d[h] = [bs().createFigureContainer(m), p],
                r(d),
                B(new QA(h + 1, m, p))
            }, [e, t, r]),
            c = _.useCallback(h => {
                if (h >= t.length || h < 0)
                    return;
                const d = [...t];
                d[h] = [null, null],
                r(d),
                B(new JA(h + 1))
            }, [t, r]),
            u = _.useMemo(() => {
                if (!t || !t.length)
                    return [];
                const h = [];
                return t.forEach(([d, m], p) => {
                    let E = 0;
                    d && (E = bs().getFigureClubLevel(d, m)),
                    h.push(g($e, {
                        position: "relative",
                        overflow: "hidden",
                        className: "nitro-avatar-editor-wardrobe-figure-preview",
                        children: [d && a(rs, {
                            figure: d.getFigureString(),
                            gender: m,
                            direction: 2
                        }), a(k, {
                            className: "avatar-shadow"
                        }), !n && E > 0 && a(us, {
                            className: "position-absolute top-1 start-1",
                            type: "hc"
                        }), d && a("div", {
                            className: "position-absolute top-1 end-1",
                            children: a(H, {
                                variant: "link",
                                onClick: () => c(p),
                                children: a(Id, {
                                    className: "fa-icon"
                                })
                            })
                        }), g(P, {
                            gap: 1,
                            className: "button-container",
                            children: [a(H, {
                                variant: "link",
                                fullWidth: !0,
                                onClick: T => l(p),
                                children: f("avatareditor.wardrobe.save")
                            }), d && a(H, {
                                variant: "link",
                                fullWidth: !0,
                                onClick: T => o(p),
                                disabled: E > hi(),
                                children: f("widget.generic_usable.button.use")
                            })]
                        })]
                    }, p))
                }), h
            }, [t, n, l, o]);
        return a(Mt, {
            columnCount: 4,
            columnMinWidth: 125,
            columnMinHeight: 140,
            children: u
        })
    },
    sX = "hr-100.hd-180-7.ch-215-66.lg-270-79.sh-305-62.ha-1002-70.wa-2007",
    rX = "hr-515-33.hd-600-1.ch-635-70.lg-716-66-62.sh-735-68",
    iX = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(null),
            [n, o] = _.useState(null),
            [l, c] = _.useState(null),
            [u, h] = _.useState(null),
            [d, m] = _.useState([]),
            [p, E] = _.useState([]),
            [T, I] = _.useState([]),
            [S, A] = _.useState(!1),
            [N, b] = _.useState(null),
            [v, D] = _.useState(null),
            [G, x] = _.useState(!0),
            [F, U] = _.useState(!1),
            z = _.useMemo(() => oe("avatar.wardrobe.max.slots", 10), []);
        W(uS, he => {
            const et = he.getParser();
            m(et.figureSetIds),
            E(et.boundsFurnitureNames)
        }),
        W(YA, he => {
            const et = he.getParser(),
                Ut = [];
            let fs = 0;
            for (; fs < z;)
                Ut.push([null, null]),
                fs++;
            for (let [Xt, [ms, ut]] of et.looks.entries()) {
                const Ps = bs().createFigureContainer(ms);
                Ut[Xt - 1] = [Ps, ut]
            }
            I(Ut)
        });
        const Q = _.useCallback(he => {
                l && h(l.get(he))
            }, [l]),
            j = _.useCallback(() => {
                const he = new Map;
                he.set(Er.GENERIC, new DK),
                he.set(Er.HEAD, new XK),
                he.set(Er.TORSO, new JK),
                he.set(Er.LEGS, new QK),
                c(he)
            }, []),
            J = _.useCallback(() => {
                const he = new Map,
                    et = new Me,
                    Ut = new Me;
                et.loadAvatarData(sX, Me.MALE),
                Ut.loadAvatarData(rX, Me.FEMALE),
                he.set(Me.MALE, et),
                he.set(Me.FEMALE, Ut),
                i(he),
                o(he.get(Me.MALE))
            }, []),
            X = _.useCallback((he, et, Ut=!0) => {
                et = Is.getGender(et);
                let fs = n;
                et !== fs.gender && (fs = r.get(et)),
                he !== fs.getFigureString() && fs.loadAvatarData(he, et),
                fs !== n && o(fs),
                Ut && (b(n.getFigureString()), D(n.gender))
            }, [r, n]),
            K = _.useCallback(he => {
                switch (he) {
                case Ci.ACTION_CLEAR:
                    X(n.getFigureStringWithFace(0, !1), n.gender, !1),
                    j();
                    return;
                case Ci.ACTION_RESET:
                    X(N, v),
                    j();
                    return;
                case Ci.ACTION_RANDOMIZE:
                    const et = qK(n, n.gender, hi(), d, [Me.FACE]);
                    X(et, n.gender, !1),
                    j();
                    return;
                case Ci.ACTION_SAVE:
                    B(new _E(n.gender, n.getFigureString())),
                    t(!1);
                    return
                }
            }, [n, N, v, d, X, j]),
            be = _.useCallback(he => {
                he = Is.getGender(he),
                o(r.get(he))
            }, [r]);
        return _.useEffect(() => {
            const he = {
                linkReceived: et => {
                    const Ut = et.split("/");
                    if (!(Ut.length < 2))
                        switch (Ut[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(fs => !fs);
                            return
                        }
                },
                eventUrlPrefix: "avatar-editor/"
            };
            return Ts(he), () => Rs(he)
        }, []), _.useEffect(() => {
            I(new Array(z))
        }, [z]), _.useEffect(() => {
            S && (h(null), B(new XA))
        }, [S]), _.useEffect(() => {
            u && A(!1)
        }, [u]), _.useEffect(() => {
            l && Q(Er.GENERIC)
        }, [l, Q]), _.useEffect(() => {
            if (n)
                return Is.CURRENT_FIGURE = n, j(), () => Is.CURRENT_FIGURE = null
        }, [n, j]), _.useEffect(() => (Is.FIGURE_SET_IDS = d, Is.BOUND_FURNITURE_NAMES = p, j(), () => {
            Is.FIGURE_SET_IDS = null,
            Is.BOUND_FURNITURE_NAMES = null
        }), [d, p, j]), _.useEffect(() => {
            if (e && !r) {
                J(),
                U(!0);
                return
            }
        }, [e, r, J]), _.useEffect(() => {
            !e || !F || !G || (X(Z().figure, Z().gender), x(!1))
        }, [e, F, G, X]), _.useEffect(() => {
            if (!e)
                return () => {
                    x(!0)
                }
        }, [e]), !e || !n ? null : g(Se, {
            uniqueKey: "avatar-editor",
            theme: "habbo",
            className: "nitro-avatar-editor",
            children: [a(Oe, {
                headerText: f("avatareditor.title"),
                onCloseClick: he => t(!1)
            }), g(_a, {
                children: [l && l.size > 0 && Array.from(l.keys()).map(he => {
                    const et = u && u.name === he;
                    return a(sn, {
                        isActive: et,
                        onClick: Ut => Q(he),
                        children: f(`avatareditor.category.${he}`)
                    }, he)
                }), a(sn, {
                    isActive: S,
                    onClick: he => A(!0),
                    children: f("avatareditor.category.wardrobe")
                })]
            }), a(Ie, {
                children: g(fe, {
                    children: [g(M, {
                        size: 9,
                        overflow: "hidden",
                        children: [u && !S && a(eX, {
                            model: u,
                            gender: n.gender,
                            setGender: be
                        }), S && a(tX, {
                            figureData: n,
                            savedFigures: T,
                            setSavedFigures: I,
                            loadAvatarInEditor: X
                        })]
                    }), g(M, {
                        size: 3,
                        overflow: "hidden",
                        children: [a(Q6, {
                            figureData: n
                        }), g(M, {
                            grow: !0,
                            gap: 1,
                            children: [g(An, {
                                children: [a(H, {
                                    variant: "secondary",
                                    onClick: he => K(Ci.ACTION_RESET),
                                    children: a(oL, {
                                        className: "fa-icon"
                                    })
                                }), a(H, {
                                    variant: "secondary",
                                    onClick: he => K(Ci.ACTION_CLEAR),
                                    children: a(Id, {
                                        className: "fa-icon"
                                    })
                                }), a(H, {
                                    variant: "secondary",
                                    onClick: he => K(Ci.ACTION_RANDOMIZE),
                                    children: a(lL, {
                                        className: "fa-icon"
                                    })
                                })]
                            }), a(H, {
                                className: "w-100",
                                variant: "success",
                                onClick: he => K(Ci.ACTION_SAVE),
                                children: f("avatareditor.save")
                            })]
                        })]
                    })]
                })
            })]
        })
    },
    nX = 5,
    aX = s => {
        const {onClose: e=null, onEdit: t=null, onDelete: r=null} = s,
            {cameraRoll: i=null, setCameraRoll: n=null, selectedPictureIndex: o=-1, setSelectedPictureIndex: l=null} = Zv(),
            {simpleAlert: c=null} = Yt(),
            u = _.useRef(),
            h = o > -1 ? i[o] : null,
            d = () => {
                if (!u || !u.current)
                    return null;
                const p = u.current.getBoundingClientRect();
                return new gT(Math.floor(p.x), Math.floor(p.y), Math.floor(p.width), Math.floor(p.height))
            },
            m = () => {
                if (o > -1) {
                    l(-1);
                    return
                }
                const p = re().createTextureFromRoom(dt().roomId, 1, d()),
                    E = [...i];
                E.length >= nX && (c(f("camera.full.body")), E.pop()),
                Mn(Zr.CAMERA_SHUTTER),
                E.push(new ZK(p, pt.generateImageUrl(p))),
                n(E)
            };
        return a(so, {
            uniqueKey: "nitro-camera-capture",
            children: g(M, {
                center: !0,
                className: "nitro-camera-capture",
                gap: 0,
                children: [h && a("img", {
                    alt: "",
                    className: "camera-area",
                    src: h.imageUrl
                }), g("div", {
                    className: "camera-canvas drag-handler",
                    children: [a("div", {
                        className: "position-absolute header-close",
                        onClick: e,
                        children: a(mi, {
                            className: "fa-icon"
                        })
                    }), !h && a("div", {
                        ref: u,
                        className: "camera-area camera-view-finder"
                    }), h && a("div", {
                        className: "camera-area camera-frame",
                        children: g("div", {
                            className: "camera-frame-preview-actions w-100 position-absolute bottom-0 py-2 text-center",
                            children: [a("button", {
                                className: "btn btn-success me-3",
                                title: f("camera.editor.button.tooltip"),
                                onClick: t,
                                children: f("camera.editor.button.text")
                            }), a("button", {
                                className: "btn btn-danger",
                                onClick: r,
                                children: f("camera.delete.button.text")
                            })]
                        })
                    }), a("div", {
                        className: "d-flex justify-content-center",
                        children: a("div", {
                            className: "camera-button",
                            title: f("camera.take.photo.button.tooltip"),
                            onClick: m
                        })
                    })]
                }), i.length > 0 && a(P, {
                    gap: 2,
                    justifyContent: "center",
                    className: "camera-roll d-flex justify-content-center py-2",
                    children: i.map((p, E) => a("img", {
                        alt: "",
                        src: p.imageUrl,
                        onClick: T => l(E)
                    }, E))
                })]
            })
        })
    },
    oX = s => {
        const {base64Url: e=null, onCloseClick: t=null, onCancelClick: r=null, price: i=null} = s,
            [n, o] = _.useState(null),
            [l, c] = _.useState(null),
            [u, h] = _.useState(0),
            [d, m] = _.useState(!1),
            [p, E] = _.useState(!1),
            [T, I] = _.useState(0),
            S = _.useMemo(() => oe("camera.publish.disabled", !1), []);
        W(eO, N => {
            h(b => b + 1),
            E(!1)
        }),
        W($R, N => {
            const b = N.getParser();
            c(b.extraDataId),
            I(b.secondsToWait),
            m(b.ok),
            E(!1)
        }),
        W(tO, N => {
            const b = N.getParser();
            o(oe("camera.url") + "/" + b.url)
        });
        const A = (N, b=null) => {
            switch (N) {
            case "close":
                t();
                return;
            case "buy":
                if (p)
                    return;
                E(!0),
                B(new $A(""));
                return;
            case "publish":
                if (p)
                    return;
                E(!0),
                B(new ZA);
                return;
            case "cancel":
                r();
                return
            }
        };
        return _.useEffect(() => {
            e && re().saveBase64AsScreenshot(e)
        }, [e]), i ? g(Se, {
            className: "nitro-camera-checkout",
            theme: "primary-slim",
            children: [a(Oe, {
                headerText: f("camera.confirm_phase.title"),
                onCloseClick: N => A("close")
            }), g(Ie, {
                children: [g(P, {
                    center: !0,
                    children: [n && n.length && a(vn, {
                        className: "picture-preview border",
                        imageUrl: n
                    }), (!n || !n.length) && a(P, {
                        center: !0,
                        className: "picture-preview border",
                        children: a(y, {
                            bold: !0,
                            children: f("camera.loading")
                        })
                    })]
                }), g(P, {
                    justifyContent: "between",
                    alignItems: "center",
                    className: "bg-muted rounded p-2",
                    children: [g(M, {
                        size: S ? 10 : 6,
                        gap: 1,
                        children: [a(y, {
                            bold: !0,
                            children: f("camera.purchase.header")
                        }), (i.credits > 0 || i.duckets > 0) && g(P, {
                            gap: 1,
                            children: [a(y, {
                                children: f("catalog.purchase.confirmation.dialog.cost")
                            }), i.credits > 0 && g(P, {
                                gap: 1,
                                children: [a(y, {
                                    bold: !0,
                                    children: i.credits
                                }), a(us, {
                                    type: -1
                                })]
                            }), i.duckets > 0 && g(P, {
                                gap: 1,
                                children: [a(y, {
                                    bold: !0,
                                    children: i.duckets
                                }), a(us, {
                                    type: 0
                                })]
                            })]
                        }), u > 0 && g(y, {
                            children: [a(y, {
                                bold: !0,
                                children: f("camera.purchase.count.info")
                            }), " ", u, a("u", {
                                className: "ms-1 cursor-pointer",
                                onClick: () => ge("inventory/toggle"),
                                children: f("camera.open.inventory")
                            })]
                        })]
                    }), a(P, {
                        alignItems: "center",
                        children: a(H, {
                            variant: "success",
                            disabled: p,
                            onClick: N => A("buy"),
                            children: f(u ? "camera.buy.another.button.text" : "buy")
                        })
                    })]
                }), !S && g(P, {
                    justifyContent: "between",
                    alignItems: "center",
                    className: "bg-muted rounded p-2",
                    children: [g(M, {
                        gap: 1,
                        children: [a(y, {
                            bold: !0,
                            children: f(d ? "camera.publish.successful" : "camera.publish.explanation")
                        }), a(y, {
                            children: f(d ? "camera.publish.success.short.info" : "camera.publish.detailed.explanation")
                        }), d && a("a", {
                            href: l,
                            rel: "noreferrer",
                            target: "_blank",
                            children: f("camera.link.to.published")
                        }), !d && i.publishDucketPrice > 0 && g(P, {
                            gap: 1,
                            children: [a(y, {
                                children: f("catalog.purchase.confirmation.dialog.cost")
                            }), g(P, {
                                gap: 1,
                                children: [a(y, {
                                    bold: !0,
                                    children: i.publishDucketPrice
                                }), a(us, {
                                    type: 0
                                })]
                            })]
                        }), T > 0 && a("div", {
                            className: "mt-1 text-center fw-bold",
                            children: f("camera.publish.wait", ["minutes"], [Math.ceil(T / 60).toString()])
                        })]
                    }), !d && a(P, {
                        className: "d-flex align-items-end",
                        children: a(H, {
                            variant: "success",
                            disabled: p || T > 0,
                            onClick: N => A("publish"),
                            children: f("camera.publish.button.text")
                        })
                    })]
                }), a(y, {
                    center: !0,
                    children: f("camera.warning.disclaimer")
                }), a(P, {
                    justifyContent: "end",
                    children: a(H, {
                        onClick: N => A("cancel"),
                        children: f("generic.cancel")
                    })
                })]
            })]
        }) : null
    },
    lX = s => {
        const {effect: e=null, thumbnailUrl: t=null, isActive: r=!1, isLocked: i=!1, selectEffect: n=null, removeEffect: o=null} = s;
        return g($e, {
            title: f(i ? `camera.effect.required.level ${e.minLevel}` : `camera.effect.name.${e.name}`),
            itemActive: r,
            onClick: l => !r && n(),
            children: [r && a(H, {
                variant: "danger",
                className: "rounded-circle remove-effect",
                onClick: o,
                children: a(mi, {
                    className: "fa-icon"
                })
            }), !i && t && t.length > 0 && a("div", {
                className: "effect-thumbnail-image border",
                children: a("img", {
                    alt: "",
                    src: t
                })
            }), i && g(y, {
                center: !0,
                bold: !0,
                children: [a("div", {
                    children: a(sT, {
                        className: "fa-icon"
                    })
                }), e.minLevel]
            })]
        })
    },
    cX = s => {
        const {myLevel: e=0, selectedEffects: t=[], effects: r=[], thumbnails: i=[], processAction: n=null} = s;
        return a(fe, {
            columnCount: 3,
            overflow: "auto",
            children: r && r.length > 0 && r.map((o, l) => {
                const c = i.find(h => h.effectName === o.name),
                    u = t.findIndex(h => h.effect.name === o.name) > -1;
                return a(lX, {
                    effect: o,
                    thumbnailUrl: c && c.thumbnailUrl || null,
                    isActive: u,
                    isLocked: o.minLevel > e,
                    selectEffect: () => n("select_effect", o.name),
                    removeEffect: () => n("remove_effect", o.name)
                }, l)
            })
        })
    },
    iI = [$c.COLORMATRIX, $c.COMPOSITE],
    uX = s => {
        const {picture: e=null, availableEffects: t=null, myLevel: r=1, onClose: i=null, onCancel: n=null, onCheckout: o=null} = s,
            [l, c] = _.useState(iI[0]),
            [u, h] = _.useState(null),
            [d, m] = _.useState([]),
            [p, E] = _.useState([]),
            [T, I] = _.useState(!1),
            S = _.useMemo(() => t.filter(U => U.colorMatrix), [t]),
            A = _.useMemo(() => t.filter(U => U.texture), [t]),
            N = _.useCallback(() => l === $c.COLORMATRIX ? S : A, [l, S, A]),
            b = _.useCallback(U => !U || !U.length || !d || !d.length ? -1 : d.findIndex(z => z.effect.name === U), [d]),
            v = _.useMemo(() => b(u), [u, b]),
            D = _.useMemo(() => u && d[v] || null, [u, v, d]),
            G = _.useCallback(U => {
                const z = v;
                z !== -1 && m(Q => {
                    const j = [...Q],
                        J = j[z];
                    return j[v] = new C_(J.effect, U), j
                })
            }, [v, m]),
            x = _.useMemo(() => Gc().applyEffects(e.texture, d, T).src, [e, d, T]),
            F = _.useCallback((U, z=null) => {
                switch (U) {
                case "close":
                    i();
                    return;
                case "cancel":
                    n();
                    return;
                case "checkout":
                    o(x);
                    return;
                case "change_tab":
                    c(String(z));
                    return;
                case "select_effect":
                    {
                        if (b(z) >= 0)
                            return;
                        const j = t.find(J => J.name === z);
                        if (!j)
                            return;
                        m(J => [...J, new C_(j, 1)]),
                        h(j.name);
                        return
                    }case "remove_effect":
                    {
                        let Q = b(z);
                        if (Q === -1)
                            return;
                        m(j => {
                            const J = [...j];
                            return J.splice(Q, 1), J
                        }),
                        u === z && h(null);
                        return
                    }case "clear_effects":
                    h(null),
                    m([]);
                    return;
                case "download":
                    {
                        const Q = new Image;
                        Q.src = x,
                        window.open("").document.write(Q.outerHTML);
                        return
                    }case "zoom":
                    I(!T);
                    return
                }
            }, [T, t, u, x, b, n, o, i, I, m]);
        return _.useEffect(() => {
            const U = [];
            for (const z of t)
                U.push(new $K(z.name, Gc().applyEffects(e.texture, [new C_(z, 1)], !1).src));
            E(U)
        }, [e, t]), g(Se, {
            className: "nitro-camera-editor",
            children: [a(Oe, {
                headerText: f("camera.editor.button.text"),
                onCloseClick: U => F("close")
            }), a(_a, {
                children: iI.map(U => a(sn, {
                    isActive: l === U,
                    onClick: z => F("change_tab", U),
                    children: a("i", {
                        className: "icon icon-camera-" + U
                    })
                }, U))
            }), a(Ie, {
                children: g(fe, {
                    children: [a(M, {
                        size: 5,
                        overflow: "hidden",
                        children: a(cX, {
                            myLevel: r,
                            selectedEffects: d,
                            effects: N(),
                            thumbnails: p,
                            processAction: F
                        })
                    }), g(M, {
                        size: 7,
                        justifyContent: "between",
                        overflow: "hidden",
                        children: [g(M, {
                            center: !0,
                            children: [a(vn, {
                                imageUrl: x,
                                className: "picture-preview"
                            }), u && g(M, {
                                center: !0,
                                fullWidth: !0,
                                gap: 1,
                                children: [a(y, {
                                    children: f("camera.effect.name." + u)
                                }), a(Xs, {
                                    className: "nitro-slider",
                                    min: 0,
                                    max: 1,
                                    step: .01,
                                    value: D.alpha,
                                    onChange: U => G(U),
                                    renderThumb: (U, z) => a("div", {
                                        ...U,
                                        children: z.valueNow
                                    })
                                })]
                            })]
                        }), g(P, {
                            justifyContent: "between",
                            children: [g(An, {
                                children: [a(H, {
                                    onClick: U => F("clear_effects"),
                                    children: a(Id, {
                                        className: "fa-icon"
                                    })
                                }), a(H, {
                                    onClick: U => F("download"),
                                    children: a(cL, {
                                        className: "fa-icon"
                                    })
                                }), g(H, {
                                    onClick: U => F("zoom"),
                                    children: [T && a(uL, {
                                        className: "fa-icon"
                                    }), !T && a(hL, {
                                        className: "fa-icon"
                                    })]
                                })]
                            }), g(P, {
                                gap: 1,
                                children: [a(H, {
                                    onClick: U => F("cancel"),
                                    children: f("generic.cancel")
                                }), a(H, {
                                    onClick: U => F("checkout"),
                                    children: f("camera.preview.button.text")
                                })]
                            })]
                        })]
                    })]
                })
            })]
        })
    },
    sl = 0,
    Wu = 1,
    nI = 2,
    aI = 3,
    hX = s => {
        const [e, t] = _.useState(sl),
            [r, i] = _.useState(null),
            {availableEffects: n=[], selectedPictureIndex: o=-1, cameraRoll: l=[], setCameraRoll: c=null, myLevel: u=0, price: h={
                credits: 0,
                duckets: 0,
                publishDucketPrice: 0
            }} = Zv(),
            d = p => {
                switch (p) {
                case "close":
                    t(sl);
                    return;
                case "edit":
                    t(nI);
                    return;
                case "delete":
                    c(E => {
                        const T = [...E];
                        return T.splice(o, 1), T
                    });
                    return;
                case "editor_cancel":
                    t(Wu);
                    return
                }
            },
            m = p => {
                i(p),
                t(aI)
            };
        return jt(Ce.ENDED, p => t(sl)), _.useEffect(() => {
            const p = {
                linkReceived: E => {
                    const T = E.split("/");
                    if (!(T.length < 2))
                        switch (T[1]) {
                        case "show":
                            t(Wu);
                            return;
                        case "hide":
                            t(sl);
                            return;
                        case "toggle":
                            t(I => I ? sl : Wu);
                            return
                        }
                },
                eventUrlPrefix: "camera/"
            };
            return Ts(p), () => Rs(p)
        }, []), e === sl ? null : g(q, {
            children: [e === Wu && a(aX, {
                onClose: () => d("close"),
                onEdit: () => d("edit"),
                onDelete: () => d("delete")
            }), e === nI && a(uX, {
                picture: l[o],
                myLevel: u,
                onClose: () => d("close"),
                onCancel: () => d("editor_cancel"),
                onCheckout: m,
                availableEffects: n
            }), e === aI && a(oX, {
                base64Url: r,
                onCloseClick: () => d("close"),
                onCancelClick: () => d("editor_cancel"),
                price: h
            })]
        })
    },
    dX = s => {
        const {itemId: e=-1, state: t=null, product: r=null, active: i=!1, onClick: n=null} = s,
            o = l => {
                let c = Z().getFloorItemDataByName(l),
                    u = null;
                return c ? u = re().getFurnitureFloorIconUrl(c.id) : (c = Z().getWallItemDataByName(l), c && (u = re().getFurnitureWallIconUrl(c.id))), u
            };
        return g(M, {
            fit: !0,
            center: !0,
            pointer: !0,
            className: `campaign-spritesheet campaign-day-generic-bg rounded calendar-item ${i ? "active" : ""}`,
            onClick: () => n(e),
            children: [t === ur.STATE_UNLOCKED && a(P, {
                center: !0,
                className: "campaign-spritesheet unlocked-bg",
                children: a(P, {
                    center: !0,
                    className: "campaign-spritesheet campaign-opened",
                    children: r && a(vn, {
                        imageUrl: r.customImage ? oe("image.library.url") + r.customImage : o(r.productName)
                    })
                })
            }), t !== ur.STATE_UNLOCKED && g(P, {
                center: !0,
                className: "campaign-spritesheet locked-bg",
                children: [t === ur.STATE_LOCKED_AVAILABLE && a(k, {
                    className: "campaign-spritesheet available"
                }), (t === ur.STATE_LOCKED_EXPIRED || t === ur.STATE_LOCKED_FUTURE) && a(k, {
                    className: "campaign-spritesheet unavailable"
                })]
            })]
        })
    },
    Yu = 5,
    _X = s => {
        const {onClose: e=null, campaignName: t=null, currentDay: r=null, numDays: i=null, missedDays: n=null, openedDays: o=null, openPackage: l=null, receivedProducts: c=null} = s,
            [u, h] = _.useState(r >= i ? i - 1 : r),
            d = r > i ? i - Yu : Math.max(0, r - 1),
            [m, p] = _.useState(d),
            E = N => o.includes(N) ? ur.STATE_UNLOCKED : N > r ? ur.STATE_LOCKED_FUTURE : n.includes(N) ? ur.STATE_LOCKED_EXPIRED : ur.STATE_LOCKED_AVAILABLE,
            T = N => {
                switch (E(N)) {
                case ur.STATE_UNLOCKED:
                    return f("campaign.calendar.info.unlocked");
                case ur.STATE_LOCKED_FUTURE:
                    return f("campaign.calendar.info.future");
                case ur.STATE_LOCKED_EXPIRED:
                    return f("campaign.calendar.info.expired");
                default:
                    return f("campaign.calendar.info.available.desktop")
                }
            },
            I = () => {
                const N = u + 1;
                N > i - 1 || (h(N), m + Yu < N + 1 && p(m + 1))
            },
            S = () => {
                const N = u - 1;
                N < 0 || (h(N), m > N && p(m - 1))
            },
            A = N => {
                if (u === N) {
                    E(N) === ur.STATE_LOCKED_AVAILABLE && l(N, !1);
                    return
                }
                h(N)
            };
        return g(Se, {
            className: "nitro-campaign-calendar",
            theme: "primary",
            children: [a(Oe, {
                className: "py-4",
                headerText: f(`campaign.calendar.${t}.title`),
                onCloseClick: e
            }), g(Ie, {
                children: [g(fe, {
                    fullHeight: !1,
                    justifyContent: "between",
                    alignItems: "center",
                    children: [a(M, {
                        size: 1
                    }), a(M, {
                        size: 10,
                        children: a(P, {
                            justifyContent: "between",
                            alignItems: "center",
                            gap: 1,
                            children: g(M, {
                                gap: 1,
                                children: [a("h3", {
                                    children: f("campaign.calendar.heading.day", ["number"], [(u + 1).toString()])
                                }), a(y, {
                                    variant: "white",
                                    children: T(u)
                                })]
                            })
                        })
                    }), a(M, {
                        size: 1
                    })]
                }), g(P, {
                    fullHeight: !0,
                    gap: 2,
                    children: [a(P, {
                        center: !0,
                        children: a(k, {
                            pointer: !0,
                            className: "campaign-spritesheet prev",
                            onClick: S
                        })
                    }), a(M, {
                        center: !0,
                        fullWidth: !0,
                        children: a(fe, {
                            fit: !0,
                            columnCount: Yu,
                            gap: 1,
                            children: [...Array(Yu)].map((N, b) => {
                                const v = m + b;
                                return v >= i ? null : a(M, {
                                    overflow: "hidden",
                                    children: a(dX, {
                                        itemId: v,
                                        state: E(v),
                                        active: u === v,
                                        product: c.has(v) ? c.get(v) : null,
                                        onClick: A
                                    })
                                }, b)
                            })
                        })
                    }), a(P, {
                        center: !0,
                        children: a(k, {
                            pointer: !0,
                            className: "campaign-spritesheet next",
                            onClick: I
                        })
                    })]
                })]
            })]
        })
    },
    gX = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(-1),
            [n, o] = _.useState(new Map),
            [l, c] = _.useState(!1),
            u = (h, d=!1) => {
                e && (i(h), B(d ? new tN(e.campaignName, h) : new sN(e.campaignName, h)))
            };
        return W(rO, h => {
            const d = h.getParser();
            d && t(d.calendarData)
        }), W(iO, h => {
            const d = h.getParser();
            if (!d)
                return;
            const m = r;
            d.doorOpened && (t(p => {
                const E = p.clone();
                return E.openedDays.push(r), E
            }), o(p => {
                const E = new Map(p);
                return E.set(m, new e4(d.productName, d.customImage, d.furnitureClassName)), E
            })),
            i(-1)
        }), _.useEffect(() => {
            const h = {
                linkReceived: d => {
                    const m = d.split("/");
                    if (!(m.length < 2))
                        switch (m[1]) {
                        case "calendar":
                            c(!0);
                            break
                        }
                },
                eventUrlPrefix: "openView/"
            };
            return Ts(h), () => Rs(h)
        }, []), a(q, {
            children: e && l && a(_X, {
                onClose: () => c(!1),
                campaignName: e.campaignName,
                currentDay: e.currentDay,
                numDays: e.campaignDays,
                openedDays: e.openedDays,
                missedDays: e.missedDays,
                openPackage: u,
                receivedProducts: n
            })
        })
    },
    pP = s => {
        const {icon: e=0} = s,
            t = _.useMemo(() => oe("catalog.asset.icon.url").replace("%name%", e.toString()), [e]);
        return a(vn, {
            imageUrl: t,
            style: {
                width: 20,
                height: 20
            }
        })
    },
    fX = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(0),
            [n, o] = _.useState(0),
            [l, c] = _.useState(""),
            [u, h] = _.useState(""),
            [d, m] = _.useState(!0),
            [p, E] = _.useState(""),
            [T, I] = _.useState([]),
            [S, A] = _.useState(0),
            [N, b] = _.useState(0),
            [v, D] = _.useState(0),
            [G, x] = _.useState(0),
            [F, U] = _.useState(0),
            [z, Q] = _.useState(!1),
            {catalogOptions: j=null} = bt(),
            {friends: J} = ri(),
            {giftConfiguration: X=null} = j,
            [K, be] = _.useState([]),
            [he, et] = _.useState([]),
            [Ut, fs] = _.useState(!0),
            Xt = _.useCallback(() => {
                t(!1),
                i(0),
                o(0),
                c(""),
                h(""),
                m(!0),
                E(""),
                A(0),
                b(0),
                fs(!1),
                et([]),
                T.length && D(T[0].id)
            }, [T]),
            ms = _.useMemo(() => X ? X.defaultStuffTypes.findIndex(Ke => Ke === K[S]) > -1 : !1, [K, X, S]),
            ut = _.useMemo(() => X ? (K[S] * 1e3 + X.ribbonTypes[N]).toString() : "", [X, S, N, K]),
            Ps = _.useMemo(() => {
                if (!X || ms)
                    return !1;
                const Ke = K[S];
                return !(Ke === 8 || Ke >= 3 && Ke <= 6)
            }, [X, S, ms, K]),
            Cr = _.useMemo(() => ms ? K[S] : v, [ms, K, S, v]),
            It = J.filter(Ke => Ke.id !== -1),
            Ve = Ke => {
                const Ot = Ke.target.value;
                let Ti = [];
                Ot.length > 0 && (Ti = It.sort().filter(no => no.name.includes(Ot))),
                h(Ot),
                fs(!0),
                et(Ti)
            },
            Dt = Ke => {
                h(Ke),
                fs(!1)
            },
            Hs = _.useCallback(Ke => {
                switch (Ke) {
                case "prev_box":
                    A(Ot => Ot === 0 ? G : Ot - 1);
                    return;
                case "next_box":
                    A(Ot => Ot === G ? 0 : Ot + 1);
                    return;
                case "prev_ribbon":
                    b(Ot => Ot === 0 ? F : Ot - 1);
                    return;
                case "next_ribbon":
                    b(Ot => Ot === F ? 0 : Ot + 1);
                    return;
                case "buy":
                    if (!u || u.length === 0) {
                        Q(!0);
                        return
                    }
                    B(new gN(r, n, l, u, p, Cr, S, N, d));
                    return
                }
            }, [Cr, l, G, F, p, n, r, u, S, N, d]);
        W(dO, Ke => Q(!0)),
        hs([oa.PURCHASE_SUCCESS, $r.INIT_GIFT], Ke => {
            switch (Ke.type) {
            case oa.PURCHASE_SUCCESS:
                Xt();
                return;
            case $r.INIT_GIFT:
                const Ot = Ke;
                Xt(),
                i(Ot.pageId),
                o(Ot.offerId),
                c(Ot.extraData),
                t(!0);
                return
            }
        }),
        _.useEffect(() => {
            Q(!1)
        }, [u]);
        const Fe = _.useCallback(() => {
            X && be(Ke => {
                let Ot = [...X.boxTypes];
                return Ot.push(X.defaultStuffTypes[Math.floor(Math.random() * (X.defaultStuffTypes.length - 1))]), x(Ot.length - 1), U(Ot.length - 1), Ot
            })
        }, [X]);
        if (_.useEffect(() => {
            if (!X)
                return;
            const Ke = [];
            for (const Ot of X.stuffTypes) {
                const Ti = Z().getFloorItemData(Ot);
                Ti && Ti.colors && Ti.colors.length > 0 && Ke.push({
                    id: Ot,
                    color: wr.makeColorNumberHex(Ti.colors[0])
                })
            }
            Fe(),
            Ke.length && (D(Ke[0].id), I(Ke))
        }, [X, Fe]), _.useEffect(() => {
            e && Fe()
        }, [Fe, e]), !X || !X.isEnabled || !e)
            return null;
        const _t = "catalog.gift_wrapping_new.box." + (ms ? "default" : K[S]),
            is = `catalog.gift_wrapping_new.ribbon.${N}`,
            Gr = "catalog.gift_wrapping_new." + (ms ? "freeprice" : "price");
        return g(Se, {
            uniqueKey: "catalog-gift",
            className: "nitro-catalog-gift",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("catalog.gift_wrapping.title"),
                onCloseClick: Xt
            }), g(Ie, {
                className: "text-black",
                children: [g(L4, {
                    column: !0,
                    children: [a(y, {
                        children: f("catalog.gift_wrapping.receiver")
                    }), a("input", {
                        type: "text",
                        className: cr("form-control form-control-sm", z && "is-invalid"),
                        value: u,
                        onChange: Ke => Ve(Ke)
                    }), he.length > 0 && Ut && a(M, {
                        className: "autocomplete-gift-container",
                        children: he.map(Ke => a(k, {
                            className: "autocomplete-gift-item",
                            onClick: Ot => Dt(Ke.name),
                            children: Ke.name
                        }, Ke.id))
                    }), z && a(k, {
                        className: "invalid-feedback",
                        children: f("catalog.gift_wrapping.receiver_not_found.title")
                    })]
                }), a(Xv, {
                    figure: Z().figure,
                    userName: Z().userName,
                    message: p,
                    editable: !0,
                    onChange: Ke => E(Ke)
                }), g(k, {
                    className: "form-check",
                    children: [a("input", {
                        className: "form-check-input",
                        type: "checkbox",
                        name: "showMyFace",
                        checked: d,
                        onChange: Ke => m(Ot => !Ot)
                    }), a("label", {
                        className: "form-check-label",
                        children: f("catalog.gift_wrapping.show_face.title")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 2,
                    children: [v && a(k, {
                        className: "gift-preview",
                        children: a(WE, {
                            productType: Ue.FLOOR,
                            productClassId: Cr,
                            extraData: ut
                        })
                    }), g(M, {
                        gap: 1,
                        children: [g(P, {
                            gap: 2,
                            children: [g(An, {
                                children: [a(H, {
                                    variant: "primary",
                                    onClick: () => Hs("prev_box"),
                                    children: a(ii, {
                                        className: "fa-icon"
                                    })
                                }), a(H, {
                                    variant: "primary",
                                    onClick: () => Hs("next_box"),
                                    children: a(ni, {
                                        className: "fa-icon"
                                    })
                                })]
                            }), g(M, {
                                gap: 1,
                                children: [a(y, {
                                    fontWeight: "bold",
                                    children: f(_t)
                                }), g(P, {
                                    alignItems: "center",
                                    gap: 1,
                                    children: [f(Gr, ["price"], [X.price.toString()]), a(us, {
                                        type: -1
                                    })]
                                })]
                            })]
                        }), g(P, {
                            alignItems: "center",
                            gap: 2,
                            className: Ps ? "" : "opacity-50 pointer-events-none",
                            children: [g(An, {
                                children: [a(H, {
                                    variant: "primary",
                                    onClick: () => Hs("prev_ribbon"),
                                    children: a(ii, {
                                        className: "fa-icon"
                                    })
                                }), a(H, {
                                    variant: "primary",
                                    onClick: () => Hs("next_ribbon"),
                                    children: a(ni, {
                                        className: "fa-icon"
                                    })
                                })]
                            }), a(y, {
                                fontWeight: "bold",
                                children: f(is)
                            })]
                        })]
                    })]
                }), g(M, {
                    gap: 1,
                    className: Ps ? "" : "opacity-50 pointer-events-none",
                    children: [a(y, {
                        fontWeight: "bold",
                        children: f("catalog.gift_wrapping.pick_color")
                    }), a(An, {
                        fullWidth: !0,
                        children: T.map(Ke => a(H, {
                            variant: "dark",
                            active: Ke.id === v,
                            disabled: !Ps,
                            style: {
                                backgroundColor: Ke.color
                            },
                            onClick: () => D(Ke.id)
                        }, Ke.id))
                    })]
                }), g(P, {
                    justifyContent: "between",
                    alignItems: "center",
                    children: [a(H, {
                        variant: "link",
                        onClick: Xt,
                        className: "text-black",
                        children: f("cancel")
                    }), a(H, {
                        variant: "success",
                        onClick: () => Hs("buy"),
                        children: f("catalog.gift_wrapping.give_gift")
                    })]
                })]
            })]
        })
    },
    mX = s => {
        const [e, t] = _.useState(""),
            {currentType: r=null, rootNode: i=null, offersToNodes: n=null, searchResult: o=null, setSearchResult: l=null, setCurrentPage: c=null} = bt();
        return _.useEffect(() => {
            let u = e == null ? void 0 : e.toLocaleLowerCase().replace(" ", "");
            if (!u || !u.length) {
                l(null);
                return
            }
            const h = setTimeout(() => {
                const d = Z().getAllFurnitureData({
                    loadFurnitureData: null
                });
                if (!d || !d.length)
                    return;
                const m = [],
                    p = [];
                for (const I of d) {
                    if (r === Ai.BUILDER && !I.availableForBuildersClub || r === Ai.NORMAL && I.excludeDynamic)
                        continue;
                    const S = [I.className, I.name, I.description].join(" ").replace(/ /gi, "").toLowerCase();
                    if (r === Ai.BUILDER && I.purchaseOfferId === -1 && I.rentOfferId === -1)
                        I.furniLine !== "" && p.indexOf(I.furniLine) < 0 && S.indexOf(u) >= 0 && p.push(I.furniLine);
                    else if ([...Dp(n, I.purchaseOfferId), ...Dp(n, I.rentOfferId)].length && (S.indexOf(u) >= 0 && m.push(I), m.length === 250))
                        break
                }
                const E = [];
                for (const I of m)
                    E.push(new pK(I));
                let T = [];
                Iv(u, p, i, T),
                l(new OK(u, E, T.filter(I => I.isVisible))),
                c(new UE(-1, "default_3x3", new Rv([], []), E, !1, 1))
            }, 300);
            return () => clearTimeout(h)
        }, [n, r, i, e, c, l]), g(P, {
            gap: 1,
            children: [a(P, {
                fullWidth: !0,
                alignItems: "center",
                position: "relative",
                children: a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    placeholder: f("generic.search"),
                    value: e,
                    onChange: u => t(u.target.value)
                })
            }), (!e || !e.length) && a(H, {
                variant: "primary",
                className: "catalog-search-button",
                children: a(Td, {
                    className: "fa-icon"
                })
            }), e && !!e.length && a(H, {
                variant: "primary",
                className: "catalog-search-button",
                onClick: u => t(""),
                children: a(mi, {
                    className: "fa-icon"
                })
            })]
        })
    },
    IP = s => {
        const {node: e=null, child: t=!1} = s;
        return a(q, {
            children: e && e.children.length > 0 && e.children.map((r, i) => r.isVisible ? a(TP, {
                node: r,
                child: t
            }, i) : null)
        })
    },
    TP = s => {
        const {node: e=null, child: t=!1} = s,
            {activateNode: r=null} = bt();
        return g(k, {
            className: "nitro-catalog-navigation-section",
            children: [g($e, {
                gap: 1,
                column: !1,
                itemActive: e.isActive,
                onClick: i => r(e),
                className: t ? "inset" : "",
                children: [a(pP, {
                    icon: e.iconId
                }), a(y, {
                    grow: !0,
                    truncate: !0,
                    children: e.localization
                }), e.isBranch && g(q, {
                    children: [e.isOpen && a(Bf, {
                        className: "fa-icon"
                    }), !e.isOpen && a(kf, {
                        className: "fa-icon"
                    })]
                })]
            }), e.isOpen && e.isBranch && a(IP, {
                node: e,
                child: !0
            })]
        })
    },
    EX = s => {
        const {node: e=null} = s,
            {searchResult: t=null} = bt();
        return g(q, {
            children: [a(mX, {}), a(M, {
                fullHeight: !0,
                className: "nitro-catalog-navigation-grid-container rounded p-1",
                overflow: "hidden",
                children: g(Mt, {
                    id: "nitro-catalog-main-navigation",
                    gap: 1,
                    columnCount: 1,
                    children: [t && t.filteredNodes.length > 0 && t.filteredNodes.map((r, i) => a(TP, {
                        node: r
                    }, i)), !t && a(IP, {
                        node: e
                    })]
                })
            })]
        })
    },
    pX = s => {
        const {columnCount: e=5, ...t} = s,
            [r, i] = _.useState(!1),
            [n, o] = _.useState(null),
            {currentOffer: l=null, setPurchaseOptions: c=null} = bt(),
            {badgeCodes: u=[], activate: h=null, deactivate: d=null} = __(),
            m = _.useMemo(() => {
                if (!n)
                    return null;
                const p = new en;
                return p.setValue(["0", n, "", ""]), p
            }, [n]);
        return _.useEffect(() => {
            l && c(p => {
                const E = {
                    ...p
                };
                return E.extraParamRequired = !0, E.extraData = m && m.getValue(1) || null, E.previewStuffData = m, E
            })
        }, [l, m, c]), _.useEffect(() => {
            if (!r)
                return;
            const p = h();
            return () => d(p)
        }, [r, h, d]), _.useEffect(() => (i(!0), () => i(!1)), []), a(Mt, {
            columnCount: e,
            ...t,
            children: u && u.length > 0 && u.map((p, E) => a($e, {
                itemActive: n === p,
                onClick: T => o(p),
                children: a(Vt, {
                    badgeCode: p
                })
            }, E))
        })
    },
    g_ = s => {
        const {currentPage: e=null, setCurrentOffer: t=null} = bt();
        return _.useEffect(() => {
            !e || !e.offers.length || t(e.offers[0])
        }, [e, t]), null
    },
    ZE = s => {
        const {offer: e=null, selectOffer: t=null, itemActive: r=!1, ...i} = s,
            [n, o] = _.useState(!1),
            {requestOfferToMover: l=null} = bt(),
            {isVisible: c=!1} = Xo(),
            u = _.useMemo(() => e.pricingModel === os.PRICING_MODEL_BUNDLE || e.product === null ? null : e.product.getIconUrl(e), [e]),
            h = m => {
                switch (m.type) {
                case le.MOUSE_DOWN:
                    t(e),
                    o(!0);
                    return;
                case le.MOUSE_UP:
                    o(!1);
                    return;
                case le.ROLL_OUT:
                    if (!n || !r || !c)
                        return;
                    l(e);
                    return
                }
            },
            d = e.product;
        return d ? a($e, {
            itemImage: u,
            itemCount: e.pricingModel === os.PRICING_MODEL_MULTI ? d.productCount : 1,
            itemUniqueSoldout: d.uniqueLimitedItemSeriesSize && !d.uniqueLimitedItemsLeft,
            itemUniqueNumber: d.uniqueLimitedItemSeriesSize,
            itemActive: r,
            onMouseDown: h,
            onMouseUp: h,
            onMouseOut: h,
            ...i,
            children: e.product.productType === Ue.ROBOT && a(rs, {
                figure: e.product.extraParam,
                headOnly: !0,
                direction: 3
            })
        }) : null
    },
    Lu = s => {
        const {columnCount: e=5, children: t=null, ...r} = s,
            {currentOffer: i=null, setCurrentOffer: n=null, currentPage: o=null, setPurchaseOptions: l=null} = bt(),
            c = _.useRef();
        if (_.useEffect(() => {
            c && c.current && (c.current.scrollTop = 0)
        }, [o]), !o)
            return null;
        const u = h => {
            h.activate(),
            !h.isLazy && (n(h), h.product && h.product.productType === Ue.WALL && l(d => {
                const m = {
                    ...d
                };
                return m.extraData = h.product.extraParam || null, m
            }))
        };
        return g(Mt, {
            innerRef: c,
            columnCount: e,
            ...r,
            children: [o.offers && o.offers.length > 0 && o.offers.map((h, d) => a(ZE, {
                itemActive: i && i.offerId === h.offerId,
                offer: h,
                selectOffer: u
            }, d)), t]
        })
    },
    f_ = s => {
        const {children: e=null, ...t} = s,
            {currentOffer: r=null} = bt();
        return !r || r.pricingModel !== os.PRICING_MODEL_SINGLE || !r.product.isUniqueLimitedItem ? null : g(k, {
            ...t,
            children: [a(D4, {
                className: "mx-auto",
                uniqueLimitedItemsLeft: r.product.uniqueLimitedItemsLeft,
                uniqueLimitedSeriesSize: r.product.uniqueLimitedItemSeriesSize
            }), e]
        })
    },
    cn = s => {
        const {noGiftOption: e=!1, purchaseCallback: t=null} = s;
        _.useState(!1);
        const [r, i] = _.useState(Pt.NONE);
        c_(Nu.CATALOG_SKIP_PURCHASE_CONFIRMATION, !1);
        const {currentOffer: n=null, currentPage: o=null, purchaseOptions: l=null, setPurchaseOptions: c=null} = bt(),
            {getCurrencyAmount: u=null} = Qo(),
            h = _.useCallback(E => {
                switch (E.type) {
                case oa.PURCHASE_SUCCESS:
                    i(Pt.NONE);
                    return;
                case ko.PURCHASE_FAILED:
                    i(Pt.FAILED);
                    return;
                case dd.NOT_ALLOWED:
                    i(Pt.FAILED);
                    return;
                case _d.SOLD_OUT:
                    i(Pt.SOLD_OUT);
                    return
                }
            }, []);
        hs(oa.PURCHASE_SUCCESS, h),
        hs(ko.PURCHASE_FAILED, h),
        hs(dd.NOT_ALLOWED, h),
        hs(_d.SOLD_OUT, h);
        const d = _.useMemo(() => {
                if (!n || l.extraParamRequired && (!l.extraData || !l.extraData.length))
                    return !1;
                if (n.pricingModel === os.PRICING_MODEL_SINGLE) {
                    const E = n.product;
                    if (E && E.isUniqueLimitedItem)
                        return !E.uniqueLimitedItemsLeft
                }
                return !1
            }, [n, l]),
            m = (E=!1) => {
                if (!n)
                    return;
                if (hi() < n.clubLevel) {
                    ge("habboUI/open/hccenter");
                    return
                }
                if (E) {
                    Ms(new V4(n.page.pageId, n.offerId, l.extraData));
                    return
                }
                if (i(Pt.PURCHASE), t) {
                    t();
                    return
                }
                let T = n.page.pageId;
                B(new uu(T, n.offerId, l.extraData, l.quantity))
            };
        return _.useEffect(() => {
            n && i(Pt.NONE)
        }, [n, c]), _.useEffect(() => {
            let E = null;
            return (r === Pt.CONFIRM || r === Pt.FAILED) && (E = setTimeout(() => i(Pt.NONE), 3e3)), () => {
                E && clearTimeout(E)
            }
        }, [r]), n ? g(q, {
            children: [a(() => {
                const E = n.priceInCredits * l.quantity,
                    T = n.priceInActivityPoints * l.quantity;
                if (hi() < n.clubLevel)
                    return a(H, {
                        variant: "danger",
                        disabled: !0,
                        children: f("catalog.alert.hc.required")
                    });
                if (d)
                    return a(H, {
                        variant: "danger",
                        disabled: !0,
                        children: f("catalog.alert.limited_edition_sold_out.title")
                    });
                if (E > u(-1))
                    return a(H, {
                        variant: "danger",
                        disabled: !0,
                        children: f("catalog.alert.notenough.title")
                    });
                if (T > u(n.activityPointType))
                    return a(H, {
                        variant: "danger",
                        disabled: !0,
                        children: f("catalog.alert.notenough.activitypoints.title." + n.activityPointType)
                    });
                switch (r) {
                case Pt.CONFIRM:
                    return a(H, {
                        variant: "warning",
                        onClick: I => m(),
                        children: f("catalog.marketplace.confirm_title")
                    });
                case Pt.PURCHASE:
                    return a(H, {
                        disabled: !0,
                        children: a(YE, {})
                    });
                case Pt.FAILED:
                    return a(H, {
                        variant: "danger",
                        children: f("generic.failed")
                    });
                case Pt.SOLD_OUT:
                    return a(H, {
                        variant: "danger",
                        children: f("generic.failed") + " - " + f("catalog.alert.limited_edition_sold_out.title")
                    });
                case Pt.NONE:
                default:
                    return a(H, {
                        disabled: l.extraParamRequired && (!l.extraData || !l.extraData.length),
                        onClick: I => i(Pt.CONFIRM),
                        children: f("catalog.purchase_confirmation." + (n.isRentOffer ? "rent" : "buy"))
                    })
                }
            }, {}), !e && !n.isRentOffer && a(H, {
                disabled: l.quantity > 1 || !n.giftable || d || l.extraParamRequired && (!l.extraData || !l.extraData.length),
                onClick: E => m(!0),
                children: f("catalog.purchase_confirmation.gift")
            })]
        }) : null
    },
    RP = s => {
        const {offer: e=null, separator: t=!1} = s,
            {purchaseOptions: r=null} = bt(),
            {quantity: i=1} = r;
        return e ? g(q, {
            children: [e.priceInCredits > 0 && g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: e.priceInCredits * i
                }), a(us, {
                    type: -1
                })]
            }), t && e.priceInCredits > 0 && e.priceInActivityPoints > 0 && a(tu, {
                size: "xs",
                color: "black",
                className: "fa-icon"
            }), e.priceInActivityPoints > 0 && g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: e.priceInActivityPoints * i
                }), a(us, {
                    type: e.activityPointType
                })]
            })]
        }) : null
    },
    ma = s => {
        const {gap: e=1, ...t} = s,
            {currentOffer: r=null} = bt();
        return a(M, {
            gap: e,
            ...t,
            children: a(RP, {
                offer: r
            })
        })
    },
    io = s => {
        const {currentOffer: e=null, roomPreviewer: t=null, purchaseOptions: r=null} = bt(),
            {previewStuffData: i=null} = r;
        return _.useEffect(() => {
            if (!e || e.pricingModel === os.PRICING_MODEL_BUNDLE || !t)
                return;
            const n = e.product;
            if (n)
                switch (t.reset(!1), n.productType) {
                case Ue.FLOOR:
                    {
                        if (!n.furnitureData)
                            return;
                        if (n.furnitureData.specialType === _e.FIGURE_PURCHASABLE_SET) {
                            const l = Z().getFloorItemData(n.furnitureData.id).customParams.split(",").map(h => parseInt(h)),
                                c = [];
                            for (const h of l)
                                bs().isValidFigureSetForGender(h, Z().gender) && c.push(h);
                            const u = bs().getFigureStringWithFigureIds(Z().figure, Z().gender, c);
                            t.addAvatarIntoRoom(u, n.productClassId)
                        } else
                            t.addFurnitureIntoRoom(n.productClassId, new w(90), i, n.extraParam);
                        return
                    }case Ue.WALL:
                    {
                        if (!n.furnitureData)
                            return;
                        switch (n.furnitureData.specialType) {
                        case _e.FLOOR:
                            t.updateObjectRoom(n.extraParam);
                            return;
                        case _e.WALL_PAPER:
                            t.updateObjectRoom(null, n.extraParam);
                            return;
                        case _e.LANDSCAPE:
                            {
                                t.updateObjectRoom(null, null, n.extraParam);
                                const o = Z().getWallItemDataByName("window_double_default");
                                o && t.addWallItemIntoRoom(o.id, new w(90), o.customParams);
                                return
                            }default:
                            t.updateObjectRoom("default", "default", "default"),
                            t.addWallItemIntoRoom(n.productClassId, new w(90), n.extraParam);
                            return
                        }
                    }case Ue.ROBOT:
                    t.addAvatarIntoRoom(n.extraParam, 0);
                    return;
                case Ue.EFFECT:
                    t.addAvatarIntoRoom(Z().figure, n.productClassId);
                    return
                }
        }, [e, i, t]), e ? e.pricingModel === os.PRICING_MODEL_BUNDLE ? a(M, {
            fit: !0,
            overflow: "hidden",
            className: "bg-muted p-2 rounded",
            children: a(Mt, {
                fullWidth: !0,
                columnCount: 4,
                className: "nitro-catalog-layout-bundle-grid",
                children: e.products.length > 0 && e.products.map((n, o) => a($e, {
                    itemImage: n.getIconUrl(e),
                    itemCount: n.productCount
                }, o))
            })
        }) : a(n_, {
            roomPreviewer: t,
            height: 140
        }) : null
    },
    IX = s => {
        const {page: e=null} = s,
            {currentOffer: t=null} = bt();
        return g(q, {
            children: [a(g_, {}), g(fe, {
                children: [g(M, {
                    size: 7,
                    overflow: "hidden",
                    children: [a(Lu, {
                        shrink: !0
                    }), g(M, {
                        gap: 1,
                        overflow: "hidden",
                        children: [a(y, {
                            truncate: !0,
                            shrink: !0,
                            fontWeight: "bold",
                            children: f("catalog_selectbadge")
                        }), a(pX, {})]
                    })]
                }), g(M, {
                    center: !t,
                    size: 5,
                    overflow: "hidden",
                    children: [!t && g(q, {
                        children: [!!e.localization.getImage(1) && a("img", {
                            alt: "",
                            src: e.localization.getImage(1)
                        }), a(y, {
                            center: !0,
                            dangerouslySetInnerHTML: {
                                __html: e.localization.getText(0)
                            }
                        })]
                    }), t && g(q, {
                        children: [a(k, {
                            position: "relative",
                            overflow: "hidden",
                            children: a(io, {})
                        }), g(M, {
                            grow: !0,
                            gap: 1,
                            children: [a(f_, {
                                fullWidth: !0
                            }), a(y, {
                                grow: !0,
                                truncate: !0,
                                children: t.localizationName
                            }), a(P, {
                                justifyContent: "end",
                                children: a(ma, {
                                    alignItems: "end"
                                })
                            }), a(cn, {})]
                        })]
                    })]
                })]
            })]
        })
    },
    Xa = s => {
        const {...e} = s,
            {currentOffer: t=null} = bt();
        return !t || !t.badgeCode || !t.badgeCode.length ? null : a(Vt, {
            badgeCode: t.badgeCode,
            ...e
        })
    },
    TX = 1,
    RX = 100,
    $E = s => {
        const {currentOffer: e=null, purchaseOptions: t=null, setPurchaseOptions: r=null} = bt(),
            {quantity: i=1} = t,
            n = o => {
                isNaN(o) && (o = 1),
                o = Math.max(o, TX),
                o = Math.min(o, RX),
                o !== i && r(l => {
                    const c = {
                        ...l
                    };
                    return c.quantity = o, c
                })
            };
        return !e || !e.bundlePurchaseAllowed ? null : g(q, {
            children: [a(y, {
                children: f("catalog.bundlewidget.spinner.select.amount")
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(rT, {
                    className: "text-black cursor-pointer fa-icon",
                    onClick: o => n(i - 1)
                }), a("input", {
                    type: "number",
                    className: "form-control form-control-sm quantity-input",
                    value: i,
                    onChange: o => n(o.target.valueAsNumber)
                }), a(iT, {
                    className: "text-black cursor-pointer fa-icon",
                    onClick: o => n(i + 1)
                })]
            })]
        })
    },
    OX = s => {
        const {page: e=null} = s,
            [t, r] = _.useState(new Map),
            {currentOffer: i=null, setCurrentOffer: n=null} = bt(),
            [o, l] = _.useState(!1),
            c = (p, E) => !p.product.furnitureData.colorIndex || !E.product.furnitureData.colorIndex || p.product.furnitureData.colorIndex > E.product.furnitureData.colorIndex ? 1 : p == E ? 0 : -1,
            u = (p, E) => p.product.furnitureData.className > E.product.furnitureData.className ? 1 : p == E ? 0 : -1,
            h = p => {
                p.activate(),
                n(p)
            },
            d = (p, E) => {
                const T = `${E}*${p}`,
                    I = e.offers.findIndex(S => S.product.furnitureData.fullName === T);
                I > -1 && h(e.offers[I])
            },
            m = _.useMemo(() => {
                const p = [],
                    E = new Map,
                    T = new Map;
                return e.offers.sort(c), e.offers.forEach(I => {
                    if (!I.product)
                        return;
                    const S = I.product.furnitureData;
                    if (!S || !S.hasIndexedColor)
                        p.push(I);
                    else {
                        const A = S.className,
                            N = S.colorIndex;
                        T.has(A) || T.set(A, []);
                        let b = 16777215;
                        if (S.colors) {
                            for (let v of S.colors)
                                v !== 16777215 && (b = v);
                            T.get(A).indexOf(b) === -1 && (T.get(A)[N] = b)
                        }
                        E.has(A) || (p.push(I), E.set(A, !0))
                    }
                }), p.sort(u), r(T), p
            }, [e.offers]);
        return g(fe, {
            children: [a(M, {
                size: 7,
                overflow: "hidden",
                children: g(Mt, {
                    columnCount: 5,
                    children: [(!o || !i || !t.has(i.product.furnitureData.className)) && m.map((p, E) => a(ZE, {
                        itemActive: i && (i.product.furnitureData.hasIndexedColor ? i.product.furnitureData.className === p.product.furnitureData.className : i.offerId === p.offerId),
                        offer: p,
                        selectOffer: h
                    }, E)), o && i && t.has(i.product.furnitureData.className) && t.get(i.product.furnitureData.className).map((p, E) => a($e, {
                        itemHighlight: !0,
                        itemActive: i.product.furnitureData.colorIndex === E,
                        itemColor: nr.int2rgb(p),
                        className: "clear-bg",
                        onClick: T => d(E, i.product.furnitureData.className)
                    }, E))]
                })
            }), g(M, {
                center: !i,
                size: 5,
                overflow: "hidden",
                children: [!i && g(q, {
                    children: [!!e.localization.getImage(1) && a("img", {
                        alt: "",
                        src: e.localization.getImage(1)
                    }), a(y, {
                        center: !0,
                        dangerouslySetInnerHTML: {
                            __html: e.localization.getText(0)
                        }
                    })]
                }), i && g(q, {
                    children: [g(k, {
                        position: "relative",
                        overflow: "hidden",
                        children: [a(io, {}), a(Xa, {
                            position: "absolute",
                            className: "bg-muted rounded bottom-1 end-1"
                        }), i.product.furnitureData.hasIndexedColor && a(H, {
                            position: "absolute",
                            className: "bottom-1 start-1",
                            onClick: p => l(E => !E),
                            children: a(nT, {
                                className: "fa-icon"
                            })
                        })]
                    }), g(M, {
                        grow: !0,
                        gap: 1,
                        children: [a(f_, {
                            fullWidth: !0
                        }), a(y, {
                            grow: !0,
                            truncate: !0,
                            children: i.localizationName
                        }), g(P, {
                            justifyContent: "between",
                            children: [a(M, {
                                gap: 1,
                                children: a($E, {})
                            }), a(ma, {
                                justifyContent: "end",
                                alignItems: "end"
                            })]
                        }), a(cn, {})]
                    })]
                })]
            })]
        })
    },
    OP = s => {
        const {imageUrl: e=null} = s,
            [t, r] = _.useState("");
        return _.useEffect(() => {
            r(e ?? oe("catalog.asset.image.url").replace("%name%", "catalog_header_roombuilder"))
        }, [e]), a(P, {
            center: !0,
            fullWidth: !0,
            className: "nitro-catalog-header",
            children: a("img", {
                src: t,
                onError: ({currentTarget: i}) => {
                    i.src = oe("catalog.asset.image.url").replace("%name%", "catalog_header_roombuilder")
                }
            })
        })
    },
    SX = s => {
        const {page: e=null} = s,
            {currentOffer: t=null, currentPage: r=null} = bt();
        return a(q, {
            children: g(fe, {
                children: [g(M, {
                    size: 7,
                    overflow: "hidden",
                    children: [oe("catalog.headers") && a(OP, {
                        imageUrl: r.localization.getImage(0)
                    }), a(Lu, {})]
                }), g(M, {
                    center: !t,
                    size: 5,
                    overflow: "hidden",
                    children: [!t && g(q, {
                        children: [!!e.localization.getImage(1) && a(vn, {
                            imageUrl: e.localization.getImage(1)
                        }), a(y, {
                            center: !0,
                            dangerouslySetInnerHTML: {
                                __html: e.localization.getText(0)
                            }
                        })]
                    }), t && g(q, {
                        children: [g(P, {
                            center: !0,
                            overflow: "hidden",
                            style: {
                                height: 140
                            },
                            children: [t.product.productType !== Ue.BADGE && g(q, {
                                children: [a(io, {}), a(Xa, {
                                    className: "bg-muted rounded bottom-1 end-1"
                                })]
                            }), t.product.productType === Ue.BADGE && a(Xa, {
                                className: "scale-2"
                            })]
                        }), g(M, {
                            grow: !0,
                            gap: 1,
                            children: [a(f_, {
                                fullWidth: !0
                            }), a(y, {
                                grow: !0,
                                truncate: !0,
                                children: t.localizationName
                            }), g(P, {
                                justifyContent: "between",
                                children: [a(M, {
                                    gap: 1,
                                    children: a($E, {})
                                }), a(ma, {
                                    justifyContent: "end",
                                    alignItems: "end"
                                })]
                            }), a(cn, {})]
                        })]
                    })]
                })]
            })
        })
    },
    CX = s => {
        const {...e} = s,
            {currentOffer: t=null, purchaseOptions: r=null} = bt(),
            {previewStuffData: i=null} = r,
            n = _.useMemo(() => {
                if (!t || !i)
                    return null;
                const o = i.getValue(2);
                return !o || !o.length ? null : o
            }, [t, i]);
        return n ? a(Vt, {
            badgeCode: n,
            isGroup: !0,
            ...e
        }) : null
    },
    SP = s => {
        const [e, t] = _.useState(0),
            {currentOffer: r=null, catalogOptions: i=null, setPurchaseOptions: n=null} = bt(),
            {groups: o=null} = i,
            l = _.useMemo(() => {
                if (!o || !o.length)
                    return null;
                const u = o[e];
                if (!u)
                    return null;
                const h = new en;
                return h.setValue(["0", u.groupId.toString(), u.badgeCode, u.colorA, u.colorB]), h
            }, [e, o]);
        if (_.useEffect(() => {
            r && n(u => {
                const h = {
                    ...u
                };
                return h.extraParamRequired = !0, h.extraData = l && l.getValue(1) || null, h.previewStuffData = l, h
            })
        }, [r, l, n]), _.useEffect(() => {
            B(new hE)
        }, []), !o || !o.length)
            return g(k, {
                className: "bg-muted rounded p-1 text-black text-center",
                children: [f("catalog.guild_selector.members_only"), a(H, {
                    className: "mt-1",
                    children: f("catalog.guild_selector.find_groups")
                })]
            });
        const c = o[e];
        return g(P, {
            gap: 1,
            children: [!!c && g(P, {
                overflow: "hidden",
                className: "rounded border",
                children: [a(k, {
                    fullHeight: !0,
                    style: {
                        width: "20px",
                        backgroundColor: "#" + c.colorA
                    }
                }), a(k, {
                    fullHeight: !0,
                    style: {
                        width: "20px",
                        backgroundColor: "#" + c.colorB
                    }
                })]
            }), a("select", {
                className: "form-select form-select-sm",
                value: e,
                onChange: u => t(parseInt(u.target.value)),
                children: o.map((u, h) => a("option", {
                    value: h,
                    children: u.groupName
                }, h))
            })]
        })
    },
    AX = s => {
        const {page: e=null} = s,
            {currentOffer: t=null} = bt();
        return g(fe, {
            children: [a(M, {
                size: 7,
                overflow: "hidden",
                children: a(Lu, {})
            }), g(M, {
                center: !t,
                size: 5,
                overflow: "hidden",
                children: [!t && g(q, {
                    children: [!!e.localization.getImage(1) && a("img", {
                        alt: "",
                        src: e.localization.getImage(1)
                    }), a(y, {
                        center: !0,
                        dangerouslySetInnerHTML: {
                            __html: e.localization.getText(0)
                        }
                    })]
                }), t && g(q, {
                    children: [g(k, {
                        position: "relative",
                        overflow: "hidden",
                        children: [a(io, {}), a(CX, {
                            position: "absolute",
                            className: "bottom-1 end-1"
                        })]
                    }), g(M, {
                        grow: !0,
                        gap: 1,
                        children: [a(y, {
                            truncate: !0,
                            children: t.localizationName
                        }), a(k, {
                            grow: !0,
                            children: a(SP, {})
                        }), a(P, {
                            justifyContent: "end",
                            children: a(ma, {
                                alignItems: "end"
                            })
                        }), a(cn, {})]
                    })]
                })]
            })]
        })
    },
    NX = s => {
        const {page: e=null} = s;
        _.useState(0);
        const {currentOffer: t=null, setCurrentOffer: r=null, catalogOptions: i=null} = bt();
        return _.useEffect(() => {
            B(new hE)
        }, [e]), g(q, {
            children: [a(g_, {}), g(fe, {
                children: [a(M, {
                    className: "bg-muted rounded p-2 text-black",
                    size: 7,
                    overflow: "hidden",
                    children: a(k, {
                        className: "overflow-auto",
                        dangerouslySetInnerHTML: {
                            __html: e.localization.getText(1)
                        }
                    })
                }), a(M, {
                    size: 5,
                    overflow: "hidden",
                    gap: 1,
                    children: !!t && a(q, {
                        children: g(M, {
                            grow: !0,
                            gap: 1,
                            children: [a(y, {
                                truncate: !0,
                                children: t.localizationName
                            }), a(k, {
                                grow: !0,
                                children: a(SP, {})
                            }), a(P, {
                                justifyContent: "end",
                                children: a(ma, {
                                    alignItems: "end"
                                })
                            }), a(cn, {
                                noGiftOption: !0
                            })]
                        })
                    })
                })]
            })]
        })
    },
    yX = s => {
        const {page: e=null} = s;
        return g(fe, {
            children: [g(M, {
                size: 7,
                overflow: "hidden",
                className: "bg-muted rounded p-2 text-black",
                children: [a(k, {
                    dangerouslySetInnerHTML: {
                        __html: e.localization.getText(2)
                    }
                }), a(k, {
                    overflow: "auto",
                    dangerouslySetInnerHTML: {
                        __html: e.localization.getText(0)
                    }
                }), a(k, {
                    dangerouslySetInnerHTML: {
                        __html: e.localization.getText(1)
                    }
                })]
            }), g(M, {
                center: !0,
                size: 5,
                overflow: "hidden",
                children: [a(vn, {
                    imageUrl: e.localization.getImage(1)
                }), a(H, {
                    onClick: () => ge("groups/create"),
                    children: f("catalog.start.guild.purchase.button")
                })]
            })]
        })
    },
    MX = s => {
        const {page: e=null} = s;
        return a("div", {
            className: "h-100 nitro-catalog-layout-info-loyalty text-black d-flex flex-row",
            children: a("div", {
                className: "overflow-auto h-100 d-flex flex-column info-loyalty-content",
                children: a("div", {
                    dangerouslySetInnerHTML: {
                        __html: e.localization.getText(0)
                    }
                })
            })
        })
    },
    CP = s => {
        const {page: e=null} = s,
            t = e.localization.getImage(1);
        return g(M, {
            grow: !0,
            className: "bg-muted rounded text-black p-2",
            overflow: "hidden",
            children: [g(P, {
                alignItems: "center",
                gap: 2,
                children: [t && a("img", {
                    alt: "",
                    src: t
                }), a(k, {
                    className: "fs-5",
                    dangerouslySetInnerHTML: {
                        __html: e.localization.getText(1)
                    }
                })]
            }), a(M, {
                grow: !0,
                alignItems: "center",
                overflow: "auto",
                children: a(k, {
                    dangerouslySetInnerHTML: {
                        __html: e.localization.getText(2)
                    }
                })
            }), a(P, {
                alignItems: "center",
                children: a(k, {
                    className: "fw-bold",
                    dangerouslySetInnerHTML: {
                        __html: e.localization.getText(3)
                    }
                })
            })]
        })
    },
    bX = s => a(CP, {
        ...s
    }),
    DX = s => {
        const {page: e=null} = s,
            [t, r] = _.useState(""),
            [i, n] = _.useState(""),
            [o, l] = _.useState(-1),
            [c, u] = _.useState([]),
            [h, d] = _.useState(!1),
            [m, p] = _.useState(1),
            {categories: E=null} = fi(),
            {setIsVisible: T=null} = bt(),
            {promoteInformation: I, isExtended: S, setIsExtended: A} = JE();
        _.useEffect(() => {
            S && (l(I.data.flatId), r(I.data.eventName), n(I.data.eventDescription), p(I.data.categoryId), d(S), A(!1))
        }, [S, t, i, m]);
        const N = () => {
                l(-1),
                r(""),
                n(""),
                p(1),
                A(!1),
                T(!1)
            },
            b = () => {
                const v = e.pageId,
                    D = e.offers.length >= 1 ? e.offers[0].offerId : -1,
                    G = o,
                    x = t,
                    F = i,
                    U = m;
                B(new fN(v, D, G, x, h, F, U)),
                N()
            };
        return W(TO, v => {
            const D = v.getParser();
            D && u(D.rooms)
        }), _.useEffect(() => {
            B(new dN),
            B(new eE)
        }, []), g(q, {
            children: [a(y, {
                bold: !0,
                center: !0,
                children: f("roomad.catalog_header")
            }), g(M, {
                size: 12,
                overflow: "hidden",
                className: "text-black",
                children: [a(k, {
                    children: f("roomad.catalog_text", ["duration"], ["120"])
                }), g(k, {
                    className: "bg-muted rounded p-1",
                    children: [g(M, {
                        gap: 2,
                        children: [a(y, {
                            bold: !0,
                            children: f("navigator.category")
                        }), a("select", {
                            className: "form-select form-select-sm",
                            value: m,
                            onChange: v => p(parseInt(v.target.value)),
                            disabled: h,
                            children: E && E.map((v, D) => a("option", {
                                value: v.id,
                                children: f(v.name)
                            }, D))
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            bold: !0,
                            children: f("roomad.catalog_name")
                        }), a("input", {
                            type: "text",
                            className: "form-control form-control-sm",
                            maxLength: 64,
                            value: t,
                            onChange: v => r(v.target.value),
                            readOnly: h
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            bold: !0,
                            children: f("roomad.catalog_description")
                        }), a("textarea", {
                            className: "form-control form-control-sm",
                            maxLength: 64,
                            value: i,
                            onChange: v => n(v.target.value),
                            readOnly: h
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            bold: !0,
                            children: f("roomad.catalog_roomname")
                        }), g("select", {
                            className: "form-select form-select-sm",
                            value: o,
                            onChange: v => l(parseInt(v.target.value)),
                            disabled: h,
                            children: [a("option", {
                                value: -1,
                                disabled: !0,
                                children: f("roomad.catalog_roomname")
                            }), c && c.map((v, D) => a("option", {
                                value: v.roomId,
                                children: v.roomName
                            }, D))]
                        })]
                    }), a(M, {
                        gap: 1,
                        children: a(H, {
                            variant: !t || !i || o === -1 ? "danger" : "success",
                            onClick: b,
                            disabled: !t || !i || o === -1,
                            children: f(h ? "roomad.extend.event" : "buy")
                        })
                    })]
                })]
            })]
        })
    },
    AP = s => {
        const {columnCount: e=5, children: t=null, ...r} = s,
            {currentOffer: i=null} = bt(),
            n = _.useRef();
        return _.useEffect(() => {
            n && n.current && (n.current.scrollTop = 0)
        }, [i]), i ? g(Mt, {
            innerRef: n,
            columnCount: 5,
            ...r,
            children: [i.products && i.products.length > 0 && i.products.map((o, l) => a($e, {
                itemImage: o.getIconUrl(),
                itemCount: o.productCount
            }, l)), t]
        }) : null
    },
    NP = s => {
        const {gap: e=1, ...t} = s,
            {currentOffer: r=null} = bt();
        return a(P, {
            gap: e,
            alignItems: "center",
            classNames: ["bg-muted", "p-1", "rounded"],
            ...t,
            children: a(RP, {
                separator: !0,
                offer: r
            })
        })
    },
    vX = s => {
        const {page: e=null} = s;
        return g(q, {
            children: [a(g_, {}), g(fe, {
                children: [g(M, {
                    size: 7,
                    overflow: "hidden",
                    children: [!!e.localization.getText(2) && a(y, {
                        dangerouslySetInnerHTML: {
                            __html: e.localization.getText(2)
                        }
                    }), a(M, {
                        grow: !0,
                        overflow: "hidden",
                        className: "bg-muted p-2 rounded",
                        children: a(AP, {
                            fullWidth: !0,
                            className: "nitro-catalog-layout-bundle-grid"
                        })
                    })]
                }), g(M, {
                    size: 5,
                    overflow: "hidden",
                    gap: 1,
                    children: [!!e.localization.getText(1) && a(y, {
                        center: !0,
                        small: !0,
                        overflow: "auto",
                        children: e.localization.getText(1)
                    }), g(M, {
                        grow: !0,
                        position: "relative",
                        overflow: "hidden",
                        gap: 0,
                        children: [!!e.localization.getImage(1) && a("img", {
                            alt: "",
                            className: "flex-grow-1",
                            src: e.localization.getImage(1)
                        }), a(Xa, {
                            position: "absolute",
                            className: "bg-muted rounded bottom-0 start-0"
                        }), a(NP, {
                            position: "absolute",
                            className: "bottom-0 end-0"
                        })]
                    }), a(M, {
                        gap: 1,
                        children: a(cn, {})
                    })]
                })]
            })]
        })
    },
    PX = s => {
        const {page: e=null} = s;
        return g(q, {
            children: [a(g_, {}), g(fe, {
                children: [g(M, {
                    size: 7,
                    overflow: "hidden",
                    children: [!!e.localization.getText(2) && a(y, {
                        dangerouslySetInnerHTML: {
                            __html: e.localization.getText(2)
                        }
                    }), a(M, {
                        grow: !0,
                        overflow: "hidden",
                        className: "bg-muted p-2 rounded",
                        children: a(AP, {
                            fullWidth: !0,
                            className: "nitro-catalog-layout-bundle-grid"
                        })
                    })]
                }), g(M, {
                    size: 5,
                    overflow: "hidden",
                    gap: 1,
                    children: [!!e.localization.getText(1) && a(y, {
                        center: !0,
                        small: !0,
                        overflow: "auto",
                        children: e.localization.getText(1)
                    }), g(M, {
                        grow: !0,
                        position: "relative",
                        overflow: "hidden",
                        gap: 0,
                        children: [!!e.localization.getImage(1) && a("img", {
                            alt: "",
                            className: "flex-grow-1",
                            src: e.localization.getImage(1)
                        }), a(Xa, {
                            position: "absolute",
                            className: "bg-muted rounded bottom-0 start-0"
                        }), a(NP, {
                            position: "absolute",
                            className: "bottom-0 end-0"
                        })]
                    }), a(M, {
                        gap: 1,
                        children: a(cn, {})
                    })]
                })]
            })]
        })
    },
    LX = s => {
        const {page: e=null} = s,
            [t, r] = _.useState(-1),
            [i, n] = _.useState(""),
            {currentOffer: o=null, currentPage: l=null} = bt(),
            c = u => {
                var h;
                return (h = qe().soundManager.musicController) == null ? void 0 : h.playSong(u, Fs.PRIORITY_PURCHASE_PREVIEW, 15, 0, 0, 0)
            };
        return W(NA, u => {
            const h = u.getParser();
            h.officialSongId === i && r(h.songId)
        }), _.useEffect(() => {
            if (!o)
                return;
            const u = o.product;
            if (u) {
                if (u.extraParam.length > 0) {
                    const h = parseInt(u.extraParam);
                    h > 0 ? r(h) : (n(u.extraParam), B(new zb(u.extraParam)))
                } else
                    n(""),
                    r(-1);
                return () => {
                    var h;
                    return (h = qe().soundManager.musicController) == null ? void 0 : h.stop(Fs.PRIORITY_PURCHASE_PREVIEW)
                }
            }
        }, [o]), _.useEffect(() => () => {
            var u;
            return (u = qe().soundManager.musicController) == null ? void 0 : u.stop(Fs.PRIORITY_PURCHASE_PREVIEW)
        }, []), a(q, {
            children: g(fe, {
                children: [g(M, {
                    size: 7,
                    overflow: "hidden",
                    children: [oe("catalog.headers") && a(OP, {
                        imageUrl: l.localization.getImage(0)
                    }), a(Lu, {})]
                }), g(M, {
                    center: !o,
                    size: 5,
                    overflow: "hidden",
                    children: [!o && g(q, {
                        children: [!!e.localization.getImage(1) && a(vn, {
                            imageUrl: e.localization.getImage(1)
                        }), a(y, {
                            center: !0,
                            dangerouslySetInnerHTML: {
                                __html: e.localization.getText(0)
                            }
                        })]
                    }), o && g(q, {
                        children: [g(P, {
                            center: !0,
                            overflow: "hidden",
                            style: {
                                height: 140
                            },
                            children: [o.product.productType !== Ue.BADGE && g(q, {
                                children: [a(io, {}), a(Xa, {
                                    className: "bg-muted rounded bottom-1 end-1"
                                })]
                            }), o.product.productType === Ue.BADGE && a(Xa, {
                                className: "scale-2"
                            })]
                        }), g(M, {
                            grow: !0,
                            gap: 1,
                            children: [a(f_, {
                                fullWidth: !0
                            }), a(y, {
                                grow: !0,
                                truncate: !0,
                                children: o.localizationName
                            }), t > -1 && a(H, {
                                onClick: () => c(t),
                                children: f("play_preview_button")
                            }), g(P, {
                                justifyContent: "between",
                                children: [a(M, {
                                    gap: 1,
                                    children: a($E, {})
                                }), a(ma, {
                                    justifyContent: "end",
                                    alignItems: "end"
                                })]
                            }), a(cn, {})]
                        })]
                    })]
                })]
            })
        })
    },
    UX = ["floors", "walls", "views"],
    wX = s => {
        const {columnCount: e=5, children: t=null, ...r} = s,
            [i, n] = _.useState(null),
            [o, l] = _.useState(-1),
            [c, u] = _.useState(null),
            {currentPage: h=null, currentOffer: d=null, setCurrentOffer: m=null, setPurchaseOptions: p=null} = bt(),
            E = _.useRef(),
            T = S => {
                S && u(A => {
                    const N = [...A];
                    return N[o] = S, N
                })
            };
        if (_.useEffect(() => {
            if (!h)
                return;
            const S = [[], [], []];
            for (const A of h.offers) {
                if (A.pricingModel !== os.PRICING_MODEL_SINGLE && A.pricingModel !== os.PRICING_MODEL_MULTI)
                    continue;
                const N = A.product;
                if (!N || N.productType !== Ue.WALL && N.productType !== Ue.FLOOR || !N.furnitureData)
                    continue;
                switch (N.furnitureData.className) {
                case "floor":
                    S[0].push(A);
                    break;
                case "wallpaper":
                    S[1].push(A);
                    break;
                case "landscape":
                    S[2].push(A);
                    break
                }
            }
            n(S),
            l(0),
            u([S[0][0], S[1][0], S[2][0]])
        }, [h]), _.useEffect(() => {
            o === -1 || !c || m(c[o])
        }, [o, c, m]), _.useEffect(() => {
            o === -1 || !c || !d || p(S => {
                const A = {
                    ...S
                };
                return A.extraData = c[o].product.extraParam, A.extraParamRequired = !0, A
            })
        }, [d, o, c, p]), _.useEffect(() => {
            E && E.current && (E.current.scrollTop = 0)
        }, [o]), !i || o === -1)
            return null;
        const I = i[o];
        return g(q, {
            children: [a(An, {
                children: UX.map((S, A) => a(H, {
                    active: o === A,
                    onClick: N => l(A),
                    children: f(`catalog.spaces.tab.${S}`)
                }, A))
            }), g(Mt, {
                innerRef: E,
                columnCount: e,
                ...r,
                children: [I && I.length > 0 && I.map((S, A) => a(ZE, {
                    itemActive: d && d === S,
                    offer: S,
                    selectOffer: N => T(N)
                }, A)), t]
            })]
        })
    },
    FX = s => {
        const {page: e=null} = s,
            {currentOffer: t=null, roomPreviewer: r=null} = bt();
        return _.useEffect(() => {
            r.updatePreviewObjectBoundingRectangle(new wi)
        }, [r]), g(fe, {
            children: [a(M, {
                size: 7,
                overflow: "hidden",
                children: a(wX, {})
            }), g(M, {
                center: !t,
                size: 5,
                overflow: "hidden",
                children: [!t && g(q, {
                    children: [!!e.localization.getImage(1) && a("img", {
                        alt: "",
                        src: e.localization.getImage(1)
                    }), a(y, {
                        center: !0,
                        dangerouslySetInnerHTML: {
                            __html: e.localization.getText(0)
                        }
                    })]
                }), t && g(q, {
                    children: [a(k, {
                        position: "relative",
                        overflow: "hidden",
                        children: a(io, {})
                    }), g(M, {
                        grow: !0,
                        gap: 1,
                        children: [a(y, {
                            grow: !0,
                            truncate: !0,
                            children: t.localizationName
                        }), a(P, {
                            justifyContent: "end",
                            children: a(ma, {
                                alignItems: "end"
                            })
                        }), a(cn, {})]
                    })]
                })]
            })]
        })
    },
    xX = s => {
        const {page: e=null} = s,
            [t, r] = _.useState(""),
            {currentOffer: i=null, setPurchaseOptions: n=null} = bt();
        return _.useEffect(() => {
            i && n(o => {
                const l = {
                    ...o
                };
                return l.extraData = t, l
            })
        }, [i, t, n]), g(fe, {
            children: [g(M, {
                size: 7,
                overflow: "hidden",
                children: [a(Lu, {}), a("textarea", {
                    className: "flex-grow-1 form-control w-100",
                    defaultValue: t || "",
                    onChange: o => r(o.target.value)
                })]
            }), g(M, {
                center: !i,
                size: 5,
                overflow: "hidden",
                children: [!i && g(q, {
                    children: [!!e.localization.getImage(1) && a("img", {
                        alt: "",
                        src: e.localization.getImage(1)
                    }), a(y, {
                        center: !0,
                        dangerouslySetInnerHTML: {
                            __html: e.localization.getText(0)
                        }
                    })]
                }), i && g(q, {
                    children: [a(io, {}), g(M, {
                        grow: !0,
                        gap: 1,
                        children: [a(y, {
                            grow: !0,
                            truncate: !0,
                            children: i.localizationName
                        }), a(P, {
                            justifyContent: "end",
                            children: a(ma, {
                                alignItems: "end"
                            })
                        }), a(cn, {})]
                    })]
                })]
            })]
        })
    },
    GX = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(Pt.NONE),
            {currentPage: n=null, catalogOptions: o=null} = bt(),
            {purse: l=null, getCurrencyAmount: c=null} = Qo(),
            {clubOffers: u=null} = o,
            h = _.useCallback(A => {
                switch (A.type) {
                case oa.PURCHASE_SUCCESS:
                    i(Pt.NONE);
                    return;
                case ko.PURCHASE_FAILED:
                    i(Pt.FAILED);
                    return
                }
            }, []);
        hs(oa.PURCHASE_SUCCESS, h),
        hs(ko.PURCHASE_FAILED, h);
        const d = _.useCallback(A => {
                let N = "";
                return A.months > 0 && (N = f("catalog.vip.item.header.months", ["num_months"], [A.months.toString()])), A.extraDays > 0 && (N !== "" && (N += " "), N += " " + f("catalog.vip.item.header.days", ["num_days"], [A.extraDays.toString()])), N
            }, []),
            m = _.useCallback(() => {
                if (!l)
                    return "";
                const A = l.clubDays > 0 || l.clubPeriods > 0 ? "extension." : "subscription.",
                    N = e.months === 0 ? "days" : "months",
                    b = e.months === 0 ? e.extraDays : e.months;
                return f("catalog.vip.buy.confirm." + A + N).replace("%NUM_" + N.toUpperCase() + "%", b.toString())
            }, [e, l]),
            p = _.useCallback(() => {
                let A = f("catalog.vip.buy.confirm.end_date");
                return A = A.replace("%month%", e.month.toString()), A = A.replace("%day%", e.day.toString()), A = A.replace("%year%", e.year.toString()), A
            }, [e]),
            E = _.useMemo(() => {
                const A = l.clubDays,
                    b = l.clubPeriods * 31 + A;
                return f("catalog.vip.extend.info", ["days"], [b.toString()])
            }, [l]),
            T = _.useCallback(() => {
                e && (i(Pt.PURCHASE), B(new uu(n.pageId, e.offerId, null, 1)))
            }, [e, n]),
            I = _.useCallback(A => {
                i(Pt.NONE),
                t(A)
            }, []),
            S = _.useCallback(() => {
                if (!e)
                    return null;
                if (e.priceCredits > c(-1))
                    return a(H, {
                        fullWidth: !0,
                        variant: "danger",
                        children: f("catalog.alert.notenough.title")
                    });
                if (e.priceActivityPoints > c(e.priceActivityPointsType))
                    return a(H, {
                        fullWidth: !0,
                        variant: "danger",
                        children: f("catalog.alert.notenough.activitypoints.title." + e.priceActivityPointsType)
                    });
                switch (r) {
                case Pt.CONFIRM:
                    return a(H, {
                        fullWidth: !0,
                        variant: "warning",
                        onClick: T,
                        children: f("catalog.marketplace.confirm_title")
                    });
                case Pt.PURCHASE:
                    return a(H, {
                        fullWidth: !0,
                        variant: "primary",
                        disabled: !0,
                        children: a(YE, {})
                    });
                case Pt.FAILED:
                    return a(H, {
                        fullWidth: !0,
                        variant: "danger",
                        disabled: !0,
                        children: f("generic.failed")
                    });
                case Pt.NONE:
                default:
                    return a(H, {
                        fullWidth: !0,
                        variant: "success",
                        onClick: () => i(Pt.CONFIRM),
                        children: f("buy")
                    })
                }
            }, [e, r, T, c]);
        return _.useEffect(() => {
            u || B(new cN(1))
        }, [u]), g(fe, {
            children: [g(M, {
                fullHeight: !0,
                size: 7,
                overflow: "hidden",
                justifyContent: "between",
                children: [a(Mt, {
                    columnCount: 1,
                    className: "nitro-catalog-layout-vip-buy-grid",
                    children: u && u.length > 0 && u.map((A, N) => g($e, {
                        column: !1,
                        center: !1,
                        alignItems: "center",
                        justifyContent: "between",
                        itemActive: e === A,
                        className: "p-1",
                        onClick: () => I(A),
                        children: [a("i", {
                            className: "icon-hc-banner"
                        }), g(M, {
                            justifyContent: "end",
                            gap: 0,
                            children: [a(y, {
                                textEnd: !0,
                                children: d(A)
                            }), g(P, {
                                justifyContent: "end",
                                gap: 1,
                                children: [A.priceCredits > 0 && g(P, {
                                    alignItems: "center",
                                    justifyContent: "end",
                                    gap: 1,
                                    children: [a(y, {
                                        children: A.priceCredits
                                    }), a(us, {
                                        type: -1
                                    })]
                                }), A.priceActivityPoints > 0 && g(P, {
                                    alignItems: "center",
                                    justifyContent: "end",
                                    gap: 1,
                                    children: [a(y, {
                                        children: A.priceActivityPoints
                                    }), a(us, {
                                        type: A.priceActivityPointsType
                                    })]
                                })]
                            })]
                        })]
                    }, N))
                }), a(y, {
                    center: !0,
                    dangerouslySetInnerHTML: {
                        __html: f("catalog.vip.buy.hccenter")
                    }
                })]
            }), g(M, {
                size: 5,
                overflow: "hidden",
                children: [g(M, {
                    fullHeight: !0,
                    center: !0,
                    overflow: "hidden",
                    children: [n.localization.getImage(1) && a("img", {
                        alt: "",
                        src: n.localization.getImage(1)
                    }), a(y, {
                        center: !0,
                        overflow: "auto",
                        dangerouslySetInnerHTML: {
                            __html: E
                        }
                    })]
                }), e && g(M, {
                    fullWidth: !0,
                    grow: !0,
                    justifyContent: "end",
                    children: [g(P, {
                        alignItems: "end",
                        children: [g(M, {
                            grow: !0,
                            gap: 0,
                            children: [a(y, {
                                fontWeight: "bold",
                                children: m()
                            }), a(y, {
                                children: p()
                            })]
                        }), g(M, {
                            gap: 1,
                            children: [e.priceCredits > 0 && g(P, {
                                alignItems: "center",
                                justifyContent: "end",
                                gap: 1,
                                children: [a(y, {
                                    children: e.priceCredits
                                }), a(us, {
                                    type: -1
                                })]
                            }), e.priceActivityPoints > 0 && g(P, {
                                alignItems: "center",
                                justifyContent: "end",
                                gap: 1,
                                children: [a(y, {
                                    children: e.priceActivityPoints
                                }), a(us, {
                                    type: e.priceActivityPointsType
                                })]
                            })]
                        })]
                    }), S()]
                })]
            })]
        })
    },
    BX = s => {
        const {text: e=null} = s,
            [t, r] = _.useState(""),
            [i, n] = _.useState(!1),
            {simpleAlert: o=null} = Yt(),
            l = () => {
                !t || !t.length || i || (B(new EN(t)), n(!0))
            };
        return W(CO, c => {
            const u = c.getParser();
            let h = f("catalog.alert.voucherredeem.ok.description");
            u.productName && (h = f("catalog.alert.voucherredeem.ok.description.furni", ["productName", "productDescription"], [u.productName, u.productDescription])),
            o(h, null, null, null, f("catalog.alert.voucherredeem.ok.title")),
            n(!1),
            r("")
        }), W(SO, c => {
            const u = c.getParser();
            o(f(`catalog.alert.voucherredeem.error.description.${u.errorCode}`), null, null, null, f("catalog.alert.voucherredeem.error.title")),
            n(!1)
        }), g(P, {
            gap: 1,
            children: [a("input", {
                type: "text",
                className: "form-control form-control-sm",
                placeholder: e,
                value: t,
                onChange: c => r(c.target.value)
            }), a(H, {
                variant: "primary",
                onClick: l,
                disabled: i,
                children: a(dL, {
                    className: "fa-icon"
                })
            })]
        })
    },
    zu = s => {
        const {item: e=null, position: t="relative", pointer: r=!0, overflow: i="hidden", fullHeight: n=!0, classNames: o=[], children: l=null, ...c} = s,
            u = _.useMemo(() => {
                const d = ["rounded", "nitro-front-page-item"];
                return o.length && d.push(...o), d
            }, [o]);
        if (!e)
            return null;
        const h = oe("image.library.url") + e.itemPromoImage;
        return g(qv, {
            imageUrl: h,
            classNames: u,
            position: t,
            fullHeight: n,
            pointer: r,
            overflow: i,
            ...c,
            children: [a(y, {
                position: "absolute",
                variant: "white",
                className: "bg-dark rounded p-2 m-2 bottom-0",
                children: e.itemName
            }), l]
        })
    },
    kX = s => {
        const {page: e=null, hideNavigation: t=null} = s,
            {frontPageItems: r=[]} = bt(),
            i = _.useCallback(n => {
                switch (n.type) {
                case wl.ITEM_CATALOGUE_PAGE:
                    ge(`catalog/open/${n.catalogPageLocation}`);
                    return;
                case wl.ITEM_PRODUCT_OFFER:
                    ge(`catalog/open/${n.productOfferId}`);
                    return
                }
            }, []);
        return _.useEffect(() => {
            t()
        }, [e, t]), g(fe, {
            children: [a(M, {
                size: 4,
                children: r[0] && a(zu, {
                    item: r[0],
                    onClick: n => i(r[0])
                })
            }), g(M, {
                size: 8,
                children: [r[1] && a(zu, {
                    item: r[1],
                    onClick: n => i(r[1])
                }), r[2] && a(zu, {
                    item: r[2],
                    onClick: n => i(r[2])
                }), r[3] && a(zu, {
                    item: r[3],
                    onClick: n => i(r[3])
                }), a(BX, {
                    text: e.localization.getText(1)
                })]
            })]
        })
    },
    xf = 1,
    Sh = 2,
    yP = s => {
        const {offerData: e=null, type: t=Sh, onClick: r=null} = s,
            i = _.useMemo(() => e ? f((e.furniType === 2 ? "wallItem" : "roomItem") + `.name.${e.furniId}`) : "", [e]),
            n = _.useCallback(() => {
                if (!e)
                    return "";
                if (e.status === Bo.SOLD)
                    return f("catalog.marketplace.offer.sold");
                if (e.timeLeftMinutes <= 0)
                    return f("catalog.marketplace.offer.expired");
                const o = Math.max(1, e.timeLeftMinutes),
                    l = Math.floor(o / 60);
                let u = o - l * 60 + " " + f("catalog.marketplace.offer.minutes");
                return l > 0 && (u = l + " " + f("catalog.marketplace.offer.hours") + " " + u), f("catalog.marketplace.offer.time_left", ["time"], [u])
            }, [e]);
        return g($e, {
            shrink: !0,
            center: !1,
            column: !1,
            alignItems: "center",
            className: "p-1",
            children: [a(M, {
                style: {
                    width: 40,
                    height: 40
                },
                children: a($e, {
                    column: !1,
                    itemImage: IK(e.furniType === Au.TYPE_FLOOR ? Ue.FLOOR : Ue.WALL, e.furniId, e.extraData),
                    itemUniqueNumber: e.isUniqueLimitedItem ? e.stuffData.uniqueNumber : 0
                })
            }), g(M, {
                grow: !0,
                gap: 0,
                children: [a(y, {
                    fontWeight: "bold",
                    children: i
                }), t === xf && g(q, {
                    children: [a(y, {
                        children: f("catalog.marketplace.offer.price_own_item", ["price"], [new Intl.NumberFormat("en-US", {
                            minimumFractionDigits: 0,
                            maximumFractionDigits: 0
                        }).format(e.price)])
                    }), "                        ", a(y, {
                        children: n()
                    })]
                }), t === Sh && g(q, {
                    children: [a(y, {
                        children: f("catalog.marketplace.offer.price_public_item", ["price", "average"], [new Intl.NumberFormat("en-US", {
                            minimumFractionDigits: 0,
                            maximumFractionDigits: 0
                        }).format(e.price), e.averagePrice > 0 ? new Intl.NumberFormat("en-US", {
                            minimumFractionDigits: 0,
                            maximumFractionDigits: 0
                        }).format(e.averagePrice) : "-"])
                    }), a(y, {
                        children: f("catalog.marketplace.offer_count", ["count"], [e.offerCount.toString()])
                    })]
                })]
            }), g(M, {
                gap: 1,
                children: [t === xf && e.status !== Bo.SOLD && a(H, {
                    variant: "secondary",
                    onClick: () => r(e),
                    children: f("catalog.marketplace.offer.pick")
                }), t === Sh && g(q, {
                    children: [a(H, {
                        variant: "secondary",
                        onClick: () => r(e),
                        children: f("buy")
                    }), a(H, {
                        variant: "secondary",
                        disabled: !0,
                        children: f("catalog.marketplace.view_more")
                    })]
                })]
            })]
        })
    },
    VX = s => {
        const [e, t] = _.useState(0),
            [r, i] = _.useState([]),
            {simpleAlert: n=null} = Yt();
        W(US, u => {
            const h = u.getParser();
            if (!h)
                return;
            const d = h.offers.map(m => {
                const p = new Au(m.offerId, m.furniId, m.furniType, m.extraData, m.stuffData, m.price, m.status, m.averagePrice, m.offerCount);
                return p.timeLeftMinutes = m.timeLeftMinutes, p
            });
            t(h.creditsWaiting),
            i(d)
        }),
        W(DS, u => {
            const h = u.getParser();
            if (h) {
                if (!h.success) {
                    n(f("catalog.marketplace.cancel_failed"), we.DEFAULT, null, null, f("catalog.marketplace.operation_failed.topic"));
                    return
                }
                i(d => d.filter(m => m.offerId !== h.offerId))
            }
        });
        const o = _.useMemo(() => r.filter(u => u.status === Bo.SOLD), [r]),
            l = _.useCallback(() => {
                i(u => {
                    const h = o.map(d => d.offerId);
                    return u.filter(d => h.indexOf(d.offerId) === -1)
                }),
                B(new jy)
            }, [o]),
            c = u => {
                B(new Gy(u.offerId))
            };
        return _.useEffect(() => {
            B(new Vy)
        }, []), g(M, {
            overflow: "hidden",
            children: [e <= 0 && a(y, {
                center: !0,
                className: "bg-muted rounded p-1",
                children: f("catalog.marketplace.redeem.no_sold_items")
            }), e > 0 && g(M, {
                center: !0,
                gap: 1,
                className: "bg-muted rounded p-2",
                children: [a(y, {
                    children: f("catalog.marketplace.redeem.get_credits", ["count", "credits"], [o.length.toString(), e.toString()])
                }), a(H, {
                    className: "mt-1",
                    onClick: l,
                    children: f("catalog.marketplace.offer.redeem")
                })]
            }), g(M, {
                gap: 1,
                overflow: "hidden",
                children: [a(y, {
                    truncate: !0,
                    shrink: !0,
                    fontWeight: "bold",
                    children: f("catalog.marketplace.items_found", ["count"], [r.length.toString()])
                }), a(M, {
                    overflow: "auto",
                    className: "nitro-catalog-layout-marketplace-grid",
                    children: r.length > 0 && r.map(u => a(yP, {
                        offerData: u,
                        type: xf,
                        onClick: c
                    }, u.offerId))
                })]
            })]
        })
    },
    HX = s => {
        const {searchType: e=null, sortTypes: t=null, onSearch: r=null} = s,
            [i, n] = _.useState(t ? t[0] : 3),
            [o, l] = _.useState(""),
            [c, u] = _.useState(0),
            [h, d] = _.useState(0),
            m = _.useCallback(E => {
                n(E),
                (e === er.BY_ACTIVITY || e === er.BY_VALUE) && r({
                    minPrice: -1,
                    maxPrice: -1,
                    query: "",
                    type: E
                })
            }, [r, e]),
            p = _.useCallback(() => {
                const E = c > 0 ? c : -1,
                    T = h > 0 ? h : -1;
                r({
                    minPrice: E,
                    maxPrice: T,
                    type: i,
                    query: o
                })
            }, [h, c, r, o, i]);
        return _.useEffect(() => {
            if (!t || !t.length)
                return;
            const E = t[0];
            n(E),
            (e === er.BY_ACTIVITY || er.BY_VALUE === e) && r({
                minPrice: -1,
                maxPrice: -1,
                query: "",
                type: E
            })
        }, [r, e, t]), g(M, {
            gap: 1,
            children: [g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(y, {
                    className: "col-3",
                    children: f("catalog.marketplace.sort_order")
                }), a("select", {
                    className: "form-select form-select-sm",
                    value: i,
                    onChange: E => m(parseInt(E.target.value)),
                    children: t.map(E => a("option", {
                        value: E,
                        children: f(`catalog.marketplace.sort.${E}`)
                    }, E))
                })]
            }), e === er.ADVANCED && g(q, {
                children: [g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a(y, {
                        className: "col-3",
                        children: f("catalog.marketplace.search_name")
                    }), a("input", {
                        className: "form-control form-control-sm",
                        type: "text",
                        value: o,
                        onChange: E => l(E.target.value)
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a(y, {
                        className: "col-3",
                        children: f("catalog.marketplace.search_price")
                    }), g(P, {
                        fullWidth: !0,
                        gap: 1,
                        children: [a("input", {
                            className: "form-control form-control-sm",
                            type: "number",
                            min: 0,
                            value: c,
                            onChange: E => u(E.target.valueAsNumber)
                        }), a("input", {
                            className: "form-control form-control-sm",
                            type: "number",
                            min: 0,
                            value: h,
                            onChange: E => d(E.target.valueAsNumber)
                        })]
                    })]
                }), a(H, {
                    variant: "secondary",
                    className: "mx-auto",
                    onClick: p,
                    children: f("generic.search")
                })]
            })]
        })
    },
    jX = [1, 2],
    WX = [3, 4, 5, 6],
    YX = [1, 2, 3, 4, 5, 6],
    zX = s => {
        const [e, t] = _.useState(er.BY_ACTIVITY),
            [r, i] = _.useState(0),
            [n, o] = _.useState(new Map),
            [l, c] = _.useState({
                minPrice: -1,
                maxPrice: -1,
                query: "",
                type: 3
            }),
            {getCurrencyAmount: u=null} = Qo(),
            {simpleAlert: h=null, showConfirm: d=null} = Yt(),
            m = _.useCallback(T => {
                c(T),
                B(new ky(T.minPrice, T.maxPrice, T.query, T.type))
            }, []),
            p = _.useMemo(() => {
                switch (e) {
                case er.BY_ACTIVITY:
                    return WX;
                case er.BY_VALUE:
                    return jX;
                case er.ADVANCED:
                    return YX
                }
                return []
            }, [e]),
            E = _.useCallback(T => {
                if (T.price > u(-1)) {
                    h(f("catalog.alert.notenough.credits.description"), we.DEFAULT, null, null, f("catalog.alert.notenough.title"));
                    return
                }
                const I = T.offerId;
                d(f("catalog.marketplace.confirm_header"), () => {
                    B(new sf(I))
                }, null, null, null, f("catalog.marketplace.confirm_title"))
            }, [u, h, d]);
        return W(LS, T => {
            const I = T.getParser();
            if (!I)
                return;
            const S = new Map;
            I.offers.forEach(A => {
                const N = new Au(A.offerId, A.furniId, A.furniType, A.extraData, A.stuffData, A.price, A.status, A.averagePrice, A.offerCount);
                N.timeLeftMinutes = A.timeLeftMinutes,
                S.set(A.offerId, N)
            }),
            i(I.totalItemsFound),
            o(S)
        }), W(bS, T => {
            const I = T.getParser();
            if (I)
                switch (I.result) {
                case 1:
                    m(l);
                    break;
                case 2:
                    o(S => {
                        const A = new Map(S);
                        return A.delete(I.requestedOfferId), A
                    }),
                    h(f("catalog.marketplace.not_available_header"), we.DEFAULT, null, null, f("catalog.marketplace.not_available_title"));
                    break;
                case 3:
                    o(S => {
                        const A = new Map(S),
                            N = A.get(I.requestedOfferId);
                        return N && (N.offerId = I.offerId, N.price = I.newPrice, N.offerCount--, A.set(N.offerId, N)), A.delete(I.requestedOfferId), A
                    }),
                    d(f("catalog.marketplace.confirm_higher_header") + `
`
                    + f("catalog.marketplace.confirm_price", ["price"], [I.newPrice.toString()]), () => {
                        B(new sf(I.offerId))
                    }, null, null, null, f("catalog.marketplace.confirm_higher_title"));
                    break;
                case 4:
                    h(f("catalog.alert.notenough.credits.description"), we.DEFAULT, null, null, f("catalog.alert.notenough.title"));
                    break
                }
        }), g(q, {
            children: [g(An, {
                children: [a(H, {
                    active: e === er.BY_ACTIVITY,
                    onClick: () => t(er.BY_ACTIVITY),
                    children: f("catalog.marketplace.search_by_activity")
                }), a(H, {
                    active: e === er.BY_VALUE,
                    onClick: () => t(er.BY_VALUE),
                    children: f("catalog.marketplace.search_by_value")
                }), a(H, {
                    active: e === er.ADVANCED,
                    onClick: () => t(er.ADVANCED),
                    children: f("catalog.marketplace.search_advanced")
                })]
            }), a(HX, {
                sortTypes: p,
                searchType: e,
                onSearch: m
            }), g(M, {
                gap: 1,
                overflow: "hidden",
                children: [a(y, {
                    truncate: !0,
                    shrink: !0,
                    fontWeight: "bold",
                    children: f("catalog.marketplace.items_found", ["count"], [n.size.toString()])
                }), a(M, {
                    className: "nitro-catalog-layout-marketplace-grid",
                    overflow: "auto",
                    children: Array.from(n.values()).map((T, I) => a(yP, {
                        offerData: T,
                        type: Sh,
                        onClick: E
                    }, I))
                })]
            })]
        })
    },
    KX = s => {
        const {page: e=null} = s,
            [t, r] = _.useState(-1),
            [i, n] = _.useState([]),
            [o, l] = _.useState(-1),
            [c, u] = _.useState([]),
            [h, d] = _.useState(-1),
            [m, p] = _.useState(!1),
            [E, T] = _.useState("");
        _.useState(!0);
        const [I, S] = _.useState(-1),
            {currentOffer: A=null, setCurrentOffer: N=null, setPurchaseOptions: b=null, catalogOptions: v=null, roomPreviewer: D=null} = bt(),
            {petPalettes: G=null} = v,
            x = _.useMemo(() => !c.length || h === -1 ? 16777215 : c[h][0], [c, h]),
            F = _.useMemo(() => t === -1 || !i.length || o === -1 ? "" : f(`pet.breed.${t}.${i[o].breedId}`), [t, i, o]),
            U = _.useMemo(() => {
                if (!i.length || o === -1)
                    return "";
                const j = i[o].paletteId;
                let J = 16777215;
                if (t <= 7) {
                    if (h === -1)
                        return "";
                    J = c[h][0]
                }
                let X = J.toString(16).toUpperCase();
                for (; X.length < 6;)
                    X = "0" + X;
                return `${j}
${X}`
            }, [i, o, t, c, h]),
            z = _.useMemo(() => {
                let j = "";
                switch (I) {
                case 1:
                    j = "catalog.alert.petname.long";
                    break;
                case 2:
                    j = "catalog.alert.petname.short";
                    break;
                case 3:
                    j = "catalog.alert.petname.chars";
                    break;
                case 4:
                    j = "catalog.alert.petname.bobba";
                    break
                }
                return !j || !j.length ? "" : f(j)
            }, [I]),
            Q = _.useCallback(() => {
                if (I === -1) {
                    B(new Qb(E, 1));
                    return
                }
                if (I === 0) {
                    B(new uu(e.pageId, A.offerId, `${E}
${U}`, 1));
                    return
                }
            }, [e, A, E, U, I]);
        return W(DA, j => {
            const J = j.getParser();
            S(J.result),
            J.result === 0 ? Q() : Ms(new ko(-1))
        }), _.useEffect(() => {
            if (!e || !e.offers.length)
                return;
            const j = e.offers[0];
            N(j),
            r(mK(j.localizationId)),
            p(!1)
        }, [e, N]), _.useEffect(() => {
            if (!A)
                return;
            const j = A.product.productData;
            if (j) {
                if (G)
                    for (const J of G) {
                        if (J.breed !== j.type)
                            continue;
                        const X = [];
                        for (const K of J.palettes)
                            K.sellable && X.push(K);
                        l(X.length ? 0 : -1),
                        n(X);
                        return
                    }
                l(-1),
                n([]),
                B(new _N(j.type))
            }
        }, [A, G]), _.useEffect(() => {
            if (t === -1)
                return;
            const j = EK(t, i);
            d(j.length ? 0 : -1),
            u(j)
        }, [t, i]), _.useEffect(() => {
            if (!D || (D.reset(!1), t === -1 || !i.length || o === -1))
                return;
            let j = `${t} ${i[o].paletteId}`;
            t <= 7 && (j += ` ${x.toString(16)}`),
            D.addPetIntoRoom(j)
        }, [D, t, i, o, x]), _.useEffect(() => {
            S(-1)
        }, [E]), A ? g(fe, {
            children: [a(M, {
                size: 7,
                overflow: "hidden",
                children: g(Mt, {
                    columnCount: 5,
                    children: [!m && i.length > 0 && i.map((j, J) => a($e, {
                        itemActive: o === J,
                        onClick: X => l(J),
                        children: a(In, {
                            typeId: t,
                            paletteId: j.paletteId,
                            direction: 2,
                            headOnly: !0
                        })
                    }, J)), m && c.length > 0 && c.map((j, J) => a($e, {
                        itemHighlight: !0,
                        itemActive: h === J,
                        itemColor: nr.int2rgb(j[0]),
                        className: "clear-bg",
                        onClick: X => d(J)
                    }, J))]
                })
            }), g(M, {
                center: !A,
                size: 5,
                overflow: "hidden",
                children: [!A && g(q, {
                    children: [!!e.localization.getImage(1) && a("img", {
                        alt: "",
                        src: e.localization.getImage(1)
                    }), a(y, {
                        center: !0,
                        dangerouslySetInnerHTML: {
                            __html: e.localization.getText(0)
                        }
                    })]
                }), A && g(q, {
                    children: [g(k, {
                        position: "relative",
                        overflow: "hidden",
                        children: [a(io, {}), a(Xa, {
                            position: "absolute",
                            className: "bg-muted rounded bottom-1 end-1"
                        }), t > -1 && t <= 7 && a(H, {
                            position: "absolute",
                            className: "bottom-1 start-1",
                            onClick: j => p(!m),
                            children: a(nT, {
                                className: "fa-icon"
                            })
                        })]
                    }), g(M, {
                        grow: !0,
                        gap: 1,
                        children: [a(y, {
                            truncate: !0,
                            children: F
                        }), g(M, {
                            grow: !0,
                            gap: 1,
                            children: [a("input", {
                                type: "text",
                                className: "form-control form-control-sm w-100",
                                placeholder: f("widgets.petpackage.name.title"),
                                value: E,
                                onChange: j => T(j.target.value)
                            }), I > 0 && a(k, {
                                className: "invalid-feedback d-block m-0",
                                children: z
                            })]
                        }), a(P, {
                            justifyContent: "end",
                            children: a(ma, {
                                justifyContent: "end",
                                alignItems: "end"
                            })
                        }), a(cn, {
                            purchaseCallback: Q
                        })]
                    })]
                })]
            })]
        }) : null
    },
    qX = s => {
        const {offer: e=null, isAvailable: t=!1, daysRequired: r=0, onSelect: i=null} = s,
            n = _.useCallback(() => {
                if (!e || !e.products.length)
                    return "";
                const l = e.products[0];
                return Oh.getProductImageUrl(l.productType, l.furniClassId, l.extraParam)
            }, [e]),
            o = _.useCallback(() => {
                if (!e || !e.products.length)
                    return "";
                const l = e.products[0],
                    c = Oh.getProductCategory(l.productType, l.furniClassId) === 2 ? "wallItem.name." + l.furniClassId : "roomItem.name." + l.furniClassId;
                return f(c)
            }, [e]);
        return _.useCallback(() => {
            if (!e || !e.products.length)
                return "";
            const l = e.products[0],
                c = Oh.getProductCategory(l.productType, l.furniClassId) === 2 ? "wallItem.desc." + l.furniClassId : "roomItem.desc." + l.furniClassId;
            return f(c)
        }, [e]), _.useCallback(() => Math.floor(r / 31), [r]), g($e, {
            center: !1,
            column: !1,
            alignItems: "center",
            className: "p-1",
            children: [a(vn, {
                imageUrl: n()
            }), a(y, {
                grow: !0,
                fontWeight: "bold",
                children: o()
            }), a(H, {
                variant: "secondary",
                onClick: () => i(e.localizationId),
                disabled: !t,
                children: f("catalog.club_gift.select")
            })]
        })
    },
    XX = s => {
        const {purse: e=null} = Qo(),
            {catalogOptions: t=null, setCatalogOptions: r=null} = bt(),
            {clubGifts: i=null} = t,
            {showConfirm: n=null} = Yt(),
            o = _.useCallback(() => i ? i.giftsAvailable > 0 ? f("catalog.club_gift.available", ["amount"], [i.giftsAvailable.toString()]) : i.daysUntilNextGift > 0 ? f("catalog.club_gift.days_until_next", ["days"], [i.daysUntilNextGift.toString()]) : e.isVip ? f("catalog.club_gift.not_available") : f("catalog.club_gift.no_club") : "", [i, e]),
            l = _.useCallback(u => {
                n(f("catalog.club_gift.confirm"), () => {
                    B(new pN(u)),
                    r(h => (h.clubGifts.giftsAvailable--, {
                        ...h
                    }))
                }, null)
            }, [r, n]),
            c = _.useMemo(() => i.offers.sort((h, d) => i.getOfferExtraData(h.offerId).daysRequired - i.getOfferExtraData(d.offerId).daysRequired), [i]);
        return g(q, {
            children: [a(y, {
                truncate: !0,
                shrink: !0,
                fontWeight: "bold",
                children: o()
            }), a(Mt, {
                columnCount: 1,
                className: "nitro-catalog-layout-vip-gifts-grid",
                children: i.offers.length > 0 && c.map(u => a(qX, {
                    offer: u,
                    isAvailable: i.getOfferExtraData(u.offerId).isSelectable && i.giftsAvailable > 0,
                    onSelect: l,
                    daysRequired: i.getOfferExtraData(u.offerId).daysRequired
                }, u.offerId))
            })]
        })
    },
    QX = (s, e) => {
        if (!s)
            return null;
        const t = {
            page: s,
            hideNavigation: e
        };
        switch (s.layoutCode) {
        case "frontpage_featured":
            return null;
        case "frontpage4":
            return a(kX, {
                ...t
            });
        case "pets":
            return a(KX, {
                ...t
            });
        case "pets2":
            return a(bX, {
                ...t
            });
        case "pets3":
            return a(CP, {
                ...t
            });
        case "vip_buy":
            return a(GX, {
                ...t
            });
        case "guild_frontpage":
            return a(yX, {
                ...t
            });
        case "guild_forum":
            return a(NX, {
                ...t
            });
        case "guild_custom_furni":
            return a(AX, {
                ...t
            });
        case "club_gifts":
            return a(XX, {
                ...t
            });
        case "marketplace_own_items":
            return a(VX, {
                ...t
            });
        case "marketplace":
            return a(zX, {
                ...t
            });
        case "single_bundle":
            return a(PX, {
                ...t
            });
        case "room_bundle":
            return a(vX, {
                ...t
            });
        case "spaces_new":
            return a(FX, {
                ...t
            });
        case "trophies":
            return a(xX, {
                ...t
            });
        case "info_loyalty":
            return a(MX, {
                ...t
            });
        case "badge_display":
            return a(IX, {
                ...t
            });
        case "roomads":
            return a(DX, {
                ...t
            });
        case "default_3x3_color_grouping":
            return a(OX, {
                ...t
            });
        case "soundmachine":
            return a(LX, {
                ...t
            });
        case "bots":
        case "default_3x3":
        default:
            return a(SX, {
                ...t
            })
        }
    },
    JX = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(0),
            [n, o] = _.useState("0"),
            {catalogOptions: l=null, setCatalogOptions: c=null} = bt(),
            {marketplaceConfiguration: u=null} = l,
            {showConfirm: h=null} = Yt(),
            d = I => {
                o(I);
                const S = parseInt(I);
                isNaN(S) || S === r || i(parseInt(I))
            };
        if (W(vS, I => {
            const S = I.getParser();
            c(A => {
                const N = {
                    ...A
                };
                return N.marketplaceConfiguration = S, N
            })
        }), hs(XE.POST_MARKETPLACE, I => t(I.item)), _.useEffect(() => {
            !e || u || B(new By)
        }, [e, u]), _.useEffect(() => {
            if (e)
                return () => i(0)
        }, [e]), !u || !e)
            return null;
        const m = e ? f(e.isWallItem ? "wallItem.name." + e.type : "roomItem.name." + e.type) : "",
            p = e ? f(e.isWallItem ? "wallItem.desc." + e.type : "roomItem.desc." + e.type) : "",
            E = () => Math.max(Math.ceil(u.commission * .01 * r), 1),
            T = () => {
                !e || r < u.minimumPrice || h(f("inventory.marketplace.confirm_offer.info", ["furniname", "price"], [m, new Intl.NumberFormat("en-US", {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(r)]), () => {
                    B(new Hy(r, e.isWallItem ? 2 : 1, e.id)),
                    t(null)
                }, () => {
                    t(null)
                }, null, null, f("inventory.marketplace.confirm_offer.title"))
            };
        return g(Se, {
            className: "nitro-catalog-layout-marketplace-post-offer",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("inventory.marketplace.make_offer.title"),
                onCloseClick: I => {
                    t(null),
                    i(0),
                    o("0")
                }
            }), a(Ie, {
                overflow: "hidden",
                children: g(fe, {
                    fullHeight: !0,
                    children: [a(M, {
                        center: !0,
                        className: "bg-muted rounded p-2",
                        size: 4,
                        overflow: "hidden",
                        children: a(WE, {
                            productType: e.isWallItem ? Ue.WALL : Ue.FLOOR,
                            productClassId: e.type,
                            extraData: e.extra.toString()
                        })
                    }), g(M, {
                        size: 8,
                        justifyContent: "between",
                        overflow: "hidden",
                        children: [g(M, {
                            grow: !0,
                            gap: 1,
                            children: [a(y, {
                                fontWeight: "bold",
                                children: m
                            }), a(y, {
                                truncate: !0,
                                shrink: !0,
                                children: p
                            })]
                        }), g(M, {
                            overflow: "auto",
                            children: [a(y, {
                                italics: !0,
                                children: f("inventory.marketplace.make_offer.expiration_info", ["time"], [u.offerTime.toString()])
                            }), g("div", {
                                className: "input-group has-validation",
                                children: [a("input", {
                                    className: "form-control form-control-sm",
                                    type: "number",
                                    min: 0,
                                    value: n,
                                    onChange: I => d(I.target.value),
                                    placeholder: f("inventory.marketplace.make_offer.price_request")
                                }), (r < u.minimumPrice || isNaN(r)) && a(k, {
                                    className: "invalid-feedback d-block",
                                    children: f("inventory.marketplace.make_offer.min_price", ["minprice"], [new Intl.NumberFormat("en-US", {
                                        minimumFractionDigits: 0,
                                        maximumFractionDigits: 0
                                    }).format(u.minimumPrice)])
                                }), r > u.maximumPrice && !isNaN(r) && a(k, {
                                    className: "invalid-feedback d-block",
                                    children: f("inventory.marketplace.make_offer.max_price", ["maxprice"], [new Intl.NumberFormat("en-US", {
                                        minimumFractionDigits: 0,
                                        maximumFractionDigits: 0
                                    }).format(u.maximumPrice)])
                                }), !(r < u.minimumPrice || r > u.maximumPrice || isNaN(r)) && a(k, {
                                    className: "invalid-feedback d-block",
                                    children: f("inventory.marketplace.make_offer.final_price", ["commission", "finalprice"], [new Intl.NumberFormat("en-US", {
                                        minimumFractionDigits: 0,
                                        maximumFractionDigits: 0
                                    }).format(E()), new Intl.NumberFormat("en-US", {
                                        minimumFractionDigits: 0,
                                        maximumFractionDigits: 0
                                    }).format(r + E())])
                                })]
                            }), a(H, {
                                disabled: r < u.minimumPrice || r > u.maximumPrice || isNaN(r),
                                onClick: T,
                                children: f("inventory.marketplace.make_offer.post")
                            })]
                        })]
                    })]
                })
            })]
        })
    },
    ZX = s => {
        const {isVisible: e=!1, setIsVisible: t=null, rootNode: r=null, currentPage: i=null, navigationHidden: n=!1, setNavigationHidden: o=null, activeNodes: l=[], searchResult: c=null, setSearchResult: u=null, openPageByName: h=null, openPageByOfferId: d=null, activateNode: m=null, getNodeById: p} = bt();
        return _.useEffect(() => {
            const E = {
                linkReceived: T => {
                    const I = T.split("/");
                    if (!(I.length < 2))
                        switch (I[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(S => !S);
                            return;
                        case "open":
                            if (I.length > 2)
                                if (I.length === 4)
                                    switch (I[2]) {
                                    case "offerId":
                                        d(parseInt(I[3]));
                                        return
                                    }
                                else
                                    h(I[2]);
                            else
                                t(!0);
                            return
                        }
                },
                eventUrlPrefix: "catalog/"
            };
            return Ts(E), () => Rs(E)
        }, [t, d, h]), g(q, {
            children: [e && g(Se, {
                uniqueKey: "catalog",
                className: "nitro-catalog",
                style: oe("catalog.headers") ? {
                    width: 710
                } : {},
                children: [a(Oe, {
                    headerText: f("catalog.title"),
                    onCloseClick: E => t(!1)
                }), a(_a, {
                    children: r && r.children.length > 0 && r.children.map(E => E.isVisible ? a(sn, {
                        isActive: E.isActive,
                        onClick: T => {
                            c && u(null),
                            m(E)
                        },
                        children: g(P, {
                            gap: oe("catalog.tab.icons") ? 1 : 0,
                            alignItems: "center",
                            children: [oe("catalog.tab.icons") && a(pP, {
                                icon: E.iconId
                            }), E.localization]
                        })
                    }, E.pageId) : null)
                }), a(Ie, {
                    children: g(fe, {
                        children: [!n && a(M, {
                            size: 3,
                            overflow: "hidden",
                            children: l && l.length > 0 && a(EX, {
                                node: l[0]
                            })
                        }), a(M, {
                            size: n ? 12 : 9,
                            overflow: "hidden",
                            children: QX(i, () => o(!0))
                        })]
                    })
                })]
            }), a(fX, {}), a(JX, {})]
        })
    },
    $X = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(""),
            {chatHistory: n=[]} = u_(),
            o = _.useRef(null),
            l = _.useMemo(() => {
                if (r.length === 0)
                    return n;
                let c = r.toLowerCase();
                return n.filter(u => u.message && u.message.toLowerCase().includes(c) || u.name && u.name.toLowerCase().includes(c))
            }, [n, r]);
        return _.useEffect(() => {
            o && o.current && e && (o.current.scrollTop = o.current.scrollHeight)
        }, [e]), _.useEffect(() => {
            const c = {
                linkReceived: u => {
                    const h = u.split("/");
                    if (!(h.length < 2))
                        switch (h[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(d => !d);
                            return
                        }
                },
                eventUrlPrefix: "chat-history/"
            };
            return Ts(c), () => Rs(c)
        }, []), e ? a(q, {
            children: e && g(P, {
                gap: 2,
                className: "nitro-chat-history",
                children: [g("div", {
                    className: "chat-history-content h-100",
                    children: [a("input", {
                        type: "text",
                        className: "form-control chat-history-search",
                        placeholder: f("generic.search"),
                        value: r,
                        onChange: c => i(c.target.value)
                    }), a(o_, {
                        rows: l,
                        scrollToBottom: !0,
                        rowRender: c => g(P, {
                            alignItems: "center",
                            className: "p-1",
                            gap: 2,
                            children: [a(y, {
                                variant: "muted",
                                children: c.timestamp
                            }), c.type === xi.TYPE_CHAT && g("div", {
                                className: "bubble-container",
                                style: {
                                    position: "relative"
                                },
                                children: [c.style === 0 && a("div", {
                                    className: "user-container-bg",
                                    style: {
                                        backgroundColor: c.color
                                    }
                                }), g("div", {
                                    className: `chat-bubble bubble-${c.style} type-${c.chatType}`,
                                    style: {
                                        maxWidth: "100%"
                                    },
                                    children: [a("div", {
                                        className: "user-container",
                                        children: c.imageUrl && c.imageUrl.length > 0 && a("div", {
                                            className: "user-image",
                                            style: {
                                                backgroundImage: `url(${c.imageUrl})`
                                            }
                                        })
                                    }), g("div", {
                                        className: "chat-content",
                                        children: [a("b", {
                                            className: "username mr-1",
                                            dangerouslySetInnerHTML: {
                                                __html: `${c.name}: `
                                            }
                                        }), a("span", {
                                            className: "message",
                                            dangerouslySetInnerHTML: {
                                                __html: `${c.message}`
                                            }
                                        })]
                                    })]
                                })]
                            }), c.type === xi.TYPE_ROOM_INFO && g(q, {
                                children: [a("i", {
                                    className: "icon icon-small-room"
                                }), a(y, {
                                    textBreak: !0,
                                    wrap: !0,
                                    grow: !0,
                                    children: a("span", {
                                        className: "text-white",
                                        children: c.name
                                    })
                                })]
                            })]
                        })
                    })]
                }), a(P, {
                    className: "chat-collapse-button",
                    onClick: c => t(!1)
                })]
            })
        }) : null
    },
    Ui = 32,
    _o = 64,
    Bc = "x0123456789abcdefghijklmnopq";
class Os {}
Os.DOOR = 0;
Os.UP = 1;
Os.DOWN = 2;
Os.SET = 3;
Os.UNSET = 4;
const e7 = {
    x: "101010",
    0: "0065ff",
    1: "0091ff",
    2: "00bcff",
    3: "00e8ff",
    4: "00ffea",
    5: "00ffbf",
    6: "00ff93",
    7: "00ff68",
    8: "00ff3d",
    9: "19ff00",
    a: "44ff00",
    b: "70ff00",
    c: "9bff00",
    d: "f2ff00",
    e: "ffe000",
    f: "ffb500",
    g: "ff8900",
    h: "ff5e00",
    i: "ff3200",
    j: "ff0700",
    k: "ff0023",
    l: "ff007a",
    m: "ff00a5",
    n: "ff00d1",
    o: "ff00fc",
    p: "d600ff",
    q: "aa00ff"
};
class t7 {
    constructor()
    {
        this._currentAction = Os.SET,
        this._currentHeight = Bc[1]
    }
    get currentAction()
    {
        return this._currentAction
    }
    set currentAction(e)
    {
        this._currentAction = e
    }
    get currentHeight()
    {
        return this._currentHeight
    }
    set currentHeight(e)
    {
        this._currentHeight = e
    }
    clear()
    {
        this._currentAction = Os.SET,
        this._currentHeight = Bc[1]
    }
}
class Ku {
    constructor(e, t)
    {
        this._height = e,
        this._isBlocked = t
    }
    get height()
    {
        return this._height
    }
    set height(e)
    {
        this._height = e
    }
    get isBlocked()
    {
        return this._isBlocked
    }
    set isBlocked(e)
    {
        this._isBlocked = e
    }
}
const s7 = (s, e) => {
        let t = s * Ui / 2 - e * Ui / 2;
        const r = s * Ui / 4 + e * Ui / 4;
        return t = t + 1024, [t, r]
    },
    r7 = (s, e) => {
        const t = s - 1024,
            r = (t / (Ui / 2) + e / (Ui / 4)) / 2,
            i = (e / (Ui / 4) - t / (Ui / 2)) / 2;
        return [r, i]
    },
    md = s => {
        switch (s = parseInt(s.toString()), s) {
        case 0:
            return -2;
        case 1:
            return -1;
        case 3:
            return 1;
        default:
            return 0
        }
    },
    qu = s => {
        switch (s) {
        case .25:
            return 0;
        case .5:
            return 1;
        case 2:
            return 3;
        default:
            return 2
        }
    },
    Oo = class  extends Gs{
        constructor()
        {
            const s = Ui * _o + 20,
                e = Ui * _o / 2 + 100;
            super({
                width: s,
                height: e,
                backgroundColor: 0,
                antialias: !0,
                autoDensity: !0,
                resolution: 1,
                sharedLoader: !0,
                sharedTicker: !0
            }),
            this._tilemap = [],
            this._doorLocation = new wi(0, 0),
            this._width = 0,
            this._height = 0,
            this._isHolding = !1,
            this._lastUsedTile = new wi(-1, -1),
            this._actionSettings = new t7
        }
        initialize()
        {
            if (this._isInitialized)
                return;
            const s = zr().getCollection("floor_editor");
            s && (this._assetCollection = s, this._tilemapRenderer = new xL(s.baseTexture), this.registerEventListeners(), this.stage.addChild(this._tilemapRenderer), this._isInitialized = !0)
        }
        registerEventListeners()
        {
            const s = new wi;
            this._tilemapRenderer.containsPoint = e => (this._tilemapRenderer.worldTransform.applyInverse(e, s), this.tileHitDetection(s, !1)),
            this._tilemapRenderer.on("pointerup", () => {
                this._isHolding = !1
            }),
            this._tilemapRenderer.on("pointerout", () => {
                this._isHolding = !1
            }),
            this._tilemapRenderer.on("pointerdown", e => {
                if (!(e.data.originalEvent instanceof PointerEvent) && !(e.data.originalEvent instanceof TouchEvent))
                    return;
                const t = e.data.originalEvent;
                if (t instanceof MouseEvent && t.button === 2)
                    return;
                const r = e.data.global;
                this.tileHitDetection(r, !0)
            }),
            this._tilemapRenderer.on("click", e => {
                if (!(e.data.originalEvent instanceof PointerEvent) || e.data.originalEvent.button === 2)
                    return;
                const r = e.data.global;
                this.tileHitDetection(r, !0, !0)
            })
        }
        tileHitDetection(s, e, t=!1)
        {
            const r = this._tilemapRenderer.pointsBuf,
                i = _L,
                n = r.length;
            e && (this._isHolding = !0);
            for (let o = 0; o < n; o += i) {
                const l = o + i,
                    c = r.slice(o, l),
                    u = Ui,
                    h = Ui / 2,
                    d = Math.floor(s.x),
                    m = Math.floor(s.y),
                    p = c[2],
                    E = c[3],
                    T = p + u / 2,
                    I = E + h / 2,
                    S = Math.abs(d - T),
                    A = Math.abs(m - I);
                if (S / (u * .5) + A / (h * .5) <= 1) {
                    if (this._isHolding) {
                        const [b, v] = r7(p, E);
                        t ? this.onClick(b, v) : (this._lastUsedTile.x !== b || this._lastUsedTile.y !== v) && (this._lastUsedTile.x = b, this._lastUsedTile.y = v, this.onClick(b, v))
                    }
                    return !0
                }
            }
            return !1
        }
        onClick(s, e)
        {
            const t = this._tilemap[e][s],
                r = Bc.indexOf(t.height);
            let i = 0;
            switch (this._actionSettings.currentAction) {
            case Os.DOOR:
                t.height !== "x" && (this._doorLocation.x = s, this._doorLocation.y = e, this.renderTiles());
                return;
            case Os.UP:
                if (t.height === "x")
                    return;
                i = r + 1;
                break;
            case Os.DOWN:
                if (t.height === "x" || r <= 1)
                    return;
                i = r - 1;
                break;
            case Os.SET:
                i = Bc.indexOf(this._actionSettings.currentHeight);
                break;
            case Os.UNSET:
                i = 0;
                break
            }
            if (i === -1 || r === i)
                return;
            i > 0 && (s + 1 > this._width && (this._width = s + 1), e + 1 > this._height && (this._height = e + 1));
            const n = Bc[i];
            n && (t.isBlocked || (this._tilemap[e][s].height = n, this.renderTiles()))
        }
        renderTiles()
        {
            this.tilemapRenderer.clear();
            for (let s = 0; s < this._tilemap.length; s++)
                for (let e = 0; e < this.tilemap[s].length; e++) {
                    const t = this.tilemap[s][e];
                    let r = t.height;
                    this._doorLocation.x === e && this._doorLocation.y === s && (r = Oo.TILE_DOOR),
                    t.isBlocked && (r = Oo.TILE_BLOCKED);
                    const [i, n] = s7(e, s);
                    this._tilemapRenderer.tile(this._assetCollection.getTexture(`floor_editor_${r}`), i, n)
                }
        }
        setTilemap(s, e)
        {
            this._tilemap = [];
            const t = s.split("\r");
            let r = 0,
                i = t.length;
            for (let n = 0; n < i; n++) {
                const o = t[n];
                if (o.length === 0) {
                    t.splice(n, 1),
                    i = t.length,
                    n--;
                    continue
                }
                o.length > r && (r = o.length)
            }
            for (let n = 0; n < i; n++) {
                this._tilemap[n] = [];
                const o = t[n];
                for (let l = 0; l < r; l++) {
                    const c = e[n] && e[n][l] || !1,
                        u = o[l];
                    u !== "x" && u !== "X" && u ? this._tilemap[n][l] = new Ku(u, c) : this._tilemap[n][l] = new Ku("x", c)
                }
                for (let l = r; l < _o; l++)
                    this.tilemap[n][l] = new Ku("x", !1)
            }
            for (let n = i; n < _o; n++) {
                this.tilemap[n] || (this.tilemap[n] = []);
                for (let o = 0; o < _o; o++)
                    this.tilemap[n][o] = new Ku("x", !1)
            }
            this._width = r,
            this._height = i
        }
        getCurrentTilemapString()
        {
            if (this._tilemap[this._height - 1][this._width - 1].height === "x") {
                this._width = -1,
                this._height = -1;
                for (let t = _o - 1; t >= 0; t--)
                    if (this._tilemap[t])
                        for (let r = _o - 1; r >= 0; r--) {
                            if (!this._tilemap[t][r])
                                continue;
                            this._tilemap[t][r].height !== "x" && (r + 1 > this._width && (this._width = r + 1), t + 1 > this._height && (this._height = t + 1))
                        }
            }
            const e = [];
            for (let t = 0; t < this._height; t++) {
                const r = [];
                for (let i = 0; i < this._width; i++) {
                    const n = this._tilemap[t][i];
                    r[i] = n.height
                }
                e[t] = r.join("")
            }
            return e.join("\r")
        }
        clear()
        {
            this._tilemapRenderer.interactive = !1,
            this._tilemap = [],
            this._doorLocation.set(-1, -1),
            this._width = 0,
            this._height = 0,
            this._isHolding = !1,
            this._lastUsedTile.set(-1, -1),
            this._actionSettings.clear(),
            this._tilemapRenderer.clear()
        }
        get tilemapRenderer()
        {
            return this._tilemapRenderer
        }
        get tilemap()
        {
            return this._tilemap
        }
        get doorLocation()
        {
            return this._doorLocation
        }
        set doorLocation(s)
        {
            this._doorLocation = s
        }
        get actionSettings()
        {
            return this._actionSettings
        }
        static get instance()
        {
            return Oo._INSTANCE || (Oo._INSTANCE = new Oo), Oo._INSTANCE
        }
    }
    ;
let Zs = Oo;
Zs._INSTANCE = null;
Zs.TILE_BLOCKED = "r_blocked";
Zs.TILE_DOOR = "r_door";
const MP = _.createContext({
        originalFloorplanSettings: null,
        setOriginalFloorplanSettings: null,
        visualizationSettings: null,
        setVisualizationSettings: null
    }),
    i7 = s => a(MP.Provider, {
        ...s
    }),
    ep = () => _.useContext(MP),
    n7 = s => {
        const {gap: e=1, children: t=null, ...r} = s,
            [i, n] = _.useState(!1),
            [o, l] = _.useState(!1),
            {originalFloorplanSettings: c=null, setOriginalFloorplanSettings: u=null, setVisualizationSettings: h=null} = ep(),
            d = _.useRef(null);
        W(sA, p => {
            const E = p.getParser();
            u(T => {
                const I = {
                    ...T
                };
                return I.reservedTiles = E.blockedTilesMap, Zs.instance.setTilemap(I.tilemap, I.reservedTiles), I
            }),
            n(!0),
            d.current.scrollTo(Zs.instance.view.width / 3, 0)
        }),
        W(kh, p => {
            const E = p.getParser();
            u(T => {
                const I = {
                    ...T
                };
                return I.entryPoint = [E.x, E.y], I.entryPointDir = E.direction, I
            }),
            h(T => {
                const I = {
                    ...T
                };
                return I.entryPointDir = E.direction, I
            }),
            Zs.instance.doorLocation = new wi(E.x, E.y),
            l(!0)
        });
        const m = p => {
            const E = d.current;
            if (E)
                switch (p) {
                case "up":
                    E.scrollBy({
                        top: -10
                    });
                    break;
                case "down":
                    E.scrollBy({
                        top: 10
                    });
                    break;
                case "left":
                    E.scrollBy({
                        left: -10
                    });
                    break;
                case "right":
                    E.scrollBy({
                        left: 10
                    });
                    break
                }
        };
        return _.useEffect(() => () => {
            Zs.instance.clear(),
            h(p => ({
                wallHeight: c.wallHeight,
                thicknessWall: c.thicknessWall,
                thicknessFloor: c.thicknessFloor,
                entryPointDir: p.entryPointDir
            }))
        }, [c.thicknessFloor, c.thicknessWall, c.wallHeight, h]), _.useEffect(() => {
            !o || !i || Zs.instance.renderTiles()
        }, [o, i]), _.useEffect(() => {
            B(new Rb),
            B(new Tb),
            Zs.instance.tilemapRenderer.interactive = !0,
            d.current && d.current.appendChild(Zs.instance.renderer.view)
        }, []), g(M, {
            gap: e,
            ...r,
            children: [g(fe, {
                overflow: "hidden",
                gap: 1,
                children: [a(M, {
                    center: !0,
                    size: 1,
                    children: a(H, {
                        className: "d-md-none",
                        onClick: p => m("left"),
                        children: a(aT, {
                            className: "fa-icon"
                        })
                    })
                }), g(M, {
                    overflow: "hidden",
                    size: 10,
                    gap: 1,
                    children: [a(P, {
                        justifyContent: "center",
                        className: "d-md-none",
                        children: a(H, {
                            shrink: !0,
                            onClick: p => m("up"),
                            children: a(gL, {
                                className: "fa-icon"
                            })
                        })
                    }), a(k, {
                        overflow: "auto",
                        innerRef: d
                    }), a(P, {
                        justifyContent: "center",
                        className: "d-md-none",
                        children: a(H, {
                            shrink: !0,
                            onClick: p => m("down"),
                            children: a(fL, {
                                className: "fa-icon"
                            })
                        })
                    })]
                }), a(M, {
                    center: !0,
                    size: 1,
                    children: a(H, {
                        className: "d-md-none",
                        onClick: p => m("right"),
                        children: a(oT, {
                            className: "fa-icon"
                        })
                    })
                })]
            }), t]
        })
    },
    oI = s => s.replace(/\r\n|\r|\n/g, `
`
    ).toLowerCase(),
    a7 = s => {
        const {onCloseClick: e=null} = s,
            [t, r] = _.useState(""),
            {originalFloorplanSettings: i=null} = ep(),
            n = () => {
                B(new lE(t.split(`
`
                ).join("\r"), i.entryPoint[0], i.entryPoint[1], i.entryPointDir, md(i.thicknessWall), md(i.thicknessFloor), i.wallHeight - 1))
            };
        return mP(() => {
            r(oI(i.tilemap))
        }), g(Se, {
            theme: "habbo",
            className: "floorplan-import-export",
            children: [a(Oe, {
                headerText: f("floor.plan.editor.import.export"),
                onCloseClick: e
            }), g(Ie, {
                children: [a("textarea", {
                    className: "h-100",
                    value: t,
                    onChange: o => r(o.target.value)
                }), g(P, {
                    justifyContent: "between",
                    children: [a(H, {
                        onClick: o => r(oI(i.tilemap)),
                        children: f("floor.plan.editor.revert.to.last.received.map")
                    }), a(H, {
                        onClick: n,
                        children: f("floor.plan.editor.save")
                    })]
                })]
            })]
        })
    },
    lI = 0,
    Xu = 16,
    o7 = 0,
    l7 = 26,
    c7 = s => {
        const {visualizationSettings: e=null, setVisualizationSettings: t=null} = ep(),
            [r, i] = _.useState(Os.SET),
            [n, o] = _.useState(0),
            l = T => {
                i(T),
                Zs.instance.actionSettings.currentAction = T
            },
            c = () => {
                t(T => {
                    const I = {
                        ...T
                    };
                    return I.entryPointDir < 7 ? ++I.entryPointDir : I.entryPointDir = 0, I
                })
            },
            u = T => {
                (isNaN(T) || T <= 0) && (T = 0),
                T > 26 && (T = 26),
                o(T),
                Zs.instance.actionSettings.currentHeight = T.toString(36)
            },
            h = T => {
                t(I => {
                    const S = {
                        ...I
                    };
                    return S.thicknessFloor = T, S
                })
            },
            d = T => {
                t(I => {
                    const S = {
                        ...I
                    };
                    return S.thicknessWall = T, S
                })
            },
            m = T => {
                (isNaN(T) || T <= 0) && (T = lI),
                T > Xu && (T = Xu),
                t(I => {
                    const S = {
                        ...I
                    };
                    return S.wallHeight = T, S
                })
            },
            p = () => {
                let T = e.wallHeight + 1;
                T > Xu && (T = Xu),
                m(T)
            },
            E = () => {
                let T = e.wallHeight - 1;
                T <= 0 && (T = lI),
                m(T)
            };
        return g(M, {
            children: [g(P, {
                gap: 1,
                children: [g(M, {
                    size: 5,
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: f("floor.plan.editor.draw.mode")
                    }), g(P, {
                        gap: 3,
                        children: [g(P, {
                            gap: 1,
                            children: [a($e, {
                                itemActive: r === Os.SET,
                                onClick: T => l(Os.SET),
                                children: a("i", {
                                    className: "icon icon-set-tile"
                                })
                            }), a($e, {
                                itemActive: r === Os.UNSET,
                                onClick: T => l(Os.UNSET),
                                children: a("i", {
                                    className: "icon icon-unset-tile"
                                })
                            })]
                        }), g(P, {
                            gap: 1,
                            children: [a($e, {
                                itemActive: r === Os.UP,
                                onClick: T => l(Os.UP),
                                children: a("i", {
                                    className: "icon icon-increase-height"
                                })
                            }), a($e, {
                                itemActive: r === Os.DOWN,
                                onClick: T => l(Os.DOWN),
                                children: a("i", {
                                    className: "icon icon-decrease-height"
                                })
                            })]
                        }), a($e, {
                            itemActive: r === Os.DOOR,
                            onClick: T => l(Os.DOOR),
                            children: a("i", {
                                className: "icon icon-set-door"
                            })
                        })]
                    })]
                }), g(M, {
                    alignItems: "center",
                    size: 4,
                    children: [a(y, {
                        bold: !0,
                        children: f("floor.plan.editor.enter.direction")
                    }), a("i", {
                        className: `icon icon-door-direction-${e.entryPointDir} cursor-pointer`,
                        onClick: c
                    })]
                }), g(M, {
                    size: 3,
                    children: [a(y, {
                        bold: !0,
                        children: f("floor.editor.wall.height")
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a(rT, {
                            className: "cursor-pointer fa-icon",
                            onClick: E
                        }), a("input", {
                            type: "number",
                            className: "form-control form-control-sm quantity-input",
                            value: e.wallHeight,
                            onChange: T => m(T.target.valueAsNumber)
                        }), a(iT, {
                            className: "cursor-pointer fa-icon",
                            onClick: p
                        })]
                    })]
                })]
            }), g(P, {
                gap: 1,
                children: [g(M, {
                    size: 6,
                    children: [g(y, {
                        bold: !0,
                        children: [f("floor.plan.editor.tile.height"), ": ", n]
                    }), a(Xs, {
                        className: "nitro-slider",
                        min: o7,
                        max: l7,
                        step: 1,
                        value: n,
                        onChange: T => u(T),
                        renderThumb: ({style: T, ...I}, S) => a("div", {
                            style: {
                                backgroundColor: `#${e7[S.valueNow.toString(33)]}`,
                                ...T
                            },
                            ...I,
                            children: S.valueNow
                        })
                    })]
                }), g(M, {
                    size: 6,
                    children: [a(y, {
                        bold: !0,
                        children: f("floor.plan.editor.room.options")
                    }), g(P, {
                        className: "align-items-center",
                        children: [g("select", {
                            className: "form-control form-control-sm",
                            value: e.thicknessWall,
                            onChange: T => d(parseInt(T.target.value)),
                            children: [a("option", {
                                value: 0,
                                children: f("navigator.roomsettings.wall_thickness.thinnest")
                            }), a("option", {
                                value: 1,
                                children: f("navigator.roomsettings.wall_thickness.thin")
                            }), a("option", {
                                value: 2,
                                children: f("navigator.roomsettings.wall_thickness.normal")
                            }), a("option", {
                                value: 3,
                                children: f("navigator.roomsettings.wall_thickness.thick")
                            })]
                        }), g("select", {
                            className: "form-control form-control-sm",
                            value: e.thicknessFloor,
                            onChange: T => h(parseInt(T.target.value)),
                            children: [a("option", {
                                value: 0,
                                children: f("navigator.roomsettings.floor_thickness.thinnest")
                            }), a("option", {
                                value: 1,
                                children: f("navigator.roomsettings.floor_thickness.thin")
                            }), a("option", {
                                value: 2,
                                children: f("navigator.roomsettings.floor_thickness.normal")
                            }), a("option", {
                                value: 3,
                                children: f("navigator.roomsettings.floor_thickness.thick")
                            })]
                        })]
                    })]
                })]
            })]
        })
    },
    u7 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(!1),
            [n, o] = _.useState({
                tilemap: "",
                reservedTiles: [],
                entryPoint: [0, 0],
                entryPointDir: 2,
                wallHeight: -1,
                thicknessWall: 1,
                thicknessFloor: 1
            }),
            [l, c] = _.useState({
                entryPointDir: 2,
                wallHeight: -1,
                thicknessWall: 1,
                thicknessFloor: 1
            }),
            u = () => {
                B(new lE(Zs.instance.getCurrentTilemapString(), Zs.instance.doorLocation.x, Zs.instance.doorLocation.y, l.entryPointDir, md(l.thicknessWall), md(l.thicknessFloor), l.wallHeight - 1))
            },
            h = () => {
                c({
                    wallHeight: n.wallHeight,
                    thicknessWall: n.thicknessWall,
                    thicknessFloor: n.thicknessFloor,
                    entryPointDir: n.entryPointDir
                }),
                Zs.instance.doorLocation = new wi(n.entryPoint[0], n.entryPoint[1]),
                Zs.instance.setTilemap(n.tilemap, n.reservedTiles),
                Zs.instance.renderTiles()
            };
        return at(ze.DISPOSED, d => t(!1)), W(Bh, d => {
            const m = d.getParser();
            o(p => {
                const E = {
                    ...p
                };
                return E.tilemap = m.model, E.wallHeight = m.wallHeight + 1, E
            }),
            c(p => {
                const E = {
                    ...p
                };
                return E.wallHeight = m.wallHeight + 1, E
            })
        }), W(Vh, d => {
            const m = d.getParser();
            o(p => {
                const E = {
                    ...p
                };
                return E.thicknessFloor = qu(m.thicknessFloor), E.thicknessWall = qu(m.thicknessWall), E
            }),
            c(p => {
                const E = {
                    ...p
                };
                return E.thicknessFloor = qu(m.thicknessFloor), E.thicknessWall = qu(m.thicknessWall), E
            })
        }), _.useEffect(() => {
            const d = {
                linkReceived: m => {
                    const p = m.split("/");
                    if (!(p.length < 2))
                        switch (p[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(E => !E);
                            return
                        }
                },
                eventUrlPrefix: "floor-editor/"
            };
            return Ts(d), () => Rs(d)
        }, []), _.useEffect(() => {
            Zs.instance.initialize()
        }, []), g(i7, {
            value: {
                originalFloorplanSettings: n,
                setOriginalFloorplanSettings: o,
                visualizationSettings: l,
                setVisualizationSettings: c
            },
            children: [e && g(Se, {
                uniqueKey: "floorpan-editor",
                className: "nitro-floorplan-editor",
                theme: "habbo",
                children: [a(Oe, {
                    headerText: f("floor.plan.editor.title"),
                    onCloseClick: () => t(!1)
                }), g(Ie, {
                    overflow: "hidden",
                    children: [a(c7, {}), a(n7, {
                        overflow: "hidden"
                    }), g(P, {
                        justifyContent: "between",
                        children: [a(H, {
                            onClick: h,
                            children: f("floor.plan.editor.reload")
                        }), g(An, {
                            children: [a(H, {
                                disabled: !0,
                                children: f("floor.plan.editor.preview")
                            }), a(H, {
                                onClick: d => i(!0),
                                children: f("floor.plan.editor.import.export")
                            }), a(H, {
                                onClick: u,
                                children: f("floor.plan.editor.save")
                            })]
                        })]
                    })]
                })]
            }), r && a(a7, {
                onCloseClick: () => i(!1)
            })]
        })
    },
    h7 = s => {
        const {friend: e=null} = s,
            [t, r] = _.useState(!1),
            {followFriend: i=null} = ri(),
            n = _.useRef();
        return _.useEffect(() => {
            const o = l => {
                const c = n.current;
                c && l.target !== c && !c.contains(l.target) && r(!1)
            };
            return document.addEventListener(le.MOUSE_CLICK, o), () => document.removeEventListener(le.MOUSE_CLICK, o)
        }, []), e ? g("div", {
            ref: n,
            className: "btn find-friends-active friend-bar-item " + (t ? "friend-bar-item-active" : ""),
            onClick: o => r(l => !l),
            children: [g("div", {
                className: `friend-bar-item-head position-absolute ${e.id > 0 ? "avatar" : "group"}`,
                children: [e.id > 0 && a(rs, {
                    headOnly: !0,
                    figure: e.figure,
                    direction: 2
                }), e.id <= 0 && a(Vt, {
                    isGroup: !0,
                    badgeCode: e.figure
                })]
            }), a("div", {
                className: "friend-bar-text",
                children: e.name
            }), t && g("div", {
                className: "d-flex pt-3 justify-content-between",
                children: [a(k, {
                    className: "nitro-friends-spritesheet icon-friendbar-chat cursor-pointer",
                    onClick: o => r_(e.id)
                }), e.followingAllowed && a(k, {
                    className: "nitro-friends-spritesheet icon-friendbar-visit cursor-pointer",
                    onClick: o => i(e)
                }), a(k, {
                    className: "nitro-friends-spritesheet icon-profile cursor-pointer",
                    onClick: o => Fr(e.id)
                })]
            })]
        }) : g("div", {
            ref: n,
            className: "btn find-friends friend-bar-item friend-bar-search " + (t ? "friend-bar-item-active" : ""),
            onClick: o => r(l => !l),
            children: [a("div", {
                className: "friend-bar-item-head position-absolute"
            }), a("div", {
                className: "friend-bar-text",
                children: f("friend.bar.find.title")
            }), t && g("div", {
                className: "search-content mt-3",
                children: [a("div", {
                    className: "bg-white text-black px-1 py-1 font-size-friend",
                    children: f("friend.bar.find.text")
                }), a(H, {
                    className: "mt-2 mb-4",
                    variant: "white",
                    onClick: () => B(new AN),
                    children: f("friend.bar.find.button")
                })]
            })]
        })
    },
    cI = 3,
    d7 = s => {
        const {onlineFriends: e=[]} = s,
            [t, r] = _.useState(0),
            i = _.useRef(),
            n = t > 0,
            o = t + cI < e.length;
        return g(P, {
            innerRef: i,
            alignItems: "center",
            className: "friend-bar",
            children: [n && a("button", {
                className: "friend-bar-button left",
                onClick: l => r(t - 1)
            }), Array.from(Array(cI), (l, c) => a(h7, {
                friend: e[t + c] || null
            }, c)), o && a("button", {
                className: "friend-bar-button right",
                onClick: l => r(t + 1)
            })]
        })
    },
    _7 = s => {
        const {selectedFriendsIds: e=null, removeFriendsText: t=null, removeSelectedFriends: r=null, onCloseClick: i=null} = s;
        return g(Se, {
            className: "nitro-friends-remove-confirmation",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("friendlist.removefriendconfirm.title"),
                onCloseClick: i
            }), g(Ie, {
                className: "text-black",
                children: [a("div", {
                    children: t
                }), g(P, {
                    gap: 1,
                    children: [a(H, {
                        fullWidth: !0,
                        variant: "danger",
                        disabled: e.length === 0,
                        onClick: r,
                        children: f("generic.ok")
                    }), a(H, {
                        fullWidth: !0,
                        onClick: i,
                        children: f("generic.cancel")
                    })]
                })]
            })]
        })
    },
    g7 = s => {
        const {selectedFriendsIds: e=null, onCloseClick: t=null, sendRoomInvite: r=null} = s,
            [i, n] = _.useState("");
        return g(Se, {
            className: "nitro-friends-room-invite",
            uniqueKey: "nitro-friends-room-invite",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("friendlist.invite.title"),
                onCloseClick: t
            }), g(Ie, {
                className: "text-black",
                children: [f("friendlist.invite.summary", ["count"], [e.length.toString()]), a("textarea", {
                    className: "form-control",
                    value: i,
                    maxLength: 255,
                    onChange: o => n(o.target.value)
                }), a(y, {
                    center: !0,
                    className: "bg-muted rounded p-1",
                    children: f("friendlist.invite.note")
                }), g(P, {
                    gap: 1,
                    children: [a(H, {
                        fullWidth: !0,
                        variant: "success",
                        disabled: i.length === 0 || e.length === 0,
                        onClick: () => r(i),
                        children: f("friendlist.invite.send")
                    }), a(H, {
                        fullWidth: !0,
                        onClick: t,
                        children: f("generic.cancel")
                    })]
                })]
            })]
        })
    },
    f7 = s => {
        const {...e} = s,
            [t, r] = _.useState(""),
            [i, n] = _.useState(null),
            [o, l] = _.useState(null),
            {canRequestFriend: c=null, requestFriend: u=null} = ri();
        return W(LO, h => {
            const d = h.getParser();
            n(d.friends),
            l(d.others)
        }), _.useEffect(() => {
            if (!t || !t.length)
                return;
            const h = setTimeout(() => {
                !t || !t.length || B(new MN(t))
            }, 500);
            return () => clearTimeout(h)
        }, [t]), g(hd, {
            ...e,
            children: [a("input", {
                type: "text",
                className: "search-input form-control form-control-sm w-100 rounded-0",
                placeholder: f("generic.search"),
                value: t,
                maxLength: 50,
                onChange: h => r(h.target.value)
            }), g(M, {
                children: [i && g(q, {
                    children: [i.length === 0 && a(y, {
                        bold: !0,
                        small: !0,
                        className: "px-2 py-1",
                        children: f("friendlist.search.nofriendsfound")
                    }), i.length > 0 && g(M, {
                        gap: 0,
                        children: [a(y, {
                            bold: !0,
                            small: !0,
                            className: "px-2 py-1",
                            children: f("friendlist.search.friendscaption", ["cnt"], [i.length.toString()])
                        }), a("hr", {
                            className: "mx-2 mt-0 mb-1 text-black"
                        }), a(M, {
                            gap: 0,
                            children: i.map(h => g(ud, {
                                justifyContent: "between",
                                className: "px-2 py-1",
                                children: [g(P, {
                                    alignItems: "center",
                                    gap: 1,
                                    children: [a(gi, {
                                        userId: h.avatarId
                                    }), a("div", {
                                        children: h.avatarName
                                    })]
                                }), a(P, {
                                    alignItems: "center",
                                    gap: 1,
                                    children: a(k, {
                                        className: "nitro-friends-spritesheet icon-chat cursor-pointer",
                                        onClick: d => r_(h.avatarId),
                                        title: f("friendlist.tip.im")
                                    })
                                })]
                            }, h.avatarId))
                        })]
                    })]
                }), o && g(q, {
                    children: [o.length === 0 && a(y, {
                        bold: !0,
                        small: !0,
                        className: "px-2 py-1",
                        children: f("friendlist.search.noothersfound")
                    }), o.length > 0 && g(M, {
                        gap: 0,
                        children: [a(y, {
                            bold: !0,
                            small: !0,
                            className: "px-2 py-1",
                            children: f("friendlist.search.otherscaption", ["cnt"], [o.length.toString()])
                        }), a("hr", {
                            className: "mx-2 mt-0 mb-1 text-black"
                        }), a(M, {
                            gap: 0,
                            children: o.map(h => g(ud, {
                                justifyContent: "between",
                                className: "px-2 py-1",
                                children: [g(P, {
                                    alignItems: "center",
                                    gap: 1,
                                    children: [a(gi, {
                                        userId: h.avatarId
                                    }), a("div", {
                                        children: h.avatarName
                                    })]
                                }), a(P, {
                                    alignItems: "center",
                                    gap: 1,
                                    children: c(h.avatarId) && a(k, {
                                        className: "nitro-friends-spritesheet icon-add cursor-pointer",
                                        onClick: d => u(h.avatarId, h.avatarName),
                                        title: f("friendlist.tip.addfriend")
                                    })
                                })]
                            }, h.avatarId))
                        })]
                    })]
                })]
            })]
        })
    },
    m7 = s => {
        const {friend: e=null, selected: t=!1, selectFriend: r=null} = s,
            [i, n] = _.useState(!1),
            {followFriend: o=null, updateRelationship: l=null} = ri(),
            c = p => {
                p.stopPropagation(),
                o(e)
            },
            u = p => {
                p.stopPropagation(),
                r_(e.id)
            },
            h = p => {
                p.stopPropagation(),
                n(!0)
            },
            d = (p, E) => {
                p.stopPropagation(),
                l(e, E),
                n(!1)
            },
            m = () => {
                if (!e)
                    return "none";
                switch (e.relationshipStatus) {
                case dr.RELATIONSHIP_HEART:
                    return "heart";
                case dr.RELATIONSHIP_SMILE:
                    return "smile";
                case dr.RELATIONSHIP_BOBBA:
                    return "bobba";
                default:
                    return "none"
                }
            };
        return e ? g(ud, {
            justifyContent: "between",
            className: `px-2 py-1 ${t && "bg-primary text-white"}`,
            onClick: p => r(e.id),
            children: [g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(k, {
                    onClick: p => p.stopPropagation(),
                    children: a(gi, {
                        userId: e.id
                    })
                }), a("div", {
                    children: e.name
                })]
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [!i && g(q, {
                    children: [e.followingAllowed && a(k, {
                        pointer: !0,
                        onClick: c,
                        className: "nitro-friends-spritesheet icon-follow",
                        title: f("friendlist.tip.follow")
                    }), a(k, {
                        pointer: !0,
                        className: "nitro-friends-spritesheet icon-chat",
                        onClick: u,
                        title: f("friendlist.tip.im")
                    }), e.id > 0 && a(k, {
                        className: `nitro-friends-spritesheet icon-${m()} cursor-pointer`,
                        onClick: h,
                        title: f("infostand.link.relationship")
                    })]
                }), i && g(q, {
                    children: [a(k, {
                        pointer: !0,
                        className: "nitro-friends-spritesheet icon-heart",
                        onClick: p => d(p, dr.RELATIONSHIP_HEART)
                    }), a(k, {
                        pointer: !0,
                        className: "nitro-friends-spritesheet icon-smile",
                        onClick: p => d(p, dr.RELATIONSHIP_SMILE)
                    }), a(k, {
                        pointer: !0,
                        className: "nitro-friends-spritesheet icon-bobba",
                        onClick: p => d(p, dr.RELATIONSHIP_BOBBA)
                    }), a(k, {
                        pointer: !0,
                        className: "nitro-friends-spritesheet icon-none",
                        onClick: p => d(p, dr.RELATIONSHIP_NONE)
                    })]
                })]
            })]
        }) : null
    },
    uI = s => {
        const {list: e=null, selectedFriendsIds: t=null, selectFriend: r=null} = s;
        return !e || !e.length ? null : a(q, {
            children: e.map((i, n) => a(m7, {
                friend: i,
                selected: t && t.indexOf(i.id) >= 0,
                selectFriend: r
            }, n))
        })
    },
    E7 = s => {
        const {request: e=null} = s,
            {requestResponse: t=null} = ri();
        return e ? g(ud, {
            justifyContent: "between",
            className: "px-2 py-1",
            children: [g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(gi, {
                    userId: e.id
                }), a("div", {
                    children: e.name
                })]
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(k, {
                    className: "nitro-friends-spritesheet icon-accept cursor-pointer",
                    onClick: r => t(e.id, !0)
                }), a(k, {
                    className: "nitro-friends-spritesheet icon-deny cursor-pointer",
                    onClick: r => t(e.id, !1)
                })]
            })]
        }) : null
    },
    p7 = s => {
        const {children: e=null, ...t} = s,
            {requests: r=[], requestResponse: i=null} = ri();
        return r.length ? g(hd, {
            ...t,
            children: [g(M, {
                fullHeight: !0,
                justifyContent: "between",
                gap: 1,
                children: [a(M, {
                    gap: 0,
                    children: r.map((n, o) => a(E7, {
                        request: n
                    }, o))
                }), a(P, {
                    justifyContent: "center",
                    className: "px-2 py-1",
                    children: a(H, {
                        onClick: n => i(-1, !1),
                        children: f("friendlist.requests.dismissall")
                    })
                })]
            }), e]
        }) : null
    },
    I7 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState([]),
            [n, o] = _.useState(!1),
            [l, c] = _.useState(!1),
            {onlineFriends: u=[], offlineFriends: h=[], requests: d=[], requestFriend: m=null} = ri(),
            [p, E] = _.useState(!1),
            T = _.useMemo(() => {
                if (!r || !r.length)
                    return "";
                const N = [];
                for (const b of r) {
                    let v = u.find(D => D.id === b);
                    v || (v = h.find(D => D.id === b)),
                    v && N.push(v.name)
                }
                return f("friendlist.removefriendconfirm.userlist", ["user_names"], [N.join(", ")])
            }, [h, u, r]),
            I = _.useCallback(N => {
                N < 0 || i(b => {
                    const v = [...b],
                        D = v.indexOf(N);
                    return D > -1 ? v.splice(D, 1) : v.push(N), v
                })
            }, [i]),
            S = N => {
                !r.length || !N || !N.length || N.length > 255 || (B(new PN(N, r)), o(!1))
            },
            A = () => {
                r.length !== 0 && (i(N => (B(new DN(...N)), [])), c(!1))
            };
        return _.useEffect(() => {
            const N = {
                linkReceived: b => {
                    const v = b.split("/");
                    if (!(v.length < 2))
                        switch (v[1]) {
                        case "show":
                            t(!0),
                            E(!1);
                            return;
                        case "hide":
                            t(!1),
                            E(!1);
                            return;
                        case "toggle":
                            t(D => !D),
                            E(!1);
                            return;
                        case "search":
                            t(!0),
                            E(!0);
                            return;
                        case "request":
                            if (v.length < 4)
                                return;
                            E(!1),
                            m(parseInt(v[2]), v[3])
                        }
                },
                eventUrlPrefix: "friends/"
            };
            return Ts(N), () => Rs(N)
        }, [m]), e ? g(q, {
            children: [g(Se, {
                className: "nitro-friends",
                uniqueKey: "nitro-friends",
                theme: "primary-slim",
                children: [a(Oe, {
                    headerText: f("friendlist.friends"),
                    onCloseClick: N => t(!1)
                }), g(Ie, {
                    overflow: "hidden",
                    gap: 1,
                    className: "text-black p-0",
                    children: [g(N4, {
                        fullHeight: !0,
                        overflow: "hidden",
                        children: [a(hd, {
                            headerText: f("friendlist.friends") + ` (${u.length})`,
                            isExpanded: !0,
                            children: a(uI, {
                                list: u,
                                selectedFriendsIds: r,
                                selectFriend: I
                            })
                        }), a(hd, {
                            headerText: f("friendlist.friends.offlinecaption") + ` (${h.length})`,
                            children: a(uI, {
                                list: h,
                                selectedFriendsIds: r,
                                selectFriend: I
                            })
                        }), a(p7, {
                            headerText: f("friendlist.tab.friendrequests") + ` (${d.length})`,
                            isExpanded: !0
                        }), a(f7, {
                            headerText: f("people.search.title")
                        })]
                    }), r && r.length > 0 && g(P, {
                        gap: 1,
                        className: "p-1",
                        children: [a(H, {
                            fullWidth: !0,
                            onClick: () => o(!0),
                            children: f("friendlist.tip.invite")
                        }), a(H, {
                            fullWidth: !0,
                            variant: "danger",
                            onClick: N => c(!0),
                            children: f("generic.delete")
                        })]
                    })]
                })]
            }), n && a(g7, {
                selectedFriendsIds: r,
                onCloseClick: () => o(!1),
                sendRoomInvite: S
            }), l && a(_7, {
                selectedFriendsIds: r,
                removeFriendsText: T,
                onCloseClick: () => c(!1),
                removeSelectedFriends: A
            })]
        }) : null
    },
    T7 = s => {
        const {thread: e=null, group: t=null} = s,
            r = _.useMemo(() => t.type === Fo.GROUP_CHAT && vv(t.chats[0].extraData), [t]),
            i = _.useMemo(() => !e || !t ? !1 : !!(t.type === Fo.PRIVATE_CHAT && t.userId === Z().userId || r && t.chats.length && r.userId === Z().userId), [e, t, r]);
        return !e || !t ? null : t.userId ? g(P, {
            fullWidth: !0,
            justifyContent: i ? "end" : "start",
            gap: 2,
            children: [g(k, {
                shrink: !0,
                className: "message-avatar",
                children: [t.type === Fo.PRIVATE_CHAT && !i && a(rs, {
                    figure: e.participant.figure,
                    direction: 2
                }), r && !i && a(rs, {
                    figure: r.figure,
                    direction: 2
                })]
            }), g(k, {
                className: "bg-light text-black border-radius mb-2 rounded py-1 px-2 messages-group-" + (i ? "right" : "left"),
                children: [g(k, {
                    className: "mb-1",
                    children: [g("span", {
                        className: "fw-bold",
                        children: [i && Z().userName, !i && (r ? r.username : e.participant.name)]
                    }), a("span", {
                        className: "ms-2 text-muted small",
                        children: new Date(t.chats[0].date).toLocaleTimeString()
                    })]
                }), t.chats.map((n, o) => a(k, {
                    className: "text-break",
                    children: n.message
                }, o))]
            }), i && a(k, {
                shrink: !0,
                className: "message-avatar",
                children: a(rs, {
                    figure: Z().figure,
                    direction: 4
                })
            })]
        }) : a(q, {
            children: t.chats.map((n, o) => a(P, {
                fullWidth: !0,
                gap: 2,
                justifyContent: "start",
                children: g(k, {
                    className: "w-100 text-break",
                    children: [n.type === Zi.SECURITY_NOTIFICATION && g(P, {
                        gap: 2,
                        alignItems: "center",
                        className: "bg-light rounded mb-2 px-2 py-1 small text-muted",
                        children: [a(k, {
                            className: "nitro-friends-spritesheet icon-warning flex-shrink-0"
                        }), a(k, {
                            children: n.message
                        })]
                    }), n.type === Zi.ROOM_INVITE && g(P, {
                        gap: 2,
                        alignItems: "center",
                        className: "bg-light rounded mb-2 px-2 py-1 small text-black",
                        children: [a(k, {
                            className: "messenger-notification-icon flex-shrink-0"
                        }), g(k, {
                            children: [f("messenger.invitation") + " ", n.message]
                        })]
                    })]
                })
            }, o))
        })
    },
    R7 = s => {
        const {thread: e=null} = s;
        return e.setRead(), a(q, {
            children: e.groups.length > 0 && e.groups.map((t, r) => a(T7, {
                thread: e,
                group: t
            }, r))
        })
    },
    O7 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(-1),
            [n, o] = _.useState(""),
            {visibleThreads: l=[], activeThread: c=null, getMessageThread: u=null, sendMessage: h=null, setActiveThreadId: d=null, closeThread: m=null} = lP(),
            {report: p=null} = Vi(),
            E = _.useRef(),
            T = () => c && c.participant && B(new kd(c.participant.id)),
            I = () => c && c.participant && Fr(c.participant.id),
            S = () => {
                !c || !n.length || (h(c, Z().userId, n), o(""))
            },
            A = N => {
                N.key === "Enter" && S()
            };
        return _.useEffect(() => {
            const N = {
                linkReceived: b => {
                    const v = b.split("/");
                    if (v.length === 2) {
                        if (v[1] === "open") {
                            t(!0);
                            return
                        }
                        if (v[1] === "toggle") {
                            t(G => !G);
                            return
                        }
                        const D = u(parseInt(v[1]));
                        if (!D)
                            return;
                        d(D.threadId),
                        t(!0)
                    }
                },
                eventUrlPrefix: "friends-messenger/"
            };
            return Ts(N), () => Rs(N)
        }, [u, d]), _.useEffect(() => {
            !e || !c || (E.current.scrollTop = E.current.scrollHeight)
        }, [e, c]), _.useEffect(() => {
            if (e && !c) {
                r > 0 ? d(r) : l.length > 0 && d(l[0].threadId);
                return
            }
            !e && c && (i(c.threadId), d(-1))
        }, [e, c, r, l, d]), e ? g(Se, {
            className: "nitro-friends-messenger",
            uniqueKey: "nitro-friends-messenger",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("messenger.window.title", ["OPEN_CHAT_COUNT"], [l.length.toString()]),
                onCloseClick: N => t(!1)
            }), a(Ie, {
                children: g(fe, {
                    overflow: "hidden",
                    children: [g(M, {
                        size: 4,
                        overflow: "hidden",
                        children: [a(y, {
                            bold: !0,
                            children: f("toolbar.icon.label.messenger")
                        }), a(M, {
                            fit: !0,
                            overflow: "auto",
                            children: a(M, {
                                children: l && l.length > 0 && l.map(N => g($e, {
                                    itemActive: c === N,
                                    onClick: b => d(N.threadId),
                                    children: [N.unread && a(Wa, {
                                        count: N.unreadCount
                                    }), g(P, {
                                        fullWidth: !0,
                                        alignItems: "center",
                                        gap: 1,
                                        children: [g(P, {
                                            alignItems: "center",
                                            className: "friend-head px-1",
                                            children: [N.participant.id > 0 && a(rs, {
                                                figure: N.participant.figure,
                                                headOnly: !0,
                                                direction: 3
                                            }), N.participant.id <= 0 && a(Vt, {
                                                isGroup: !0,
                                                badgeCode: N.participant.figure
                                            })]
                                        }), a(y, {
                                            truncate: !0,
                                            grow: !0,
                                            children: N.participant.name
                                        })]
                                    })]
                                }, N.threadId))
                            })
                        })]
                    }), a(M, {
                        size: 8,
                        overflow: "hidden",
                        children: c && g(q, {
                            children: [a(y, {
                                bold: !0,
                                center: !0,
                                children: f("messenger.window.separator", ["FRIEND_NAME"], [c.participant.name])
                            }), g(P, {
                                alignItems: "center",
                                justifyContent: "between",
                                gap: 1,
                                children: [g(P, {
                                    gap: 1,
                                    children: [g(An, {
                                        children: [a(H, {
                                            onClick: T,
                                            children: a(k, {
                                                className: "nitro-friends-spritesheet icon-follow"
                                            })
                                        }), a(H, {
                                            onClick: I,
                                            children: a(k, {
                                                className: "nitro-friends-spritesheet icon-profile-sm"
                                            })
                                        })]
                                    }), a(H, {
                                        variant: "danger",
                                        onClick: () => p(Lt.IM, {
                                            reportedUserId: c.participant.id
                                        }),
                                        children: f("messenger.window.button.report")
                                    })]
                                }), a(H, {
                                    onClick: N => m(c.threadId),
                                    children: a(mi, {
                                        className: "fa-icon"
                                    })
                                })]
                            }), a(M, {
                                fit: !0,
                                className: "bg-muted p-2 rounded chat-messages",
                                children: a(M, {
                                    innerRef: E,
                                    overflow: "auto",
                                    children: a(R7, {
                                        thread: c
                                    })
                                })
                            }), g(P, {
                                gap: 1,
                                children: [a("input", {
                                    type: "text",
                                    className: "form-control form-control-sm",
                                    maxLength: 255,
                                    placeholder: f("messenger.window.input.default", ["FRIEND_NAME"], [c.participant.name]),
                                    value: n,
                                    onChange: N => o(N.target.value),
                                    onKeyDown: A
                                }), a(H, {
                                    variant: "success",
                                    onClick: S,
                                    children: f("widgets.chatinput.say")
                                })]
                            })]
                        })
                    })]
                })
            })]
        }) : null
    },
    S7 = s => {
        const {settings: e=null, onlineFriends: t=[]} = ri();
        return e ? g(q, {
            children: [Vf.createPortal(a(d7, {
                onlineFriends: t
            }), document.getElementById("toolbar-friend-bar-container")), a(I7, {}), a(O7, {})]
        }) : null
    },
    C7 = () => {
        const {games: s, selectedGame: e, setSelectedGame: t} = h_(),
            r = n => {
                let o = ["game-icon"];
                return e === n && o.push("selected"), o.join(" ")
            },
            i = n => `url(${n.assetUrl}${n.gameNameId}_icon.png)`;
        return g(k, {
            fullWidth: !0,
            className: "gameList-container bg-dark p-1",
            children: [f("gamecenter.game_list_title"), a(P, {
                gap: 3,
                children: s && s.map((n, o) => a(k, {
                    className: r(n),
                    onClick: l => t(n),
                    style: {
                        backgroundImage: i(n)
                    }
                }, o))
            })]
        })
    },
    A7 = () => {
        const {gameURL: s, setGameURL: e} = h_(),
            [t, r] = _.useState(0),
            i = _.useRef();
        return _.useEffect(() => {
            if (!i || i && !i.current)
                return;
            r(0);
            let n = document.createElement("iframe");
            n.src = s,
            n.classList.add("game-center-stage"),
            n.classList.add("h-100"),
            n.onload = () => {
                r(o => o += 1)
            },
            i.current.innerHTML = "",
            i.current.appendChild(n)
        }, [i, s]), _.useEffect(() => {
            t > 1 && (e(null), B(new LN))
        }, [t, e]), s ? a(k, {
            innerRef: i,
            className: "game-center-stage"
        }) : null
    },
    N7 = () => {
        const {selectedGame: s, accountStatus: e} = h_();
        _.useEffect(() => {
            s && (B(new FN(s.gameId)), B(new UN(s.gameId)))
        }, [s]);
        const t = () => wr.uintHexColor(s.bgColor),
            r = () => `url(${s.assetUrl}${s.gameNameId}_theme.png)`,
            i = () => wr.uintHexColor(s.textColor),
            n = () => {
                B(new GN(s.gameId))
            };
        return g(P, {
            className: "game-view py-4",
            fullHeight: !0,
            style: {
                backgroundColor: t(),
                backgroundImage: r(),
                color: i()
            },
            children: [g(P, {
                className: "w-75",
                column: !0,
                alignItems: "center",
                gap: 2,
                children: [a(y, {
                    bold: !0,
                    children: f(`gamecenter.${s.gameNameId}.description_title`)
                }), a("img", {
                    src: s.assetUrl + s.gameNameId + "_logo.png"
                }), (e.hasUnlimitedGames || e.freeGamesLeft > 0) && a(q, {
                    children: g(H, {
                        variant: "light",
                        position: "relative",
                        className: "px-4",
                        onClick: n,
                        children: [f("gamecenter.play_now"), !e.hasUnlimitedGames && a(Wa, {
                            className: "me-n1 mt-n1",
                            count: e.freeGamesLeft
                        })]
                    })
                }), a(y, {
                    bold: !0,
                    className: "w-50",
                    center: !0,
                    children: f(`gamecenter.${s.gameNameId}.description_content`)
                })]
            }), a(k, {
                className: "w-25"
            })]
        })
    },
    y7 = () => {
        const {isVisible: s, setIsVisible: e, games: t, accountStatus: r} = h_();
        if (_.useEffect(() => {
            const i = () => {
                    e(o => !o)
                },
                n = {
                    linkReceived: o => {
                        switch (o.split("/")[1]) {
                        case "toggle":
                            i();
                            break
                        }
                    },
                    eventUrlPrefix: "games/"
                };
            return Ts(n), () => Rs(n)
        }, []), !(!s || !t || !r))
            return g(P, {
                position: "absolute",
                className: "top-0 bottom-0 start-0 end-0 bg-black",
                justifyContent: "center",
                children: [g(P, {
                    className: "game-center-main",
                    column: !0,
                    children: [a(N7, {}), a(C7, {})]
                }), a(A7, {})]
            })
    },
    M7 = [0, 1, 2, 3, 4, 5, 6, 7, 8],
    b7 = s => {
        const {badgeParts: e=[], setBadgeParts: t=null} = s,
            [r, i] = _.useState(-1),
            {groupCustomize: n=null} = Pu(),
            o = (l, c, u) => {
                const h = [...e];
                h[l][c] = u,
                t(h),
                c === "key" && i(-1)
            };
        return !e || !e.length ? null : g(q, {
            children: [r < 0 && e && e.length > 0 && e.map((l, c) => g(P, {
                alignItems: "center",
                justifyContent: "between",
                gap: 2,
                className: "bg-muted rounded px-2 py-1",
                children: [g(P, {
                    pointer: !0,
                    center: !0,
                    className: "bg-muted rounded p-1",
                    onClick: u => i(c),
                    children: [e[c].code && e[c].code.length > 0 && a(Vt, {
                        badgeCode: e[c].code,
                        isGroup: !0
                    }), (!e[c].code || !e[c].code.length) && a(P, {
                        center: !0,
                        className: "badge-image group-badge",
                        children: a(tu, {
                            className: "fa-icon"
                        })
                    })]
                }), l.type !== mr.BASE && a(fe, {
                    gap: 1,
                    columnCount: 3,
                    children: M7.map((u, h) => a(k, {
                        pointer: !0,
                        className: `group-badge-position-swatch ${e[c].position === u ? "active" : ""}`,
                        onClick: d => o(c, "position", u)
                    }, h))
                }), a(fe, {
                    gap: 1,
                    columnCount: 8,
                    children: n.badgePartColors.length > 0 && n.badgePartColors.map((u, h) => a(k, {
                        pointer: !0,
                        className: `group-badge-color-swatch ${e[c].color === h + 1 ? "active" : ""}`,
                        style: {
                            backgroundColor: "#" + u.color
                        },
                        onClick: d => o(c, "color", h + 1)
                    }, h))
                })]
            }, c)), r >= 0 && g(fe, {
                gap: 1,
                columnCount: 5,
                children: [e[r].type === mr.SYMBOL && a(M, {
                    pointer: !0,
                    center: !0,
                    className: "bg-muted rounded p-1",
                    onClick: l => o(r, "key", 0),
                    children: a(P, {
                        center: !0,
                        className: "badge-image group-badge",
                        children: a(mi, {
                            className: "fa-icon"
                        })
                    })
                }), (e[r].type === mr.BASE ? n.badgeBases : n.badgeSymbols).map((l, c) => a(M, {
                    pointer: !0,
                    center: !0,
                    className: "bg-muted rounded p-1",
                    onClick: u => o(r, "key", l.id),
                    children: a(Vt, {
                        badgeCode: mr.getCode(e[r].type, l.id, e[r].color, 4),
                        isGroup: !0
                    })
                }, c))]
            })]
        })
    },
    bP = s => {
        const {groupData: e=null, setGroupData: t=null, setCloseAction: r=null, skipDefault: i=null} = s,
            [n, o] = _.useState(null),
            {groupCustomize: l=null} = Pu(),
            c = () => {
                if (!n || !n.length)
                    return "";
                let h = "";
                return n.forEach(d => d.code && (h += d.code)), h
            },
            u = _.useCallback(() => {
                if (!e || !n || !n.length)
                    return !1;
                if (e.groupBadgeParts === n)
                    return !0;
                if (e.groupId <= 0)
                    return t(d => {
                        const m = {
                            ...d
                        };
                        return m.groupBadgeParts = n, m
                    }), !0;
                const h = [];
                return n.forEach(d => {
                    d.code && (h.push(d.key), h.push(d.color), h.push(d.position))
                }), B(new ZN(e.groupId, h)), !0
            }, [e, n, t]);
        return _.useEffect(() => {
            if (e.groupBadgeParts)
                return;
            const h = [new mr(mr.BASE, l.badgeBases[0].id, l.badgePartColors[0].id), new mr(mr.SYMBOL, 0, l.badgePartColors[0].id), new mr(mr.SYMBOL, 0, l.badgePartColors[0].id), new mr(mr.SYMBOL, 0, l.badgePartColors[0].id), new mr(mr.SYMBOL, 0, l.badgePartColors[0].id)];
            t(d => ({
                ...d,
                groupBadgeParts: h
            }))
        }, [e.groupBadgeParts, l, t]), _.useEffect(() => {
            if (e.groupId <= 0) {
                o(e.groupBadgeParts ? [...e.groupBadgeParts] : null);
                return
            }
            o(e.groupBadgeParts)
        }, [e]), _.useEffect(() => (r({
            action: u
        }), () => r(null)), [r, u]), g(fe, {
            overflow: "hidden",
            gap: 1,
            children: [a(M, {
                size: 2,
                children: a(P, {
                    center: !0,
                    className: "bg-muted rounded p-1",
                    children: a(Vt, {
                        badgeCode: c(),
                        isGroup: !0
                    })
                })
            }), a(M, {
                size: 10,
                overflow: "auto",
                children: a(b7, {
                    badgeParts: n,
                    setBadgeParts: o
                })
            })]
        })
    },
    DP = s => {
        const {groupData: e=null, setGroupData: t=null, setCloseAction: r=null} = s,
            [i, n] = _.useState(null),
            {groupCustomize: o=null} = Pu(),
            l = h => h === 0 ? o.groupColorsA.find(d => d.id === i[h]).color : o.groupColorsB.find(d => d.id === i[h]).color,
            c = (h, d) => {
                n(m => {
                    const p = [...m];
                    return p[h] = d, p
                })
            },
            u = _.useCallback(() => !e || !i || !i.length ? !1 : e.groupColors === i ? !0 : e.groupId <= 0 ? (t(h => {
                const d = {
                    ...h
                };
                return d.groupColors = [...i], d
            }), !0) : (B(new $N(e.groupId, i[0], i[1])), !0), [e, i, t]);
        return _.useEffect(() => {
            if (!o.groupColorsA || !o.groupColorsB || e.groupColors)
                return;
            const h = [o.groupColorsA[0].id, o.groupColorsB[0].id];
            t(d => ({
                ...d,
                groupColors: h
            }))
        }, [o, e.groupColors, t]), _.useEffect(() => {
            if (e.groupId <= 0) {
                n(e.groupColors ? [...e.groupColors] : null);
                return
            }
            n(e.groupColors)
        }, [e]), _.useEffect(() => (r({
            action: u
        }), () => r(null)), [r, u]), i ? g(fe, {
            overflow: "hidden",
            children: [g(M, {
                size: 2,
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("group.edit.color.guild.color")
                }), e.groupColors && e.groupColors.length > 0 && g(P, {
                    overflow: "hidden",
                    className: "rounded border",
                    children: [a(k, {
                        className: "group-color-swatch",
                        style: {
                            backgroundColor: "#" + l(0)
                        }
                    }), a(k, {
                        className: "group-color-swatch",
                        style: {
                            backgroundColor: "#" + l(1)
                        }
                    })]
                })]
            }), g(M, {
                size: 5,
                gap: 1,
                overflow: "hidden",
                children: [a(y, {
                    bold: !0,
                    children: f("group.edit.color.primary.color")
                }), a(Mt, {
                    gap: 1,
                    columnCount: 7,
                    columnMinWidth: 16,
                    columnMinHeight: 16,
                    children: e.groupColors && o.groupColorsA && o.groupColorsA.map((h, d) => a("div", {
                        className: cr("group-badge-color-swatch cursor-pointer", e.groupColors[0] === h.id && "active"),
                        style: {
                            backgroundColor: "#" + h.color
                        },
                        onClick: () => c(0, h.id)
                    }, d))
                })]
            }), g(M, {
                size: 5,
                gap: 1,
                overflow: "hidden",
                children: [a(y, {
                    bold: !0,
                    children: f("group.edit.color.secondary.color")
                }), a(Mt, {
                    gap: 1,
                    columnCount: 7,
                    columnMinWidth: 16,
                    columnMinHeight: 16,
                    children: e.groupColors && o.groupColorsB && o.groupColorsB.map((h, d) => a("div", {
                        className: cr("group-badge-color-swatch cursor-pointer", e.groupColors[1] === h.id && "active"),
                        style: {
                            backgroundColor: "#" + h.color
                        },
                        onClick: () => c(1, h.id)
                    }, d))
                })]
            })]
        }) : null
    },
    D7 = s => {
        const {groupData: e=null, setGroupData: t=null, purchaseCost: r=0} = s,
            {groupCustomize: i=null} = Pu(),
            n = () => {
                if (!e || !e.groupBadgeParts || !e.groupBadgeParts.length)
                    return "";
                let l = "";
                return e.groupBadgeParts.forEach(c => c.code && (l += c.code)), l
            },
            o = l => l === 0 ? i.groupColorsA.find(c => c.id === e.groupColors[l]).color : i.groupColorsB.find(c => c.id === e.groupColors[l]).color;
        return e ? g(fe, {
            overflow: "hidden",
            gap: 1,
            children: [g(M, {
                size: 3,
                children: [g(M, {
                    center: !0,
                    className: "bg-muted rounded p-1",
                    gap: 2,
                    children: [a(y, {
                        bold: !0,
                        center: !0,
                        children: f("group.create.confirm.guildbadge")
                    }), a(Vt, {
                        badgeCode: n(),
                        isGroup: !0
                    })]
                }), g(M, {
                    center: !0,
                    className: "bg-muted rounded p-1",
                    gap: 2,
                    children: [a(y, {
                        bold: !0,
                        center: !0,
                        children: f("group.edit.color.guild.color")
                    }), g(P, {
                        overflow: "hidden",
                        className: "rounded border",
                        children: [a(k, {
                            className: "group-color-swatch",
                            style: {
                                backgroundColor: "#" + o(0)
                            }
                        }), a(k, {
                            className: "group-color-swatch",
                            style: {
                                backgroundColor: "#" + o(1)
                            }
                        })]
                    })]
                })]
            }), g(M, {
                size: 9,
                justifyContent: "between",
                children: [g(M, {
                    children: [g(M, {
                        gap: 1,
                        children: [a(y, {
                            bold: !0,
                            children: e.groupName
                        }), a(y, {
                            children: e.groupDescription
                        })]
                    }), a(y, {
                        overflow: "auto",
                        children: f("group.create.confirm.info")
                    })]
                }), a(y, {
                    center: !0,
                    variant: "white",
                    className: "bg-primary rounded p-1",
                    children: f("group.create.confirm.buyinfo", ["amount"], [r.toString()])
                })]
            })]
        }) : null
    },
    vP = s => {
        const {groupData: e=null, setGroupData: t=null, setCloseAction: r=null, onClose: i=null, isCreator: n=!1, availableRooms: o=[]} = s,
            [l, c] = _.useState(""),
            [u, h] = _.useState(""),
            [d, m] = _.useState(-1),
            {showConfirm: p=null} = Yt(),
            E = () => {
                !e || e.groupId <= 0 || p(f("group.deleteconfirm.desc"), () => {
                    B(new KN(e.groupId)),
                    i && i()
                }, null, null, null, f("group.deleteconfirm.title"))
            },
            T = _.useCallback(() => !e || !l || !l.length ? !1 : l === e.groupName && u === e.groupDescription ? !0 : e.groupId <= 0 ? d <= 0 ? !1 : (t(I => {
                const S = {
                    ...I
                };
                return S.groupName = l, S.groupDescription = u, S.groupHomeroomId = d, S
            }), !0) : (B(new ey(e.groupId, l, u || "")), !0), [e, l, u, d, t]);
        return _.useEffect(() => {
            c(e.groupName || ""),
            h(e.groupDescription || ""),
            m(e.groupHomeroomId)
        }, [e]), _.useEffect(() => (r({
            action: T
        }), () => r(null)), [r, T]), e ? g(M, {
            justifyContent: "between",
            overflow: "auto",
            children: [g(M, {
                gap: 1,
                children: [g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a(y, {
                        center: !0,
                        className: "col-3",
                        children: f("group.edit.name")
                    }), a("input", {
                        type: "text",
                        className: "form-control form-control-sm",
                        value: l,
                        maxLength: 29,
                        onChange: I => c(I.target.value)
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a(y, {
                        center: !0,
                        className: "col-3",
                        children: f("group.edit.desc")
                    }), a("textarea", {
                        className: "form-control form-control-sm",
                        value: u,
                        maxLength: 254,
                        onChange: I => h(I.target.value)
                    })]
                }), n && g(q, {
                    children: [g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a(y, {
                            center: !0,
                            className: "col-3",
                            children: f("group.edit.base")
                        }), a(M, {
                            fullWidth: !0,
                            gap: 1,
                            children: g("select", {
                                className: "form-select form-select-sm",
                                value: d,
                                onChange: I => m(parseInt(I.target.value)),
                                children: [a("option", {
                                    value: -1,
                                    disabled: !0,
                                    children: f("group.edit.base.select.room")
                                }), o && o.map((I, S) => a("option", {
                                    value: I.id,
                                    children: I.name
                                }, S))]
                            })
                        })]
                    }), g(P, {
                        gap: 1,
                        children: [a(k, {
                            className: "col-3",
                            children: " "
                        }), a(y, {
                            small: !0,
                            children: f("group.edit.base.warning")
                        })]
                    })]
                })]
            }), !n && a(H, {
                variant: "danger",
                onClick: E,
                children: f("group.delete")
            }), n && a(y, {
                underline: !0,
                center: !0,
                fullWidth: !0,
                pointer: !0,
                onClick: I => ge("navigator/create"),
                children: f("group.createroom")
            })]
        }) : null
    },
    v7 = [1, 2, 3, 4],
    P7 = s => {
        const {onClose: e=null} = s,
            [t, r] = _.useState(1),
            [i, n] = _.useState(null),
            [o, l] = _.useState(null),
            [c, u] = _.useState(null),
            [h, d] = _.useState(0),
            m = () => {
                n(null),
                l(null),
                e && e()
            },
            p = () => {
                if (!o)
                    return;
                const I = [];
                o.groupBadgeParts.forEach(S => {
                    S.code && (I.push(S.key), I.push(S.color), I.push(S.position))
                }),
                B(new WN(o.groupName, o.groupDescription, o.groupHomeroomId, o.groupColors[0], o.groupColors[1], I))
            },
            E = () => {
                if (!(i && i.action && !i.action())) {
                    if (t === 1) {
                        e();
                        return
                    }
                    r(I => I - 1)
                }
            },
            T = () => {
                if (!(i && i.action && !i.action())) {
                    if (t === 4) {
                        p();
                        return
                    }
                    r(I => I === 4 ? I : I + 1)
                }
            };
        return W(BO, I => {
            const S = I.getParser(),
                A = [];
            S.availableRooms.forEach((N, b) => A.push({
                id: b,
                name: N
            })),
            u(A),
            d(S.groupCost)
        }), _.useEffect(() => {
            r(1),
            l({
                groupId: -1,
                groupName: null,
                groupDescription: null,
                groupHomeroomId: -1,
                groupState: 1,
                groupCanMembersDecorate: !0,
                groupColors: null,
                groupBadgeParts: null
            }),
            B(new YN)
        }, [l]), o ? g(Se, {
            className: "nitro-group-creator",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("group.create.title"),
                onCloseClick: m
            }), g(Ie, {
                children: [a(P, {
                    center: !0,
                    className: "creator-tabs",
                    children: v7.map((I, S) => a(P, {
                        center: !0,
                        className: `tab tab-${I === 1 ? "blue-flat" : I === 4 ? "yellow" : "blue-arrow"} ${t === I ? "active" : ""}`,
                        children: a(y, {
                            variant: "white",
                            children: f(`group.create.steplabel.${I}`)
                        })
                    }, S))
                }), g(M, {
                    overflow: "hidden",
                    children: [g(P, {
                        alignItems: "center",
                        gap: 2,
                        children: [a(k, {
                            className: `nitro-group-tab-image tab-${t}`
                        }), g(M, {
                            grow: !0,
                            gap: 0,
                            children: [a(y, {
                                bold: !0,
                                fontSize: 4,
                                children: f(`group.create.stepcaption.${t}`)
                            }), a(y, {
                                children: f(`group.create.stepdesc.${t}`)
                            })]
                        })]
                    }), g(M, {
                        overflow: "hidden",
                        children: [t === 1 && a(vP, {
                            groupData: o,
                            setGroupData: l,
                            setCloseAction: n,
                            onClose: null,
                            isCreator: !0,
                            availableRooms: c
                        }), t === 2 && a(bP, {
                            groupData: o,
                            setGroupData: l,
                            setCloseAction: n
                        }), t === 3 && a(DP, {
                            groupData: o,
                            setGroupData: l,
                            setCloseAction: n
                        }), t === 4 && a(D7, {
                            groupData: o,
                            setGroupData: l,
                            purchaseCost: h
                        })]
                    }), g(P, {
                        justifyContent: "between",
                        children: [a(H, {
                            variant: "link",
                            className: "text-black",
                            onClick: E,
                            children: f(t === 1 ? "generic.cancel" : "group.create.previousstep")
                        }), a(H, {
                            disabled: t === 4 && !vo(),
                            variant: t === 4 ? vo() ? "success" : "danger" : "primary",
                            onClick: T,
                            children: f(t === 4 ? vo() ? "group.create.confirm.buy" : "group.create.confirm.viprequired" : "group.create.nextstep")
                        })]
                    })]
                })]
            })]
        }) : null
    },
    L7 = ["regular", "exclusive", "private"],
    PP = s => {
        const {groupInformation: e=null, onClose: t=null, overflow: r="hidden", ...i} = s,
            {showConfirm: n=null} = Yt(),
            o = e && e.ownerName === Z().userName,
            l = () => e && VE(e.id),
            c = () => {
                n(f("group.leaveconfirm.desc"), () => {
                    B(new Vd(e.id, Z().userId)),
                    t && t()
                }, null)
            },
            u = () => e.membershipType === Us.NOT_MEMBER || e.membershipType === Us.REQUEST_PENDING ? null : o ? a("i", {
                className: "icon icon-group-owner",
                title: f("group.youareowner")
            }) : e.isAdmin ? a("i", {
                className: "icon icon-group-admin",
                title: f("group.youareadmin")
            }) : a("i", {
                className: "icon icon-group-member",
                title: f("group.youaremember")
            }),
            h = () => {
                if (o)
                    return "group.youareowner";
                if (e.type === Yr.PRIVATE && e.membershipType !== Us.MEMBER)
                    return "";
                if (e.membershipType === Us.MEMBER)
                    return "group.leave";
                if (e.membershipType === Us.NOT_MEMBER && e.type === Yr.REGULAR)
                    return "group.join";
                if (e.membershipType === Us.REQUEST_PENDING)
                    return "group.membershippending";
                if (e.membershipType === Us.NOT_MEMBER && e.type === Yr.EXCLUSIVE)
                    return "group.requestmembership"
            },
            d = () => {
                if (!(e.type === Yr.PRIVATE && e.membershipType === Us.NOT_MEMBER)) {
                    if (e.membershipType === Us.MEMBER) {
                        c();
                        return
                    }
                    l()
                }
            },
            m = p => {
                switch (p) {
                case "members":
                    kp(e.id);
                    break;
                case "members_pending":
                    kp(e.id, 2);
                    break;
                case "manage":
                    Uv(e.id);
                    break;
                case "homeroom":
                    _i(e.roomId);
                    break;
                case "furniture":
                    ge("catalog/open/" + _s.GUILD_CUSTOM_FURNI);
                    break;
                case "popular_groups":
                    ge("navigator/search/groups");
                    break
                }
            };
        return e ? g(fe, {
            overflow: r,
            ...i,
            className: "p-2 rounded",
            style: {
                background: "#cbcbcb"
            },
            children: [g(M, {
                center: !0,
                size: 3,
                overflow: "hidden",
                children: [a(P, {
                    alignItems: "center",
                    overflow: "hidden",
                    className: "group-badge",
                    children: a(Vt, {
                        badgeCode: e.badge,
                        isGroup: !0,
                        scale: 2
                    })
                }), g(M, {
                    alignItems: "center",
                    gap: 1,
                    children: [a(y, {
                        underline: !0,
                        pointer: !0,
                        onClick: () => m("members"),
                        children: f("group.membercount", ["totalMembers"], [e.membersCount.toString()])
                    }), e.pendingRequestsCount > 0 && a(y, {
                        underline: !0,
                        pointer: !0,
                        onClick: () => m("members_pending"),
                        children: f("group.pendingmembercount", ["amount"], [e.pendingRequestsCount.toString()])
                    }), e.isOwner && a(y, {
                        underline: !0,
                        pointer: !0,
                        onClick: () => m("manage"),
                        children: f("group.manage")
                    })]
                }), u()]
            }), g(M, {
                size: 9,
                justifyContent: "between",
                overflow: "auto",
                children: [g(M, {
                    overflow: "hidden",
                    children: [g(M, {
                        gap: 1,
                        children: [g(P, {
                            alignItems: "center",
                            gap: 2,
                            children: [a(y, {
                                bold: !0,
                                children: e.title
                            }), g(P, {
                                gap: 1,
                                children: [a("i", {
                                    className: "icon icon-group-type-" + e.type,
                                    title: f(`group.edit.settings.type.${L7[e.type]}.help`)
                                }), e.canMembersDecorate && a("i", {
                                    className: "icon icon-group-decorate",
                                    title: f("group.memberscandecorate")
                                })]
                            })]
                        }), a(y, {
                            children: f("group.created", ["date", "owner"], [e.createdAt, e.ownerName])
                        })]
                    }), a(y, {
                        overflow: "auto",
                        className: "group-description",
                        children: e.description
                    })]
                }), g(M, {
                    children: [g(M, {
                        gap: 1,
                        children: [a(y, {
                            underline: !0,
                            pointer: !0,
                            onClick: () => m("homeroom"),
                            children: f("group.linktobase")
                        }), a(y, {
                            underline: !0,
                            pointer: !0,
                            onClick: () => m("furniture"),
                            children: f("group.buyfurni")
                        }), a(y, {
                            underline: !0,
                            pointer: !0,
                            onClick: () => m("popular_groups"),
                            children: f("group.showgroups")
                        })]
                    }), (e.type !== Yr.PRIVATE || e.type === Yr.PRIVATE && e.membershipType === Us.MEMBER) && a(H, {
                        disabled: e.membershipType === Us.REQUEST_PENDING || o,
                        onClick: d,
                        children: f(h())
                    })]
                })]
            })]
        }) : null
    },
    U7 = s => {
        const [e, t] = _.useState(null);
        return W(ec, r => {
            const i = r.getParser();
            (e && e.id === i.id || i.flag) && t(i)
        }), e ? g(Se, {
            className: "nitro-group-information-standalone",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("group.window.title"),
                onCloseClick: r => t(null)
            }), a(Ie, {
                children: a(PP, {
                    groupInformation: e,
                    onClose: () => t(null)
                })
            })]
        }) : null
    },
    w7 = ["regular", "exclusive", "private"],
    F7 = s => {
        const {groupData: e=null, setGroupData: t=null, setCloseAction: r=null} = s,
            [i, n] = _.useState(e.groupState),
            [o, l] = _.useState(e.groupCanMembersDecorate),
            c = _.useCallback(() => e ? i === e.groupState && o === e.groupCanMembersDecorate ? !0 : e.groupId <= 0 ? (t(u => {
                const h = {
                    ...u
                };
                return h.groupState = i, h.groupCanMembersDecorate = o, h
            }), !0) : (B(new ty(e.groupId, i, o ? 0 : 1)), !0) : !1, [e, i, o, t]);
        return _.useEffect(() => {
            n(e.groupState),
            l(e.groupCanMembersDecorate)
        }, [e]), _.useEffect(() => (r({
            action: c
        }), () => r(null)), [r, c]), g(M, {
            overflow: "auto",
            children: [a(M, {
                children: w7.map((u, h) => g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "groupState",
                        checked: i === h,
                        onChange: d => n(h)
                    }), g(M, {
                        gap: 0,
                        children: [g(P, {
                            gap: 1,
                            children: [a("i", {
                                className: `icon icon-group-type-${h}`
                            }), a(y, {
                                bold: !0,
                                children: f(`group.edit.settings.type.${u}.label`)
                            })]
                        }), a(y, {
                            children: f(`group.edit.settings.type.${u}.help`)
                        })]
                    })]
                }, h))
            }), a(U4, {}), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a("input", {
                    className: "form-check-input",
                    type: "checkbox",
                    checked: o,
                    onChange: u => l(h => !h)
                }), g(M, {
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: f("group.edit.settings.rights.caption")
                    }), a(y, {
                        children: f("group.edit.settings.rights.members.help")
                    })]
                })]
            })]
        })
    },
    x7 = [1, 2, 3, 5],
    G7 = s => {
        const [e, t] = _.useState(1),
            [r, i] = _.useState(null),
            [n, o] = _.useState(null),
            l = () => {
                i(u => (u && u.action && u.action(), null)),
                o(null)
            },
            c = u => {
                r && r.action && r.action(),
                t(u)
            };
        return W(ec, u => {
            const h = u.getParser();
            !n || n.groupId !== h.id || o(d => {
                const m = {
                    ...d
                };
                return m.groupName = h.title, m.groupDescription = h.description, m.groupState = h.type, m.groupCanMembersDecorate = h.canMembersDecorate, m
            })
        }), W(jO, u => {
            const h = u.getParser(),
                d = [];
            h.badgeParts.forEach((m, p) => {
                d.push(new Ur(m.isBase ? Ur.BASE : Ur.SYMBOL, m.key, m.color, m.position))
            }),
            o({
                groupId: h.id,
                groupName: h.title,
                groupDescription: h.description,
                groupHomeroomId: h.roomId,
                groupState: h.state,
                groupCanMembersDecorate: h.canMembersDecorate,
                groupColors: [h.colorA, h.colorB],
                groupBadgeParts: d
            })
        }), !n || n.groupId <= 0 ? null : g(Se, {
            theme: "habbo",
            className: "nitro-group-manager",
            children: [a(Oe, {
                headerText: f("group.window.title"),
                onCloseClick: l
            }), a(_a, {
                children: x7.map(u => a(sn, {
                    isActive: e === u,
                    onClick: () => c(u),
                    children: f(`group.edit.tab.${u}`)
                }, u))
            }), g(Ie, {
                children: [g(P, {
                    alignItems: "center",
                    gap: 2,
                    children: [a(k, {
                        className: `nitro-group-tab-image tab-${e}`
                    }), g(M, {
                        grow: !0,
                        gap: 0,
                        children: [a(y, {
                            bold: !0,
                            fontSize: 4,
                            children: f(`group.edit.tabcaption.${e}`)
                        }), a(y, {
                            children: f(`group.edit.tabdesc.${e}`)
                        })]
                    })]
                }), g(M, {
                    grow: !0,
                    overflow: "hidden",
                    children: [e === 1 && a(vP, {
                        groupData: n,
                        setGroupData: o,
                        setCloseAction: i,
                        onClose: l
                    }), e === 2 && a(bP, {
                        groupData: n,
                        setGroupData: o,
                        setCloseAction: i,
                        skipDefault: !0
                    }), e === 3 && a(DP, {
                        groupData: n,
                        setGroupData: o,
                        setCloseAction: i
                    }), e === 5 && a(F7, {
                        groupData: n,
                        setGroupData: o,
                        setCloseAction: i
                    })]
                })]
            })]
        })
    },
    B7 = s => {
        const [e, t] = _.useState(-1),
            [r, i] = _.useState(-1),
            [n, o] = _.useState(null),
            [l, c] = _.useState(-1),
            [u, h] = _.useState(0),
            [d, m] = _.useState(""),
            [p, E] = _.useState(null),
            {showConfirm: T=null} = Yt(),
            I = v => {
                if (v.rank === Ws.OWNER)
                    return "group.members.owner";
                if (n.admin) {
                    if (v.rank === Ws.ADMIN)
                        return "group.members.removerights";
                    if (v.rank === Ws.MEMBER)
                        return "group.members.giverights"
                }
                return ""
            },
            S = _.useCallback(() => {
                e === -1 || r === -1 || l === -1 || B(new Jg(e, l, d, r))
            }, [e, r, l, d]),
            A = v => {
                !n.admin || v.rank === Ws.OWNER || (v.rank !== Ws.ADMIN ? B(new VN(n.groupId, v.id)) : B(new HN(n.groupId, v.id)), S())
            },
            N = v => {
                !n.admin || v.rank !== Ws.REQUESTED || (B(new QN(n.groupId, v.id)), S())
            },
            b = v => {
                if (n.admin) {
                    if (v.rank === Ws.REQUESTED) {
                        B(new JN(n.groupId, v.id)),
                        S();
                        return
                    }
                    E(v.name),
                    B(new zN(n.groupId, v.id))
                }
            };
        return W(VO, v => {
            const D = v.getParser();
            o(D),
            i(D.level),
            h(Math.ceil(D.totalMembersCount / D.pageSize))
        }), W(kO, v => {
            const D = v.getParser();
            T(f(D.furnitureCount > 0 ? "group.kickconfirm.desc" : "group.kickconfirm_nofurni.desc", ["user", "amount"], [p, D.furnitureCount.toString()]), () => {
                B(new Vd(n.groupId, D.userId)),
                S()
            }, null),
            E(null)
        }), _.useEffect(() => {
            const v = {
                linkReceived: D => {
                    const G = D.split("/");
                    if (G.length < 2)
                        return;
                    const x = parseInt(G[1]) || -1,
                        F = parseInt(G[2]) || 3;
                    t(x),
                    i(F),
                    c(0)
                },
                eventUrlPrefix: "group-members/"
            };
            return Ts(v), () => Rs(v)
        }, []), _.useEffect(() => {
            c(0)
        }, [e, r, d]), _.useEffect(() => {
            e === -1 || r === -1 || l === -1 || B(new Jg(e, l, d, r))
        }, [e, r, l, d]), _.useEffect(() => {
            e !== -1 && (i(-1), o(null), h(0), m(""), E(null))
        }, [e]), e === -1 || !n ? null : g(Se, {
            className: "nitro-group-members",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("group.members.title", ["groupName"], [n ? n.groupTitle : ""]),
                onCloseClick: v => t(-1)
            }), g(Ie, {
                overflow: "hidden",
                children: [g(P, {
                    gap: 2,
                    children: [a(P, {
                        center: !0,
                        className: "group-badge",
                        children: a(Vt, {
                            badgeCode: n.badge,
                            isGroup: !0,
                            className: "mx-auto d-block"
                        })
                    }), g(M, {
                        fullWidth: !0,
                        gap: 1,
                        children: [a("input", {
                            type: "text",
                            className: "form-control form-control-sm w-100",
                            placeholder: f("group.members.searchinfo"),
                            value: d,
                            onChange: v => m(v.target.value)
                        }), g("select", {
                            className: "form-select form-select-sm w-100",
                            value: r,
                            onChange: v => i(parseInt(v.target.value)),
                            children: [a("option", {
                                value: "0",
                                children: f("group.members.search.all")
                            }), a("option", {
                                value: "1",
                                children: f("group.members.search.admins")
                            }), a("option", {
                                value: "2",
                                children: f("group.members.search.pending")
                            })]
                        })]
                    })]
                }), a(fe, {
                    columnCount: 2,
                    overflow: "auto",
                    className: "nitro-group-members-list-grid",
                    children: n.result.map((v, D) => g(P, {
                        gap: 2,
                        alignItems: "center",
                        overflow: "hidden",
                        className: "member-list-item bg-white rounded p-2",
                        children: [a("div", {
                            className: "avatar-head cursor-pointer",
                            onClick: () => Fr(v.id),
                            children: a(rs, {
                                figure: v.figure,
                                headOnly: !0,
                                direction: 2
                            })
                        }), g(M, {
                            grow: !0,
                            gap: 1,
                            children: [a(y, {
                                bold: !0,
                                small: !0,
                                pointer: !0,
                                onClick: G => Fr(v.id),
                                children: v.name
                            }), v.rank !== Ws.REQUESTED && a(y, {
                                small: !0,
                                italics: !0,
                                variant: "muted",
                                children: f("group.members.since", ["date"], [v.joinedAt])
                            })]
                        }), g(M, {
                            gap: 1,
                            children: [v.rank !== Ws.REQUESTED && a(P, {
                                center: !0,
                                children: a(k, {
                                    pointer: n.admin,
                                    className: `icon icon-group-small-${v.rank === Ws.OWNER ? "owner" : v.rank === Ws.ADMIN ? "admin" : n.admin && v.rank === Ws.MEMBER ? "not-admin" : ""}`,
                                    title: f(I(v)),
                                    onClick: G => A(v)
                                })
                            }), n.admin && v.rank === Ws.REQUESTED && a(P, {
                                alignItems: "center",
                                children: a(k, {
                                    pointer: !0,
                                    className: "nitro-friends-spritesheet icon-accept",
                                    title: f("group.members.accept"),
                                    onClick: G => N(v)
                                })
                            }), n.admin && v.rank !== Ws.OWNER && v.id !== Z().userId && a(P, {
                                alignItems: "center",
                                children: a(k, {
                                    pointer: !0,
                                    className: "nitro-friends-spritesheet icon-deny",
                                    title: f(v.rank === Ws.REQUESTED ? "group.members.reject" : "group.members.kick"),
                                    onClick: G => b(v)
                                })
                            })]
                        })]
                    }, D))
                }), g(P, {
                    gap: 1,
                    justifyContent: "between",
                    alignItems: "center",
                    children: [a(H, {
                        disabled: n.pageIndex === 0,
                        onClick: v => c(D => D - 1),
                        children: a(ii, {
                            className: "fa-icon"
                        })
                    }), a(y, {
                        small: !0,
                        children: f("group.members.pageinfo", ["amount", "page", "totalPages"], [n.totalMembersCount.toString(), (n.pageIndex + 1).toString(), u.toString()])
                    }), a(H, {
                        disabled: n.pageIndex === u - 1,
                        onClick: v => c(D => D + 1),
                        children: a(ni, {
                            className: "fa-icon"
                        })
                    })]
                })]
            })]
        })
    },
    k7 = s => {
        const [e, t] = _.useState(!1);
        return Pu(), W(HO, r => {
            const i = r.getParser();
            t(!1),
            _i(i.roomId)
        }), _.useEffect(() => {
            const r = {
                linkReceived: i => {
                    const n = i.split("/");
                    if (!(n.length < 2))
                        switch (n[1]) {
                        case "create":
                            t(!0);
                            return;
                        case "manage":
                            if (!n[2])
                                return;
                            t(!1),
                            B(new sy(Number(n[2])));
                            return
                        }
                },
                eventUrlPrefix: "groups/"
            };
            return Ts(r), () => Rs(r)
        }, []), g(q, {
            children: [e && a(P7, {
                onClose: () => t(!1)
            }), !e && a(G7, {}), a(B7, {}), a(U7, {})]
        })
    },
    V7 = s => {
        const {helpRequestDescription: e=null, helpRequestAverageTime: t=0} = s,
            r = i => B(new Iy(i));
        return g(M, {
            children: [g(M, {
                gap: 0,
                className: "bg-muted p-2 rounded",
                children: [a(y, {
                    bold: !0,
                    children: f("guide.help.request.guide.accept.request.title")
                }), a(y, {
                    variant: "muted",
                    children: f("guide.help.request.type.1")
                }), a(y, {
                    wrap: !0,
                    textBreak: !0,
                    children: e
                })]
            }), g(M, {
                gap: 1,
                children: [a(H, {
                    variant: "success",
                    onClick: i => r(!0),
                    children: f("guide.help.request.guide.accept.accept.button")
                }), a(H, {
                    variant: "danger",
                    onClick: i => r(!1),
                    children: f("guide.help.request.guide.accept.skip.link")
                })]
            })]
        })
    },
    H7 = s => {
        const {isOnDuty: e=!1, isHandlingGuideRequests: t=!1, setIsHandlingGuideRequests: r=null, isHandlingHelpRequests: i=!1, setIsHandlingHelpRequests: n=null, isHandlingBullyReports: o=!1, setIsHandlingBullyReports: l=null, guidesOnDuty: c=0, helpersOnDuty: u=0, guardiansOnDuty: h=0, processAction: d=null} = s;
        return g(M, {
            children: [g(P, {
                alignItems: "center",
                gap: 2,
                className: "bg-muted p-2 rounded",
                children: [a(k, {
                    className: "duty-switch" + (e ? "" : " off"),
                    onClick: m => d("toggle_duty")
                }), g(M, {
                    gap: 0,
                    children: [a(y, {
                        bold: !0,
                        children: f("guide.help.guide.tool.yourstatus")
                    }), a(y, {
                        children: f(`guide.help.guide.tool.duty.${e ? "on" : "off"}`)
                    })]
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("guide.help.guide.tool.tickettypeselection.caption")
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        disabled: e,
                        type: "checkbox",
                        checked: t,
                        onChange: m => r(m.target.checked)
                    }), a(y, {
                        children: f("guide.help.guide.tool.tickettypeselection.guiderequests")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        disabled: e,
                        type: "checkbox",
                        checked: i,
                        onChange: m => n(m.target.checked)
                    }), a(y, {
                        children: f("guide.help.guide.tool.tickettypeselection.onlyhelprequests")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        disabled: e,
                        type: "checkbox",
                        checked: o,
                        onChange: m => l(m.target.checked)
                    }), a(y, {
                        children: f("guide.help.guide.tool.tickettypeselection.bullyreports")
                    })]
                })]
            }), a("hr", {
                className: "bg-dark m-0"
            }), g(P, {
                center: !0,
                gap: 2,
                children: [a(k, {
                    className: "info-icon"
                }), g(M, {
                    gap: 1,
                    children: [a(k, {
                        dangerouslySetInnerHTML: {
                            __html: f("guide.help.guide.tool.guidesonduty", ["amount"], [c.toString()])
                        }
                    }), a(k, {
                        dangerouslySetInnerHTML: {
                            __html: f("guide.help.guide.tool.helpersonduty", ["amount"], [u.toString()])
                        }
                    }), a(k, {
                        dangerouslySetInnerHTML: {
                            __html: f("guide.help.guide.tool.guardiansonduty", ["amount"], [h.toString()])
                        }
                    })]
                })]
            }), a("hr", {
                className: "bg-dark m-0"
            }), g(P, {
                justifyContent: "between",
                gap: 2,
                children: [a(H, {
                    disabled: !0,
                    onClick: m => d("forum_link"),
                    children: f("guide.help.guide.tool.forum.link")
                }), a(H, {
                    disabled: !0,
                    children: f("guide.help.guide.tool.skill.link")
                })]
            })]
        })
    },
    j7 = s => {
        const e = _.useRef(null),
            {isGuide: t=!1, userId: r=0, userName: i=null, userFigure: n=null, isTyping: o=!1, messageGroups: l=[]} = s,
            [c, u] = _.useState("");
        _.useEffect(() => {
            var I;
            (I = e.current) == null || I.scrollIntoView({
                block: "end",
                behavior: "smooth"
            })
        }, [l]);
        const h = _.useCallback(() => {
                B(new py)
            }, []),
            d = _.useCallback(() => {
                B(new Ty)
            }, []),
            m = _.useCallback(() => {
                B(new Sy)
            }, []);
        W(rS, I => {
            const S = I.getParser();
            _i(S.requesterRoomId)
        });
        const p = _.useCallback(() => {
                !c || !c.length || (B(new Ry(c)), u(""))
            }, [c]),
            E = _.useCallback(I => {
                I.key === "Enter" && p()
            }, [p]),
            T = _.useCallback(I => I === Z().userId, []);
        return g(M, {
            fullHeight: !0,
            children: [g(P, {
                alignItems: "center",
                justifyContent: "between",
                gap: 1,
                className: "bg-muted p-2 rounded",
                children: [t && g(An, {
                    children: [a(H, {
                        onClick: h,
                        children: f("guide.help.request.guide.ongoing.visit.button")
                    }), a(H, {
                        onClick: d,
                        children: f("guide.help.request.guide.ongoing.invite.button")
                    })]
                }), !t && g(M, {
                    gap: 0,
                    children: [a(y, {
                        bold: !0,
                        children: i
                    }), a(y, {
                        children: f("guide.help.request.user.ongoing.guide.desc")
                    })]
                }), a(H, {
                    variant: "danger",
                    disabled: !0,
                    children: f("guide.help.common.report.link")
                })]
            }), a(M, {
                overflow: "hidden",
                gap: 1,
                className: "bg-muted rounded chat-messages p-2",
                children: g(M, {
                    overflow: "auto",
                    children: [l.map((I, S) => g(P, {
                        fullWidth: !0,
                        justifyContent: T(I.userId) ? "end" : "start",
                        gap: 2,
                        children: [a(k, {
                            shrink: !0,
                            className: "message-avatar",
                            children: !T(I.userId) && a(rs, {
                                figure: n,
                                direction: 2
                            })
                        }), g(k, {
                            className: "bg-light text-black border-radius mb-2 rounded py-1 px-2 messages-group-" + (T(I.userId) ? "right" : "left"),
                            children: [g(y, {
                                bold: !0,
                                children: [T(I.userId) && Z().userName, !T(I.userId) && i]
                            }), I.messages.map((A, N) => a(k, {
                                pointer: !!A.roomId,
                                className: A.roomId ? "text-break text-underline" : "text-break",
                                onClick: () => A.roomId ? _i(A.roomId) : null,
                                children: A.message
                            }, N))]
                        }), T(I.userId) && a(k, {
                            className: "message-avatar flex-shrink-0",
                            children: a(rs, {
                                figure: Z().figure,
                                direction: 4
                            })
                        })]
                    }, S)), a("div", {
                        ref: e
                    })]
                })
            }), g(M, {
                gap: 1,
                children: [g(P, {
                    gap: 1,
                    children: [a("input", {
                        type: "text",
                        className: "form-control form-control-sm",
                        placeholder: f("guide.help.request.guide.ongoing.input.empty", ["name"], [i]),
                        value: c,
                        onChange: I => u(I.target.value),
                        onKeyDown: E
                    }), a(H, {
                        variant: "success",
                        onClick: p,
                        children: f("widgets.chatinput.say")
                    })]
                }), o && a(y, {
                    variant: "muted",
                    children: f("guide.help.common.typing")
                })]
            }), a(H, {
                fullWidth: !0,
                variant: "success",
                onClick: m,
                children: f("guide.help.request." + (t ? "guide" : "user") + ".ongoing.close.link")
            })]
        })
    },
    W7 = 15,
    Y7 = s => {
        const {userRequest: e="", setUserRequest: t=null} = s,
            [r, i] = _.useState(!1),
            n = () => {
                i(!0),
                B(new my(1, e))
            };
        return g(M, {
            children: [a(y, {
                children: f("guide.help.request.user.create.help")
            }), a("textarea", {
                className: "request-message",
                maxLength: 140,
                value: e,
                onChange: o => t(o.target.value),
                placeholder: f("guide.help.request.user.create.input.help")
            }), a(H, {
                fullWidth: !0,
                variant: "success",
                disabled: e.length < W7 || r,
                onClick: n,
                children: f("guide.help.request.user.create.input.button")
            })]
        })
    },
    z7 = s => {
        const {userName: e=null} = s,
            t = r => B(new Ey(r));
        return g(M, {
            children: [g(P, {
                justifyContent: "between",
                gap: 1,
                className: "bg-muted p-2 rounded",
                children: [g(M, {
                    gap: 0,
                    children: [a(y, {
                        bold: !0,
                        children: e
                    }), a(y, {
                        children: f("guide.help.request.user.feedback.guide.desc")
                    })]
                }), a(H, {
                    variant: "danger",
                    disabled: !0,
                    children: f("guide.help.common.report.link")
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("guide.help.request.user.feedback.closed.title")
                }), a(y, {
                    children: f("guide.help.request.user.feedback.closed.desc")
                })]
            }), e && e.length > 0 && g(q, {
                children: [a("hr", {
                    className: "bg-dark m-0 mt-auto"
                }), g(M, {
                    children: [a(y, {
                        center: !0,
                        bold: !0,
                        children: f("guide.help.request.user.feedback.question")
                    }), g(P, {
                        gap: 1,
                        children: [a(H, {
                            fullWidth: !0,
                            variant: "success",
                            onClick: r => t(!0),
                            children: f("guide.help.request.user.feedback.positive.button")
                        }), a(H, {
                            fullWidth: !0,
                            variant: "danger",
                            onClick: r => t(!1),
                            children: f("guide.help.request.user.feedback.negative.button")
                        })]
                    })]
                })]
            })]
        })
    },
    K7 = s => g(M, {
        gap: 1,
        children: [a(y, {
            bold: !0,
            children: f("guide.help.request.no_tour_guides.title")
        }), a(y, {
            children: f("guide.help.request.no_tour_guides.message")
        })]
    }),
    q7 = s => {
        const {helpRequestDescription: e=null, helpRequestAverageTime: t=0} = s,
            r = () => B(new Oy);
        return g(M, {
            children: [g(M, {
                gap: 0,
                className: "bg-muted rounded p-2",
                children: [a(y, {
                    bold: !0,
                    children: f("guide.help.request.guide.accept.request.title")
                }), a(y, {
                    variant: "muted",
                    children: f("guide.help.request.type.1")
                }), a(y, {
                    wrap: !0,
                    textBreak: !0,
                    children: e
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("guide.help.request.user.pending.info.title")
                }), a(y, {
                    children: f("guide.help.request.user.pending.info.message")
                }), a(y, {
                    children: f("guide.help.request.user.pending.info.waiting", ["waitingtime"], [t.toString()])
                })]
            }), a(H, {
                variant: "danger",
                onClick: r,
                children: f("guide.help.request.user.pending.cancel.button")
            })]
        })
    },
    X7 = s => a(M, {
        gap: 1,
        children: a(y, {
            children: f("guide.help.request.user.guide.disconnected.error.desc")
        })
    }),
    Q7 = s => g(M, {
        gap: 1,
        children: [a(y, {
            bold: !0,
            children: f("guide.help.request.user.thanks.info.title")
        }), a(y, {
            children: f("guide.help.request.user.thanks.info.desc")
        })]
    }),
    J7 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(f("guide.help.guide.tool.title")),
            [n, o] = _.useState(!1),
            [l, c] = _.useState(xe.GUIDE_TOOL_MENU),
            [u, h] = _.useState(!1),
            [d, m] = _.useState(!1),
            [p, E] = _.useState(!1),
            [T, I] = _.useState(!1),
            [S, A] = _.useState(0),
            [N, b] = _.useState(0),
            [v, D] = _.useState(0),
            [G, x] = _.useState(""),
            [F, U] = _.useState(null),
            [z, Q] = _.useState(0),
            [j, J] = _.useState(0),
            [X, K] = _.useState(null),
            [be, he] = _.useState(null),
            [et, Ut] = _.useState(!1),
            [fs, Xt] = _.useState([]),
            {simpleAlert: ms=null} = Yt(),
            ut = _.useCallback((It, Ve) => {
                switch (It) {
                case xe.GUIDE_TOOL_MENU:
                    i(f("guide.help.guide.tool.title")),
                    o(!1);
                    break;
                case xe.GUIDE_ACCEPT:
                    i(f("guide.help.request.guide.accept.title")),
                    o(!0);
                    break;
                case xe.GUIDE_ONGOING:
                    i(f("guide.help.request.guide.ongoing.title", ["name"], [Ve])),
                    o(!0);
                    break;
                case xe.USER_CREATE:
                    i(f("guide.help.request.user.create.title")),
                    o(!1);
                    break;
                case xe.USER_PENDING:
                    i(f("guide.help.request.user.pending.title")),
                    o(!0);
                    break;
                case xe.USER_ONGOING:
                    i(f("guide.help.request.user.ongoing.title", ["name"], [Ve])),
                    o(!0);
                    break;
                case xe.USER_FEEDBACK:
                    i(f("guide.help.request.user.feedback.title")),
                    o(!0);
                    break;
                case xe.USER_THANKS:
                    i(f("guide.help.request.user.thanks.title")),
                    o(!1);
                    break;
                case xe.USER_NO_HELPERS:
                    i(f("guide.help.request.no_tour_guides.heading")),
                    o(!1);
                    break;
                case xe.USER_SOMETHING_WRONG:
                    i(f("guide.help.request.user.guide.disconnected.error.heading")),
                    o(!1);
                    break
                }
                c(It),
                t(!0)
            }, []),
            Ps = _.useCallback(It => {
                switch (It.type) {
                case hr.SHOW_GUIDE_TOOL:
                    t(!0);
                    return;
                case hr.HIDE_GUIDE_TOOL:
                    t(!1);
                    return;
                case hr.TOGGLE_GUIDE_TOOL:
                    t(Ve => !Ve);
                    return;
                case hr.CREATE_HELP_REQUEST:
                    ut(xe.USER_CREATE);
                    return
                }
            }, [ut]);
        hs(hr.SHOW_GUIDE_TOOL, Ps),
        hs(hr.HIDE_GUIDE_TOOL, Ps),
        hs(hr.TOGGLE_GUIDE_TOOL, Ps),
        hs(hr.CREATE_HELP_REQUEST, Ps),
        W(Gm, It => {
            !It.getParser().isAllowed(si.USE_GUIDE_TOOL) && u && (h(!1), B(new Zg(!1, !1, !1, !1)))
        }),
        W(JO, It => {
            const Ve = It.getParser();
            h(Ve.onDuty),
            b(Ve.guidesOnDuty),
            A(Ve.helpersOnDuty),
            D(Ve.guardiansOnDuty)
        }),
        W(ZO, It => {
            const Ve = It.getParser();
            U(Ve.helpRequestDescription),
            Q(Ve.roleSpecificWaitTime),
            Ve.asGuide && u && ut(xe.GUIDE_ACCEPT),
            Ve.asGuide || ut(xe.USER_PENDING)
        }),
        W(Pm, It => {
            const Ve = It.getParser();
            u ? (J(Ve.requesterUserId), K(Ve.requesterName), he(Ve.requesterFigure), ut(xe.GUIDE_ONGOING, Ve.requesterName)) : (J(Ve.guideUserId), K(Ve.guideName), he(Ve.guideFigure), ut(xe.USER_ONGOING, Ve.guideName))
        }),
        W(sS, It => {
            const Ve = It.getParser();
            Ut(Ve.isTyping)
        }),
        W(tS, It => {
            const Ve = It.getParser(),
                Dt = [...fs];
            let Hs = Dt[Dt.length - 1];
            (!Hs || Hs.userId !== Ve.senderId) && (Hs = new Hp(Ve.senderId), Dt.push(Hs)),
            Hs.addChat(new Vp(Ve.chatMessage)),
            Xt(Dt)
        }),
        W(eS, It => {
            const Ve = It.getParser();
            if (Ve.roomId !== 0) {
                const Dt = [...fs];
                let Hs = Dt[Dt.length - 1];
                const Fe = u ? Z().userId : j;
                (!Hs || Hs.userId !== Fe) && (Hs = new Hp(Fe), Dt.push(Hs)),
                Hs.addChat(new Vp(Ve.roomName, Ve.roomId)),
                Xt(Dt)
            }
        }),
        W(Dm, It => {
            u ? (J(0), K(null), he(null), Ut(!1), Xt([]), ut(xe.GUIDE_TOOL_MENU)) : ut(xe.USER_FEEDBACK)
        }),
        W(vm, It => {
            switch (It.getParser().errorCode) {
            case 0:
                ut(xe.USER_SOMETHING_WRONG);
                break;
            case 1:
            case 2:
                ut(xe.USER_NO_HELPERS);
                break
            }
        }),
        W($O, It => {
            J(0),
            K(null),
            he(null),
            Ut(!1),
            Xt([]),
            ut(u ? xe.GUIDE_TOOL_MENU : xe.USER_THANKS)
        }),
        _.useEffect(() => {
            const It = {
                linkReceived: Ve => {
                    const Dt = Ve.split("/");
                    if (!(Dt.length < 2))
                        switch (Dt[1]) {
                        case "tour":
                            return
                        }
                },
                eventUrlPrefix: "help/"
            };
            return Ts(It), () => Rs(It)
        }, []);
        const Cr = _.useCallback(It => {
            switch (It) {
            case "close":
                t(!1),
                x(""),
                c(xe.GUIDE_TOOL_MENU);
                return;
            case "toggle_duty":
                if (!d && !p && !T) {
                    ms(f("guide.help.guide.tool.noqueueselected.message"), null, null, null, f("guide.help.guide.tool.noqueueselected.caption"), null);
                    return
                }
                h(Dt => (B(new Zg(!Dt, Dt ? !1 : p, Dt ? !1 : T, Dt ? !1 : d)), !Dt));
                return;
            case "forum_link":
                const Ve = oe("group.homepage.url", "").replace("%groupid%", oe("guide.help.alpha.groupid", "0"));
                window.open(Ve);
                return
            }
        }, [d, p, T, ms]);
        return e ? g(Se, {
            className: "nitro-guide-tool",
            theme: "habbo",
            children: [a(Oe, {
                headerText: r,
                onCloseClick: It => Cr("close"),
                noCloseButton: n
            }), g(Ie, {
                className: "text-black",
                children: [l === xe.GUIDE_TOOL_MENU && a(H7, {
                    isOnDuty: u,
                    isHandlingGuideRequests: p,
                    setIsHandlingGuideRequests: E,
                    isHandlingHelpRequests: T,
                    setIsHandlingHelpRequests: I,
                    isHandlingBullyReports: d,
                    setIsHandlingBullyReports: m,
                    guidesOnDuty: N,
                    helpersOnDuty: S,
                    guardiansOnDuty: v,
                    processAction: Cr
                }), l === xe.GUIDE_ACCEPT && a(V7, {
                    helpRequestDescription: F,
                    helpRequestAverageTime: z
                }), [xe.GUIDE_ONGOING, xe.USER_ONGOING].includes(l) && a(j7, {
                    isGuide: u,
                    userId: j,
                    userName: X,
                    userFigure: be,
                    isTyping: et,
                    messageGroups: fs
                }), l === xe.USER_CREATE && a(Y7, {
                    userRequest: G,
                    setUserRequest: x
                }), l === xe.USER_PENDING && a(q7, {
                    helpRequestDescription: F,
                    helpRequestAverageTime: z
                }), l === xe.USER_FEEDBACK && a(z7, {
                    userName: X
                }), l === xe.USER_THANKS && a(Q7, {}), l === xe.USER_NO_HELPERS && a(K7, {}), l === xe.USER_SOMETHING_WRONG && a(X7, {})]
            })]
        }) : null
    },
    Z7 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(null),
            [n, o] = _.useState(0),
            [l, c] = _.useState(null),
            {userFigure: u=null} = fa(),
            {purse: h=null, clubStatus: d=null} = Qo(),
            {badgeCodes: m=[], activate: p=null, deactivate: E=null} = __(),
            T = () => h.clubDays <= 0 ? f("purse.clubdays.zero.amount.text") : h.minutesUntilExpiration > -1 && h.minutesUntilExpiration < 60 * 24 ? _r.shortFormat(h.minutesUntilExpiration * 60) : _r.shortFormat((h.clubPeriods * 31 + h.clubDays) * 86400),
            I = () => {
                switch (d) {
                case Xi.ACTIVE:
                    return f(`hccenter.status.${d}.info`, ["timeleft", "joindate", "streakduration"], [T(), r == null ? void 0 : r.firstSubscriptionDate, _r.shortFormat((r == null ? void 0 : r.currentHcStreak) * 86400)]);
                case Xi.EXPIRED:
                    return f(`hccenter.status.${d}.info`, ["joindate"], [r == null ? void 0 : r.firstSubscriptionDate]);
                default:
                    return f(`hccenter.status.${d}.info`)
                }
            },
            S = () => !r || r.timeUntilPayday < 60 ? f("hccenter.special.time.soon") : _r.shortFormat(r.timeUntilPayday * 60),
            A = () => f("hccenter.special.sum", ["credits"], [((r == null ? void 0 : r.creditRewardForStreakBonus) + (r == null ? void 0 : r.creditRewardForMonthlySpent)).toString()]);
        if (W(Cm, b => {
            const v = b.getParser();
            o(v.giftsAvailable)
        }), W(WA, b => {
            const v = b.getParser();
            i(v.data)
        }), _.useEffect(() => {
            const b = {
                linkReceived: v => {
                    const D = v.split("/");
                    if (!(D.length < 2))
                        switch (D[1]) {
                        case "open":
                            if (D.length > 2)
                                switch (D[2]) {
                                case "hccenter":
                                    t(!0);
                                    break
                                }
                            return
                        }
                },
                eventUrlPrefix: "habboUI/"
            };
            return Ts(b), () => Rs(b)
        }, []), _.useEffect(() => {
            c(o4(m))
        }, [m]), _.useEffect(() => {
            if (!e)
                return;
            const b = p();
            return () => E(b)
        }, [e, p, E]), _.useEffect(() => {
            B(new Xm),
            B(new aD)
        }, []), !e)
            return null;
        const N = a(Ch, {
            id: "popover-basic",
            children: g(Ch.Body, {
                className: "text-black py-2 px-3",
                children: [a("h5", {
                    children: f("hccenter.breakdown.title")
                }), a("div", {
                    children: f("hccenter.breakdown.creditsspent", ["credits"], [r == null ? void 0 : r.totalCreditsSpent.toString()])
                }), a("div", {
                    children: f("hccenter.breakdown.paydayfactor.percent", ["percent"], [((r == null ? void 0 : r.kickbackPercentage) * 100).toString()])
                }), a("div", {
                    children: f("hccenter.breakdown.streakbonus", ["credits"], [r == null ? void 0 : r.creditRewardForStreakBonus.toString()])
                }), a("hr", {
                    className: "w-100 text-black my-1"
                }), a("div", {
                    children: f("hccenter.breakdown.total", ["credits", "actual"], [A(), (((r == null ? void 0 : r.kickbackPercentage) * (r == null ? void 0 : r.totalCreditsSpent) + (r == null ? void 0 : r.creditRewardForStreakBonus)) * 100 / 100).toString()])
                }), a("div", {
                    className: "btn btn-link text-primary p-0",
                    onClick: () => ge("habbopages/" + oe("hc.center")["payday.habbopage"]),
                    children: f("hccenter.special.infolink")
                })]
            })
        });
        return g(Se, {
            theme: "primary",
            className: "nitro-hc-center",
            children: [a(Oe, {
                headerText: f("generic.hccenter"),
                onCloseClick: () => t(!1)
            }), g(P, {
                position: "relative",
                className: "bg-muted p-2",
                children: [g(M, {
                    gap: 1,
                    children: [a("div", {
                        className: "hc-logo"
                    }), a(P, {
                        children: a(H, {
                            variant: "success",
                            onClick: b => ge("catalog/open/" + oe("catalog.links")["hc.buy_hc"]),
                            children: f(d === Xi.ACTIVE ? "hccenter.btn.extend" : "hccenter.btn.buy")
                        })
                    })]
                }), a(k, {
                    position: "absolute",
                    className: "end-0 p-4 top-0 habbo-avatar",
                    children: a(rs, {
                        figure: u,
                        direction: 4,
                        scale: 2
                    })
                })]
            }), g(Ie, {
                children: [g(P, {
                    gap: 2,
                    children: [a(Vt, {
                        badgeCode: l,
                        className: "align-self-center flex-shrink-0 me-1"
                    }), g(M, {
                        size: 5,
                        className: "streak-info",
                        gap: 0,
                        children: [a(y, {
                            children: f("hccenter.status." + d)
                        }), a(y, {
                            dangerouslySetInnerHTML: {
                                __html: I()
                            }
                        })]
                    })]
                }), oe("hc.center")["payday.info"] && g(P, {
                    alignItems: "center",
                    children: [g(M, {
                        className: "rounded-start bg-primary p-2 payday-special mb-1",
                        children: [a("h4", {
                            className: "mb-1",
                            children: f("hccenter.special.title")
                        }), a("div", {
                            children: f("hccenter.special.info")
                        }), a("div", {
                            className: "btn btn-link text-white p-0 mt-auto align-self-baseline",
                            onClick: () => ge("habbopages/" + oe("hc.center")["payday.habbopage"]),
                            children: f("hccenter.special.infolink")
                        })]
                    }), g("div", {
                        className: "payday flex-shrink-0 p-2",
                        children: [a("h5", {
                            className: "mb-2 ms-2",
                            children: f("hccenter.special.time.title")
                        }), g("div", {
                            className: "d-flex flex-row mb-2",
                            children: [a("div", {
                                className: "clock me-2"
                            }), a("h6", {
                                className: "mb-0 align-self-center",
                                children: S()
                            })]
                        }), d === Xi.ACTIVE && g("div", {
                            className: "pe-3",
                            children: [a("h5", {
                                className: "ms-2 mb-1 bolder",
                                children: f("hccenter.special.amount.title")
                            }), g("div", {
                                className: "d-flex flex-column",
                                children: [a("div", {
                                    className: "w-100 text-center ms-4n",
                                    children: A()
                                }), a(lT, {
                                    trigger: ["hover", "focus"],
                                    placement: "left",
                                    overlay: N,
                                    children: a("div", {
                                        className: "btn btn-link align-self-end text-primary",
                                        children: f("hccenter.breakdown.infolink")
                                    })
                                })]
                            })]
                        })]
                    })]
                }), oe("hc.center")["gift.info"] && g("div", {
                    className: "rounded bg-success p-2 d-flex flex-row mb-0",
                    children: [g("div", {
                        children: [a("h4", {
                            className: "mb-1",
                            children: f("hccenter.gift.title")
                        }), a("div", {
                            dangerouslySetInnerHTML: {
                                __html: n > 0 ? f("hccenter.unclaimedgifts", ["unclaimedgifts"], [n.toString()]) : f("hccenter.gift.info")
                            }
                        })]
                    }), a("button", {
                        className: "btn btn-primary btn-lg align-self-center ms-auto",
                        onClick: () => ge("catalog/open/" + oe("catalog.links")["hc.hc_gifts"]),
                        children: f(d === Xi.ACTIVE ? "hccenter.btn.gifts.redeem" : "hccenter.btn.gifts.view")
                    })]
                }), oe("hc.center")["benefits.info"] && g("div", {
                    className: "benefits text-black py-2",
                    children: [a("h5", {
                        className: "mb-1 text-primary",
                        children: f("hccenter.general.title")
                    }), a("div", {
                        className: "mb-2",
                        dangerouslySetInnerHTML: {
                            __html: f("hccenter.general.info")
                        }
                    }), a("button", {
                        className: "btn btn-link p-0 text-primary",
                        onClick: () => ge("habbopages/" + oe("hc.center")["benefits.habbopage"]),
                        children: f("hccenter.general.infolink")
                    })]
                })]
            })]
        })
    },
    $7 = s => {
        const [e, t] = _.useState(""),
            {activeReport: r=null, setActiveReport: i=null} = Vi(),
            n = () => {
                e.length < 15 || i(l => {
                    const c = Ks.REPORT_SUMMARY;
                    return {
                        ...l,
                        message: e,
                        currentStep: c
                    }
                })
            },
            o = () => {
                i(l => ({
                    ...l,
                    currentStep: l.currentStep - 1
                }))
            };
        return g(q, {
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    fontSize: 4,
                    children: f("help.emergency.chat_report.subtitle")
                }), a(y, {
                    children: f("help.cfh.input.text")
                })]
            }), a("textarea", {
                className: "form-control h-100",
                value: e,
                onChange: l => t(l.target.value)
            }), g(P, {
                gap: 2,
                justifyContent: "between",
                children: [a(H, {
                    variant: "secondary",
                    disabled: !(r.reportType === Lt.BULLY || r.reportType === Lt.EMERGENCY),
                    onClick: o,
                    children: f("generic.back")
                }), a(H, {
                    disabled: e.length < 15,
                    onClick: n,
                    children: f("help.emergency.main.submit.button")
                })]
            })]
        })
    },
    e8 = s => {
        const {setActiveReport: e=null} = Vi(),
            t = () => {
                e(r => {
                    const i = Ks.SELECT_USER,
                        n = Lt.BULLY;
                    return {
                        ...r,
                        currentStep: i,
                        reportType: n
                    }
                })
            };
        return g(q, {
            children: [g(M, {
                grow: !0,
                center: !0,
                gap: 1,
                children: [a(y, {
                    fontSize: 3,
                    children: f("help.main.frame.title")
                }), a(y, {
                    children: f("help.main.self.description")
                })]
            }), g(M, {
                gap: 1,
                children: [a(H, {
                    onClick: t,
                    children: f("help.main.bully.subtitle")
                }), a(H, {
                    onClick: () => Ms(new hr(hr.CREATE_HELP_REQUEST)),
                    disabled: !oe("guides.enabled"),
                    children: f("help.main.help.title")
                }), a(H, {
                    disabled: !0,
                    children: f("help.main.self.tips.title")
                })]
            }), a(H, {
                variant: "link",
                textColor: "black",
                onClick: () => B(new gy(!1)),
                children: f("help.main.my.sanction.status")
            })]
        })
    },
    t8 = s => {
        const {username: e="", onAction: t=null} = s,
            [r, i] = _.useState(!1),
            n = () => {
                r || (i(!0), B(new KA(e)))
            };
        return W(Bd, o => {
            const l = o.getParser();
            l && l.webId === Z().userId && t("close")
        }), g("div", {
            className: "d-flex flex-column gap-4 h-100",
            children: [a("div", {
                className: "bg-muted rounded p-2 text-center",
                children: f("tutorial.name_change.info.confirm")
            }), g("div", {
                className: "d-flex flex-column align-items-center gap-1 h-100",
                children: [a("div", {
                    children: f("tutorial.name_change.confirm")
                }), a("div", {
                    className: "fw-bold",
                    children: e
                })]
            }), g("div", {
                className: "d-flex gap-2",
                children: [a("button", {
                    className: "btn btn-success w-100",
                    disabled: r,
                    onClick: n,
                    children: f("generic.ok")
                }), a("button", {
                    className: "btn btn-primary w-100",
                    onClick: () => t("close"),
                    children: f("cancel")
                })]
            })]
        })
    },
    s8 = s => {
        const {onAction: e=null} = s;
        return g("div", {
            className: "d-flex flex-column gap-4 h-100",
            children: [a("div", {
                className: "bg-muted rounded p-2 text-center",
                children: f("tutorial.name_change.info.main")
            }), a("div", {
                className: "fw-bold d-flex align-items-center justify-content-center h-100 w-100",
                children: f("tutorial.name_change.current", ["name"], [Z().userName])
            }), g("div", {
                className: "d-flex gap-2",
                children: [a("button", {
                    className: "btn btn-success w-100",
                    onClick: () => e("start"),
                    children: f("tutorial.name_change.change")
                }), a("button", {
                    className: "btn btn-primary w-100",
                    onClick: () => e("confirmation", Z().userName),
                    children: f("tutorial.name_change.keep")
                })]
            })]
        })
    },
    r8 = 0,
    i8 = 2,
    n8 = 3,
    a8 = 4,
    o8 = 5,
    l8 = 6,
    c8 = s => {
        const {onAction: e=null} = s,
            [t, r] = _.useState(""),
            [i, n] = _.useState(!1),
            [o, l] = _.useState(!1),
            [c, u] = _.useState(null),
            [h, d] = _.useState([]),
            m = () => {
                t !== "" && (n(!1), d([]), u(null), l(!0), B(new qA(t)))
            },
            p = E => {
                n(!1),
                d([]),
                u(null),
                r(E)
            };
        return W(zR, E => {
            l(!1);
            const T = E.getParser();
            if (T)
                switch (T.resultCode) {
                case r8:
                    n(!0);
                    break;
                case i8:
                    u("short");
                    break;
                case n8:
                    u("long");
                    break;
                case a8:
                    u("invalid");
                    break;
                case o8:
                    d(T.nameSuggestions),
                    u("taken");
                    break;
                case l8:
                    u("change_not_allowed")
                }
        }), g("div", {
            className: "d-flex flex-column gap-3 h-100",
            children: [a("div", {
                children: f("tutorial.name_change.info.select")
            }), g("div", {
                className: "d-flex gap-2",
                children: [a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: t,
                    onChange: E => p(E.target.value)
                }), a("button", {
                    className: "btn btn-primary",
                    disabled: t === "" || o,
                    onClick: m,
                    children: f("tutorial.name_change.check")
                })]
            }), !c && !i && a("div", {
                className: "bg-muted rounded p-2 text-center",
                children: f("help.tutorial.name.info")
            }), c && a("div", {
                className: "bg-danger rounded p-2 text-center text-white",
                children: f(`help.tutorial.name.${c}`, ["name"], [t])
            }), i && a("div", {
                className: "bg-success rounded p-2 text-center text-white",
                children: f("help.tutorial.name.available", ["name"], [t])
            }), h && a("div", {
                className: "d-flex flex-column gap-2",
                children: h.map((E, T) => a("div", {
                    className: "col bg-muted rounded p-1 cursor-pointer",
                    onClick: () => p(E),
                    children: E
                }, T))
            }), g("div", {
                className: "d-flex gap-2",
                children: [a("button", {
                    className: "btn btn-success w-100",
                    disabled: !i,
                    onClick: () => e("confirmation", t),
                    children: f("tutorial.name_change.pick")
                }), a("button", {
                    className: "btn btn-primary w-100",
                    onClick: () => e("close"),
                    children: f("cancel")
                })]
            })]
        })
    },
    Qu = "INIT",
    P_ = "INPUT",
    L_ = "CONFIRMATION",
    u8 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(Qu),
            [n, o] = _.useState(""),
            l = (u, h) => {
                switch (u) {
                case "start":
                    i(P_);
                    break;
                case "confirmation":
                    o(h),
                    i(L_);
                    break;
                case "close":
                    o(""),
                    t(!1);
                    break
                }
            },
            c = _.useMemo(() => {
                switch (r) {
                case Qu:
                    return "tutorial.name_change.title.main";
                case P_:
                    return "tutorial.name_change.title.select";
                case L_:
                    return "tutorial.name_change.title.confirm"
                }
            }, [r]);
        return hs(gd.INIT, u => {
            i(Qu),
            t(!0)
        }), e ? g(Se, {
            className: "nitro-change-username",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f(c),
                onCloseClick: () => l("close")
            }), g(Ie, {
                className: "text-black",
                children: [r === Qu && a(s8, {
                    onAction: l
                }), r === P_ && a(c8, {
                    onAction: l
                }), r === L_ && a(t8, {
                    username: n,
                    onAction: l
                })]
            })]
        }) : null
    },
    h8 = s => {
        const {activeReport: e=null, setActiveReport: t=null} = Vi(),
            r = () => {
                const i = [];
                switch (e.reportType) {
                case Lt.BULLY:
                case Lt.EMERGENCY:
                case Lt.ROOM:
                    {
                        const n = e.roomId <= 0 ? e.reportedChats[0].roomId : e.roomId;
                        e.reportedChats.forEach(o => i.push(o.webId, o.message)),
                        B(new dy(e.message, e.cfhTopic, e.reportedUserId, n, i));
                        break
                    }case Lt.IM:
                    e.reportedChats.forEach(n => i.push(n.webId, n.message)),
                    B(new uy(e.message, e.cfhTopic, e.reportedUserId, i));
                    break;
                case Lt.THREAD:
                    B(new cy(e.groupId, e.threadId, e.cfhTopic, e.message));
                    break;
                case Lt.MESSAGE:
                    B(new ly(e.groupId, e.threadId, e.messageId, e.cfhTopic, e.message));
                    break;
                case Lt.PHOTO:
                    B(new hy(e.extraData, e.roomId, e.reportedUserId, e.cfhTopic, e.roomObjectId));
                    break
                }
                t(null)
            };
        return g(q, {
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    fontSize: 4,
                    children: f("help.cfh.button.send")
                }), a(y, {
                    children: f("help.main.summary")
                })]
            }), a(H, {
                variant: "success",
                onClick: r,
                children: f("guide.help.request.emergency.submit.button")
            })]
        })
    },
    d8 = s => {
        const {sanctionInfo: e=null, setSanctionInfo: t=null} = Vi(),
            r = (i, n, o) => {
                let l = `help.sanction.${i}`;
                switch (n) {
                case "ALERT":
                    l = l + ".alert";
                    break;
                case "MUTE":
                    l = l + ".mute";
                    break;
                case "BAN_PERMANENT":
                    l = l + ".permban";
                    break;
                default:
                    if (l = l + ".ban", o > 24)
                        return l = l + ".days", f(l, ["days"], [(o / 24).toString()])
                }
                return f(l, ["hours"], [o.toString()])
            };
        return e ? g(Se, {
            className: "nitro-help",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("help.sanction.info.title"),
                onCloseClick: () => t(null)
            }), a(Ie, {
                className: "text-black",
                children: g(fe, {
                    children: [a(M, {
                        center: !0,
                        size: 5,
                        overflow: "hidden",
                        children: a(k, {
                            className: "index-image"
                        })
                    }), g(M, {
                        justifyContent: "between",
                        size: 7,
                        overflow: "hidden",
                        children: [e.sanctionReason === "cfh.reason.EMPTY" ? a("div", {
                            className: "col-12 fw-bold",
                            children: f("help.sanction.current.none")
                        }) : g(q, {
                            children: [(e.probationHoursLeft > 0 || e.isSanctionActive) && a("div", {
                                className: "col-12 fw-bold",
                                children: f("help.sanction.probation.reminder")
                            }), g("div", {
                                className: `col-12 fw-bold ${e.isSanctionNew ? "text-danger" : ""}`,
                                children: [f("help.sanction.last.sanction"), " ", r("current", e.sanctionName, e.sanctionLengthHours)]
                            }), g("div", {
                                className: "col-12",
                                children: [f("generic.start.time"), " ", e.sanctionCreationTime]
                            }), g("div", {
                                className: "col-12",
                                children: [f("generic.reason"), " ", e.sanctionReason]
                            }), g("div", {
                                className: "col-12",
                                children: [f("help.sanction.probation.days.left"), " ", Math.trunc(e.probationHoursLeft / 24) + 1]
                            })]
                        }), e.hasCustomMute && !e.isSanctionActive && a("div", {
                            className: "col-12 fw-bold",
                            children: f("help.sanction.custom.mute")
                        }), e.tradeLockExpiryTime && e.tradeLockExpiryTime.length > 0 && g("div", {
                            className: "col-12 fw-bold",
                            children: [f("trade.locked.until"), " ", e.tradeLockExpiryTime]
                        }), a("div", {
                            className: "col-12",
                            children: r("next", e.nextSanctionName, e.nextSanctionLengthHours)
                        }), a(H, {
                            variant: "success",
                            onClick: i => t(null),
                            children: f("habbo.way.ok.button")
                        })]
                    })]
                })
            })]
        }) : null
    },
    _8 = s => {
        const [e, t] = _.useState([]),
            {activeReport: r=null, setActiveReport: i=null} = Vi(),
            {chatHistory: n=[], messengerHistory: o=[]} = u_(),
            l = _.useMemo(() => {
                switch (r.reportType) {
                case Lt.BULLY:
                case Lt.EMERGENCY:
                    return n.filter(d => d.type === xi.TYPE_CHAT && d.webId === r.reportedUserId && d.entityType === yt.USER);
                case Lt.IM:
                    return o.filter(d => d.webId === r.reportedUserId && d.type === xi.TYPE_IM)
                }
                return []
            }, [r, n, o]),
            c = d => {
                t(m => {
                    const p = [...m],
                        E = p.indexOf(d);
                    return E >= 0 ? p.splice(E, 1) : p.push(d), p
                })
            },
            u = () => {
                !e || e.length <= 0 || i(d => ({
                    ...d,
                    reportedChats: e,
                    currentStep: Ks.SELECT_TOPICS
                }))
            },
            h = () => {
                i(d => ({
                    ...d,
                    currentStep: d.currentStep - 1
                }))
            };
        return g(q, {
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    fontSize: 4,
                    children: f("help.emergency.chat_report.subtitle")
                }), a(y, {
                    children: f("help.emergency.chat_report.description")
                })]
            }), g(M, {
                gap: 1,
                overflow: "hidden",
                children: [!l || !l.length && a(y, {
                    children: f("help.cfh.error.no_user_data")
                }), l.length > 0 && a(Mt, {
                    gap: 1,
                    columnCount: 1,
                    columnMinHeight: 25,
                    overflow: "auto",
                    children: l.map((d, m) => a($e, {
                        onClick: p => c(d),
                        itemActive: e.indexOf(d) >= 0,
                        children: a(y, {
                            children: d.message
                        })
                    }, d.id))
                })]
            }), g(P, {
                gap: 2,
                justifyContent: "between",
                children: [a(H, {
                    variant: "secondary",
                    onClick: h,
                    disabled: r.reportType === Lt.IM,
                    children: f("generic.back")
                }), a(H, {
                    disabled: e.length <= 0,
                    onClick: u,
                    children: f("help.emergency.main.submit.button")
                })]
            })]
        })
    },
    g8 = s => {
        const [e, t] = _.useState(-1),
            {chatHistory: r=[]} = u_(),
            {activeReport: i=null, setActiveReport: n=null} = Vi(),
            o = _.useMemo(() => {
                const h = new Map;
                return r.forEach(d => {
                    d.type === xi.TYPE_CHAT && d.entityType === yt.USER && d.webId !== Z().userId && !h.has(d.webId) && h.set(d.webId, {
                        id: d.webId,
                        username: d.name
                    })
                }), Array.from(h.values())
            }, [r]),
            l = h => {
                h <= 0 || n(d => ({
                    ...d,
                    reportedUserId: h,
                    currentStep: Ks.SELECT_CHATS
                }))
            },
            c = h => {
                t(d => h === d ? -1 : h)
            },
            u = () => {
                n(h => ({
                    ...h,
                    currentStep: h.currentStep - 1
                }))
            };
        return g(q, {
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    fontSize: 4,
                    children: f("help.emergency.main.step.two.title")
                }), o.length > 0 && a(y, {
                    children: f("report.user.pick.user")
                })]
            }), g(M, {
                gap: 1,
                overflow: "hidden",
                children: [!o.length && a(y, {
                    children: f("report.user.error.nolist")
                }), o.length > 0 && a(Mt, {
                    columnCount: 1,
                    columnMinHeight: 25,
                    gap: 1,
                    children: o.map((h, d) => a($e, {
                        onClick: m => c(h.id),
                        itemActive: e === h.id,
                        children: a("span", {
                            dangerouslySetInnerHTML: {
                                __html: h.username
                            }
                        })
                    }, h.id))
                })]
            }), g(P, {
                gap: 2,
                justifyContent: "between",
                children: [a(H, {
                    variant: "secondary",
                    onClick: u,
                    children: f("generic.back")
                }), a(H, {
                    disabled: e <= 0,
                    onClick: () => l(e),
                    children: f("help.emergency.main.submit.button")
                })]
            })]
        })
    },
    f8 = s => {
        const [e, t] = _.useState(-1),
            [r, i] = _.useState(-1),
            {setActiveReport: n=null} = Vi(),
            {cfhCategories: o=[]} = ro(),
            l = () => {
                e < 0 || r < 0 || n(u => ({
                    ...u,
                    cfhCategory: e,
                    cfhTopic: o[e].topics[r].id,
                    currentStep: Ks.INPUT_REPORT_MESSAGE
                }))
            },
            c = () => {
                n(u => ({
                    ...u,
                    currentStep: u.currentStep - 1
                }))
            };
        return g(q, {
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    fontSize: 4,
                    children: f("help.emergency.chat_report.subtitle")
                }), a(y, {
                    children: f("help.cfh.pick.topic")
                })]
            }), g(M, {
                gap: 1,
                overflow: "auto",
                children: [e < 0 && o.map((u, h) => a(H, {
                    variant: "danger",
                    onClick: d => t(h),
                    children: f(`help.cfh.reason.${u.name}`)
                }, h)), e >= 0 && o[e].topics.map((u, h) => a(H, {
                    variant: "danger",
                    onClick: d => i(h),
                    active: r === h,
                    children: f(`help.cfh.topic.${u.id}`)
                }, h))]
            }), g(P, {
                gap: 2,
                justifyContent: "between",
                children: [a(H, {
                    variant: "secondary",
                    onClick: c,
                    children: f("generic.back")
                }), a(H, {
                    disabled: r < 0,
                    onClick: l,
                    children: f("help.emergency.main.submit.button")
                })]
            })]
        })
    },
    m8 = s => {
        const [e, t] = _.useState(!1),
            {activeReport: r=null, setActiveReport: i=null, report: n=null} = Vi(),
            o = () => {
                i(null),
                t(!1)
            };
        _.useEffect(() => {
            const c = {
                linkReceived: u => {
                    const h = u.split("/");
                    if (!(h.length < 2))
                        switch (h[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(d => !d);
                            return;
                        case "tour":
                            return;
                        case "report":
                            h.length >= 5 && h[2] === "room" && (parseInt(h[3]), unescape(h.splice(4).join("/")));
                            return
                        }
                },
                eventUrlPrefix: "help/"
            };
            return Ts(c), () => Rs(c)
        }, []),
        _.useEffect(() => {
            r && t(!0)
        }, [r]);
        const l = () => {
            if (r)
                switch (r.currentStep) {
                case Ks.SELECT_USER:
                    return a(g8, {});
                case Ks.SELECT_CHATS:
                    return a(_8, {});
                case Ks.SELECT_TOPICS:
                    return a(f8, {});
                case Ks.INPUT_REPORT_MESSAGE:
                    return a($7, {});
                case Ks.REPORT_SUMMARY:
                    return a(h8, {})
                }
            return a(e8, {})
        };
        return g(q, {
            children: [e && g(Se, {
                className: "nitro-help",
                theme: "habbo",
                children: [a(Oe, {
                    headerText: f("help.button.cfh"),
                    onCloseClick: o
                }), a(Ie, {
                    className: "text-black",
                    children: g(fe, {
                        children: [a(M, {
                            center: !0,
                            size: 5,
                            overflow: "hidden",
                            children: a(k, {
                                className: "index-image"
                            })
                        }), a(M, {
                            justifyContent: "between",
                            size: 7,
                            overflow: "hidden",
                            children: a(l, {})
                        })]
                    })
                })]
            }), a(d8, {}), a(u8, {})]
        })
    },
    E8 = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(null),
            [n, o] = _.useState(null),
            [l, c] = _.useState(null);
        return W(nO, u => {
            const h = u.getParser();
            t(h.productType),
            i(h.productClassId),
            o(h.totalCoinsForBonus),
            c(h.coinsStillRequiredToBuy)
        }), _.useEffect(() => {
            B(new aN)
        }, []), e ? g("div", {
            className: "bonus-rare widget d-flex",
            children: [e, g("div", {
                className: "bg-light-dark rounded overflow-hidden position-relative bonus-bar-container",
                children: [a("div", {
                    className: "d-flex justify-content-center align-items-center w-100 h-100 position-absolute small top-0",
                    children: n - l + "/" + n
                }), a("div", {
                    className: "small bg-info rounded position-absolute top-0 h-100",
                    style: {
                        width: (n - l) / n * 100 + "%"
                    }
                })]
            })]
        }) : null
    },
    p8 = s => {
        const {data: e=null, level: t=0} = s;
        return g("div", {
            className: "hof-user-container",
            children: [g("div", {
                className: "hof-tooltip",
                children: [g("div", {
                    className: "hof-header",
                    children: [t, ". ", e.userName, " ", a(gi, {
                        userId: e.userId
                    })]
                }), a("div", {
                    className: "small text-center text-white",
                    children: f("landing.view.competition.hof.points", ["points"], [nd(e.currentScore).toString()])
                })]
            }), a(rs, {
                figure: e.figure,
                direction: 2
            })]
        })
    },
    I8 = s => {
        const {slot: e=-1, conf: t=null} = s,
            [r, i] = _.useState(null);
        return W(GC, n => {
            const o = n.getParser();
            i(o.data)
        }), _.useEffect(() => {
            const n = t ? t.campaign : "";
            B(new DM(n))
        }, [t]), r ? a("div", {
            className: "hall-of-fame d-flex",
            children: r.hof && r.hof.length > 0 && r.hof.map((n, o) => a(p8, {
                data: n,
                level: o + 1
            }, o))
        }) : null
    },
    T8 = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(0);
        return W(MS, n => {
            const o = n.getParser();
            t(o.articles)
        }), _.useEffect(() => {
            B(new xy)
        }, []), e ? g("div", {
            className: "promo-articles widget mb-2",
            children: [g("div", {
                className: "d-flex flex-row align-items-center w-100 mb-1",
                children: [a("small", {
                    className: "flex-shrink-0 pe-1",
                    children: f("landing.view.promo.article.header")
                }), a("hr", {
                    className: "w-100 my-0"
                })]
            }), a("div", {
                className: "d-flex flex-row mb-1",
                children: e && e.length > 0 && e.map((n, o) => a("div", {
                    className: "promo-articles-bullet cursor-pointer " + (n === e[r] ? "promo-articles-bullet-active" : ""),
                    onClick: l => i(o)
                }, n.id))
            }), e && e[r] && g("div", {
                className: "promo-article d-flex flex-row row mx-0",
                children: [a("div", {
                    className: "promo-article-image",
                    style: {
                        backgroundImage: `url(${e[r].imageUrl})`
                    }
                }), g("div", {
                    className: "col-3 d-flex flex-column h-100",
                    children: [a("h3", {
                        className: "my-0",
                        children: e[r].title
                    }), a("b", {
                        children: e[r].bodyText
                    }), a("button", {
                        className: "btn btn-sm mt-auto btn-gainsboro",
                        onClick: n => zo(e[r].linkContent),
                        children: e[r].buttonText
                    })]
                })]
            })]
        }) : null
    },
    R8 = s => {
        const {conf: e=null} = s,
            t = i => {
                const n = e[i];
                if (!n)
                    return null;
                switch (i) {
                case "image":
                    return ye.interpolate(n)
                }
                return n
            },
            r = t("btnLink");
        return g("div", {
            className: "widgetcontainer widget d-flex flex-row",
            children: [a("div", {
                className: "widgetcontainer-image",
                children: a("img", {
                    src: t("image")
                })
            }), g("div", {
                className: "d-flex flex-column align-self-center widgetcontainer-content",
                children: [a("h3", {
                    className: "mb-2",
                    children: f(`landing.view.${t("texts")}.header`)
                }), a("p", {
                    dangerouslySetInnerHTML: {
                        __html: f(`landing.view.${t("texts")}.body`)
                    }
                }), r && a("button", {
                    onClick: i => zo(r),
                    children: f(`landing.view.${t("texts")}.button`)
                })]
            })]
        })
    },
    O8 = s => {
        switch (s.widgetType) {
        case "promoarticle":
            return a(T8, {});
        case "achievementcompetition_hall_of_fame":
            return a(I8, {
                slot: s.slot,
                conf: s.widgetConf
            });
        case "bonusrare":
            return a(E8, {});
        case "widgetcontainer":
            return a(R8, {
                conf: s.widgetConf
            });
        default:
            return null
        }
    },
    go = s => {
        const {widgetType: e=null, widgetSlot: t=0, widgetConf: r=null, className: i="", ...n} = s;
        return a("div", {
            className: `widget-slot slot-${t} ${i || ""}`,
            ...n,
            children: a(O8, {
                widgetType: e,
                slot: t,
                widgetConf: r
            })
        })
    },
    S8 = s => {
        const [e, t] = _.useState(!0),
            {userFigure: r=null} = fa();
        if (jt([Ce.CREATED, Ce.ENDED], d => {
            switch (d.type) {
            case Ce.CREATED:
                t(!1);
                return;
            case Ce.ENDED:
                t(d.openLandingView);
                return
            }
        }), !e)
            return null;
        const i = oe("hotelview").images["background.colour"],
            n = ye.interpolate(oe("hotelview").images.background),
            o = ye.interpolate(oe("hotelview").images.sun),
            l = ye.interpolate(oe("hotelview").images.drape),
            c = ye.interpolate(oe("hotelview").images.left),
            u = ye.interpolate(oe("hotelview").images["right.repeat"]),
            h = ye.interpolate(oe("hotelview").images.right);
        return g("div", {
            className: "nitro-hotel-view",
            style: i && i ? {
                background: i
            } : {},
            children: [a("div", {
                className: "container h-100 py-5 overflow-hidden landing-widgets",
                children: g("div", {
                    className: "row h-100",
                    children: [g("div", {
                        className: "col-9 h-100 d-flex flex-column",
                        children: [a(go, {
                            widgetSlot: 1,
                            widgetType: oe("hotelview").widgets["slot.1.widget"],
                            widgetConf: oe("hotelview").widgets["slot.1.conf"],
                            className: "col-6"
                        }), g("div", {
                            className: "col-12 row mx-0 gy-5",
                            children: [a(go, {
                                widgetSlot: 2,
                                widgetType: oe("hotelview").widgets["slot.2.widget"],
                                widgetConf: oe("hotelview").widgets["slot.2.conf"],
                                className: "col-7"
                            }), a(go, {
                                widgetSlot: 3,
                                widgetType: oe("hotelview").widgets["slot.3.widget"],
                                widgetConf: oe("hotelview").widgets["slot.3.conf"],
                                className: "col-5"
                            }), a(go, {
                                widgetSlot: 4,
                                widgetType: oe("hotelview").widgets["slot.4.widget"],
                                widgetConf: oe("hotelview").widgets["slot.4.conf"],
                                className: "col-7"
                            }), a(go, {
                                widgetSlot: 5,
                                widgetType: oe("hotelview").widgets["slot.5.widget"],
                                widgetConf: oe("hotelview").widgets["slot.5.conf"],
                                className: "col-5"
                            })]
                        }), a(go, {
                            widgetSlot: 6,
                            widgetType: oe("hotelview").widgets["slot.6.widget"],
                            widgetConf: oe("hotelview").widgets["slot.6.conf"],
                            className: "mt-auto"
                        })]
                    }), a("div", {
                        className: "col-3 h-100",
                        children: a(go, {
                            widgetSlot: 7,
                            widgetType: oe("hotelview").widgets["slot.7.widget"],
                            widgetConf: oe("hotelview").widgets["slot.7.conf"]
                        })
                    })]
                })
            }), a("div", {
                className: "background position-absolute",
                style: n && n.length ? {
                    backgroundImage: `url(${n})`
                } : {}
            }), a("div", {
                className: "sun position-absolute",
                style: o && o.length ? {
                    backgroundImage: `url(${o})`
                } : {}
            }), a("div", {
                className: "drape position-absolute",
                style: l && l.length ? {
                    backgroundImage: `url(${l})`
                } : {}
            }), a("div", {
                className: "left position-absolute",
                style: c && c.length ? {
                    backgroundImage: `url(${c})`
                } : {}
            }), a("div", {
                className: "right-repeat position-absolute",
                style: u && u.length ? {
                    backgroundImage: `url(${u})`
                } : {}
            }), a("div", {
                className: "right position-absolute",
                style: h && h.length ? {
                    backgroundImage: `url(${h})`
                } : {}
            }), oe("hotelview")["show.avatar"] && a("div", {
                className: "avatar-image",
                children: a(rs, {
                    figure: r,
                    direction: 2
                })
            })]
        })
    },
    hI = s => {
        const {badgeCode: e=null, children: t=null, ...r} = s,
            {selectedBadgeCode: i=null, setSelectedBadgeCode: n=null, toggleBadge: o=null, getBadgeId: l=null} = __(),
            {isUnseen: c=null} = pi(),
            u = c(Ht.BADGE, l(e));
        return g($e, {
            itemActive: i === e,
            itemUnseen: u,
            onMouseDown: h => n(e),
            onDoubleClick: h => o(i),
            ...r,
            children: [a(Vt, {
                badgeCode: e
            }), t]
        })
    },
    C8 = s => {
        const {badgeCodes: e=[], setBadgeCodes: t=null, searchValue: r, setSearchValue: i} = s;
        return _.useEffect(() => {
            let n = [...e];
            if (r && r.length) {
                const o = r.toLocaleLowerCase();
                n = e.filter(l => {
                    if (o && o.length) {
                        const c = dc(l).toLocaleLowerCase(),
                            u = t_(l).toLocaleLowerCase();
                        if (c.includes(o) || u.includes(o))
                            return l
                    }
                    return null
                })
            }
            t(n)
        }, [e, t, r]), g(P, {
            gap: 1,
            children: [a("input", {
                type: "text",
                className: "form-control form-control-sm",
                placeholder: f("generic.search"),
                value: r,
                onChange: n => i(n.target.value)
            }), a(H, {
                variant: "primary",
                children: a(Td, {
                    className: "fa-icon"
                })
            })]
        })
    },
    A8 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(""),
            [n, o] = _.useState([]),
            {badgeCodes: l=[], activeBadgeCodes: c=[], selectedBadgeCode: u=null, isWearingBadge: h=null, canWearBadges: d=null, toggleBadge: m=null, getBadgeId: p=null, activate: E=null, deactivate: T=null} = __(),
            {isUnseen: I=null, removeUnseen: S=null} = pi();
        return _.useEffect(() => {
            !u || !I(Ht.BADGE, p(u)) || S(Ht.BADGE, p(u))
        }, [u, I, S, p]), _.useEffect(() => {
            if (!e)
                return;
            const A = E();
            return () => T(A)
        }, [e, E, T]), _.useEffect(() => (t(!0), () => t(!1)), []), g(fe, {
            children: [g(M, {
                size: 7,
                overflow: "hidden",
                children: [a(C8, {
                    badgeCodes: l,
                    setBadgeCodes: o,
                    searchValue: r,
                    setSearchValue: i
                }), a(Mt, {
                    columnCount: 4,
                    gap: 1,
                    children: n && n.length > 0 && n.map((A, N) => h(A) ? null : a(hI, {
                        badgeCode: A
                    }, N))
                })]
            }), g(M, {
                className: "justify-content-between",
                size: 5,
                overflow: "auto",
                children: [g(M, {
                    overflow: "hidden",
                    gap: 2,
                    children: [a(y, {
                        children: f("inventory.badges.activebadges")
                    }), a(Mt, {
                        columnCount: 3,
                        gap: 1,
                        children: c && c.length > 0 && c.map((A, N) => a(hI, {
                            badgeCode: A
                        }, N))
                    })]
                }), !!u && g(M, {
                    grow: !0,
                    justifyContent: "end",
                    gap: 2,
                    children: [g(P, {
                        alignItems: "center",
                        gap: 2,
                        children: [a(Vt, {
                            shrink: !0,
                            badgeCode: u
                        }), a(y, {
                            children: dc(u)
                        })]
                    }), a(H, {
                        variant: h(u) ? "danger" : "success",
                        disabled: !h(u) && !d(),
                        onClick: A => m(u),
                        children: f(h(u) ? "inventory.badges.clearbadge" : "inventory.badges.wearbadge")
                    })]
                })]
            })]
        })
    },
    tp = s => {
        const {title: e="", desc: t="", children: r=null, ...i} = s;
        return g(fe, {
            ...i,
            children: [a(M, {
                center: !0,
                size: 5,
                overflow: "hidden",
                children: a("div", {
                    className: "empty-image"
                })
            }), g(M, {
                justifyContent: "center",
                size: 7,
                overflow: "hidden",
                children: [a(y, {
                    fontWeight: "bold",
                    fontSize: 5,
                    overflow: "unset",
                    truncate: !0,
                    children: e
                }), a(y, {
                    overflow: "auto",
                    children: t
                })]
            }), r]
        })
    },
    N8 = s => {
        const {botItem: e=null, children: t=null, ...r} = s,
            [i, n] = _.useState(!1),
            {selectedBot: o=null, setSelectedBot: l=null} = cP(),
            {isUnseen: c=null} = pi(),
            u = c(Ht.BOT, e.botData.id),
            h = d => {
                switch (d.type) {
                case le.MOUSE_DOWN:
                    l(e),
                    n(!0);
                    return;
                case le.MOUSE_UP:
                    n(!1);
                    return;
                case le.ROLL_OUT:
                    if (!i || o !== e)
                        return;
                    bf(e);
                    return;
                case "dblclick":
                    bf(e);
                    return
                }
            };
        return g($e, {
            itemActive: o === e,
            itemUnseen: u,
            onMouseDown: h,
            onMouseUp: h,
            onMouseOut: h,
            onDoubleClick: h,
            ...r,
            children: [a(rs, {
                figure: e.botData.figure,
                direction: 3,
                headOnly: !0
            }), t]
        })
    },
    y8 = s => {
        const {roomSession: e=null, roomPreviewer: t=null} = s,
            [r, i] = _.useState(!1),
            {botItems: n=[], selectedBot: o=null, activate: l=null, deactivate: c=null} = cP(),
            {isUnseen: u=null, removeUnseen: h=null} = pi();
        return _.useEffect(() => {
            if (!o || !t)
                return;
            const d = o.botData,
                m = re();
            let p = m.getRoomInstanceVariable(m.activeRoomId, C.ROOM_WALL_TYPE),
                E = m.getRoomInstanceVariable(m.activeRoomId, C.ROOM_FLOOR_TYPE),
                T = m.getRoomInstanceVariable(m.activeRoomId, C.ROOM_LANDSCAPE_TYPE);
            p = p && p.length ? p : "101",
            E = E && E.length ? E : "101",
            T = T && T.length ? T : "1.1",
            t.reset(!1),
            t.updateRoomWallsAndFloorVisibility(!0, !0),
            t.updateObjectRoom(E, p, T),
            t.addAvatarIntoRoom(d.figure, 0)
        }, [t, o]), _.useEffect(() => {
            !o || !u(Ht.BOT, o.botData.id) || h(Ht.BOT, o.botData.id)
        }, [o, u, h]), _.useEffect(() => {
            if (!r)
                return;
            const d = l();
            return () => c(d)
        }, [r, l, c]), _.useEffect(() => (i(!0), () => i(!1)), []), !n || !n.length ? a(tp, {
            title: f("inventory.empty.bots.title"),
            desc: f("inventory.empty.bots.desc")
        }) : g(fe, {
            children: [a(M, {
                size: 7,
                overflow: "hidden",
                children: a(Mt, {
                    columnCount: 5,
                    gap: 1,
                    children: n && n.length > 0 && n.map(d => a(N8, {
                        botItem: d
                    }, d.botData.id))
                })
            }), g(M, {
                size: 5,
                overflow: "auto",
                children: [a(M, {
                    overflow: "hidden",
                    position: "relative",
                    children: a(n_, {
                        roomPreviewer: t,
                        height: 140
                    })
                }), o && g(M, {
                    grow: !0,
                    justifyContent: "between",
                    gap: 2,
                    children: [a(y, {
                        grow: !0,
                        truncate: !0,
                        children: o.botData.name
                    }), !!e && a(H, {
                        variant: "success",
                        onClick: d => bf(o),
                        children: f("inventory.furni.placetoroom")
                    })]
                })]
            })]
        })
    },
    M8 = s => {
        const {groupItem: e=null, ...t} = s,
            [r, i] = _.useState(!1),
            {selectedItem: n=null, setSelectedItem: o=null} = Xo(),
            l = u => {
                switch (u.type) {
                case le.MOUSE_DOWN:
                    o(e),
                    i(!0);
                    return;
                case le.MOUSE_UP:
                    i(!1);
                    return;
                case le.ROLL_OUT:
                    if (!r || e !== n)
                        return;
                    Yl(e);
                    return;
                case "dblclick":
                    Yl(e);
                    return
                }
            },
            c = e.getUnlockedCount();
        return a($e, {
            className: c ? "" : "opacity-0-5 ",
            itemImage: e.iconUrl,
            itemCount: e.getUnlockedCount(),
            itemActive: e === n,
            itemUniqueNumber: e.stuffData.uniqueNumber,
            itemUnseen: e.hasUnseenItems,
            onMouseDown: l,
            onMouseUp: l,
            onMouseOut: l,
            onDoubleClick: l,
            ...t
        })
    },
    LP = s => {
        const {groupItems: e=[], setGroupItems: t=null, searchValue: r, setSearchValue: i} = s;
        return _.useEffect(() => {
            let n = [...e];
            if (r && r.length) {
                const o = r.toLocaleLowerCase();
                n = e.filter(l => o && o.length && l.name.toLocaleLowerCase().includes(o) ? l : null)
            }
            t(n)
        }, [e, t, r]), g(P, {
            gap: 1,
            children: [a("input", {
                type: "text",
                className: "form-control form-control-sm",
                placeholder: f("generic.search"),
                value: r,
                onChange: n => i(n.target.value)
            }), a(H, {
                variant: "primary",
                children: a(Td, {
                    className: "fa-icon"
                })
            })]
        })
    },
    b8 = s => {
        const e = s.getLastItem();
        if (!e || !e.sellable)
            return !1;
        Ms(new XE(e))
    },
    D8 = s => {
        const {roomSession: e=null, roomPreviewer: t=null, searchValue: r, setSearchValue: i} = s,
            [n, o] = _.useState(!1),
            [l, c] = _.useState([]),
            {groupItems: u=[], selectedItem: h=null, activate: d=null, deactivate: m=null} = Xo(),
            {resetItems: p=null} = pi();
        return _.useEffect(() => {
            if (!h || !t)
                return;
            const E = h.getLastItem();
            if (!E)
                return;
            const T = re();
            let I = T.getRoomInstanceVariable(T.activeRoomId, C.ROOM_WALL_TYPE),
                S = T.getRoomInstanceVariable(T.activeRoomId, C.ROOM_FLOOR_TYPE),
                A = T.getRoomInstanceVariable(T.activeRoomId, C.ROOM_LANDSCAPE_TYPE);
            if (I = I && I.length ? I : "101", S = S && S.length ? S : "101", A = A && A.length ? A : "1.1", t.reset(!1), t.updateObjectRoom(S, I, A), t.updateRoomWallsAndFloorVisibility(!0, !0), E.category === _e.WALL_PAPER || E.category === _e.FLOOR || E.category === _e.LANDSCAPE) {
                if (S = E.category === _e.FLOOR ? h.stuffData.getLegacyString() : S, I = E.category === _e.WALL_PAPER ? h.stuffData.getLegacyString() : I, A = E.category === _e.LANDSCAPE ? h.stuffData.getLegacyString() : A, t.updateObjectRoom(S, I, A), E.category === _e.LANDSCAPE) {
                    const N = Z().getWallItemDataByName("window_double_default");
                    N && t.addWallItemIntoRoom(N.id, new w(90, 0, 0), N.customParams)
                }
            } else
                h.isWallItem ? t.addWallItemIntoRoom(h.type, new w(90), E.stuffData.getLegacyString()) : t.addFurnitureIntoRoom(h.type, new w(90), h.stuffData, E.extra.toString())
        }, [t, h]), _.useEffect(() => {
            !h || !h.hasUnseenItems || (p(Ht.FURNI, h.items.map(E => E.id)), h.hasUnseenItems = !1)
        }, [h, p]), _.useEffect(() => {
            if (!n)
                return;
            const E = d();
            return () => m(E)
        }, [n, d, m]), _.useEffect(() => (o(!0), () => o(!1)), []), !u || !u.length ? a(tp, {
            title: f("inventory.empty.title"),
            desc: f("inventory.empty.desc")
        }) : g(fe, {
            children: [g(M, {
                size: 7,
                overflow: "hidden",
                children: [a(LP, {
                    groupItems: u,
                    setGroupItems: c,
                    searchValue: r,
                    setSearchValue: i
                }), a(Mt, {
                    columnCount: 5,
                    gap: 1,
                    children: l && l.length > 0 && l.map((E, T) => a(M8, {
                        groupItem: E
                    }, T))
                })]
            }), g(M, {
                size: 5,
                overflow: "auto",
                children: [g(M, {
                    overflow: "hidden",
                    position: "relative",
                    children: [a(n_, {
                        roomPreviewer: t,
                        height: 140
                    }), h && h.stuffData.isUnique && a(Qv, {
                        className: "top-2 end-2",
                        position: "absolute",
                        uniqueNumber: h.stuffData.uniqueNumber,
                        uniqueSeries: h.stuffData.uniqueSeries
                    }), h && h.stuffData.rarityLevel > -1 && a(qE, {
                        className: "top-2 end-2",
                        position: "absolute",
                        level: h.stuffData.rarityLevel
                    })]
                }), h && g(M, {
                    grow: !0,
                    justifyContent: "between",
                    gap: 2,
                    children: [a(y, {
                        grow: !0,
                        truncate: !0,
                        children: h.name
                    }), g(M, {
                        gap: 1,
                        children: [!!e && a(H, {
                            variant: "success",
                            onClick: E => Yl(h),
                            children: f("inventory.furni.placetoroom")
                        }), h && h.isSellable && a(H, {
                            onClick: E => b8(h),
                            children: f("inventory.marketplace.sell")
                        })]
                    })]
                })]
            })]
        })
    },
    U_ = 9,
    v8 = s => {
        const {cancelTrade: e=null, searchValue: t, setSearchValue: r} = s,
            [i, n] = _.useState(null),
            [o, l] = _.useState(null),
            [c, u] = _.useState(null),
            [h, d] = _.useState(null),
            [m, p] = _.useState(3),
            [E, T] = _.useState(1),
            {ownUser: I=null, otherUser: S=null, groupItems: A=[], tradeState: N=es.TRADING_STATE_READY, progressTrade: b=null, removeItem: v=null, setTradeState: D=null} = hP(),
            {simpleAlert: G=null} = Yt(),
            x = (j, J, X, K, be) => {
                if (!I || I.accepts || !I.userItems)
                    return !1;
                if (I.userItems.length < U_)
                    return !0;
                if (!K)
                    return !1;
                let he = J.toString();
                return X === _e.POSTER ? he = he + "poster" + be.getLegacyString() : X === _e.GUILD_FURNI ? he = VK(J, be) : he = (j ? "I" : "S") + he, !!I.userItems.getValue(he)
            },
            F = j => {
                if (!i)
                    return;
                const J = i.getTradeItems(j);
                if (!J || !J.length)
                    return;
                let X = null;
                const K = [];
                for (const he of J)
                    K.push(he.id),
                    X || (X = he);
                if (I.userItems.length + K.length <= 1500)
                    if (!X.isGroupable && K.length)
                        B(new tf(K.pop()));
                    else {
                        const he = [];
                        for (const et of K)
                            x(X.isWallItem, X.type, X.category, X.isGroupable, X.stuffData) && he.push(et);
                        he.length && (he.length === 1 ? B(new tf(he.pop())) : B(new vy(...he)))
                    }
                else
                    G(f("trading.items.too_many_items.desc"), we.DEFAULT, null, null, f("trading.items.too_many_items.title"))
            },
            U = j => j ? a(sT, {
                className: "text-success fa-icon"
            }) : a(mL, {
                className: "text-danger fa-icon"
            }),
            z = (j, J) => {
                (isNaN(Number(j)) || Number(j) < 0 || !j) && (j = 1),
                j = Math.max(Number(j), 1),
                j = Math.min(Number(j), J),
                j !== E && T(j)
            },
            Q = j => {
                z(E, j),
                F(E)
            };
        return _.useEffect(() => {
            T(1)
        }, [i]), _.useEffect(() => {
            if (N !== es.TRADING_STATE_COUNTDOWN)
                return;
            p(3);
            const j = setInterval(() => {
                p(J => {
                    const X = J - 1;
                    return X === 0 && clearInterval(j), X
                })
            }, 1e3);
            return () => clearInterval(j)
        }, [N, D]), _.useEffect(() => {
            m === 0 && D(es.TRADING_STATE_CONFIRMING)
        }, [m, D]), N === es.TRADING_STATE_READY || !I || !S ? null : g(fe, {
            children: [g(M, {
                size: 4,
                overflow: "hidden",
                children: [a(LP, {
                    groupItems: A,
                    setGroupItems: d,
                    searchValue: t,
                    setSearchValue: r
                }), g(P, {
                    column: !0,
                    fullHeight: !0,
                    justifyContent: "between",
                    overflow: "hidden",
                    gap: 2,
                    children: [a(Mt, {
                        columnCount: 3,
                        gap: 1,
                        children: h && h.length > 0 && h.map((j, J) => {
                            const X = j.getUnlockedCount();
                            return a($e, {
                                className: X ? "" : "opacity-0-5 ",
                                itemImage: j.iconUrl,
                                itemCount: X,
                                itemActive: i === j,
                                itemUniqueNumber: j.stuffData.uniqueNumber,
                                onClick: K => X && n(j),
                                onDoubleClick: K => F(1),
                                children: X > 0 && i === j && a(H, {
                                    position: "absolute",
                                    variant: "success",
                                    className: "trade-button bottom-1 end-1",
                                    onClick: K => F(1),
                                    children: a(ni, {
                                        className: "fa-icon"
                                    })
                                })
                            }, J)
                        })
                    }), g(M, {
                        gap: 1,
                        alignItems: "end",
                        children: [g(fe, {
                            overflow: "hidden",
                            children: [a(M, {
                                size: 12,
                                overflow: "hidden",
                                children: a("input", {
                                    type: "number",
                                    className: "form-control form-control-sm quantity-input",
                                    placeholder: f("catalog.bundlewidget.spinner.select.amount"),
                                    disabled: !i,
                                    value: E,
                                    onChange: j => T(j.target.valueAsNumber)
                                })
                            }), a(M, {
                                size: 12,
                                overflow: "hidden",
                                children: a(H, {
                                    variant: "secondary",
                                    disabled: !i,
                                    onClick: j => Q(i.getUnlockedCount()),
                                    children: f("inventory.trading.areoffering")
                                })
                            })]
                        }), a(k, {
                            fullWidth: !0,
                            className: "badge bg-muted",
                            children: i ? i.name : f("catalog_selectproduct")
                        })]
                    })]
                })]
            }), g(M, {
                size: 8,
                overflow: "hidden",
                children: [g(fe, {
                    overflow: "hidden",
                    children: [g(M, {
                        size: 6,
                        overflow: "hidden",
                        children: [g(P, {
                            justifyContent: "between",
                            alignItems: "center",
                            children: [g(y, {
                                children: [f("inventory.trading.you"), " ", f("inventory.trading.areoffering"), ":"]
                            }), U(I.accepts)]
                        }), a(Mt, {
                            columnCount: 3,
                            gap: 1,
                            children: Array.from(Array(U_), (j, J) => {
                                const X = I.userItems.getWithIndex(J) || null;
                                return X ? a($e, {
                                    itemActive: o === X,
                                    itemImage: X.iconUrl,
                                    itemCount: X.getTotalCount(),
                                    itemUniqueNumber: X.stuffData.uniqueNumber,
                                    onClick: K => l(X),
                                    onDoubleClick: K => v(X),
                                    children: o === X && a(H, {
                                        position: "absolute",
                                        variant: "danger",
                                        className: "trade-button bottom-1 start-1",
                                        onClick: K => v(X),
                                        children: a(ii, {
                                            className: "fa-icon"
                                        })
                                    })
                                }, J) : a($e, {}, J)
                            })
                        }), a(k, {
                            fullWidth: !0,
                            className: "badge bg-muted",
                            children: o ? o.name : f("catalog_selectproduct")
                        })]
                    }), g(M, {
                        size: 6,
                        overflow: "hidden",
                        children: [g(P, {
                            justifyContent: "between",
                            alignItems: "center",
                            children: [g(y, {
                                children: [S.userName, " ", f("inventory.trading.isoffering"), ":"]
                            }), U(S.accepts)]
                        }), a(Mt, {
                            columnCount: 3,
                            gap: 1,
                            children: Array.from(Array(U_), (j, J) => {
                                const X = S.userItems.getWithIndex(J) || null;
                                return X ? a($e, {
                                    itemActive: c === X,
                                    itemImage: X.iconUrl,
                                    itemCount: X.getTotalCount(),
                                    itemUniqueNumber: X.stuffData.uniqueNumber,
                                    onClick: K => u(X)
                                }, J) : a($e, {}, J)
                            })
                        }), a(k, {
                            fullWidth: !0,
                            className: "badge bg-muted w-100",
                            children: c ? c.name : f("catalog_selectproduct")
                        })]
                    })]
                }), g(P, {
                    grow: !0,
                    justifyContent: "between",
                    children: [a(H, {
                        variant: "danger",
                        onClick: e,
                        children: f("generic.cancel")
                    }), N === es.TRADING_STATE_READY && a(H, {
                        variant: "secondary",
                        disabled: !I.itemCount && !S.itemCount,
                        onClick: b,
                        children: f("inventory.trading.accept")
                    }), N === es.TRADING_STATE_RUNNING && a(H, {
                        variant: "secondary",
                        disabled: !I.itemCount && !S.itemCount,
                        onClick: b,
                        children: f(I.accepts ? "inventory.trading.modify" : "inventory.trading.accept")
                    }), N === es.TRADING_STATE_COUNTDOWN && a(H, {
                        variant: "secondary",
                        disabled: !0,
                        children: f("inventory.trading.countdown", ["counter"], [m.toString()])
                    }), N === es.TRADING_STATE_CONFIRMING && a(H, {
                        variant: "secondary",
                        onClick: b,
                        children: f("inventory.trading.button.restore")
                    }), N === es.TRADING_STATE_CONFIRMED && a(H, {
                        variant: "secondary",
                        children: f("inventory.trading.info.waiting")
                    })]
                })]
            })]
        })
    },
    P8 = s => {
        const {petItem: e=null, children: t=null, ...r} = s,
            [i, n] = _.useState(!1),
            {selectedPet: o=null, setSelectedPet: l=null} = uP(),
            {isUnseen: c} = pi(),
            u = c(Ht.PET, e.petData.id),
            h = d => {
                switch (d.type) {
                case le.MOUSE_DOWN:
                    l(e),
                    n(!0);
                    return;
                case le.MOUSE_UP:
                    n(!1);
                    return;
                case le.ROLL_OUT:
                    if (!i || e !== o)
                        return;
                    Mf(e);
                    return;
                case "dblclick":
                    Mf(e);
                    return
                }
            };
        return g($e, {
            itemActive: e === o,
            itemUnseen: u,
            onMouseDown: h,
            onMouseUp: h,
            onMouseOut: h,
            onDoubleClick: h,
            ...r,
            children: [a(In, {
                figure: e.petData.figureData.figuredata,
                direction: 3,
                headOnly: !0
            }), t]
        })
    },
    L8 = s => {
        const {roomSession: e=null, roomPreviewer: t=null} = s,
            [r, i] = _.useState(!1),
            {petItems: n=null, selectedPet: o=null, activate: l=null, deactivate: c=null} = uP(),
            {isUnseen: u=null, removeUnseen: h=null} = pi();
        return _.useEffect(() => {
            if (!o || !t)
                return;
            const d = o.petData,
                m = re();
            let p = m.getRoomInstanceVariable(m.activeRoomId, C.ROOM_WALL_TYPE),
                E = m.getRoomInstanceVariable(m.activeRoomId, C.ROOM_FLOOR_TYPE),
                T = m.getRoomInstanceVariable(m.activeRoomId, C.ROOM_LANDSCAPE_TYPE);
            p = p && p.length ? p : "101",
            E = E && E.length ? E : "101",
            T = T && T.length ? T : "1.1",
            t.reset(!1),
            t.updateRoomWallsAndFloorVisibility(!0, !0),
            t.updateObjectRoom(E, p, T),
            t.addPetIntoRoom(d.figureString)
        }, [t, o]), _.useEffect(() => {
            !o || !u(Ht.PET, o.petData.id) || h(Ht.PET, o.petData.id)
        }, [o, u, h]), _.useEffect(() => {
            if (!r)
                return;
            const d = l();
            return () => c(d)
        }, [r, l, c]), _.useEffect(() => (i(!0), () => i(!1)), []), !n || !n.length ? a(tp, {
            title: f("inventory.empty.pets.title"),
            desc: f("inventory.empty.pets.desc")
        }) : g(fe, {
            children: [a(M, {
                size: 7,
                overflow: "hidden",
                children: a(Mt, {
                    columnCount: 5,
                    gap: 1,
                    children: n && n.length > 0 && n.map(d => a(P8, {
                        petItem: d
                    }, d.petData.id))
                })
            }), g(M, {
                size: 5,
                overflow: "auto",
                children: [a(M, {
                    overflow: "hidden",
                    position: "relative",
                    children: a(n_, {
                        roomPreviewer: t,
                        height: 140
                    })
                }), o && o.petData && g(M, {
                    grow: !0,
                    justifyContent: "between",
                    gap: 2,
                    children: [a(y, {
                        grow: !0,
                        truncate: !0,
                        children: o.petData.name
                    }), !!e && a(H, {
                        variant: "success",
                        onClick: d => Mf(o),
                        children: f("inventory.furni.placetoroom")
                    })]
                })]
            })]
        })
    },
    UP = "inventory.furni",
    wP = "inventory.bots",
    FP = "inventory.furni.tab.pets",
    xP = "inventory.badges",
    dI = [UP, wP, FP, xP],
    U8 = [Ht.FURNI, Ht.BOT, Ht.PET, Ht.BADGE],
    w8 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(dI[0]),
            [n, o] = _.useState(null),
            [l, c] = _.useState(null),
            {isTrading: u=!1, stopTrading: h=null} = hP(),
            {getCount: d=null, resetCategory: m=null} = pi(),
            [p, E] = _.useState(""),
            T = () => {
                u && h(),
                t(!1)
            };
        return at(de.PLACED, I => {
            xK() && (yu(!1), I.placedInRoom || t(!0))
        }), jt([Ce.CREATED, Ce.ENDED], I => {
            switch (I.type) {
            case Ce.CREATED:
                o(I.session);
                return;
            case Ce.ENDED:
                o(null),
                t(!1);
                return
            }
        }), W(Lm, I => {
            const S = I.getParser();
            for (const A of S.data)
                Ev().setBadgePointLimit(A.badgeId, A.limit)
        }), _.useEffect(() => {
            const I = {
                linkReceived: S => {
                    const A = S.split("/");
                    if (!(A.length < 2))
                        switch (A[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(N => !N);
                            return
                        }
                },
                eventUrlPrefix: "inventory/"
            };
            return Ts(I), () => Rs(I)
        }, []), _.useEffect(() => (c(new Jr(re(), ++Jr.PREVIEW_COUNTER)), () => {
            c(I => (I.dispose(), null))
        }), []), _.useEffect(() => {
            !e && u && t(!0)
        }, [e, u]), e ? g(Se, {
            uniqueKey: "inventory",
            className: "nitro-inventory",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("inventory.title"),
                onCloseClick: T
            }), !u && g(q, {
                children: [a(_a, {
                    children: dI.map((I, S) => a(sn, {
                        isActive: r === I,
                        onClick: A => i(I),
                        count: d(U8[S]),
                        children: f(I)
                    }, S))
                }), g(Ie, {
                    children: [r === UP && a(D8, {
                        roomSession: n,
                        roomPreviewer: l,
                        searchValue: p,
                        setSearchValue: E
                    }), r === wP && a(y8, {
                        roomSession: n,
                        roomPreviewer: l
                    }), r === FP && a(L8, {
                        roomSession: n,
                        roomPreviewer: l
                    }), r === xP && a(A8, {})]
                })]
            }), u && a(Ie, {
                children: a(v8, {
                    cancelTrade: T,
                    searchValue: p,
                    setSearchValue: E
                })
            })]
        }) : null
    },
    sp = s => {
        const {records: e=null, selectedUserId: t=null} = s,
            {openRoomInfo: r=null} = ro(),
            i = _.useMemo(() => {
                const o = [];
                return e.forEach(l => {
                    o.push({
                        isRoomInfo: !0,
                        roomId: l.roomId,
                        roomName: l.roomName
                    }),
                    l.chatlog.forEach(c => {
                        o.push({
                            timestamp: c.timestamp,
                            habboId: c.userId,
                            username: c.userName,
                            hasHighlighting: c.hasHighlighting,
                            message: c.message,
                            isRoomInfo: !1
                        })
                    })
                }), o
            }, [e]),
            n = o => g(P, {
                gap: 2,
                alignItems: "center",
                justifyContent: "between",
                className: "bg-muted rounded p-1",
                children: [g(P, {
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: "Room name:"
                    }), a(y, {
                        children: o.roomName
                    })]
                }), g(P, {
                    gap: 1,
                    children: [a(H, {
                        onClick: l => _i(o.roomId),
                        children: "Visit Room"
                    }), a(H, {
                        onClick: l => r(o.roomId),
                        children: "Room Tools"
                    })]
                })]
            });
        return a(q, {
            children: g(M, {
                fit: !0,
                gap: 0,
                overflow: "hidden",
                children: [a(M, {
                    gap: 2,
                    children: g(fe, {
                        gap: 1,
                        className: "text-black fw-bold border-bottom pb-1",
                        children: [a(k, {
                            className: "g-col-2",
                            children: "Time"
                        }), a(k, {
                            className: "g-col-3",
                            children: "User"
                        }), a(k, {
                            className: "g-col-7",
                            children: "Message"
                        })]
                    })
                }), e && e.length > 0 && a(o_, {
                    rows: i,
                    rowRender: o => {
                        const c = o.habboId === t ? "log-entry py-1 border-bottom highlight" : "log-entry py-1 border-bottom";
                        return g(q, {
                            children: [o.isRoomInfo && a(n, {
                                roomId: o.roomId,
                                roomName: o.roomName
                            }), !o.isRoomInfo && g(fe, {
                                fullHeight: !1,
                                gap: 1,
                                alignItems: "center",
                                className: c,
                                children: [a(y, {
                                    className: "g-col-2",
                                    children: o.timestamp
                                }), a(y, {
                                    className: "g-col-3",
                                    bold: !0,
                                    underline: !0,
                                    pointer: !0,
                                    onClick: u => ge(`mod-tools/open-user-info/${o.habboId}`),
                                    children: o.username
                                }), a(y, {
                                    textBreak: !0,
                                    wrap: !0,
                                    className: "g-col-7",
                                    children: o.message
                                })]
                            })]
                        })
                    }
                })]
            })
        })
    },
    F8 = s => {
        const {roomId: e=null, onCloseClick: t=null} = s,
            [r, i] = _.useState(null);
        return W(zS, n => {
            const o = n.getParser();
            !o || o.data.roomId !== e || i(o.data)
        }), _.useEffect(() => {
            B(new Xy(e))
        }, [e]), r ? g(Se, {
            className: "nitro-mod-tools-chatlog",
            theme: "habbo",
            windowPosition: qs.TOP_LEFT,
            children: [a(Oe, {
                headerText: `Room Chatlog ${r.roomName}`,
                onCloseClick: t
            }), a(Ie, {
                className: "text-black",
                overflow: "hidden",
                children: r && a(sp, {
                    records: [r]
                })
            })]
        }) : null
    },
    x8 = s => {
        const {roomId: e=null, onCloseClick: t=null} = s,
            [r, i] = _.useState(!1),
            [n, o] = _.useState(null),
            [l, c] = _.useState(null),
            [u, h] = _.useState(null),
            [d, m] = _.useState(null),
            [p, E] = _.useState(!1),
            [T, I] = _.useState(0),
            [S, A] = _.useState(!1),
            [N, b] = _.useState(!1),
            [v, D] = _.useState(!1),
            [G, x] = _.useState(""),
            F = (U, z) => {
                if (U)
                    switch (U) {
                    case "alert_only":
                        if (G.trim().length === 0)
                            return;
                        B(new Zn(Zn.ACTION_ALERT, G, "")),
                        B(new rf(e, N ? 1 : 0, v ? 1 : 0, S ? 1 : 0));
                        return;
                    case "send_message":
                        if (G.trim().length === 0)
                            return;
                        B(new Zn(Zn.ACTION_MESSAGE, G, "")),
                        B(new rf(e, N ? 1 : 0, v ? 1 : 0, S ? 1 : 0));
                        return
                    }
            };
        return W(jS, U => {
            const z = U.getParser();
            !z || z.data.flatId !== e || (o(z.data.flatId), c(z.data.room.name), h(z.data.ownerId), m(z.data.ownerName), E(z.data.ownerInRoom), I(z.data.userCount))
        }), _.useEffect(() => {
            r || (B(new Ky(e)), i(!0))
        }, [e, r, i]), g(Se, {
            className: "nitro-mod-tools-room",
            theme: "habbo",
            windowPosition: qs.TOP_LEFT,
            children: [a(Oe, {
                headerText: "Room Info" + (l ? ": " + l : ""),
                onCloseClick: U => t()
            }), g(Ie, {
                className: "text-black",
                children: [g(P, {
                    gap: 2,
                    children: [g(M, {
                        justifyContent: "center",
                        grow: !0,
                        gap: 1,
                        children: [g(P, {
                            alignItems: "center",
                            gap: 2,
                            children: [a(y, {
                                bold: !0,
                                className: "col-7",
                                children: "Room Owner:"
                            }), a(y, {
                                underline: !0,
                                pointer: !0,
                                truncate: !0,
                                children: d
                            })]
                        }), g(P, {
                            alignItems: "center",
                            gap: 2,
                            children: [a(y, {
                                bold: !0,
                                className: "col-7",
                                children: "Users in room:"
                            }), a(y, {
                                children: T
                            })]
                        }), g(P, {
                            alignItems: "center",
                            gap: 2,
                            children: [a(y, {
                                bold: !0,
                                className: "col-7",
                                children: "Owner in room:"
                            }), a(y, {
                                children: p ? "Yes" : "No"
                            })]
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(H, {
                            onClick: U => _i(e),
                            children: "Visit Room"
                        }), a(H, {
                            onClick: U => ge(`mod-tools/open-room-chatlog/${e}`),
                            children: "Chatlog"
                        })]
                    })]
                }), g(M, {
                    className: "bg-muted rounded p-2",
                    gap: 1,
                    children: [g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: S,
                            onChange: U => A(U.target.checked)
                        }), a(y, {
                            small: !0,
                            children: "Kick everyone out"
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: N,
                            onChange: U => b(U.target.checked)
                        }), a(y, {
                            small: !0,
                            children: "Enable the doorbell"
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: v,
                            onChange: U => D(U.target.checked)
                        }), a(y, {
                            small: !0,
                            children: "Change room name"
                        })]
                    })]
                }), a("textarea", {
                    className: "form-control h-100 w-100",
                    placeholder: "Type a mandatory message to the users in this text box...",
                    value: G,
                    onChange: U => x(U.target.value)
                }), g(P, {
                    justifyContent: "between",
                    children: [a(H, {
                        variant: "danger",
                        onClick: U => F("send_message"),
                        children: "Send Caution"
                    }), a(H, {
                        onClick: U => F("alert_only"),
                        children: "Send Alert only"
                    })]
                })]
            })]
        })
    },
    G8 = s => {
        const {onCloseClick: e=null, issueId: t=null} = s,
            [r, i] = _.useState(null);
        return W(wS, n => {
            const o = n.getParser();
            !o || o.data.issueId !== t || i(o.data)
        }), _.useEffect(() => {
            B(new zy(t))
        }, [t]), g(Se, {
            className: "nitro-mod-tools-chatlog",
            theme: "habbo",
            children: [a(Oe, {
                headerText: "Issue Chatlog",
                onCloseClick: e
            }), a(Ie, {
                className: "text-black",
                children: r && a(sp, {
                    records: [r.chatRecord]
                })
            })]
        })
    },
    B8 = s => {
        const {issueId: e=null, onIssueInfoClosed: t=null} = s,
            [r, i] = _.useState(!1),
            {tickets: n=[], openUserInfo: o=null} = ro(),
            l = n.find(h => h.issueId === e),
            c = h => {
                B(new $m([h])),
                t(h)
            },
            u = h => {
                B(new La([e], h)),
                t(e)
            };
        return g(q, {
            children: [g(Se, {
                className: "nitro-mod-tools-handle-issue",
                theme: "habbo",
                children: [a(Oe, {
                    headerText: "Resolving issue " + e,
                    onCloseClick: () => t(e)
                }), g(Ie, {
                    className: "text-black",
                    children: [a(y, {
                        fontSize: 4,
                        children: "Issue Information"
                    }), g(fe, {
                        overflow: "auto",
                        children: [a(M, {
                            size: 8,
                            children: a("table", {
                                className: "table table-striped table-sm table-text-small text-black m-0",
                                children: g("tbody", {
                                    children: [g("tr", {
                                        children: [a("th", {
                                            children: "Source"
                                        }), a("td", {
                                            children: c4(l.categoryId)
                                        })]
                                    }), g("tr", {
                                        children: [a("th", {
                                            children: "Category"
                                        }), a("td", {
                                            className: "text-break",
                                            children: f("help.cfh.topic." + l.reportedCategoryId)
                                        })]
                                    }), g("tr", {
                                        children: [a("th", {
                                            children: "Description"
                                        }), a("td", {
                                            className: "text-break",
                                            children: l.message
                                        })]
                                    }), g("tr", {
                                        children: [a("th", {
                                            children: "Caller"
                                        }), a("td", {
                                            children: a(y, {
                                                bold: !0,
                                                underline: !0,
                                                pointer: !0,
                                                onClick: h => o(l.reporterUserId),
                                                children: l.reporterUserName
                                            })
                                        })]
                                    }), g("tr", {
                                        children: [a("th", {
                                            children: "Reported User"
                                        }), a("td", {
                                            children: a(y, {
                                                bold: !0,
                                                underline: !0,
                                                pointer: !0,
                                                onClick: h => o(l.reportedUserId),
                                                children: l.reportedUserName
                                            })
                                        })]
                                    })]
                                })
                            })
                        }), g(M, {
                            size: 4,
                            gap: 1,
                            children: [a(H, {
                                variant: "secondary",
                                onClick: () => i(!r),
                                children: "Chatlog"
                            }), a(H, {
                                onClick: h => u(La.RESOLUTION_USELESS),
                                children: "Close as useless"
                            }), a(H, {
                                variant: "danger",
                                onClick: h => u(La.RESOLUTION_ABUSIVE),
                                children: "Close as abusive"
                            }), a(H, {
                                variant: "success",
                                onClick: h => u(La.RESOLUTION_RESOLVED),
                                children: "Close as resolved"
                            }), a(H, {
                                variant: "secondary",
                                onClick: h => c(e),
                                children: "Release"
                            })]
                        })]
                    })]
                })]
            }), r && a(G8, {
                issueId: e,
                onCloseClick: () => i(!1)
            })]
        })
    },
    k8 = s => {
        const {myIssues: e=null, handleIssue: t=null} = s;
        return g(M, {
            gap: 0,
            overflow: "hidden",
            children: [a(M, {
                gap: 2,
                children: g(fe, {
                    gap: 1,
                    className: "text-black fw-bold border-bottom pb-1",
                    children: [a(k, {
                        className: "g-col-2",
                        children: "Type"
                    }), a(k, {
                        className: "g-col-3",
                        children: "Room/Player"
                    }), a(k, {
                        className: "g-col-3",
                        children: "Opened"
                    }), a(k, {
                        className: "g-col-2"
                    }), a(k, {
                        className: "g-col-2"
                    })]
                })
            }), a(M, {
                overflow: "auto",
                className: "striped-children",
                gap: 0,
                children: e && e.length > 0 && e.map(r => g(fe, {
                    gap: 1,
                    alignItems: "center",
                    className: "text-black py-1 border-bottom",
                    children: [a(k, {
                        className: "g-col-2",
                        children: r.categoryId
                    }), a(k, {
                        className: "g-col-3",
                        children: r.reportedUserName
                    }), a(k, {
                        className: "g-col-3",
                        children: new Date(Date.now() - r.issueAgeInMilliseconds).toLocaleTimeString()
                    }), a(k, {
                        className: "g-col-2",
                        children: a(H, {
                            variant: "primary",
                            onClick: i => t(r.issueId),
                            children: "Handle"
                        })
                    }), a(k, {
                        className: "g-col-2",
                        children: a(H, {
                            variant: "danger",
                            onClick: i => B(new $m([r.issueId])),
                            children: "Release"
                        })
                    })]
                }, r.issueId))
            })]
        })
    },
    V8 = s => {
        const {openIssues: e=null, handleIssue: t=null} = s;
        return g(M, {
            gap: 0,
            overflow: "hidden",
            children: [a(M, {
                gap: 2,
                children: g(fe, {
                    gap: 1,
                    className: "text-black fw-bold border-bottom pb-1",
                    children: [a(k, {
                        className: "g-col-2",
                        children: "Type"
                    }), a(k, {
                        className: "g-col-3",
                        children: "Room/Player"
                    }), a(k, {
                        className: "g-col-4",
                        children: "Opened"
                    }), a(k, {
                        className: "g-col-3"
                    })]
                })
            }), a(M, {
                overflow: "auto",
                className: "striped-children",
                gap: 0,
                children: e && e.length > 0 && e.map(r => g(fe, {
                    gap: 1,
                    alignItems: "center",
                    className: "text-black py-1 border-bottom",
                    children: [a(k, {
                        className: "g-col-2",
                        children: r.categoryId
                    }), a(k, {
                        className: "g-col-3",
                        children: r.reportedUserName
                    }), a(k, {
                        className: "g-col-4",
                        children: new Date(Date.now() - r.issueAgeInMilliseconds).toLocaleTimeString()
                    }), a(k, {
                        className: "g-col-3",
                        children: a(H, {
                            variant: "success",
                            onClick: i => {
                                B(new sM([r.issueId], !1, 0, "pick issue button")),
                                t(r.issueId)
                            },
                            children: "Pick Issue"
                        })
                    })]
                }, r.issueId))
            })]
        })
    },
    H8 = s => {
        const {pickedIssues: e=null} = s;
        return g(M, {
            gap: 0,
            overflow: "hidden",
            children: [a(M, {
                gap: 2,
                children: g(fe, {
                    gap: 1,
                    className: "text-black fw-bold border-bottom pb-1",
                    children: [a(k, {
                        className: "g-col-2",
                        children: "Type"
                    }), a(k, {
                        className: "g-col-3",
                        children: "Room/Player"
                    }), a(k, {
                        className: "g-col-4",
                        children: "Opened"
                    }), a(k, {
                        className: "g-col-3",
                        children: "Picker"
                    })]
                })
            }), a(M, {
                overflow: "auto",
                className: "striped-children",
                gap: 0,
                children: e && e.length > 0 && e.map(t => g(fe, {
                    gap: 1,
                    alignItems: "center",
                    className: "text-black py-1 border-bottom",
                    children: [a(k, {
                        className: "g-col-2",
                        children: t.categoryId
                    }), a(k, {
                        className: "g-col-3",
                        children: t.reportedUserName
                    }), a(k, {
                        className: "g-col-4",
                        children: new Date(Date.now() - t.issueAgeInMilliseconds).toLocaleTimeString()
                    }), a(k, {
                        className: "g-col-3",
                        children: t.pickerUserName
                    })]
                }, t.issueId))
            })]
        })
    },
    j8 = ["Open Issues", "My Issues", "Picked Issues"],
    W8 = s => {
        const {onCloseClick: e=null} = s,
            [t, r] = _.useState(0),
            [i, n] = _.useState([]),
            {tickets: o=[]} = ro(),
            l = o.filter(p => p.state === Ba.STATE_OPEN),
            c = o.filter(p => p.state === Ba.STATE_PICKED && p.pickerUserId === Z().userId),
            u = o.filter(p => p.state === Ba.STATE_PICKED),
            h = p => {
                n(E => {
                    const T = [...E],
                        I = T.indexOf(p);
                    return I >= 0 && T.splice(I, 1), T
                })
            },
            d = p => {
                n(E => {
                    const T = [...E],
                        I = T.indexOf(p);
                    return I === -1 ? T.push(p) : T.splice(I, 1), T
                })
            },
            m = () => {
                switch (t) {
                case 0:
                    return a(V8, {
                        openIssues: l,
                        handleIssue: d
                    });
                case 1:
                    return a(k8, {
                        myIssues: c,
                        handleIssue: d
                    });
                case 2:
                    return a(H8, {
                        pickedIssues: u
                    })
                }
                return null
            };
        return g(q, {
            children: [g(Se, {
                className: "nitro-mod-tools-tickets",
                theme: "habbo",
                children: [a(Oe, {
                    headerText: "Tickets",
                    onCloseClick: e
                }), a(_a, {
                    children: j8.map((p, E) => a(sn, {
                        isActive: t === E,
                        onClick: T => r(E),
                        children: p
                    }, E))
                }), a(Ie, {
                    gap: 1,
                    children: a(m, {})
                })]
            }), i && i.length > 0 && i.map(p => a(B8, {
                issueId: p,
                onIssueInfoClosed: h
            }, p))]
        })
    },
    Y8 = s => {
        const {userId: e=null, onCloseClick: t=null} = s,
            [r, i] = _.useState(null),
            [n, o] = _.useState(null);
        return W(XS, l => {
            const c = l.getParser();
            !c || c.data.userId !== e || (o(c.data.username), i(c.data.roomChatlogs))
        }), _.useEffect(() => {
            B(new Jy(e))
        }, [e]), g(Se, {
            className: "nitro-mod-tools-chatlog",
            theme: "habbo",
            windowPosition: qs.TOP_LEFT,
            children: [a(Oe, {
                headerText: `User Chatlog: ${n || ""}`,
                onCloseClick: t
            }), a(Ie, {
                className: "text-black h-100",
                children: r && a(sp, {
                    records: r,
                    selectedUserId: e
                })
            })]
        })
    },
    _I = [new Ct(1, "Alert", Ct.ALERT, 1, 0), new Ct(2, "Mute 1h", Ct.MUTE, 2, 0), new Ct(3, "Ban 18h", Ct.BAN, 3, 0), new Ct(4, "Ban 7 days", Ct.BAN, 4, 0), new Ct(5, "Ban 30 days (step 1)", Ct.BAN, 5, 0), new Ct(7, "Ban 30 days (step 2)", Ct.BAN, 7, 0), new Ct(6, "Ban 100 years", Ct.BAN, 6, 0), new Ct(106, "Ban avatar-only 100 years", Ct.BAN, 6, 0), new Ct(101, "Kick", Ct.KICK, 0, 0), new Ct(102, "Lock trade 1 week", Ct.TRADE_LOCK, 0, 168), new Ct(104, "Lock trade permanent", Ct.TRADE_LOCK, 0, 876e3), new Ct(105, "Message", Ct.MESSAGE, 0, 0)],
    z8 = s => {
        const {user: e=null, onCloseClick: t=null} = s,
            [r, i] = _.useState(-1),
            [n, o] = _.useState(-1),
            [l, c] = _.useState(""),
            {cfhCategories: u=null, settings: h=null} = ro(),
            {simpleAlert: d=null} = Yt(),
            m = _.useMemo(() => {
                const I = [];
                if (u && u.length)
                    for (const S of u)
                        for (const A of S.topics)
                            I.push(A);
                return I
            }, [u]),
            p = I => d(I, we.DEFAULT, null, null, "Error"),
            E = () => {
                let I = null;
                const S = m[r];
                if (r === -1 && (I = "You must select a CFH topic"), I)
                    return p(I);
                const A = l.trim().length === 0 ? f(`help.cfh.topic.${S.id}`) : l;
                B(new Yy(e.userId, r, A)),
                t()
            },
            T = () => {
                let I = null;
                const S = m[r],
                    A = _I[n];
                if (r === -1 || n === -1 ? I = "You must select a CFH topic and Sanction" : !h || !h.cfhPermission ? I = "You do not have permission to do this" : S ? A || (I = "You must select a sanction") : I = "You must select a CFH topic", I) {
                    p(I);
                    return
                }
                const N = l.trim().length === 0 ? f(`help.cfh.topic.${S.id}`) : l;
                switch (A.actionType) {
                case Ct.ALERT:
                    {
                        if (!h.alertPermission) {
                            p("You have insufficient permissions");
                            return
                        }
                        B(new Zy(e.userId, N, S.id));
                        break
                    }case Ct.MUTE:
                    B(new eM(e.userId, N, S.id));
                    break;
                case Ct.BAN:
                    {
                        if (!h.banPermission) {
                            p("You have insufficient permissions");
                            return
                        }
                        B(new ha(e.userId, N, S.id, n, A.actionId === 106));
                        break
                    }case Ct.KICK:
                    {
                        if (!h.kickPermission) {
                            p("You have insufficient permissions");
                            return
                        }
                        B(new $y(e.userId, N, S.id));
                        break
                    }case Ct.TRADE_LOCK:
                    {
                        const b = A.actionLengthHours * 60;
                        B(new tM(e.userId, N, b, S.id));
                        break
                    }case Ct.MESSAGE:
                    {
                        if (l.trim().length === 0) {
                            p("Please write a message to user");
                            return
                        }
                        B(new Zm(e.userId, l, S.id));
                        break
                    }
                }
                t()
            };
        return e ? g(Se, {
            className: "nitro-mod-tools-user-action",
            theme: "habbo",
            windowPosition: qs.TOP_LEFT,
            children: [a(Oe, {
                headerText: "Mod Action: " + (e ? e.username : ""),
                onCloseClick: () => t()
            }), g(Ie, {
                className: "text-black",
                children: [g("select", {
                    className: "form-select form-select-sm",
                    value: r,
                    onChange: I => i(parseInt(I.target.value)),
                    children: [a("option", {
                        value: -1,
                        disabled: !0,
                        children: "CFH Topic"
                    }), m.map((I, S) => a("option", {
                        value: S,
                        children: f("help.cfh.topic." + I.id)
                    }, S))]
                }), g("select", {
                    className: "form-select form-select-sm",
                    value: n,
                    onChange: I => o(parseInt(I.target.value)),
                    children: [a("option", {
                        value: -1,
                        disabled: !0,
                        children: "Sanction Type"
                    }), _I.map((I, S) => a("option", {
                        value: S,
                        children: I.name
                    }, S))]
                }), a(M, {
                    gap: 1,
                    children: a(y, {
                        small: !0,
                        children: "Optional message type, overrides default"
                    })
                }), a("textarea", {
                    className: "form-control h-100 w-100",
                    value: l,
                    onChange: I => c(I.target.value)
                }), g(P, {
                    justifyContent: "between",
                    gap: 1,
                    children: [a(H, {
                        variant: "primary",
                        onClick: E,
                        children: "Default Sanction"
                    }), a(H, {
                        variant: "success",
                        onClick: T,
                        children: "Sanction"
                    })]
                })]
            })]
        }) : null
    },
    K8 = s => {
        const {userId: e=null, onCloseClick: t=null} = s,
            [r, i] = _.useState(null),
            {openRoomInfo: n=null} = ro();
        return W(KS, o => {
            const l = o.getParser();
            l.data.userId === e && i(l.data)
        }), _.useEffect(() => {
            B(new Qy(e))
        }, [e]), e ? g(Se, {
            className: "nitro-mod-tools-user-visits",
            theme: "habbo",
            windowPosition: qs.TOP_LEFT,
            children: [a(Oe, {
                headerText: "User Visits",
                onCloseClick: t
            }), a(Ie, {
                className: "text-black",
                gap: 1,
                children: g(M, {
                    fullHeight: !0,
                    gap: 0,
                    overflow: "hidden",
                    children: [a(M, {
                        gap: 2,
                        children: g(fe, {
                            gap: 1,
                            className: "text-black fw-bold border-bottom pb-1",
                            children: [a(k, {
                                className: "g-col-2",
                                children: "Time"
                            }), a(k, {
                                className: "g-col-7",
                                children: "Room name"
                            }), a(k, {
                                className: "g-col-3",
                                children: "Visit"
                            })]
                        })
                    }), a(o_, {
                        rows: (r == null ? void 0 : r.rooms) ?? [],
                        rowRender: o => g(fe, {
                            fullHeight: !1,
                            gap: 1,
                            alignItems: "center",
                            className: "text-black py-1 border-bottom",
                            children: [g(y, {
                                className: "g-col-2",
                                children: [o.enterHour.toString().padStart(2, "0"), ": ", o.enterMinute.toString().padStart(2, "0")]
                            }), a(y, {
                                underline: !0,
                                pointer: !0,
                                className: "g-col-7",
                                onClick: l => n(o.roomId),
                                children: o.roomName
                            }), a(y, {
                                bold: !0,
                                underline: !0,
                                pointer: !0,
                                variant: "primary",
                                className: "g-col-3",
                                onClick: l => _i(o.roomId),
                                children: "Visit Room"
                            })]
                        })
                    })]
                })
            })]
        }) : null
    },
    q8 = s => {
        const {user: e=null, onCloseClick: t=null} = s,
            [r, i] = _.useState(""),
            {simpleAlert: n=null} = Yt(),
            {messageTemplates: o=[]} = ro();
        if (!e)
            return null;
        const l = () => {
                if (r.trim().length === 0) {
                    n("Please write a message to user.", null, null, null, "Error", null);
                    return
                }
                B(new Zm(e.userId, r, -999)),
                t()
            },
            c = u => {
                i(u.target.value)
            };
        return g(Se, {
            className: "nitro-mod-tools-user-message",
            theme: "habbo",
            windowPosition: qs.TOP_LEFT,
            children: [a(Oe, {
                headerText: "Send Message",
                onCloseClick: () => t()
            }), g(Ie, {
                className: "text-black",
                children: [g(y, {
                    children: ["Message To: ", e.username]
                }), g("select", {
                    className: "form-control",
                    onChange: c,
                    children: [a("option", {
                        value: "",
                        children: "Select a predefined message"
                    }), o.map((u, h) => a("option", {
                        value: u,
                        children: u
                    }, h))]
                }), a("textarea", {
                    className: "form-control h-100 w-100",
                    value: r,
                    onChange: u => i(u.target.value)
                }), a(H, {
                    fullWidth: !0,
                    onClick: l,
                    children: "Send message"
                })]
            })]
        })
    },
    X8 = s => {
        const {onCloseClick: e=null, userId: t=null} = s,
            [r, i] = _.useState(null),
            [n, o] = _.useState(!1),
            [l, c] = _.useState(!1),
            [u, h] = _.useState(!1),
            d = _.useMemo(() => r ? [{
                localeKey: "modtools.userinfo.userName",
                value: r.userName,
                showOnline: !0
            }, {
                localeKey: "modtools.userinfo.cfhCount",
                value: r.cfhCount.toString()
            }, {
                localeKey: "modtools.userinfo.abusiveCfhCount",
                value: r.abusiveCfhCount.toString()
            }, {
                localeKey: "modtools.userinfo.cautionCount",
                value: r.cautionCount.toString()
            }, {
                localeKey: "modtools.userinfo.banCount",
                value: r.banCount.toString()
            }, {
                localeKey: "modtools.userinfo.lastSanctionTime",
                value: r.lastSanctionTime
            }, {
                localeKey: "modtools.userinfo.tradingLockCount",
                value: r.tradingLockCount.toString()
            }, {
                localeKey: "modtools.userinfo.tradingExpiryDate",
                value: r.tradingExpiryDate
            }, {
                localeKey: "modtools.userinfo.minutesSinceLastLogin",
                value: _r.format(r.minutesSinceLastLogin * 60, ".ago", 2)
            }, {
                localeKey: "modtools.userinfo.primaryEmailAddress",
                value: r.primaryEmailAddress
            }, {
                localeKey: "modtools.userinfo.identityRelatedBanCount",
                value: r.identityRelatedBanCount.toString()
            }, {
                localeKey: "modtools.userinfo.registrationAgeInMinutes",
                value: _r.format(r.registrationAgeInMinutes * 60, ".ago", 2)
            }] : null, [r]);
        return W(YS, m => {
            const p = m.getParser();
            !p || p.data.userId !== t || i(p.data)
        }), _.useEffect(() => {
            B(new qy(t))
        }, [t]), r ? g(q, {
            children: [g(Se, {
                className: "nitro-mod-tools-user",
                theme: "habbo",
                windowPosition: qs.TOP_LEFT,
                children: [a(Oe, {
                    headerText: f("modtools.userinfo.title", ["username"], [r.userName]),
                    onCloseClick: () => e()
                }), a(Ie, {
                    className: "text-black",
                    children: g(fe, {
                        gap: 0,
                        children: [a(M, {
                            size: 12,
                            gap: 1,
                            children: g("div", {
                                className: "d-flex justify-content-between mb-2",
                                children: [a(H, {
                                    onClick: m => ge(`mod-tools/open-user-chatlog/${t}`),
                                    children: "Room Chat"
                                }), a(H, {
                                    onClick: m => o(!n),
                                    children: "Send Message"
                                }), a(H, {
                                    onClick: m => h(!u),
                                    children: "Room Visits"
                                }), a(H, {
                                    onClick: m => c(!l),
                                    children: "Mod Action"
                                })]
                            })
                        }), a(M, {
                            size: 12,
                            overflow: "auto",
                            children: a("table", {
                                className: "table table-striped table-sm table-text-small text-black m-0",
                                children: a("tbody", {
                                    children: d.map((m, p) => g("tr", {
                                        children: [a("th", {
                                            scope: "row",
                                            children: f(m.localeKey)
                                        }), g("td", {
                                            children: [m.value, m.showOnline && a("i", {
                                                className: `icon icon-pf-${r.online ? "online" : "offline"} ms-2`
                                            })]
                                        })]
                                    }, p))
                                })
                            })
                        })]
                    })
                })]
            }), n && a(q8, {
                user: {
                    userId: t,
                    username: r.userName
                },
                onCloseClick: () => o(!1)
            }), l && a(z8, {
                user: {
                    userId: t,
                    username: r.userName
                },
                onCloseClick: () => c(!1)
            }), u && a(K8, {
                userId: t,
                onCloseClick: () => h(!1)
            })]
        }) : null
    },
    Q8 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(-1),
            [n, o] = _.useState(null),
            [l, c] = _.useState(!1),
            {openRooms: u=[], openRoomChatlogs: h=[], openUserChatlogs: d=[], openUserInfos: m=[], openRoomInfo: p=null, closeRoomInfo: E=null, toggleRoomInfo: T=null, openRoomChatlog: I=null, closeRoomChatlog: S=null, toggleRoomChatlog: A=null, openUserInfo: N=null, closeUserInfo: b=null, toggleUserInfo: v=null, openUserChatlog: D=null, closeUserChatlog: G=null, toggleUserChatlog: x=null} = ro(),
            F = _.useRef(null);
        return at([ze.INITIALIZED, ze.DISPOSED], U => {
            if (!On.isRoomPreviewerId(U.roomId))
                switch (U.type) {
                case ze.INITIALIZED:
                    i(U.roomId);
                    return;
                case ze.DISPOSED:
                    i(-1);
                    return
                }
        }), QE(U => {
            if (U.category !== V.UNIT)
                return;
            const z = dt();
            if (!z)
                return;
            const Q = z.userDataManager.getUserDataByIndex(U.id);
            !Q || Q.type !== yt.USER || o({
                userId: Q.webID,
                username: Q.name
            })
        }), _.useEffect(() => {
            const U = {
                linkReceived: z => {
                    const Q = z.split("/");
                    if (!(Q.length < 2))
                        switch (Q[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(j => !j);
                            return;
                        case "open-room-info":
                            p(Number(Q[2]));
                            return;
                        case "close-room-info":
                            E(Number(Q[2]));
                            return;
                        case "toggle-room-info":
                            T(Number(Q[2]));
                            return;
                        case "open-room-chatlog":
                            I(Number(Q[2]));
                            return;
                        case "close-room-chatlog":
                            S(Number(Q[2]));
                            return;
                        case "toggle-room-chatlog":
                            A(Number(Q[2]));
                            return;
                        case "open-user-info":
                            N(Number(Q[2]));
                            return;
                        case "close-user-info":
                            b(Number(Q[2]));
                            return;
                        case "toggle-user-info":
                            v(Number(Q[2]));
                            return;
                        case "open-user-chatlog":
                            D(Number(Q[2]));
                            return;
                        case "close-user-chatlog":
                            G(Number(Q[2]));
                            return;
                        case "toggle-user-chatlog":
                            x(Number(Q[2]));
                            return
                        }
                },
                eventUrlPrefix: "mod-tools/"
            };
            return Ts(U), () => Rs(U)
        }, [p, E, T, I, S, A, N, b, v, D, G, x]), g(q, {
            children: [e && g(Se, {
                uniqueKey: "mod-tools",
                className: "nitro-mod-tools",
                windowPosition: qs.TOP_LEFT,
                theme: "habbo",
                children: [a(Oe, {
                    headerText: "Mod Tools",
                    onCloseClick: U => t(!1)
                }), g(Ie, {
                    className: "text-black",
                    gap: 1,
                    children: [g(H, {
                        gap: 1,
                        onClick: U => ge(`mod-tools/toggle-room-info/${r}`),
                        disabled: r <= 0,
                        className: "position-relative",
                        children: [a(k, {
                            className: "icon icon-small-room position-absolute start-1"
                        }), " Room Tool"]
                    }), g(H, {
                        innerRef: F,
                        gap: 1,
                        onClick: U => ge(`mod-tools/toggle-room-chatlog/${r}`),
                        disabled: r <= 0,
                        className: "position-relative",
                        children: [a(k, {
                            className: "icon icon-chat-history position-absolute start-1"
                        }), " Chatlog Tool"]
                    }), g(H, {
                        gap: 1,
                        onClick: () => ge(`mod-tools/toggle-user-info/${n.userId}`),
                        disabled: !n,
                        className: "position-relative",
                        children: [a(k, {
                            className: "icon icon-user position-absolute start-1"
                        }), " User: ", n ? n.username : ""]
                    }), g(H, {
                        gap: 1,
                        onClick: () => c(U => !U),
                        className: "position-relative",
                        children: [a(k, {
                            className: "icon icon-tickets position-absolute start-1"
                        }), " Report Tool"]
                    })]
                })]
            }), u.length > 0 && u.map(U => a(x8, {
                roomId: U,
                onCloseClick: () => ge(`mod-tools/close-room-info/${U}`)
            }, U)), h.length > 0 && h.map(U => a(F8, {
                roomId: U,
                onCloseClick: () => ge(`mod-tools/close-room-chatlog/${U}`)
            }, U)), m.length > 0 && m.map(U => a(X8, {
                userId: U,
                onCloseClick: () => ge(`mod-tools/close-user-info/${U}`)
            }, U)), d.length > 0 && d.map(U => a(Y8, {
                userId: U,
                onCloseClick: () => ge(`mod-tools/close-user-chatlog/${U}`)
            }, U)), l && a(W8, {
                onCloseClick: () => c(!1)
            })]
        })
    },
    J8 = [Et.START_DOORBELL, Et.STATE_WAITING, Et.STATE_NO_ANSWER, Et.START_PASSWORD, Et.STATE_WRONG_PASSWORD],
    Z8 = [Et.START_DOORBELL, Et.STATE_WAITING, Et.STATE_NO_ANSWER],
    $8 = s => {
        const [e, t] = _.useState(""),
            {doorData: r=null, setDoorData: i=null} = fi(),
            n = () => {
                r && r.state === Et.STATE_WAITING && Nf(),
                i(null)
            },
            o = () => {
                !r || !r.roomInfo || (Do(r.roomInfo.roomId), i(u => {
                    const h = {
                        ...u
                    };
                    return h.state = Et.STATE_PENDING_SERVER, h
                }))
            },
            l = () => {
                !r || !r.roomInfo || (Do(r.roomInfo.roomId, e), i(u => {
                    const h = {
                        ...u
                    };
                    return h.state = Et.STATE_PENDING_SERVER, h
                }))
            };
        if (_.useEffect(() => {
            !r || r.state !== Et.STATE_NO_ANSWER || Nf()
        }, [r]), !r || r.state === Et.NONE || J8.indexOf(r.state) === -1)
            return null;
        const c = Z8.indexOf(r.state) >= 0;
        return g(Se, {
            className: "nitro-navigator-doorbell",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f(c ? "navigator.doorbell.title" : "navigator.password.title"),
                onCloseClick: n
            }), g(Ie, {
                children: [g(M, {
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: r && r.roomInfo && r.roomInfo.roomName
                    }), r.state === Et.START_DOORBELL && a(y, {
                        children: f("navigator.doorbell.info")
                    }), r.state === Et.STATE_WAITING && a(y, {
                        children: f("navigator.doorbell.waiting")
                    }), r.state === Et.STATE_NO_ANSWER && a(y, {
                        children: f("navigator.doorbell.no.answer")
                    }), r.state === Et.START_PASSWORD && a(y, {
                        children: f("navigator.password.info")
                    }), r.state === Et.STATE_WRONG_PASSWORD && a(y, {
                        children: f("navigator.password.retryinfo")
                    })]
                }), c && g(M, {
                    gap: 1,
                    children: [r.state === Et.START_DOORBELL && a(H, {
                        variant: "success",
                        onClick: o,
                        children: f("navigator.doorbell.button.ring")
                    }), a(H, {
                        variant: "danger",
                        onClick: n,
                        children: f("generic.cancel")
                    })]
                }), !c && g(q, {
                    children: [g(M, {
                        gap: 1,
                        children: [a(y, {
                            children: f("navigator.password.enter")
                        }), a("input", {
                            type: "password",
                            className: "form-control form-control-sm",
                            onChange: u => t(u.target.value)
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(H, {
                            variant: "success",
                            onClick: l,
                            children: f("navigator.password.button.try")
                        }), a(H, {
                            variant: "danger",
                            onClick: n,
                            children: f("generic.cancel")
                        })]
                    })]
                })]
            })]
        })
    },
    e9 = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(null),
            [n, o] = _.useState(null),
            [l, c] = _.useState(null),
            [u, h] = _.useState(null),
            [d, m] = _.useState(0),
            [p, E] = _.useState([]),
            [T, I] = _.useState(""),
            {categories: S=null} = fi(),
            A = oe("hc.disabled", !1),
            N = D => oe("images.url") + `/navigator/models/model_${D}.png`,
            b = (D, G) => {
                !D || D.clubLevel > hi() || I(p[G].name)
            },
            v = () => {
                B(new aM(r, n, "model_" + T, Number(l), Number(u), d))
            };
        return _.useEffect(() => {
            if (!e) {
                const D = [];
                for (let G = 10; G <= 100; G = G + 10)
                    D.push(G);
                t(D),
                h(D[0])
            }
        }, [e]), _.useEffect(() => {
            S && S.length && c(S[0].id)
        }, [S]), _.useEffect(() => {
            const D = oe("navigator.room.models");
            D && D.length && (E(D), I(D[0].name))
        }, []), g(M, {
            overflow: "hidden",
            children: [g(fe, {
                overflow: "hidden",
                children: [g(M, {
                    size: 6,
                    gap: 1,
                    overflow: "auto",
                    children: [g(M, {
                        gap: 1,
                        children: [a(y, {
                            children: f("navigator.createroom.roomnameinfo")
                        }), a("input", {
                            type: "text",
                            className: "form-control form-control-sm",
                            maxLength: 60,
                            onChange: D => i(D.target.value),
                            placeholder: f("navigator.createroom.roomnameinfo")
                        })]
                    }), g(M, {
                        grow: !0,
                        gap: 1,
                        children: [a(y, {
                            children: f("navigator.createroom.roomdescinfo")
                        }), a("textarea", {
                            className: "flex-grow-1 form-control form-control-sm w-100",
                            maxLength: 255,
                            onChange: D => o(D.target.value),
                            placeholder: f("navigator.createroom.roomdescinfo")
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            children: f("navigator.category")
                        }), a("select", {
                            className: "form-select form-select-sm",
                            onChange: D => c(Number(D.target.value)),
                            children: S && S.length > 0 && S.map(D => a("option", {
                                value: D.id,
                                children: f(D.name)
                            }, D.id))
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            children: f("navigator.maxvisitors")
                        }), a("select", {
                            className: "form-select form-select-sm",
                            onChange: D => h(Number(D.target.value)),
                            children: e && e.map(D => a("option", {
                                value: D,
                                children: D
                            }, D))
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            children: f("navigator.tradesettings")
                        }), g("select", {
                            className: "form-select form-select-sm",
                            onChange: D => m(Number(D.target.value)),
                            children: [a("option", {
                                value: "0",
                                children: f("navigator.roomsettings.trade_not_allowed")
                            }), a("option", {
                                value: "1",
                                children: f("navigator.roomsettings.trade_not_with_Controller")
                            }), a("option", {
                                value: "2",
                                children: f("navigator.roomsettings.trade_allowed")
                            })]
                        })]
                    })]
                }), a(M, {
                    size: 6,
                    gap: 1,
                    overflow: "auto",
                    children: p.map((D, G) => g($e, {
                        fullHeight: !0,
                        onClick: () => b(D, G),
                        itemActive: T === D.name,
                        overflow: "unset",
                        gap: 0,
                        className: "p-1",
                        disabled: hi() < D.clubLevel,
                        children: [a(P, {
                            fullHeight: !0,
                            center: !0,
                            overflow: "hidden",
                            children: a("img", {
                                alt: "",
                                src: N(D.name)
                            })
                        }), g(y, {
                            bold: !0,
                            children: [D.tileSize, " ", f("navigator.createroom.tilesize")]
                        }), !A && D.clubLevel > gr.NO_CLUB && a(us, {
                            position: "absolute",
                            className: "top-1 end-1",
                            type: "hc"
                        })]
                    }, D.name))
                })]
            }), a(H, {
                fullWidth: !0,
                variant: !r || r.length < 3 ? "danger" : "success",
                onClick: v,
                disabled: !r || r.length < 3,
                children: f("navigator.createroom.create")
            })]
        })
    },
    t9 = s => {
        const {onCloseClick: e=null} = s,
            [t, r] = _.useState(!1),
            [i, n] = _.useState(!1),
            {report: o=null} = Vi(),
            {navigatorData: l=null} = fi(),
            {simpleAlert: c=null} = Yt(),
            {favourites: u=null, favouritesLimit: h=0} = fi(),
            d = u && l.enteredGuestRoom && u.includes(l.enteredGuestRoom.roomId),
            m = E => {
                switch (E) {
                case "settings":
                    return Z().userId === l.enteredGuestRoom.ownerId || Z().isModerator;
                case "staff_pick":
                    return Z().securityLevel >= xr.COMMUNITY;
                default:
                    return !1
                }
            },
            p = (E, T) => {
                if (!(!l || !l.enteredGuestRoom))
                    switch (E) {
                    case "set_home_room":
                        let I = -1;
                        l.homeRoomId !== l.enteredGuestRoom.roomId && (I = l.enteredGuestRoom.roomId),
                        I > 0 && B(new EM(I));
                        return;
                    case "navigator_search_tag":
                        ge(`navigator/search/${T}`),
                        B(new xo("hotel_view", `tag:${T}`));
                        return;
                    case "open_room_thumbnail_camera":
                        Ms(new qi(qi.TOGGLE_THUMBNAIL));
                        return;
                    case "open_group_info":
                        Mu(l.enteredGuestRoom.habboGroupId);
                        return;
                    case "toggle_room_link":
                        ge("navigator/toggle-room-link");
                        return;
                    case "open_room_settings":
                        B(new rE(l.enteredGuestRoom.roomId));
                        return;
                    case "toggle_pick":
                        r(S => !S),
                        B(new mM(l.enteredGuestRoom.roomId));
                        return;
                    case "toggle_mute":
                        n(S => !S),
                        B(new Bb);
                        return;
                    case "room_filter":
                        B(new cM(l.enteredGuestRoom.roomId));
                        return;
                    case "open_floorplan_editor":
                        ge("floor-editor/toggle");
                        return;
                    case "report_room":
                        o(Lt.ROOM, {
                            roomId: l.enteredGuestRoom.roomId,
                            roomName: l.enteredGuestRoom.roomName
                        });
                        return;
                    case "close":
                        e();
                        return;
                    case "toggle_favourite":
                        if (d)
                            B(new oM(l.enteredGuestRoom.roomId));
                        else {
                            if (u.length >= h) {
                                c(f("navigator.favouritesfull.body"), null, null, null, f("navigator.favouritesfull.title"));
                                return
                            }
                            B(new iM(l.enteredGuestRoom.roomId))
                        }
                        break
                    }
            };
        return _.useEffect(() => {
            l && (r(l.currentRoomIsStaffPick), l.enteredGuestRoom && n(l.enteredGuestRoom.allInRoomMuted))
        }, [l]), l.enteredGuestRoom ? g(Se, {
            className: "nitro-room-info",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("navigator.roomsettings.roominfo"),
                onCloseClick: () => p("close")
            }), a(Ie, {
                className: "text-black",
                children: l.enteredGuestRoom && g(q, {
                    children: [g(P, {
                        gap: 2,
                        overflow: "hidden",
                        children: [a(a_, {
                            roomId: l.enteredGuestRoom.roomId,
                            customUrl: l.enteredGuestRoom.officialRoomPicRef,
                            children: m("settings") && a("i", {
                                className: "icon icon-camera-small position-absolute b-0 r-0 m-1 cursor-pointer top-0",
                                onClick: () => p("open_room_thumbnail_camera")
                            })
                        }), g(M, {
                            grow: !0,
                            gap: 1,
                            overflow: "hidden",
                            children: [g(P, {
                                gap: 1,
                                children: [g(M, {
                                    grow: !0,
                                    gap: 1,
                                    children: [g(P, {
                                        gap: 1,
                                        children: [a("i", {
                                            onClick: () => p("set_home_room"),
                                            className: cr("flex-shrink-0 icon icon-house-small cursor-pointer", l.homeRoomId !== l.enteredGuestRoom.roomId && "gray")
                                        }), a(y, {
                                            bold: !0,
                                            children: l.enteredGuestRoom.roomName
                                        })]
                                    }), l.enteredGuestRoom.showOwner && g(P, {
                                        alignItems: "center",
                                        gap: 1,
                                        children: [a(y, {
                                            variant: "muted",
                                            children: f("navigator.roomownercaption")
                                        }), g(P, {
                                            alignItems: "center",
                                            gap: 1,
                                            children: [a(gi, {
                                                userId: l.enteredGuestRoom.ownerId
                                            }), a(y, {
                                                children: l.enteredGuestRoom.ownerName
                                            })]
                                        })]
                                    }), g(P, {
                                        alignItems: "center",
                                        gap: 1,
                                        children: [a(y, {
                                            variant: "muted",
                                            children: f("navigator.roomrating")
                                        }), a(y, {
                                            children: l.currentRoomRating
                                        })]
                                    }), l.enteredGuestRoom.tags.length > 0 && a(P, {
                                        alignItems: "center",
                                        gap: 1,
                                        children: l.enteredGuestRoom.tags.map(E => g(y, {
                                            pointer: !0,
                                            className: "bg-muted rounded p-1",
                                            onClick: T => p("navigator_search_tag", E),
                                            children: ["#", E]
                                        }, E))
                                    }), g(P, {
                                        alignItems: "center",
                                        className: "mt-2",
                                        gap: 1,
                                        children: [a(EL, {
                                            title: f("navigator.embed.caption"),
                                            className: "cursor-pointer fa-icon",
                                            onClick: E => ge("navigator/toggle-room-link")
                                        }), a("span", {
                                            className: "d-inline-flex",
                                            onClick: E => ge("navigator/toggle-room-link"),
                                            children: "Link to this room"
                                        })]
                                    })]
                                }), a(M, {
                                    alignItems: "center",
                                    gap: 1,
                                    children: m("settings") && a("i", {
                                        className: "icon icon-cog cursor-pointer",
                                        title: f("navigator.room.popup.info.room.settings"),
                                        onClick: E => p("open_room_settings")
                                    })
                                }), a(M, {
                                    alignItems: "center",
                                    gap: 1,
                                    children: Z().userId !== l.enteredGuestRoom.ownerId && a("i", {
                                        className: `icon ${d ? "icon-navigator-favourite-room" : "icon-navigator-make-favourite-room"} cursor-pointer`,
                                        title: f(d ? "navigator.favourite.tooltip" : "navigator.makefavourite.tooltip"),
                                        onClick: () => p("toggle_favourite")
                                    })
                                })]
                            }), a(y, {
                                overflow: "auto",
                                style: {
                                    maxHeight: 50
                                },
                                children: l.enteredGuestRoom.description
                            }), l.enteredGuestRoom.habboGroupId > 0 && g(P, {
                                pointer: !0,
                                alignItems: "center",
                                gap: 1,
                                onClick: () => p("open_group_info"),
                                children: [a(Vt, {
                                    className: "flex-none",
                                    badgeCode: l.enteredGuestRoom.groupBadgeCode,
                                    isGroup: !0
                                }), a(y, {
                                    underline: !0,
                                    children: f("navigator.guildbase", ["groupName"], [l.enteredGuestRoom.groupName])
                                })]
                            })]
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [m("staff_pick") && a(H, {
                            onClick: () => p("toggle_pick"),
                            children: f(t ? "navigator.staffpicks.unpick" : "navigator.staffpicks.pick")
                        }), a(H, {
                            variant: "danger",
                            onClick: () => p("report_room"),
                            children: f("help.emergency.main.report.room")
                        }), m("settings") && g(q, {
                            children: [a(H, {
                                onClick: () => p("toggle_mute"),
                                children: f(i ? "navigator.muteall_on" : "navigator.muteall_off")
                            }), a(H, {
                                onClick: () => p("room_filter"),
                                children: f("navigator.roomsettings.roomfilter")
                            }), a(H, {
                                onClick: () => p("open_floorplan_editor"),
                                children: f("open.floor.plan.editor")
                            })]
                        })]
                    })]
                })
            })]
        }) : null
    },
    s9 = s => {
        const {onCloseClick: e=null} = s,
            {navigatorData: t=null} = fi();
        return t.enteredGuestRoom ? g(Se, {
            className: "nitro-room-link",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("navigator.embed.title"),
                onCloseClick: e
            }), a(Ie, {
                className: "text-black d-flex align-items-center",
                children: g(P, {
                    gap: 2,
                    children: [a(a_, {
                        roomId: t.enteredGuestRoom.roomId,
                        customUrl: t.enteredGuestRoom.officialRoomPicRef
                    }), g(M, {
                        children: [a(y, {
                            bold: !0,
                            fontSize: 5,
                            children: f("navigator.embed.headline")
                        }), a(y, {
                            children: f("navigator.embed.info")
                        }), a("input", {
                            type: "text",
                            readOnly: !0,
                            className: "form-control form-control-sm",
                            value: f("navigator.embed.src", ["roomId"], [t.enteredGuestRoom.roomId.toString()]).replace("${url.prefix}", oe("url.prefix", ""))
                        })]
                    })]
                })
            })]
        }) : null
    },
    r9 = s => {
        const {roomData: e=null, handleChange: t=null} = s,
            [r, i] = _.useState(""),
            [n, o] = _.useState(""),
            [l, c] = _.useState(!1),
            u = () => {
                !l || r.length <= 0 || n.length <= 0 || r !== n || t("password", r)
            };
        return _.useEffect(() => {
            i(""),
            o(""),
            c(!1)
        }, [e]), g(q, {
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("navigator.roomsettings.roomaccess.caption")
                }), a(y, {
                    children: f("navigator.roomsettings.roomaccess.info")
                })]
            }), g(M, {
                overflow: "auto",
                children: [g(M, {
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: f("navigator.roomsettings.doormode")
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "radio",
                            name: "lockState",
                            checked: e.lockState === nt.OPEN_STATE && !l,
                            onChange: h => t("lock_state", nt.OPEN_STATE)
                        }), a(y, {
                            children: f("navigator.roomsettings.doormode.open")
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "radio",
                            name: "lockState",
                            checked: e.lockState === nt.DOORBELL_STATE && !l,
                            onChange: h => t("lock_state", nt.DOORBELL_STATE)
                        }), a(y, {
                            children: f("navigator.roomsettings.doormode.doorbell")
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "radio",
                            name: "lockState",
                            checked: e.lockState === nt.INVISIBLE_STATE && !l,
                            onChange: h => t("lock_state", nt.INVISIBLE_STATE)
                        }), a(y, {
                            children: f("navigator.roomsettings.doormode.invisible")
                        })]
                    }), g(P, {
                        fullWidth: !0,
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "radio",
                            name: "lockState",
                            checked: e.lockState === nt.PASSWORD_STATE || l,
                            onChange: h => c(h.target.checked)
                        }), !l && e.lockState !== nt.PASSWORD_STATE && a(y, {
                            children: f("navigator.roomsettings.doormode.password")
                        }), (l || e.lockState === nt.PASSWORD_STATE) && g(M, {
                            gap: 1,
                            children: [a(y, {
                                children: f("navigator.roomsettings.doormode.password")
                            }), a("input", {
                                type: "password",
                                className: "form-control form-control-sm col-4",
                                value: r,
                                onChange: h => i(h.target.value),
                                placeholder: f("navigator.roomsettings.password"),
                                onFocus: h => c(!0)
                            }), l && r.length <= 0 && a(y, {
                                bold: !0,
                                small: !0,
                                variant: "danger",
                                children: f("navigator.roomsettings.passwordismandatory")
                            }), a("input", {
                                type: "password",
                                className: "form-control form-control-sm col-4",
                                value: n,
                                onChange: h => o(h.target.value),
                                onBlur: u,
                                placeholder: f("navigator.roomsettings.passwordconfirm")
                            }), l && r.length > 0 && r !== n && a(y, {
                                bold: !0,
                                small: !0,
                                variant: "danger",
                                children: f("navigator.roomsettings.invalidconfirm")
                            })]
                        })]
                    })]
                }), g(M, {
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: f("navigator.roomsettings.pets")
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: e.allowPets,
                            onChange: h => t("allow_pets", h.target.checked)
                        }), a(y, {
                            children: f("navigator.roomsettings.allowpets")
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: e.allowPetsEat,
                            onChange: h => t("allow_pets_eat", h.target.checked)
                        }), a(y, {
                            children: f("navigator.roomsettings.allowfoodconsume")
                        })]
                    })]
                })]
            })]
        })
    },
    gI = 3,
    fI = 60,
    mI = 255,
    Ju = 15,
    i9 = s => {
        const {roomData: e=null, handleChange: t=null, onClose: r=null} = s,
            [i, n] = _.useState(""),
            [o, l] = _.useState(""),
            [c, u] = _.useState(""),
            [h, d] = _.useState(""),
            [m, p] = _.useState(0),
            [E, T] = _.useState(""),
            {showConfirm: I=null} = Yt(),
            {categories: S=null} = fi();
        W(RA, D => {
            const G = D.getParser();
            if (G)
                switch (G.code) {
                case Tr.ERROR_INVALID_TAG:
                    T("navigator.roomsettings.unacceptablewords");
                case Tr.ERROR_NON_USER_CHOOSABLE_TAG:
                    T("navigator.roomsettings.nonuserchoosabletag");
                    break;
                default:
                    T("");
                    break
                }
        });
        const A = () => {
                I(f("navigator.roomsettings.deleteroom.confirm.message", ["room_name"], [e.roomName]), () => {
                    B(new FM(e.roomId)),
                    r && r(),
                    ge("navigator/search/myworld_view")
                }, null, null, null, f("navigator.roomsettings.deleteroom.confirm.title"))
            },
            N = () => {
                i === e.roomName || i.length < gI || i.length > fI || t("name", i)
            },
            b = () => {
                o === e.roomDescription || o.length > mI || t("description", o)
            },
            v = D => {
                D === 0 && c === e.tags[0] || c.length > Ju || D === 1 && h === e.tags[1] || h.length > Ju || (c === "" && h !== "" && d(""), T(""), p(D), t("tags", c === "" && h !== "" ? [h] : [c, h]))
            };
        return _.useEffect(() => {
            n(e.roomName),
            l(e.roomDescription),
            u(e.tags.length > 0 && e.tags[0] ? e.tags[0] : ""),
            d(e.tags.length > 0 && e.tags[1] ? e.tags[1] : "")
        }, [e]), g(q, {
            children: [g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(y, {
                    className: "col-3",
                    children: f("navigator.roomname")
                }), g(M, {
                    fullWidth: !0,
                    gap: 0,
                    children: [a("input", {
                        className: "form-control form-control-sm",
                        value: i,
                        maxLength: fI,
                        onChange: D => n(D.target.value),
                        onBlur: N
                    }), i.length < gI && a(y, {
                        bold: !0,
                        small: !0,
                        variant: "danger",
                        children: f("navigator.roomsettings.roomnameismandatory")
                    })]
                })]
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(y, {
                    className: "col-3",
                    children: f("navigator.roomsettings.desc")
                }), a("textarea", {
                    className: "form-control form-control-sm",
                    value: o,
                    maxLength: mI,
                    onChange: D => l(D.target.value),
                    onBlur: b
                })]
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(y, {
                    className: "col-3",
                    children: f("navigator.category")
                }), a("select", {
                    className: "form-select form-select-sm",
                    value: e.categoryId,
                    onChange: D => t("category", D.target.value),
                    children: S && S.map(D => a("option", {
                        value: D.id,
                        children: f(D.name)
                    }, D.id))
                })]
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(y, {
                    className: "col-3",
                    children: f("navigator.maxvisitors")
                }), a("select", {
                    className: "form-select form-select-sm",
                    value: e.userCount,
                    onChange: D => t("max_visitors", D.target.value),
                    children: jp && jp.map(D => a("option", {
                        value: D,
                        children: D
                    }, D))
                })]
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(y, {
                    className: "col-3",
                    children: f("navigator.tradesettings")
                }), g("select", {
                    className: "form-select form-select-sm",
                    value: e.tradeState,
                    onChange: D => t("trade_state", D.target.value),
                    children: [a("option", {
                        value: "0",
                        children: f("navigator.roomsettings.trade_not_allowed")
                    }), a("option", {
                        value: "1",
                        children: f("navigator.roomsettings.trade_not_with_Controller")
                    }), a("option", {
                        value: "2",
                        children: f("navigator.roomsettings.trade_allowed")
                    })]
                })]
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(y, {
                    className: "col-3",
                    children: f("navigator.tags")
                }), g(M, {
                    fullWidth: !0,
                    gap: 0,
                    children: [a("input", {
                        className: "form-control form-control-sm",
                        value: c,
                        onChange: D => u(D.target.value),
                        onBlur: () => v(0)
                    }), c.length > Ju && a(y, {
                        bold: !0,
                        small: !0,
                        variant: "danger",
                        children: f("navigator.roomsettings.toomanycharacters")
                    }), m === 0 && E != "" && a(y, {
                        bold: !0,
                        small: !0,
                        variant: "danger",
                        children: f(E)
                    })]
                }), g(M, {
                    fullWidth: !0,
                    gap: 0,
                    children: [a("input", {
                        className: "form-control form-control-sm",
                        value: h,
                        onChange: D => d(D.target.value),
                        onBlur: () => v(1)
                    }), h.length > Ju && a(y, {
                        bold: !0,
                        small: !0,
                        variant: "danger",
                        children: f("navigator.roomsettings.toomanycharacters")
                    }), m === 1 && E != "" && a(y, {
                        bold: !0,
                        small: !0,
                        variant: "danger",
                        children: f(E)
                    })]
                })]
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a(k, {
                    className: "col-3"
                }), a("input", {
                    className: "form-check-input",
                    type: "checkbox",
                    checked: e.allowWalkthrough,
                    onChange: D => t("allow_walkthrough", D.target.checked)
                }), a(y, {
                    children: f("navigator.roomsettings.allow_walk_through")
                })]
            }), g(y, {
                variant: "danger",
                underline: !0,
                bold: !0,
                pointer: !0,
                className: "d-flex justify-content-center align-items-center gap-1",
                onClick: A,
                children: [a(mi, {
                    className: "fa-icon"
                }), f("navigator.roomsettings.delete")]
            })]
        })
    },
    n9 = s => {
        var c;
        const {roomData: e=null, handleChange: t=null} = s,
            [r, i] = _.useState(-1),
            [n, o] = _.useState([]),
            l = u => {
                o(h => {
                    const d = [...h],
                        m = d.findIndex(p => p.userId === u);
                    return m >= 0 && d.splice(m, 1), d
                }),
                B(new kM(u, e.roomId)),
                i(-1)
            };
        return W(mA, u => {
            const h = u.getParser();
            !e || e.roomId !== h.roomId || o(h.bannedUsers)
        }), _.useEffect(() => {
            B(new sE(e.roomId))
        }, [e.roomId]), g(fe, {
            overflow: "auto",
            children: [g(M, {
                size: 6,
                children: [g(y, {
                    bold: !0,
                    children: [f("navigator.roomsettings.moderation.banned.users"), " (", n.length, ")"]
                }), a(P, {
                    overflow: "hidden",
                    className: "bg-white rounded list-container p-2",
                    children: a(M, {
                        fullWidth: !0,
                        overflow: "auto",
                        gap: 1,
                        children: n && n.length > 0 && n.map((u, h) => g(P, {
                            shrink: !0,
                            alignItems: "center",
                            gap: 1,
                            overflow: "hidden",
                            children: [a(gi, {
                                userName: u.userName
                            }), g(y, {
                                pointer: !0,
                                grow: !0,
                                onClick: d => i(u.userId),
                                children: [" ", u.userName]
                            })]
                        }, h))
                    })
                }), g(H, {
                    disabled: r <= 0,
                    onClick: u => l(r),
                    children: [f("navigator.roomsettings.moderation.unban"), " ", r > 0 && ((c = n.find(u => u.userId === r)) == null ? void 0 : c.userName)]
                })]
            }), g(M, {
                size: 6,
                children: [g(M, {
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: f("navigator.roomsettings.moderation.mute.header")
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: e.moderationSettings.allowMute === Ns.MODERATION_LEVEL_USER_WITH_RIGHTS,
                            onChange: u => t("moderation_mute", u.target.checked ? Ns.MODERATION_LEVEL_USER_WITH_RIGHTS : Ns.MODERATION_LEVEL_NONE)
                        }), a(y, {
                            children: f("navigator.roomsettings.moderation.rights")
                        })]
                    })]
                }), g(M, {
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: f("navigator.roomsettings.moderation.kick.header")
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: e.moderationSettings.allowKick === Ns.MODERATION_LEVEL_ALL,
                            onChange: u => t("moderation_kick", u.target.checked ? Ns.MODERATION_LEVEL_ALL : Ns.MODERATION_LEVEL_NONE)
                        }), a(y, {
                            children: f("navigator.roomsettings.moderation.all")
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: e.moderationSettings.allowKick >= Ns.MODERATION_LEVEL_USER_WITH_RIGHTS,
                            disabled: e.moderationSettings.allowKick === Ns.MODERATION_LEVEL_ALL,
                            onChange: u => t("moderation_kick", u.target.checked ? Ns.MODERATION_LEVEL_USER_WITH_RIGHTS : Ns.MODERATION_LEVEL_NONE)
                        }), a(y, {
                            children: f("navigator.roomsettings.moderation.rights")
                        })]
                    })]
                }), g(M, {
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: f("navigator.roomsettings.moderation.ban.header")
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: e.moderationSettings.allowBan === Ns.MODERATION_LEVEL_USER_WITH_RIGHTS,
                            onChange: u => t("moderation_ban", u.target.checked ? Ns.MODERATION_LEVEL_USER_WITH_RIGHTS : Ns.MODERATION_LEVEL_NONE)
                        }), a(y, {
                            children: f("navigator.roomsettings.moderation.rights")
                        })]
                    })]
                })]
            })]
        })
    },
    a9 = s => {
        const {roomData: e=null} = s,
            [t, r] = _.useState(new Map);
        return W(IA, i => {
            const n = i.getParser();
            !e || e.roomId !== n.roomId || r(n.users)
        }), W(EA, i => {
            const n = i.getParser();
            !e || e.roomId !== n.roomId || r(o => {
                const l = new Map(o);
                return l.set(n.data.userId, n.data.userName), l
            })
        }), W(pA, i => {
            const n = i.getParser();
            !e || e.roomId !== n.roomId || r(o => {
                const l = new Map(o);
                return l.delete(n.userId), l
            })
        }), _.useEffect(() => {
            B(new HM(e.roomId))
        }, [e.roomId]), g(fe, {
            children: [g(M, {
                size: 6,
                children: [a(y, {
                    bold: !0,
                    children: f("navigator.flatctrls.userswithrights", ["displayed", "total"], [t.size.toString(), t.size.toString()])
                }), a(P, {
                    overflow: "hidden",
                    className: "bg-white rounded list-container p-2",
                    children: a(M, {
                        fullWidth: !0,
                        overflow: "auto",
                        gap: 1,
                        children: Array.from(t.entries()).map(([i, n], o) => g(P, {
                            shrink: !0,
                            alignItems: "center",
                            gap: 1,
                            overflow: "hidden",
                            children: [a(gi, {
                                userId: i,
                                userName: n
                            }), g(y, {
                                pointer: !0,
                                grow: !0,
                                onClick: l => B(new tE(i)),
                                children: [" ", n]
                            })]
                        }, o))
                    })
                })]
            }), a(M, {
                size: 6,
                justifyContent: "end",
                children: a(H, {
                    variant: "danger",
                    disabled: !t.size,
                    onClick: i => B(new LM(e.roomId)),
                    children: f("navigator.flatctrls.clear")
                })
            })]
        })
    },
    o9 = s => {
        const {roomData: e=null, handleChange: t=null} = s,
            [r, i] = _.useState(0);
        return _.useEffect(() => {
            i(e.chatSettings.distance)
        }, [e.chatSettings]), g(q, {
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("navigator.roomsettings.vip.caption")
                }), a(y, {
                    children: f("navigator.roomsettings.vip.info")
                })]
            }), g(fe, {
                overflow: "auto",
                children: [g(M, {
                    size: 6,
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: f("navigator.roomsettings.chat_settings")
                    }), a(y, {
                        children: f("navigator.roomsettings.chat_settings.info")
                    }), g("select", {
                        className: "form-select form-select-sm",
                        value: e.chatSettings.mode,
                        onChange: n => t("bubble_mode", n.target.value),
                        children: [a("option", {
                            value: Tt.CHAT_MODE_FREE_FLOW,
                            children: f("navigator.roomsettings.chat.mode.free.flow")
                        }), a("option", {
                            value: Tt.CHAT_MODE_LINE_BY_LINE,
                            children: f("navigator.roomsettings.chat.mode.line.by.line")
                        })]
                    }), g("select", {
                        className: "form-select form-select-sm",
                        value: e.chatSettings.weight,
                        onChange: n => t("chat_weight", n.target.value),
                        children: [a("option", {
                            value: Tt.CHAT_BUBBLE_WIDTH_NORMAL,
                            children: f("navigator.roomsettings.chat.bubbles.width.normal")
                        }), a("option", {
                            value: Tt.CHAT_BUBBLE_WIDTH_THIN,
                            children: f("navigator.roomsettings.chat.bubbles.width.thin")
                        }), a("option", {
                            value: Tt.CHAT_BUBBLE_WIDTH_WIDE,
                            children: f("navigator.roomsettings.chat.bubbles.width.wide")
                        })]
                    }), g("select", {
                        className: "form-select form-select-sm",
                        value: e.chatSettings.speed,
                        onChange: n => t("bubble_speed", n.target.value),
                        children: [a("option", {
                            value: Tt.CHAT_SCROLL_SPEED_FAST,
                            children: f("navigator.roomsettings.chat.speed.fast")
                        }), a("option", {
                            value: Tt.CHAT_SCROLL_SPEED_NORMAL,
                            children: f("navigator.roomsettings.chat.speed.normal")
                        }), a("option", {
                            value: Tt.CHAT_SCROLL_SPEED_SLOW,
                            children: f("navigator.roomsettings.chat.speed.slow")
                        })]
                    }), g("select", {
                        className: "form-select form-select-sm",
                        value: e.chatSettings.protection,
                        onChange: n => t("flood_protection", n.target.value),
                        children: [a("option", {
                            value: Tt.FLOOD_FILTER_LOOSE,
                            children: f("navigator.roomsettings.chat.flood.loose")
                        }), a("option", {
                            value: Tt.FLOOD_FILTER_NORMAL,
                            children: f("navigator.roomsettings.chat.flood.normal")
                        }), a("option", {
                            value: Tt.FLOOD_FILTER_STRICT,
                            children: f("navigator.roomsettings.chat.flood.strict")
                        })]
                    }), a(y, {
                        children: f("navigator.roomsettings.chat_settings.hearing.distance")
                    }), a("input", {
                        type: "number",
                        min: "0",
                        className: "form-control form-control-sm",
                        value: r,
                        onChange: n => i(n.target.valueAsNumber),
                        onBlur: n => t("chat_distance", r)
                    })]
                }), g(M, {
                    size: 6,
                    gap: 1,
                    children: [a(y, {
                        bold: !0,
                        children: f("navigator.roomsettings.vip_settings")
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: e.hideWalls,
                            onChange: n => t("hide_walls", n.target.checked)
                        }), a(y, {
                            children: f("navigator.roomsettings.hide_walls")
                        })]
                    }), g("select", {
                        className: "form-select form-select-sm",
                        value: e.wallThickness,
                        onChange: n => t("wall_thickness", n.target.value),
                        children: [a("option", {
                            value: "0",
                            children: f("navigator.roomsettings.wall_thickness.normal")
                        }), a("option", {
                            value: "1",
                            children: f("navigator.roomsettings.wall_thickness.thick")
                        }), a("option", {
                            value: "-1",
                            children: f("navigator.roomsettings.wall_thickness.thin")
                        }), a("option", {
                            value: "-2",
                            children: f("navigator.roomsettings.wall_thickness.thinnest")
                        })]
                    }), g("select", {
                        className: "form-select form-select-sm",
                        value: e.floorThickness,
                        onChange: n => t("floor_thickness", n.target.value),
                        children: [a("option", {
                            value: "0",
                            children: f("navigator.roomsettings.floor_thickness.normal")
                        }), a("option", {
                            value: "1",
                            children: f("navigator.roomsettings.floor_thickness.thick")
                        }), a("option", {
                            value: "-1",
                            children: f("navigator.roomsettings.floor_thickness.thin")
                        }), a("option", {
                            value: "-2",
                            children: f("navigator.roomsettings.floor_thickness.thinnest")
                        })]
                    })]
                })]
            })]
        })
    },
    Ia = ["navigator.roomsettings.tab.1", "navigator.roomsettings.tab.2", "navigator.roomsettings.tab.3", "navigator.roomsettings.tab.4", "navigator.roomsettings.tab.5"],
    l9 = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(Ia[0]);
        W(TA, l => {
            const c = l.getParser();
            if (!c)
                return;
            const u = c.data;
            t({
                roomId: u.roomId,
                roomName: u.name,
                roomDescription: u.description,
                categoryId: u.categoryId,
                userCount: u.maximumVisitorsLimit,
                tags: u.tags,
                tradeState: u.tradeMode,
                allowWalkthrough: u.allowWalkThrough,
                lockState: u.doorMode,
                password: null,
                allowPets: u.allowPets,
                allowPetsEat: u.allowFoodConsume,
                hideWalls: u.hideWalls,
                wallThickness: u.wallThickness,
                floorThickness: u.floorThickness,
                chatSettings: {
                    mode: u.chatSettings.mode,
                    weight: u.chatSettings.weight,
                    speed: u.chatSettings.speed,
                    distance: u.chatSettings.distance,
                    protection: u.chatSettings.protection
                },
                moderationSettings: {
                    allowMute: u.roomModerationSettings.allowMute,
                    allowKick: u.roomModerationSettings.allowKick,
                    allowBan: u.roomModerationSettings.allowBan
                }
            }),
            B(new sE(u.roomId))
        });
        const n = () => {
                t(null),
                i(Ia[0])
            },
            o = (l, c) => {
                t(u => {
                    const h = {
                        ...u
                    };
                    switch (l) {
                    case "name":
                        h.roomName = String(c);
                        break;
                    case "description":
                        h.roomDescription = String(c);
                        break;
                    case "category":
                        h.categoryId = Number(c);
                        break;
                    case "max_visitors":
                        h.userCount = Number(c);
                        break;
                    case "trade_state":
                        h.tradeState = Number(c);
                        break;
                    case "tags":
                        h.tags = c;
                        break;
                    case "allow_walkthrough":
                        h.allowWalkthrough = !!c;
                        break;
                    case "allow_pets":
                        h.allowPets = !!c;
                        break;
                    case "allow_pets_eat":
                        h.allowPetsEat = !!c;
                        break;
                    case "hide_walls":
                        h.hideWalls = !!c;
                        break;
                    case "wall_thickness":
                        h.wallThickness = Number(c);
                        break;
                    case "floor_thickness":
                        h.floorThickness = Number(c);
                        break;
                    case "lock_state":
                        h.lockState = Number(c);
                        break;
                    case "password":
                        h.lockState = nt.PASSWORD_STATE,
                        h.password = String(c);
                        break;
                    case "moderation_mute":
                        h.moderationSettings.allowMute = Number(c);
                        break;
                    case "moderation_kick":
                        h.moderationSettings.allowKick = Number(c);
                        break;
                    case "moderation_ban":
                        h.moderationSettings.allowBan = Number(c);
                        break;
                    case "bubble_mode":
                        h.chatSettings.mode = Number(c);
                        break;
                    case "chat_weight":
                        h.chatSettings.weight = Number(c);
                        break;
                    case "bubble_speed":
                        h.chatSettings.speed = Number(c);
                        break;
                    case "flood_protection":
                        h.chatSettings.protection = Number(c);
                        break;
                    case "chat_distance":
                        h.chatSettings.distance = Number(c);
                        break
                    }
                    return B(new jM(h.roomId, h.roomName, h.roomDescription, h.lockState, h.password, h.userCount, h.categoryId, h.tags.length, h.tags, h.tradeState, h.allowPets, h.allowPetsEat, h.allowWalkthrough, h.hideWalls, h.wallThickness, h.floorThickness, h.moderationSettings.allowMute, h.moderationSettings.allowKick, h.moderationSettings.allowBan, h.chatSettings.mode, h.chatSettings.weight, h.chatSettings.speed, h.chatSettings.distance, h.chatSettings.protection)), h
                })
            };
        return e ? g(Se, {
            uniqueKey: "nitro-room-settings",
            className: "nitro-room-settings",
            children: [a(Oe, {
                headerText: f("navigator.roomsettings"),
                onCloseClick: n
            }), a(_a, {
                children: Ia.map(l => a(sn, {
                    isActive: r === l,
                    onClick: c => i(l),
                    children: f(l)
                }, l))
            }), g(Ie, {
                children: [r === Ia[0] && a(i9, {
                    roomData: e,
                    handleChange: o,
                    onClose: n
                }), r === Ia[1] && a(r9, {
                    roomData: e,
                    handleChange: o
                }), r === Ia[2] && a(a9, {
                    roomData: e,
                    handleChange: o
                }), r === Ia[3] && a(o9, {
                    roomData: e,
                    handleChange: o
                }), r === Ia[4] && a(n9, {
                    roomData: e,
                    handleChange: o
                })]
            })]
        }) : null
    },
    EI = s => {
        const {roomData: e=null} = s,
            [t, r] = _.useState(!1),
            i = _.useRef(),
            n = () => {
                const o = 100 * (e.userCount / e.maxUserCount);
                let l = "bg-primary";
                return o >= 92 ? l = "bg-danger" : o >= 50 ? l = "bg-warning" : o > 0 && (l = "bg-success"), l
            };
        return g(q, {
            children: [a(k, {
                pointer: !0,
                innerRef: i,
                className: "icon icon-navigator-info",
                onMouseOver: o => r(!0),
                onMouseLeave: o => r(!1)
            }), a(cT, {
                show: t,
                target: i.current,
                placement: "right",
                children: a(Ch, {
                    children: a(Ie, {
                        overflow: "hidden",
                        className: "room-info image-rendering-pixelated bg-transparent",
                        children: g(P, {
                            gap: 2,
                            overflow: "hidden",
                            children: [g(a_, {
                                roomId: e.roomId,
                                customUrl: e.officialRoomPicRef,
                                className: "d-flex flex-column align-items-center justify-content-end mb-1",
                                children: [e.habboGroupId > 0 && a(Vt, {
                                    badgeCode: e.groupBadgeCode,
                                    isGroup: !0,
                                    className: "position-absolute top-0 start-0 m-1 "
                                }), e.doorMode !== nt.OPEN_STATE && a("i", {
                                    className: "position-absolute end-0 mb-1 me-1 icon icon-navigator-room-" + (e.doorMode === nt.DOORBELL_STATE ? "locked" : e.doorMode === nt.PASSWORD_STATE ? "password" : e.doorMode === nt.INVISIBLE_STATE ? "invisible" : "")
                                })]
                            }), g(M, {
                                gap: 1,
                                children: [a(y, {
                                    bold: !0,
                                    truncate: !0,
                                    className: "flex-grow-1",
                                    style: {
                                        maxHeight: 13
                                    },
                                    children: e.roomName
                                }), g(P, {
                                    gap: 2,
                                    children: [a(y, {
                                        italics: !0,
                                        variant: "muted",
                                        children: f("navigator.roomownercaption")
                                    }), g(P, {
                                        alignItems: "center",
                                        gap: 1,
                                        children: [a(gi, {
                                            userId: e.ownerId
                                        }), a(y, {
                                            italics: !0,
                                            children: e.ownerName
                                        })]
                                    })]
                                }), a(y, {
                                    className: "flex-grow-1",
                                    children: e.description
                                }), g(P, {
                                    className: "badge p-1 position-absolute m-1 bottom-0 end-0 m-2 " + n(),
                                    gap: 1,
                                    children: [a($_, {
                                        className: "fa-icon"
                                    }), e.userCount]
                                })]
                            })]
                        })
                    })
                })
            })]
        })
    },
    pI = s => {
        const {roomData: e=null, children: t=null, thumbnail: r=!1, ...i} = s,
            {setDoorData: n=null} = fi(),
            o = () => {
                const c = 100 * (e.userCount / e.maxUserCount);
                let u = "bg-primary";
                return c >= 92 ? u = "bg-danger" : c >= 50 ? u = "bg-warning" : c > 0 && (u = "bg-success"), u
            },
            l = c => {
                if (e.ownerId !== Z().userId) {
                    if (e.habboGroupId !== 0) {
                        _i(e.roomId);
                        return
                    }
                    switch (e.doorMode) {
                    case nt.DOORBELL_STATE:
                        n(u => {
                            const h = {
                                ...u
                            };
                            return h.roomInfo = e, h.state = Et.START_DOORBELL, h
                        });
                        return;
                    case nt.PASSWORD_STATE:
                        n(u => {
                            const h = {
                                ...u
                            };
                            return h.roomInfo = e, h.state = Et.START_PASSWORD, h
                        });
                        return
                    }
                }
                Do(e.roomId)
            };
        return r ? g(M, {
            pointer: !0,
            overflow: "hidden",
            alignItems: "center",
            onClick: l,
            gap: 0,
            className: "navigator-item p-1 bg-light rounded-3 small mb-1 flex-column border border-muted",
            ...i,
            children: [g(a_, {
                roomId: e.roomId,
                customUrl: e.officialRoomPicRef,
                className: "d-flex flex-column align-items-center justify-content-end mb-1",
                children: [e.habboGroupId > 0 && a(Vt, {
                    badgeCode: e.groupBadgeCode,
                    isGroup: !0,
                    className: "position-absolute top-0 start-0 m-1"
                }), g(P, {
                    center: !0,
                    className: "badge p-1 position-absolute m-1 " + o(),
                    gap: 1,
                    children: [a($_, {
                        className: "fa-icon"
                    }), e.userCount]
                }), e.doorMode !== nt.OPEN_STATE && a("i", {
                    className: "position-absolute end-0 mb-1 me-1 icon icon-navigator-room-" + (e.doorMode === nt.DOORBELL_STATE ? "locked" : e.doorMode === nt.PASSWORD_STATE ? "password" : e.doorMode === nt.INVISIBLE_STATE ? "invisible" : "")
                })]
            }), g(P, {
                className: "w-100",
                children: [a(y, {
                    truncate: !0,
                    className: "room-name flex-grow-1",
                    children: e.roomName
                }), a(P, {
                    reverse: !0,
                    alignItems: "center",
                    gap: 1,
                    children: a(EI, {
                        roomData: e
                    })
                }), t]
            })]
        }) : g(P, {
            pointer: !0,
            overflow: "hidden",
            alignItems: "center",
            onClick: l,
            gap: 2,
            className: "navigator-item px-2 py-1",
            ...i,
            children: [g(P, {
                center: !0,
                className: "badge p-1 " + o(),
                gap: 1,
                children: [a($_, {
                    className: "fa-icon"
                }), e.userCount]
            }), a(y, {
                truncate: !0,
                grow: !0,
                children: e.roomName
            }), g(P, {
                reverse: !0,
                alignItems: "center",
                gap: 1,
                children: [a(EI, {
                    roomData: e
                }), e.habboGroupId > 0 && a("i", {
                    className: "icon icon-navigator-room-group"
                }), e.doorMode !== nt.OPEN_STATE && a("i", {
                    className: "icon icon-navigator-room-" + (e.doorMode === nt.DOORBELL_STATE ? "locked" : e.doorMode === nt.PASSWORD_STATE ? "password" : e.doorMode === nt.INVISIBLE_STATE ? "invisible" : "")
                })]
            }), t]
        })
    },
    c9 = s => {
        const {searchResult: e=null, ...t} = s,
            [r, i] = _.useState(!0),
            [n, o] = _.useState(0),
            {topLevelContext: l=null} = fi(),
            c = () => {
                let p = e.code;
                return !p || !p.length || f("navigator.searchcode.title." + p) == "navigator.searchcode.title." + p ? e.data : p.startsWith("${") ? p.slice(2, p.length - 1) : "navigator.searchcode.title." + p
            },
            u = () => {
                o(p => {
                    const E = p === Yn.LIST ? Yn.THUMBNAILS : Yn.LIST;
                    return B(new hM(e.code, E)), E
                })
            },
            h = () => {
                e.action == 1 ? B(new xo(e.code, "")) : e.action == 2 && l && B(new xo(l.code, ""))
            },
            d = () => {
                i(p => {
                    const E = !p;
                    return B(E ? new gM(e.code) : new _M(e.code)), E
                })
            };
        _.useEffect(() => {
            e && (i(!e.closed), o(e.mode))
        }, [e]);
        const m = n >= Yn.THUMBNAILS;
        return g(M, {
            className: "bg-white px-1",
            gap: 0,
            children: [g(P, {
                fullWidth: !0,
                alignItems: "center",
                justifyContent: "between",
                className: "category-header px-0 py-1",
                children: [g(P, {
                    grow: !0,
                    pointer: !0,
                    alignItems: "center",
                    gap: 1,
                    onClick: d,
                    children: [r && a(pL, {
                        className: "fa-icon"
                    }), !r && a(tu, {
                        className: "fa-icon"
                    }), a(y, {
                        className: "category-title",
                        children: f(c())
                    })]
                }), g(P, {
                    gap: 2,
                    children: [n === Yn.LIST && a(IL, {
                        className: "fa-icon",
                        onClick: u
                    }), n >= Yn.THUMBNAILS && a(TL, {
                        className: "fa-icon",
                        onClick: u
                    }), e.action > 0 && e.action === 1 && a(RL, {
                        className: "fa-icon",
                        onClick: h
                    }), e.action > 0 && e.action !== 1 && a(OL, {
                        className: "fa-icon",
                        onClick: h
                    })]
                })]
            }), " ", r && a(q, {
                children: m ? a(Mt, {
                    columnCount: 3,
                    ...t,
                    columnMinWidth: 110,
                    columnMinHeight: 130,
                    className: "mx-2",
                    children: e.rooms.length > 0 && e.rooms.map((p, E) => a(pI, {
                        roomData: p,
                        thumbnail: !0
                    }, E))
                }) : a(fe, {
                    columnCount: 1,
                    className: "navigator-grid",
                    gap: 0,
                    children: e.rooms.length > 0 && e.rooms.map((p, E) => a(pI, {
                        roomData: p
                    }, E))
                })
            })]
        })
    },
    u9 = s => {
        const {sendSearch: e=null} = s,
            [t, r] = _.useState(0),
            [i, n] = _.useState(""),
            {topLevelContext: o=null, searchResult: l=null} = fi(),
            c = () => {
                if (!o)
                    return;
                let h = el[t];
                h || (h = el[0]);
                const d = (h.query ? h.query + ":" : "") + i;
                e(d || "", o.code)
            },
            u = h => {
                h.key === "Enter" && c()
            };
        return _.useEffect(() => {
            if (!l)
                return;
            const h = l.data.split(":");
            let d = null,
                m = "";
            if (h.length >= 2) {
                const [p, ...E] = h;
                d = el.find(T => T.query === p),
                m = E.join(":")
            } else
                m = l.data;
            d || (d = el[0]),
            r(el.findIndex(p => p === d)),
            n(m)
        }, [l]), g(P, {
            fullWidth: !0,
            gap: 1,
            children: [a(P, {
                shrink: !0,
                children: a("select", {
                    className: "form-select form-select-sm",
                    value: t,
                    onChange: h => r(parseInt(h.target.value)),
                    children: el.map((h, d) => a("option", {
                        value: d,
                        children: f("navigator.filter." + h.name)
                    }, d))
                })
            }), g(P, {
                fullWidth: !0,
                gap: 1,
                children: [a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    placeholder: f("navigator.filter.input.placeholder"),
                    value: i,
                    onChange: h => n(h.target.value),
                    onKeyDown: h => u(h)
                }), a(H, {
                    variant: "primary",
                    onClick: c,
                    children: a(Td, {
                        className: "fa-icon"
                    })
                })]
            })]
        })
    },
    h9 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(!1),
            [n, o] = _.useState(!1),
            [l, c] = _.useState(!1),
            [u, h] = _.useState(!1),
            [d, m] = _.useState(!1),
            [p, E] = _.useState(!0),
            [T, I] = _.useState(!1),
            {searchResult: S=null, topLevelContext: A=null, topLevelContexts: N=null, navigatorData: b=null} = fi(),
            v = _.useRef(null),
            D = _.useRef();
        jt(Ce.CREATED, F => {
            t(!1),
            o(!1)
        });
        const G = _.useCallback((F, U) => {
                o(!1),
                B(new xo(U, F)),
                m(!0)
            }, []),
            x = _.useCallback(() => {
                if (!r) {
                    I(!0);
                    return
                }
                if (v.current) {
                    G(v.current.value, v.current.code),
                    v.current = null;
                    return
                }
                if (S) {
                    G(S.data, S.code);
                    return
                }
                A && G("", A.code)
            }, [r, S, A, G]);
        return _.useEffect(() => {
            const F = {
                linkReceived: U => {
                    const z = U.split("/");
                    if (!(z.length < 2))
                        switch (z[1]) {
                        case "show":
                            {
                                t(!0),
                                I(!0);
                                return
                            }case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            {
                                if (e) {
                                    t(!1);
                                    return
                                }
                                t(!0),
                                I(!0);
                                return
                            }case "toggle-room-info":
                            c(Q => !Q);
                            return;
                        case "toggle-room-link":
                            h(Q => !Q);
                            return;
                        case "goto":
                            if (z.length <= 2)
                                return;
                            switch (z[2]) {
                            case "home":
                                if (b.homeRoomId <= 0)
                                    return;
                                _i(b.homeRoomId);
                                break;
                            default:
                                {
                                    const Q = parseInt(z[2]);
                                    _i(Q)
                                }
                            }
                            return;
                        case "create":
                            t(!0),
                            o(!0);
                            return;
                        case "search":
                            if (z.length > 2) {
                                const Q = z[2];
                                let j = "";
                                z.length > 3 && (j = z[3]),
                                v.current = {
                                    value: j,
                                    code: Q
                                },
                                t(!0),
                                I(!0)
                            }
                            return
                        }
                },
                eventUrlPrefix: "navigator/"
            };
            return Ts(F), () => Rs(F)
        }, [e, b]), _.useEffect(() => {
            S && (m(!1), D && D.current && (D.current.scrollTop = 0))
        }, [S]), _.useEffect(() => {
            !e || !r || !T || (x(), I(!1))
        }, [e, r, T, x]), _.useEffect(() => {
            r || !A || i(!0)
        }, [r, A]), _.useEffect(() => {
            !e || !p || (B(new dM), E(!1))
        }, [e, p]), _.useEffect(() => {
            Ze.addCallback(Gi.OPENROOM, (F, U=!1, z=null) => B(new nM(F)))
        }, []), g(q, {
            children: [e && g(Se, {
                uniqueKey: "navigator",
                theme: "habbo",
                className: "nitro-navigator",
                children: [a(Oe, {
                    headerText: f(n ? "navigator.createroom.title" : "navigator.title"),
                    onCloseClick: F => t(!1)
                }), g(_a, {
                    children: [N && N.length > 0 && N.map((F, U) => a(sn, {
                        isActive: A === F && !n,
                        onClick: z => G("", F.code),
                        children: f("navigator.toplevelview." + F.code)
                    }, U)), a(sn, {
                        isActive: n,
                        onClick: F => o(!0),
                        children: a(tu, {
                            className: "fa-icon"
                        })
                    })]
                }), g(Ie, {
                    position: "relative",
                    children: [d && a(k, {
                        fit: !0,
                        position: "absolute",
                        className: "top-0 start-0 z-index-1 bg-muted opacity-0-5"
                    }), !n && g(q, {
                        children: [a(u9, {
                            sendSearch: G
                        }), a(M, {
                            innerRef: D,
                            overflow: "auto",
                            children: S && S.results.map((F, U) => a(c9, {
                                searchResult: F
                            }, U))
                        })]
                    }), n && a(e9, {})]
                })]
            }), a($8, {}), l && a(t9, {
                onCloseClick: () => c(!1)
            }), u && a(s9, {
                onCloseClick: () => h(!1)
            }), a(l9, {})]
        })
    },
    d9 = /\n\r|\n|\r/mg,
    _9 = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(""),
            [n, o] = _.useState(null),
            l = _.useRef(null);
        return _.useEffect(() => {
            const c = async h => {
                    try {
                        const d = await fetch(h);
                        if (!d)
                            return;
                        const p = (await d.text()).split(d9),
                            E = p.shift().split("|");
                        i(E[0]),
                        o(T => E[1] && E[1].split(";").length === 2 ? {
                            width: parseInt(E[1].split(";")[0]),
                            height: parseInt(E[1].split(";")[1])
                        } : null),
                        t(p.join(""))
                    } catch {
                        pe.error(`Failed to fetch ${h}`)
                    }
                },
                u = {
                    linkReceived: h => {
                        const d = h.split("/");
                        d.length < 2 || (d.shift(), c(oe("habbopages.url") + d.join("/")))
                    },
                    eventUrlPrefix: "habbopages/"
                };
            return Ts(u), () => Rs(u)
        }, []), _.useEffect(() => {
            const c = u => {
                if (!(u.target instanceof HTMLAnchorElement))
                    return;
                u.preventDefault();
                const h = u.target.href;
                !h || !h.length || zo(h)
            };
            return document.addEventListener("click", c), () => {
                document.removeEventListener("click", c)
            }
        }, []), e ? g(Se, {
            className: "nitropedia",
            theme: "primary-slim",
            style: n ? {
                width: n.width,
                height: n.height
            } : {},
            children: [a(Oe, {
                headerText: r,
                onCloseClick: () => t(null)
            }), a(Ie, {
                children: a(k, {
                    fit: !0,
                    innerRef: l,
                    className: "text-black",
                    dangerouslySetInnerHTML: {
                        __html: e
                    }
                })
            })]
        }) : null
    },
    g9 = s => {
        const {offer: e=null, setOpen: t=null} = s;
        if (e)
            return g(zE, {
                fadesOut: !1,
                onClose: null,
                onClick: r => t(!0),
                gap: 2,
                children: [a(k, {
                    className: "nitro-targeted-offer-icon",
                    style: {
                        backgroundImage: `url(${oe("image.library.url") + e.iconImageUrl})`
                    }
                }), a(y, {
                    variant: "light",
                    className: "ubuntu-bold",
                    children: e.title
                })]
            })
    },
    f9 = s => {
        const {offer: e=null, setOpen: t=null} = s,
            {getCurrencyAmount: r} = Qo(),
            [i, n] = _.useState(1),
            o = _.useMemo(() => {
                let u = !1,
                    h = !1,
                    d = !1;
                return e.priceInCredits > 0 && (u = r(-1) >= e.priceInCredits), e.priceInActivityPoints > 0 ? h = r(e.activityPointType) >= e.priceInActivityPoints : h = !0, e.purchaseLimit > 0 && (d = !0), u && h && d
            }, [e, r]),
            l = () => {
                let u = Math.max(0, (e.expirationTime - Date.now()) / 1e3);
                return _r.format(u)
            },
            c = () => {
                B(new mN(e.id, i)),
                B(new Qm)
            };
        if (e)
            return g(Se, {
                theme: "habbo",
                uniqueKey: "targeted-offer",
                className: "nitro-targeted-offer",
                children: [a(Oe, {
                    headerText: f(e.title),
                    onCloseClick: u => t(!1)
                }), a(Kv, {
                    position: "relative",
                    className: "justify-content-center align-items-center cursor-pointer",
                    variant: "danger",
                    gap: 3,
                    children: f("targeted.offer.timeleft", ["timeleft"], [l()])
                }), g(Ie, {
                    gap: 1,
                    children: [g(P, {
                        gap: 1,
                        fullHeight: !0,
                        children: [g(P, {
                            gap: 1,
                            column: !0,
                            className: "w-75 text-black",
                            children: [g(M, {
                                className: "bg-warning p-2",
                                fullHeight: !0,
                                children: [a("h4", {
                                    children: f(e.title)
                                }), a(k, {
                                    dangerouslySetInnerHTML: {
                                        __html: e.description
                                    }
                                })]
                            }), g(P, {
                                alignSelf: "center",
                                alignItems: "center",
                                justifyContent: "center",
                                gap: 2,
                                children: [e.purchaseLimit > 1 && g(P, {
                                    gap: 1,
                                    children: [a(y, {
                                        variant: "muted",
                                        children: f("catalog.bundlewidget.quantity")
                                    }), a("input", {
                                        type: "number",
                                        value: i,
                                        onChange: u => n(parseInt(u.target.value)),
                                        min: 1,
                                        max: e.purchaseLimit
                                    })]
                                }), a(H, {
                                    variant: "primary",
                                    disabled: !o,
                                    onClick: () => c(),
                                    children: f("targeted.offer.button.buy")
                                })]
                            })]
                        }), a(k, {
                            className: "w-50",
                            fullHeight: !0,
                            style: {
                                background: `url(${oe("image.library.url") + e.imageUrl}) no-repeat center`
                            }
                        })]
                    }), g(P, {
                        className: "price-ray position-absolute",
                        alignItems: "center",
                        justifyContent: "center",
                        column: !0,
                        children: [a(y, {
                            children: f("targeted.offer.price.label")
                        }), e.priceInCredits > 0 && g(P, {
                            gap: 1,
                            children: [a(y, {
                                variant: "light",
                                children: e.priceInCredits
                            }), a(us, {
                                type: -1
                            })]
                        }), e.priceInActivityPoints > 0 && g(P, {
                            gap: 1,
                            children: [g(y, {
                                className: "ubuntu-bold",
                                variant: "light",
                                children: ["+", e.priceInActivityPoints]
                            }), " ", a(us, {
                                type: e.activityPointType
                            })]
                        })]
                    })]
                })]
            })
    },
    m9 = () => {
        const [s, e] = _.useState(null),
            [t, r] = _.useState(!1);
        if (W(OO, i => {
            let n = i.getParser();
            n && e(n.data)
        }), mP(() => {
            B(new Qm)
        }), !!s)
            return a(q, {
                children: t ? a(f9, {
                    offer: s,
                    setOpen: r
                }) : a(g9, {
                    offer: s,
                    setOpen: r
                })
            })
    },
    E9 = s => {
        const [e, t] = _.useState(0),
            [r, i] = _.useState(null),
            [n, o] = _.useState(!0),
            {showConfirm: l=null} = Yt();
        W(Wc, m => {
            t(0),
            i(null)
        }),
        W(km, m => {
            t(0),
            i(null)
        }),
        W(na, m => {
            const p = m.getParser();
            p.roomEnter && (p.data.habboGroupId > 0 ? (t(p.data.habboGroupId), B(new Gl(p.data.habboGroupId, !1))) : (t(0), i(null)))
        }),
        W(WO, m => {
            const p = m.getParser();
            !r || p.groupId !== r.id && p.groupId !== e || (t(0), i(null))
        }),
        W(ec, m => {
            const p = m.getParser();
            p.id === e && i(p)
        });
        const c = () => {
                l(f("group.leaveconfirm.desc"), () => {
                    B(new Vd(r.id, Z().userId))
                }, null)
            },
            u = r && r.ownerName === Z().userName,
            h = () => {
                if (u)
                    return "group.manage";
                if (r.type === Yr.PRIVATE)
                    return "";
                if (r.membershipType === Us.MEMBER)
                    return "group.leave";
                if (r.membershipType === Us.NOT_MEMBER && r.type === Yr.REGULAR)
                    return "group.join";
                if (r.membershipType === Us.REQUEST_PENDING)
                    return "group.membershippending";
                if (r.membershipType === Us.NOT_MEMBER && r.type === Yr.EXCLUSIVE)
                    return "group.requestmembership"
            },
            d = () => {
                if (u)
                    return Uv(r.id);
                if (!(r.type === Yr.PRIVATE && r.membershipType === Us.NOT_MEMBER)) {
                    if (r.membershipType === Us.MEMBER) {
                        c();
                        return
                    }
                    VE(r.id)
                }
            };
        return r ? a(k, {
            className: "nitro-group-room_info",
            children: g(M, {
                children: [g(P, {
                    className: "group-room-header",
                    alignItems: "center",
                    justifyContent: "between",
                    pointer: !0,
                    onClick: m => o(p => !p),
                    children: [a(P, {
                        children: a(k, {
                            className: "icon icon-group_icon_room"
                        })
                    }), a(y, {
                        bold: !0,
                        variant: "white",
                        children: f("group.homeroominfo.title")
                    }), g(P, {
                        children: [n && a(k, {
                            className: "icon icon-notification_arrow_down"
                        }), !n && a(k, {
                            className: "icon icon-notification_arrow_left"
                        })]
                    })]
                }), n && a(q, {
                    children: g(M, {
                        className: "px-2 pb-2",
                        children: [g(P, {
                            pointer: !0,
                            gap: 2,
                            onClick: m => Mu(r.id),
                            children: [a(k, {
                                className: "group-badge",
                                children: a(Vt, {
                                    badgeCode: r.badge,
                                    isGroup: !0
                                })
                            }), a(y, {
                                variant: "white",
                                className: "mt-1",
                                children: r.title
                            })]
                        }), (r.type !== Yr.PRIVATE || u) && a(H, {
                            fullWidth: !0,
                            className: "btn-flash",
                            disabled: r.membershipType === Us.REQUEST_PENDING,
                            onClick: d,
                            children: f(h())
                        })]
                    })
                })]
            })
        }) : null
    },
    p9 = s => {
        const {title: e="Nitro", onClose: t=null, ...r} = s;
        return a(i_, {
            title: e,
            onClose: t,
            ...r,
            children: g(fe, {
                children: [a(M, {
                    center: !0,
                    size: 5,
                    children: a("object", {
                        data: "https://assets.nitrodev.co/logos/nitro-n-dark.svg",
                        width: "100",
                        height: "100",
                        children: " "
                    })
                }), g(M, {
                    size: 7,
                    children: [g(M, {
                        alignItems: "center",
                        gap: 0,
                        children: [a(y, {
                            bold: !0,
                            fontSize: 4,
                            children: "Nitro React"
                        }), g(y, {
                            children: ["v", Lv()]
                        })]
                    }), g(M, {
                        alignItems: "center",
                        children: [g(y, {
                            children: [a("b", {
                                children: "Renderer:"
                            }), " v", r4()]
                        }), g(M, {
                            fullWidth: !0,
                            gap: 1,
                            children: [a(H, {
                                fullWidth: !0,
                                variant: "success",
                                onClick: i => window.open("https://discord.nitrodev.co"),
                                children: "Discord"
                            }), g(P, {
                                gap: 1,
                                children: [a(H, {
                                    fullWidth: !0,
                                    onClick: i => window.open("https://git.krews.org/nitro/nitro-react"),
                                    children: "Git"
                                }), a(H, {
                                    fullWidth: !0,
                                    onClick: i => window.open("https://git.krews.org/nitro/nitro-react/-/issues"),
                                    children: "Bug Report"
                                })]
                            })]
                        })]
                    })]
                })]
            })
        })
    },
    I9 = s => {
        const {item: e=null, title: t=s.item && s.item.title || "", onClose: r=null, ...i} = s,
            [n, o] = _.useState(!1),
            l = () => {
                zo(e.clickUrl),
                r()
            },
            c = e.alertType === we.DEFAULT;
        return g(i_, {
            title: t,
            onClose: r,
            ...i,
            type: c ? we.DEFAULT : e.alertType,
            children: [g(P, {
                fullHeight: !0,
                overflow: "auto",
                gap: c || e.imageUrl && !n ? 2 : 0,
                children: [c && !e.imageUrl && a(k, {
                    className: "notification-frank flex-shrink-0"
                }), e.imageUrl && !n && a("img", {
                    src: e.imageUrl,
                    alt: e.title,
                    onError: () => {
                        o(!0)
                    },
                    className: "align-self-baseline"
                }), g(k, {
                    classNames: ["notification-text overflow-y-auto d-flex flex-column w-100", e.clickUrl && !c ? "justify-content-center" : ""],
                    children: [e.messages.length > 0 && e.messages.map((u, h) => {
                        const d = u.replace(/\r\n|\r|\n/g, "<br />");
                        return a(k, {
                            dangerouslySetInnerHTML: {
                                __html: d
                            }
                        }, h)
                    }), e.clickUrl && e.clickUrl.length > 0 && e.imageUrl && !n && g(q, {
                        children: [a("hr", {
                            className: "my-2 w-100"
                        }), a(H, {
                            onClick: l,
                            className: "align-self-center px-3",
                            children: f(e.clickUrlText)
                        })]
                    })]
                })]
            }), (!e.imageUrl || e.imageUrl && n) && a(q, {
                children: g(M, {
                    alignItems: "center",
                    center: !0,
                    gap: 0,
                    children: [a("hr", {
                        className: "my-2 w-100"
                    }), !e.clickUrl && a(H, {
                        onClick: r,
                        children: f("generic.close")
                    }), e.clickUrl && e.clickUrl.length > 0 && a(H, {
                        onClick: l,
                        children: f(e.clickUrlText)
                    })]
                })
            })]
        })
    },
    T9 = s => {
        const {item: e=null, title: t=s.item && s.item.title || "", onClose: r=null, ...i} = s,
            [n, o] = _.useState(""),
            [l, c] = _.useState([]),
            u = () => {
                zo(e.clickUrl),
                r()
            },
            h = m => {
                let p = JSON.parse(e.messages[0]);
                c(p.filter(E => E.includes(m))),
                o(m)
            };
        _.useEffect(() => {
            c(JSON.parse(e.messages[0]))
        }, [e]);
        const d = e.clickUrl && e.clickUrl.startsWith("event:");
        return g(i_, {
            title: t,
            onClose: r,
            ...i,
            children: [a(P, {
                fullWidth: !0,
                alignItems: "center",
                position: "relative",
                children: a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    placeholder: f("generic.search"),
                    value: n,
                    onChange: m => h(m.target.value)
                })
            }), a(M, {
                fullHeight: !0,
                className: "py-1",
                overflow: "hidden",
                children: a(Mt, {
                    gap: 1,
                    columnCount: 1,
                    children: l && l.map((m, p) => a("span", {
                        children: m
                    }, p))
                })
            }), a("hr", {
                className: "my-2"
            }), g(M, {
                alignItems: "center",
                center: !0,
                gap: 1,
                children: [!d && !e.clickUrl && a(H, {
                    onClick: r,
                    children: f("generic.close")
                }), e.clickUrl && e.clickUrl.length > 0 && a(H, {
                    onClick: u,
                    children: f(e.clickUrlText)
                })]
            })]
        })
    },
    R9 = (s, e) => {
        if (!s)
            return null;
        const t = {
            key: s.id,
            item: s,
            onClose: e
        };
        switch (s.alertType) {
        case we.NITRO:
            return a(p9, {
                ...t
            });
        case we.SEARCH:
            return a(T9, {
                ...t
            });
        default:
            return a(I9, {
                ...t
            })
        }
    },
    O9 = s => {
        const {item: e=null, onClose: t=null, ...r} = s;
        return g(zE, {
            fadesOut: !1,
            className: "flex-column club-gift",
            onClose: t,
            ...r,
            children: [g("div", {
                className: "d-flex align-items-center gap-2 mb-2",
                children: [a(us, {
                    type: "hc",
                    className: "flex-shrink-0"
                }), a("span", {
                    className: "ms-1",
                    children: f("notifications.text.club_gift")
                })]
            }), g("div", {
                className: "d-flex align-items-center justify-content-end gap-2",
                children: [a("button", {
                    type: "button",
                    className: "btn btn-success w-100 btn-sm",
                    onClick: () => zo(e.linkUrl),
                    children: f("notifications.button.show_gift_list")
                }), a("span", {
                    className: "text-decoration-underline cursor-pointer text-nowrap",
                    onClick: t,
                    children: f("notifications.button.later")
                })]
            })]
        })
    },
    S9 = s => {
        const {item: e=null, onClose: t=null, ...r} = s,
            i = e.message.replace(/\r\n|\r|\n/g, "<br />");
        return g(zE, {
            onClose: t,
            gap: 2,
            alignItems: "center",
            onClick: n => e.linkUrl && e.linkUrl.length && zo(e.linkUrl),
            ...r,
            children: [e.iconUrl && e.iconUrl.length && a(P, {
                center: !0,
                className: "bubble-image-container",
                children: a("img", {
                    className: "no-select",
                    src: e.iconUrl,
                    alt: ""
                })
            }), a(y, {
                wrap: !0,
                variant: "white",
                dangerouslySetInnerHTML: {
                    __html: i
                }
            })]
        })
    },
    C9 = (s, e) => {
        if (!s)
            return null;
        const t = {
            key: s.id,
            item: s,
            onClose: e
        };
        switch (s.notificationType) {
        case Wt.CLUBGIFT:
            return a(O9, {
                ...t
            });
        default:
            return a(S9, {
                ...t
            })
        }
    },
    A9 = s => {
        const {item: e=null, onClose: t=null, ...r} = s,
            {message: i=null, onConfirm: n=null, onCancel: o=null, confirmText: l=null, cancelText: c=null, title: u=null} = e,
            h = () => {
                n && n(),
                t()
            },
            d = () => {
                o && o(),
                t()
            };
        return g(i_, {
            title: u,
            onClose: t,
            ...r,
            type: we.ALERT,
            children: [a(P, {
                grow: !0,
                center: !0,
                children: a(y, {
                    children: i
                })
            }), g(P, {
                gap: 1,
                children: [a(H, {
                    fullWidth: !0,
                    variant: "danger",
                    onClick: d,
                    children: c
                }), a(H, {
                    fullWidth: !0,
                    onClick: h,
                    children: l
                })]
            })]
        })
    },
    N9 = (s, e) => {
        if (!s)
            return null;
        const t = {
            key: s.id,
            item: s,
            onClose: e
        };
        switch (s.confirmType) {
        default:
            return a(A9, {
                ...t
            })
        }
    },
    y9 = s => {
        const {alerts: e=[], bubbleAlerts: t=[], confirms: r=[], closeAlert: i=null, closeBubbleAlert: n=null, closeConfirm: o=null} = Yt(),
            l = _.useMemo(() => {
                if (!e || !e.length)
                    return null;
                const h = [];
                for (const d of e) {
                    const m = R9(d, () => i(d));
                    h.push(m)
                }
                return h
            }, [e, i]),
            c = _.useMemo(() => {
                if (!t || !t.length)
                    return null;
                const h = [];
                for (const d of t) {
                    const m = C9(d, () => n(d));
                    if (d.notificationType === Wt.CLUBGIFT) {
                        h.unshift(m);
                        continue
                    }
                    h.push(m)
                }
                return h
            }, [t, n]),
            u = _.useMemo(() => {
                if (!r || !r.length)
                    return null;
                const h = [];
                for (const d of r) {
                    const m = N9(d, () => o(d));
                    h.push(m)
                }
                return h
            }, [r, o]);
        return g(q, {
            children: [a(M, {
                gap: 1,
                children: c
            }), u, l]
        })
    },
    II = s => {
        const {type: e=-1, amount: t=-1, short: r=!1} = s,
            i = `currency-type-${e}`,
            n = _.useMemo(() => g(P, {
                justifyContent: "end",
                pointer: !0,
                gap: 1,
                className: `nitro-purse-button rounded ${i}`,
                children: [a("span", {
                    children: r ? vK(t) : nd(t)
                }), a(us, {
                    type: e
                })]
            }), [t, r, e]);
        return r ? a(lT, {
            placement: "left",
            overlay: a(SL, {
                id: `tooltip-${e}`,
                children: nd(t)
            }),
            children: n
        }) : n
    },
    M9 = s => {
        const {type: e=-1, amount: t=-1} = s,
            r = `currency-type-${e}`;
        return g(P, {
            fullWidth: !0,
            justifyContent: "between",
            className: `nitro-purse-seasonal-currency px-2 py-1 rounded ${r}`,
            children: [a("span", {
                className: "text",
                children: f(`purse.seasonal.currency.${e}`)
            }), g(P, {
                gap: 1,
                children: [a("span", {
                    children: nd(t)
                }), a(us, {
                    type: e
                })]
            })]
        })
    },
    b9 = s => {
        const {purse: e=null, hcDisabled: t=!1} = Qo(),
            r = _.useMemo(() => oe("system.currency.types", []), []),
            i = _.useMemo(() => oe("currency.display.number.short", !1), []),
            n = (() => {
                if (!e)
                    return null;
                const l = e.clubPeriods * 31 + e.clubDays,
                    c = e.minutesUntilExpiration;
                return e.clubLevel === gr.NO_CLUB ? f("purse.clubdays.zero.amount.text") : c > -1 && c < 60 * 24 ? _r.shortFormat(c * 60) : _r.shortFormat(l * 86400)
            })(),
            o = (l, c=-1, u=!1) => {
                if (!e || !e.activityPoints || !e.activityPoints.size)
                    return null;
                const h = Array.from(e.activityPoints.keys()).filter(p => r.indexOf(p) >= 0);
                let d = 0;
                for (; d < l;)
                    h.shift(),
                    d++;
                d = 0;
                const m = [];
                for (const p of h) {
                    if (c > -1 && d === c)
                        break;
                    u ? m.push(a(M9, {
                        type: p,
                        amount: e.activityPoints.get(p)
                    }, p)) : m.push(a(II, {
                        type: p,
                        amount: e.activityPoints.get(p),
                        short: i
                    }, p)),
                    d++
                }
                return m
            };
        return e ? g(M, {
            alignItems: "end",
            className: "nitro-purse-container",
            gap: 1,
            children: [a(P, {
                className: "nitro-purse rounded-bottom p-1 w-100",
                children: g(fe, {
                    fullWidth: !0,
                    gap: 1,
                    children: [g(M, {
                        justifyContent: "center",
                        size: t ? 10 : 6,
                        gap: 0,
                        children: [a(II, {
                            type: -1,
                            amount: e.credits,
                            short: i
                        }), o(0, 2)]
                    }), !t && g(M, {
                        center: !0,
                        pointer: !0,
                        size: 3,
                        gap: 1,
                        className: "nitro-purse-subscription rounded",
                        onClick: l => ge("habboUI/open/hccenter"),
                        children: [a(us, {
                            type: "hc"
                        }), a("span", {
                            children: n
                        })]
                    }), g(M, {
                        justifyContent: "center",
                        size: 3,
                        gap: 0,
                        children: [a(P, {
                            center: !0,
                            pointer: !0,
                            className: "test-btn help",
                            onClick: l => ge("help/show"),
                            children: a("span", {
                                children: "Help"
                            })
                        }), a(P, {
                            center: !0,
                            pointer: !0,
                            className: "test-btn logout",
                            onClick: l => null,
                            children: a("i", {
                                className: "icon icon-exit"
                            })
                        }), a(P, {
                            center: !0,
                            pointer: !0,
                            className: "test-btn settings",
                            onClick: l => ge("user-settings/toggle"),
                            children: a("i", {
                                className: "icon icon-gear"
                            })
                        })]
                    })]
                })
            }), o(2, -1, !0)]
        }) : null
    },
    D9 = {
        purple: 9452386,
        blue: 3891856,
        green: 6459451,
        yellow: 10658089,
        lilac: 6897548,
        orange: 10841125,
        turquoise: 2661026,
        red: 10104881
    },
    v9 = s => {
        const [e, t] = _.useState(!0),
            [r, i] = _.useState(""),
            [n, o] = _.useState("");
        G4(Jf.MYSTERY_BOX_KEYS_UPDATE, c => {
            i(c.keyColor),
            o(c.boxColor)
        });
        const l = c => {
            const u = D9[c];
            return wr.int2rgb(u)
        };
        return r === "" && n === "" ? null : a(k, {
            className: "nitro-mysterybox-toolbar-extension",
            children: g(M, {
                children: [g(P, {
                    className: "mysterybox-header",
                    alignItems: "center",
                    justifyContent: "between",
                    pointer: !0,
                    onClick: c => t(u => !u),
                    children: [a(y, {
                        bold: !0,
                        variant: "white",
                        children: f("mysterybox.tracker.title")
                    }), g(P, {
                        children: [e && a(k, {
                            className: "icon icon-notification_arrow_down"
                        }), !e && a(k, {
                            className: "icon icon-notification_arrow_left"
                        })]
                    })]
                }), e && a(q, {
                    children: g(M, {
                        className: "px-2 pb-2",
                        children: [a(y, {
                            variant: "white",
                            children: f("mysterybox.tracker.description")
                        }), g(P, {
                            className: "mt-1",
                            justifyContent: "center",
                            alignItems: "center",
                            gap: 2,
                            children: [a($e, {
                                className: "mysterybox-container",
                                children: a("div", {
                                    className: "box-image flex-shrink-0",
                                    style: {
                                        backgroundColor: l(n)
                                    },
                                    children: a("div", {
                                        className: "chain-overlay-image"
                                    })
                                })
                            }), a($e, {
                                className: "mysterybox-container",
                                children: a("div", {
                                    className: "key-image flex-shrink-0",
                                    style: {
                                        backgroundColor: l(r)
                                    },
                                    children: a("div", {
                                        className: "key-overlay-image"
                                    })
                                })
                            })]
                        })]
                    })
                })]
            })
        })
    },
    P9 = s => {
        const {eventId: e=-1, eventName: t="", eventDescription: r="", setIsEditingPromote: i=null} = s,
            [n, o] = _.useState(t),
            [l, c] = _.useState(r),
            u = () => {
                B(new lM(e, n, l)),
                i(!1)
            };
        return g(Se, {
            className: "nitro-guide-tool",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("navigator.eventsettings.editcaption"),
                onCloseClick: () => i(!1)
            }), g(Ie, {
                className: "text-black",
                children: [g(M, {
                    children: [a(y, {
                        bold: !0,
                        children: f("navigator.eventsettings.name")
                    }), a("input", {
                        type: "text",
                        className: "form-control form-control-sm",
                        placeholder: f("navigator.eventsettings.name"),
                        maxLength: 64,
                        value: n,
                        onChange: h => o(h.target.value)
                    })]
                }), g(M, {
                    children: [a(y, {
                        bold: !0,
                        children: f("navigator.eventsettings.desc")
                    }), a("textarea", {
                        className: "form-control form-control-sm",
                        placeholder: f("navigator.eventsettings.desc"),
                        maxLength: 64,
                        value: l,
                        onChange: h => c(h.target.value)
                    })]
                }), a(M, {
                    children: a(H, {
                        fullWidth: !0,
                        disabled: !n || !l,
                        variant: !n || !l ? "danger" : "success",
                        onClick: h => u(),
                        children: f("navigator.eventsettings.edit")
                    })
                })]
            })]
        })
    },
    L9 = s => {
        const {eventDescription: e="", setIsEditingPromote: t=null} = s,
            {setIsExtended: r} = JE(),
            i = () => {
                r(!0),
                ge("catalog/open/room_event")
            };
        return g(q, {
            children: [a(P, {
                alignItems: "center",
                gap: 2,
                style: {
                    overflowWrap: "anywhere"
                },
                children: a(y, {
                    variant: "white",
                    children: e
                })
            }), a("br", {}), a("br", {}), g(fe, {
                className: "d-flex align-items-center justify-content-end gap-2",
                children: [a(H, {
                    className: "btn btn-primary w-100 btn-sm",
                    onClick: n => t(!0),
                    children: f("navigator.roominfo.editevent")
                }), a(H, {
                    className: "btn btn-success w-100 btn-sm",
                    onClick: n => i(),
                    children: f("roomad.extend.event")
                })]
            })]
        })
    },
    U9 = s => {
        const {eventDescription: e=""} = s;
        return g(q, {
            children: [a(P, {
                alignItems: "center",
                gap: 2,
                style: {
                    overflowWrap: "anywhere"
                },
                children: a(y, {
                    variant: "white",
                    children: e
                })
            }), a("br", {}), a("br", {}), a(M, {
                alignItems: "center",
                gap: 1,
                children: g(k, {
                    fullWidth: !0,
                    overflow: "hidden",
                    position: "relative",
                    className: "bg-light-dark rounded",
                    children: [a(P, {
                        fit: !0,
                        center: !0,
                        position: "absolute",
                        children: a(y, {
                            variant: "white",
                            center: !0,
                            children: f("navigator.eventinprogress")
                        })
                    }), a(y, {
                        children: " "
                    })]
                })
            })]
        })
    },
    w9 = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(!0),
            {promoteInformation: n, setPromoteInformation: o} = JE();
        return W(Wc, l => {
            o(null)
        }), n ? a(q, {
            children: n.data.adId !== -1 && a(k, {
                className: "nitro-notification-bubble rounded",
                children: g(M, {
                    children: [g(P, {
                        alignItems: "center",
                        justifyContent: "between",
                        pointer: !0,
                        onClick: l => i(c => !c),
                        children: [a(y, {
                            variant: "white",
                            overflow: "hidden",
                            children: n.data.eventName
                        }), r && a(CL, {
                            className: "fa-icon"
                        }), !r && a(AL, {
                            className: "fa-icon"
                        })]
                    }), r && Z().userId !== n.data.ownerAvatarId && a(U9, {
                        eventDescription: n.data.eventDescription
                    }), r && Z().userId === n.data.ownerAvatarId && a(L9, {
                        eventDescription: n.data.eventDescription,
                        setIsEditingPromote: () => t(!0)
                    }), e && a(P9, {
                        eventId: n.data.adId,
                        eventName: n.data.eventName,
                        eventDescription: n.data.eventDescription,
                        setIsEditingPromote: () => t(!1)
                    })]
                })
            })
        }) : null
    },
    F9 = s => a("div", {
        className: "nitro-right-side",
        children: g(M, {
            position: "relative",
            gap: 1,
            children: [a(b9, {}), a(E9, {}), a(v9, {}), a(m9, {}), a(w9, {}), a(y9, {})]
        })
    }),
    x9 = s => a("div", {
        className: "room-spectator"
    }),
    G9 = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(null),
            {chatStyleId: n=0} = fa(),
            {roomSession: o=null} = vt();
        W(bC, c => {
            const u = c.getParser();
            if (!u)
                return;
            const h = o.userDataManager.getPetData(u.petId);
            h && (t(h), i(u))
        });
        const l = (c, u) => {
            !c || !u || o == null || o.sendChatMessage(`${c} ${u}`, n)
        };
        return !e || !r ? null : g(Se, {
            uniqueKey: "user-settings",
            className: "user-settings-window no-resize",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("widgets.pet.commands.title"),
                onCloseClick: () => i(null)
            }), g(Ie, {
                className: "text-black",
                children: [a(P, {
                    alignItems: "center",
                    justifyContent: "center",
                    gap: 2,
                    children: g(fe, {
                        columnCount: 2,
                        children: [a(M, {
                            fullWidth: !0,
                            overflow: "hidden",
                            className: "body-image pet p-1",
                            children: a(In, {
                                figure: e.figure,
                                posture: "std",
                                direction: 2
                            })
                        }), a(y, {
                            variant: "black",
                            small: !0,
                            wrap: !0,
                            children: e.name
                        })]
                    })
                }), a(fe, {
                    columnCount: 2,
                    children: r.commands && r.commands.length > 0 && r.commands.map((c, u) => a(H, {
                        disabled: !r.enabledCommands.includes(c),
                        onClick: () => l(e.name, f(`pet.command.${c}`)),
                        children: f(`pet.command.${c}`)
                    }, u))
                })]
            })]
        })
    },
    br = s => {
        const {justifyContent: e="center", alignItems: t="center", classNames: r=[], ...i} = s,
            n = _.useMemo(() => {
                const o = ["menu-header", "p-1"];
                return r.length && o.push(...r), o
            }, [r]);
        return a(P, {
            justifyContent: e,
            alignItems: t,
            classNames: n,
            ...i
        })
    },
    B9 = s => {
        const {chatEvent: e=null, onClose: t=null} = s,
            [r, i] = _.useState(e.chat === "${bot.skill.chatter.configuration.text.placeholder}" ? "" : e.chat),
            [n, o] = _.useState(e.automaticChat),
            [l, c] = _.useState(e.mixSentences),
            [u, h] = _.useState(e.chatDelay),
            d = _.useMemo(() => FE(dt().roomId, e.objectId, e.category, 1), [e]),
            m = E => E.replace(/;#;/g, " ").replace(/\r\n|\r|\n/g, "\r"),
            p = () => {
                const E = m(r) + ";#;" + n + ";#;" + u + ";#;" + l;
                B(new fn(e.botId, rt.SETUP_CHAT, E)),
                t()
            };
        return a(so, {
            windowPosition: qs.NOTHING,
            handleSelector: ".drag-handler",
            dragStyle: {
                top: d.y,
                left: d.x
            },
            children: g(k, {
                className: "nitro-context-menu bot-chat",
                children: [a(br, {
                    className: "drag-handler",
                    children: f("bot.skill.chatter.configuration.title")
                }), g(M, {
                    className: "p-1",
                    children: [g(M, {
                        gap: 1,
                        children: [a(y, {
                            variant: "white",
                            children: f("bot.skill.chatter.configuration.chat.text")
                        }), a("textarea", {
                            className: "form-control form-control-sm",
                            placeholder: f("bot.skill.chatter.configuration.text.placeholder"),
                            value: r,
                            rows: 7,
                            onChange: E => i(E.target.value)
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [g(P, {
                            gap: 1,
                            alignItems: "center",
                            justifyContent: "between",
                            children: [a(y, {
                                fullWidth: !0,
                                variant: "white",
                                children: f("bot.skill.chatter.configuration.automatic.chat")
                            }), a("input", {
                                type: "checkbox",
                                className: "form-check-input",
                                checked: n,
                                onChange: E => o(E.target.checked)
                            })]
                        }), g(P, {
                            gap: 1,
                            alignItems: "center",
                            justifyContent: "between",
                            children: [a(y, {
                                fullWidth: !0,
                                variant: "white",
                                children: f("bot.skill.chatter.configuration.markov")
                            }), a("input", {
                                type: "checkbox",
                                className: "form-check-input",
                                checked: l,
                                onChange: E => c(E.target.checked)
                            })]
                        }), g(P, {
                            gap: 1,
                            alignItems: "center",
                            justifyContent: "between",
                            children: [a(y, {
                                fullWidth: !0,
                                variant: "white",
                                children: f("bot.skill.chatter.configuration.chat.delay")
                            }), a("input", {
                                type: "number",
                                className: "form-control form-control-sm",
                                value: u,
                                onChange: E => h(E.target.valueAsNumber)
                            })]
                        })]
                    }), g(P, {
                        alignItems: "center",
                        justifyContent: "between",
                        gap: 1,
                        children: [a(H, {
                            fullWidth: !0,
                            variant: "primary",
                            onClick: t,
                            children: f("cancel")
                        }), a(H, {
                            fullWidth: !0,
                            variant: "success",
                            onClick: p,
                            children: f("save")
                        })]
                    })]
                })]
            })
        })
    },
    TI = -1,
    RI = 0,
    OI = 1,
    SI = 2,
    CI = 3,
    AI = 4,
    NI = 5,
    yI = 6,
    k9 = s => {
        const {item: e=null, onClose: t=null} = s,
            [r, i] = _.useState(TI),
            [n, o] = _.useState(null),
            [l, c] = _.useState(null),
            {roomSession: u=null} = vt(),
            h = () => {
                n && re().selectRoomObject(u.roomId, n.roomIndex, V.UNIT)
            },
            d = () => {
                u.usePetProduct(e.requestRoomObjectId, n.webID),
                t()
            },
            m = _.useMemo(() => {
                if (!n || !l)
                    return null;
                const p = new Nn(n.figure),
                    E = l.customParams.split(" "),
                    T = parseInt(E[0]);
                switch (l.specialType) {
                case _e.PET_SHAMPOO:
                    {
                        if (E.length < 2)
                            return null;
                        const I = re().getPetColorResult(T, p.paletteId),
                            S = re().getPetColorResultsForTag(T, E[1]);
                        let A = -1;
                        for (const N of S)
                            if (N.breed === I.breed) {
                                A = parseInt(N.id);
                                break
                            }
                        return a(In, {
                            typeId: p.typeId,
                            paletteId: A,
                            petColor: p.color,
                            customParts: p.customParts,
                            direction: 2
                        })
                    }case _e.PET_CUSTOM_PART:
                    {
                        if (E.length < 4)
                            return null;
                        const I = [],
                            S = E[1].split(",").map(v => parseInt(v)),
                            A = E[2].split(",").map(v => parseInt(v)),
                            N = E[3].split(",").map(v => parseInt(v));
                        let b = 0;
                        for (; b < S.length;) {
                            const v = S[b],
                                D = p.getCustomPart(v);
                            let G = N[b];
                            D != null && (G = D.paletteId),
                            I.push(new Rh(v, A[b], G)),
                            b++
                        }
                        return a(In, {
                            typeId: p.typeId,
                            paletteId: p.paletteId,
                            petColor: p.color,
                            customParts: I,
                            direction: 2
                        })
                    }case _e.PET_CUSTOM_PART_SHAMPOO:
                    {
                        if (E.length < 3)
                            return null;
                        const I = [],
                            S = E[1].split(",").map(b => parseInt(b)),
                            A = E[2].split(",").map(b => parseInt(b));
                        let N = 0;
                        for (; N < S.length;) {
                            const b = S[N],
                                v = p.getCustomPart(b);
                            let D = -1;
                            v != null && (D = v.partId),
                            I.push(new Rh(S[N], D, A[N])),
                            N++
                        }
                        return a(In, {
                            typeId: p.typeId,
                            paletteId: p.paletteId,
                            petColor: p.color,
                            customParts: I,
                            direction: 2
                        })
                    }case _e.PET_SADDLE:
                    {
                        if (E.length < 4)
                            return null;
                        const I = [],
                            S = E[1].split(",").map(v => parseInt(v)),
                            A = E[2].split(",").map(v => parseInt(v)),
                            N = E[3].split(",").map(v => parseInt(v));
                        let b = 0;
                        for (; b < S.length;)
                            I.push(new Rh(S[b], A[b], N[b])),
                            b++;
                        for (const v of p.customParts)
                            S.indexOf(v.layerId) === -1 && I.push(v);
                        return a(In, {
                            typeId: p.typeId,
                            paletteId: p.paletteId,
                            petColor: p.color,
                            customParts: I,
                            direction: 2
                        })
                    }case _e.MONSTERPLANT_REBREED:
                case _e.MONSTERPLANT_REVIVAL:
                case _e.MONSTERPLANT_FERTILIZE:
                    {
                        let I = "rip";
                        const S = re().getRoomObject(u.roomId, n.roomIndex, V.UNIT);
                        if (S && (I = S.model.getValue(C.FIGURE_POSTURE), I === "rip")) {
                            const A = n.petLevel;
                            A < 7 ? I = `grw${A}` : I = "std"
                        }
                        return a(In, {
                            typeId: p.typeId,
                            paletteId: p.paletteId,
                            petColor: p.color,
                            customParts: p.customParts,
                            posture: I,
                            direction: 2
                        })
                    }
                }
            }, [n, l, u]);
        return _.useEffect(() => {
            const p = u.userDataManager.getUserDataByIndex(e.id);
            o(p);
            const E = $d(u.roomId, e.requestRoomObjectId, V.FLOOR);
            if (!E)
                return;
            c(E);
            let T = TI;
            switch (E.specialType) {
            case _e.PET_SHAMPOO:
                T = RI;
                break;
            case _e.PET_CUSTOM_PART:
                T = OI;
                break;
            case _e.PET_CUSTOM_PART_SHAMPOO:
                T = SI;
                break;
            case _e.PET_SADDLE:
                T = CI;
                break;
            case _e.MONSTERPLANT_REVIVAL:
                T = AI;
                break;
            case _e.MONSTERPLANT_REBREED:
                T = NI;
                break;
            case _e.MONSTERPLANT_FERTILIZE:
                T = yI;
                break
            }
            i(T)
        }, [u, e]), n ? g(Se, {
            theme: "habbo",
            className: "nitro-use-product-confirmation",
            children: [a(Oe, {
                headerText: f("useproduct.widget.title", ["name"], [n.name]),
                onCloseClick: t
            }), a(Ie, {
                center: !0,
                children: g(P, {
                    gap: 2,
                    overflow: "hidden",
                    children: [a(M, {
                        children: a(k, {
                            pointer: !0,
                            className: "product-preview",
                            onClick: h,
                            children: m
                        })
                    }), g(M, {
                        justifyContent: "between",
                        overflow: "auto",
                        children: [g(M, {
                            gap: 2,
                            children: [r === RI && g(q, {
                                children: [a(y, {
                                    children: f("useproduct.widget.text.shampoo", ["productName"], [l.name])
                                }), a(y, {
                                    children: f("useproduct.widget.info.shampoo")
                                })]
                            }), r === OI && g(q, {
                                children: [a(y, {
                                    children: f("useproduct.widget.text.custompart", ["productName"], [l.name])
                                }), a(y, {
                                    children: f("useproduct.widget.info.custompart")
                                })]
                            }), r === SI && g(q, {
                                children: [a(y, {
                                    children: f("useproduct.widget.text.custompartshampoo", ["productName"], [l.name])
                                }), a(y, {
                                    children: f("useproduct.widget.info.custompartshampoo")
                                })]
                            }), r === CI && g(q, {
                                children: [a(y, {
                                    children: f("useproduct.widget.text.saddle", ["productName"], [l.name])
                                }), a(y, {
                                    children: f("useproduct.widget.info.saddle")
                                })]
                            }), r === AI && g(q, {
                                children: [a(y, {
                                    children: f("useproduct.widget.text.revive_monsterplant", ["productName"], [l.name])
                                }), a(y, {
                                    children: f("useproduct.widget.info.revive_monsterplant")
                                })]
                            }), r === NI && g(q, {
                                children: [a(y, {
                                    children: f("useproduct.widget.text.rebreed_monsterplant", ["productName"], [l.name])
                                }), a(y, {
                                    children: f("useproduct.widget.info.rebreed_monsterplant")
                                })]
                            }), r === yI && g(q, {
                                children: [a(y, {
                                    children: f("useproduct.widget.text.fertilize_monsterplant", ["productName"], [l.name])
                                }), a(y, {
                                    children: f("useproduct.widget.info.fertilize_monsterplant")
                                })]
                            })]
                        }), g(P, {
                            alignItems: "center",
                            justifyContent: "between",
                            children: [a(H, {
                                variant: "danger",
                                onClick: t,
                                children: f("useproduct.widget.cancel")
                            }), a(H, {
                                variant: "success",
                                onClick: d,
                                children: f("useproduct.widget.use")
                            })]
                        })]
                    })]
                })
            })]
        }) : null
    },
    te = s => {
        const {disabled: e=!1, fullWidth: t=!0, justifyContent: r="center", alignItems: i="center", classNames: n=[], onClick: o=null, ...l} = s,
            c = h => {
                e || o && o(h)
            },
            u = _.useMemo(() => {
                const h = ["menu-item", "list-item"];
                return e && h.push("disabled"), n.length && h.push(...n), h
            }, [e, n]);
        return a(P, {
            fullWidth: t,
            justifyContent: r,
            alignItems: i,
            classNames: u,
            onClick: c,
            ...l
        })
    },
    V9 = s => {
        const {justifyContent: e="center", alignItems: t="center", classNames: r=[], collapsed: i=!0, ...n} = s,
            o = _.useMemo(() => {
                const l = ["menu-footer"];
                return r.length && l.push(...r), l
            }, [r]);
        return g(P, {
            justifyContent: e,
            alignItems: t,
            classNames: o,
            ...n,
            children: [!i && a(kf, {
                className: "fa-icon align-self-center"
            }), i && a(Bf, {
                className: "fa-icon align-self-center"
            })]
        })
    },
    H9 = 25,
    MI = 3,
    j9 = 5e3,
    W9 = 75,
    rl = 10;
let w_ = !1,
    Zu = null,
    $u = -1e6,
    F_ = 1;
const Pn = s => {
        const {objectId: e=-1, category: t=-1, userType: r=-1, fades: i=!1, onClose: n=null, position: o="absolute", classNames: l=[], style: c={}, children: u=null, collapsable: h=!1, ...d} = s,
            [m, p] = _.useState({
                x: null,
                y: null
            }),
            [E, T] = _.useState(1),
            [I, S] = _.useState(!1),
            [A, N] = _.useState(w_),
            b = _.useRef(),
            v = _.useCallback(F => {
                if (!I)
                    return;
                F_ += F;
                let U = (1 - F_ / W9) * 1;
                if (U <= 0)
                    return n(), !1;
                T(U)
            }, [I, n]),
            D = _.useCallback((F, U) => {
                if (!F || !U || !Zu)
                    return;
                let z = -b.current.offsetHeight;
                r > -1 && (r === yt.USER || r === yt.BOT || r === yt.RENTABLE_BOT) ? z = z + (F.height > 50 ? 15 : 0) : z = z - 14,
                Zu.addValue(U.y - F.top);
                let Q = Zu.getMax();
                Q < $u - MI && (Q = $u - MI),
                $u = Q;
                const j = U.y - Q;
                let J = ~~(U.x - b.current.offsetWidth / 2),
                    X = ~~(j + z);
                const K = qe().width - b.current.offsetWidth - rl,
                    be = qe().height - b.current.offsetHeight - rl;
                J < rl ? J = rl : J > K && (J = K),
                X < rl ? X = rl : X > be && (X = be),
                p({
                    x: J,
                    y: X
                })
            }, [r]),
            G = _.useMemo(() => {
                const F = ["nitro-context-menu"];
                return A && F.push("menu-hidden"), F.push(m.x !== null ? "visible" : "invisible"), l.length && F.push(...l), F
            }, [m, l, A]),
            x = _.useMemo(() => {
                let F = {};
                return F.left = m.x || 0, F.top = m.y || 0, F.opacity = E, Object.keys(c).length && (F = {
                    ...F,
                    ...c
                }), F
            }, [m, E, c]);
        return _.useEffect(() => {
            if (!b.current)
                return;
            const F = U => {
                if (!b.current)
                    return;
                v(U);
                const z = FE(dt().roomId, e, t),
                    Q = Ov(dt().roomId, e, t);
                D(z, Q)
            };
            return ir().add(F), () => {
                ir().remove(F)
            }
        }, [e, t, v, D]), _.useEffect(() => {
            if (!i)
                return;
            const F = setTimeout(() => S(!0), j9);
            return () => clearTimeout(F)
        }, [i]), _.useEffect(() => {
            w_ = A
        }, [A]), _.useEffect(() => {
            Zu = new AU(H9),
            $u = -1e6,
            F_ = 1
        }, []), g(k, {
            innerRef: b,
            position: o,
            classNames: G,
            style: x,
            ...d,
            children: [!(h && w_) && u, h && a(V9, {
                onClick: () => N(!A),
                collapsed: A
            })]
        })
    },
    bI = 0,
    DI = 1,
    vI = 2,
    PI = 3,
    LI = 4,
    UI = 5,
    wI = 6,
    FI = 7,
    Y9 = s => {
        const {item: e=null, updateConfirmingProduct: t=null, onClose: r=null} = s,
            [i, n] = _.useState(0),
            {roomSession: o=null} = vt(),
            l = c => {
                if (c)
                    switch (c) {
                    case "use_product":
                    case "use_product_shampoo":
                    case "use_product_custom_part":
                    case "use_product_custom_part_shampoo":
                    case "use_product_saddle":
                    case "replace_product_saddle":
                    case "revive_monsterplant":
                    case "rebreed_monsterplant":
                    case "fertilize_monsterplant":
                        t(e);
                        break
                    }
            };
        return _.useEffect(() => {
            if (!e)
                return;
            const c = $d(o.roomId, e.requestRoomObjectId, V.FLOOR);
            if (!c)
                return;
            let u = bI;
            switch (c.specialType) {
            case _e.PET_SHAMPOO:
                u = DI;
                break;
            case _e.PET_CUSTOM_PART:
                u = vI;
                break;
            case _e.PET_CUSTOM_PART_SHAMPOO:
                u = PI;
                break;
            case _e.PET_SADDLE:
                u = LI;
                break;
            case _e.MONSTERPLANT_REVIVAL:
                u = UI;
                break;
            case _e.MONSTERPLANT_REBREED:
                u = wI;
                break;
            case _e.MONSTERPLANT_FERTILIZE:
                u = FI;
                break
            }
            n(u)
        }, [o, e]), g(Pn, {
            objectId: e.id,
            category: V.UNIT,
            userType: yt.PET,
            onClose: r,
            collapsable: !0,
            children: [a(br, {
                children: e.name
            }), i === bI && a(te, {
                onClick: c => l("use_product"),
                children: f("infostand.button.useproduct")
            }), i === DI && a(te, {
                onClick: c => l("use_product_shampoo"),
                children: f("infostand.button.useproduct_shampoo")
            }), i === vI && a(te, {
                onClick: c => l("use_product_custom_part"),
                children: f("infostand.button.useproduct_custom_part")
            }), i === PI && a(te, {
                onClick: c => l("use_product_custom_part_shampoo"),
                children: f("infostand.button.useproduct_custom_part_shampoo")
            }), i === LI && g(q, {
                children: [e.replace && a(te, {
                    onClick: c => l("replace_product_saddle"),
                    children: f("infostand.button.replaceproduct_saddle")
                }), !e.replace && a(te, {
                    onClick: c => l("use_product_saddle"),
                    children: f("infostand.button.useproduct_saddle")
                })]
            }), i === UI && a(te, {
                onClick: c => l("revive_monsterplant"),
                children: f("infostand.button.revive_monsterplant")
            }), i === wI && a(te, {
                onClick: c => l("rebreed_monsterplant"),
                children: f("infostand.button.rebreed_monsterplant")
            }), i === FI && a(te, {
                onClick: c => l("fertilize_monsterplant"),
                children: f("infostand.button.fertilize_monsterplant")
            })]
        })
    },
    z9 = s => {
        const {avatarInfo: e=null, onClose: t=null} = s;
        return e ? a(M, {
            className: "nitro-infostand rounded",
            children: g(M, {
                overflow: "visible",
                className: "container-fluid content-area",
                gap: 1,
                children: [g(M, {
                    gap: 1,
                    children: [g(P, {
                        alignItems: "center",
                        justifyContent: "between",
                        gap: 1,
                        children: [a(y, {
                            variant: "white",
                            small: !0,
                            wrap: !0,
                            children: e.name
                        }), a(mi, {
                            className: "cursor-pointer fa-icon",
                            onClick: t
                        })]
                    }), a("hr", {
                        className: "m-0"
                    })]
                }), g(M, {
                    gap: 1,
                    children: [g(P, {
                        gap: 1,
                        children: [a(M, {
                            fullWidth: !0,
                            className: "body-image bot",
                            children: a(rs, {
                                figure: e.figure,
                                direction: 4
                            })
                        }), a(M, {
                            grow: !0,
                            center: !0,
                            gap: 0,
                            children: e.badges.length > 0 && e.badges.map(r => a(Vt, {
                                badgeCode: r,
                                showInfo: !0
                            }, r))
                        })]
                    }), a("hr", {
                        className: "m-0"
                    })]
                }), a(P, {
                    alignItems: "center",
                    className: "bg-light-dark rounded py-1 px-2",
                    children: a(y, {
                        fullWidth: !0,
                        wrap: !0,
                        textBreak: !0,
                        variant: "white",
                        small: !0,
                        className: "motto-content",
                        children: e.motto
                    })
                }), e.carryItem > 0 && g(M, {
                    gap: 1,
                    children: [a("hr", {
                        className: "m-0"
                    }), a(y, {
                        variant: "white",
                        small: !0,
                        wrap: !0,
                        children: f("infostand.text.handitem", ["item"], [f("handitem" + e.carryItem)])
                    })]
                })]
            })
        }) : null
    },
    x_ = 0,
    xI = 1,
    GI = 2,
    K9 = s => {
        const {avatarInfo: e=null, onClose: t=null} = s,
            {roomSession: r=null} = vt(),
            [i, n] = _.useState(0),
            [o, l] = _.useState(!1),
            [c, u] = _.useState(!1),
            [h, d] = _.useState(!1),
            [m, p] = _.useState([]),
            [E, T] = _.useState([]),
            [I, S] = _.useState([]),
            [A, N] = _.useState([]),
            [b, v] = _.useState(!1),
            [D, G] = _.useState(0),
            [x, F] = _.useState(0),
            [U, z] = _.useState(!1),
            [Q, j] = _.useState(!1),
            [J, X] = _.useState(null),
            [K, be] = _.useState(!1),
            [he, et] = _.useState(!1),
            [Ut, fs] = _.useState(-1),
            [Xt, ms] = _.useState(""),
            [ut, Ps] = _.useState("");
        Co(Ji.NPE_SONG_CHANGED, Fe => {
            fs(Fe.id)
        }, K || he),
        Co(jl.SIR_TRAX_SONG_INFO_RECEIVED, Fe => {
            if (Fe.id !== Ut)
                return;
            const _t = qe().soundManager.musicController.getSongInfo(Fe.id);
            _t && (ms(_t.name), Ps(_t.creator))
        }, K || he),
        _.useEffect(() => {
            let Fe = x_,
                _t = !1,
                is = !1,
                Gr = !1,
                Ke = [],
                Ot = [],
                Ti = [],
                no = [],
                Br = !1,
                Uu = 0,
                _c = 0,
                ao = !1,
                oo = !1,
                Jo = !1,
                gc = !1,
                Ea = -1;
            const lo = e.roomControllerLevel >= ct.GUEST;
            if ((lo || e.isOwner || e.isRoomOwner || e.isAnyRoomController) && (_t = !0, is = !e.isWallItem, e.roomControllerLevel >= ct.MODERATOR && (ao = !0)), e.isAnyRoomController && (oo = !0), (e.usagePolicy === Vc.EVERYBODY || e.usagePolicy === Vc.CONTROLLER && lo || e.extraParam === Zt.JUKEBOX && lo || e.extraParam === Zt.USABLE_PRODUCT && lo) && (Gr = !0), e.extraParam) {
                if (e.extraParam === Zt.CRACKABLE_FURNI) {
                    const ar = e.stuffData;
                    Gr = !0,
                    Br = !0,
                    Uu = ar.hits,
                    _c = ar.target
                } else if (e.extraParam === Zt.JUKEBOX) {
                    const ar = qe().soundManager.musicController.getRoomItemPlaylist();
                    ar && (Ea = ar.nowPlayingSongId),
                    Jo = !0
                } else
                    e.extraParam.indexOf(Zt.SONGDISK) === 0 && (Ea = parseInt(e.extraParam.substr(Zt.SONGDISK.length)), gc = !0);
                if (ao) {
                    const ar = e.extraParam.substr(Zt.BRANDING_OPTIONS.length);
                    if (ar) {
                        const un = ar.split("   ");
                        for (const Zo of un) {
                            const hn = Zo.split("=");
                            hn && hn.length === 2 && (Ke.push(hn[0]), Ot.push(hn[1]))
                        }
                    }
                }
            }
            if (ao) {
                const ar = re().getRoomObject(r.roomId, e.id, e.isWallItem ? V.WALL : V.FLOOR);
                if (ar) {
                    const un = ar.model.getValue(C.FURNITURE_CUSTOM_VARIABLES),
                        Zo = ar.model.getValue(C.FURNITURE_DATA);
                    if (un && un.length)
                        for (const hn of un)
                            Ti.push(hn),
                            no.push(Zo[hn] || "")
                }
            }
            e.isOwner || e.isAnyRoomController ? Fe = GI : (e.isRoomOwner || e.roomControllerLevel >= ct.GUILD_ADMIN) && (Fe = xI),
            e.isStickie && (Fe = x_),
            n(Fe),
            l(_t),
            u(is),
            d(Gr),
            p(Ke),
            T(Ot),
            S(Ti),
            N(no),
            v(Br),
            G(Uu),
            F(_c),
            z(ao),
            j(oo),
            X(null),
            be(Jo),
            et(gc),
            fs(Ea),
            e.groupId && B(new Gl(e.groupId, !1))
        }, [r, e]),
        W(ec, Fe => {
            const _t = Fe.getParser();
            !e || e.groupId !== _t.id || _t.flag || (J && X(null), X(_t.title))
        }),
        _.useEffect(() => {
            const Fe = qe().soundManager.musicController.getSongInfo(Ut);
            ms((Fe == null ? void 0 : Fe.name) ?? ""),
            Ps((Fe == null ? void 0 : Fe.creator) ?? "")
        }, [Ut]);
        const Cr = _.useCallback((Fe, _t) => {
                const is = Array.from(E);
                is[Fe] = _t,
                T(is)
            }, [E]),
            It = _.useCallback((Fe, _t) => {
                const is = Array.from(A);
                is[Fe] = _t,
                N(is)
            }, [A]),
            Ve = _.useCallback(() => {
                if (m.length === 0 || E.length === 0)
                    return "";
                let Fe = "",
                    _t = 0;
                for (; _t < m.length;) {
                    const is = m[_t],
                        Gr = E[_t];
                    Fe = Fe + (is + "=" + Gr + "    "),
                    _t++
                }
                return Fe
            }, [m, E]),
            Dt = _.useCallback(Fe => {
                if (!(!Fe || Fe === ""))
                    switch (Fe) {
                    case "buy_one":
                        ge(`catalog/open/offerId/${e.purchaseOfferId}`);
                        return;
                    case "move":
                        re().processRoomObjectOperation(e.id, e.category, Ne.OBJECT_MOVE);
                        break;
                    case "rotate":
                        re().processRoomObjectOperation(e.id, e.category, Ne.OBJECT_ROTATE_POSITIVE);
                        break;
                    case "pickup":
                        i === GI ? re().processRoomObjectOperation(e.id, e.category, Ne.OBJECT_PICKUP) : re().processRoomObjectOperation(e.id, e.category, Ne.OBJECT_EJECT);
                        break;
                    case "use":
                        re().useRoomObject(e.id, e.category);
                        break;
                    case "save_branding_configuration":
                        {
                            const _t = new Map,
                                is = Ve().split("   ");
                            if (is)
                                for (const Gr of is) {
                                    const [Ke, Ot] = Gr.split("=", 2);
                                    _t.set(Ke, Ot)
                                }
                            re().modifyRoomObjectDataWithMap(e.id, e.category, Ne.OBJECT_SAVE_STUFF_DATA, _t);
                            break
                        }case "save_custom_variables":
                        {
                            const _t = new Map;
                            for (let is = 0; is < I.length; is++) {
                                const Gr = I[is],
                                    Ke = A[is];
                                Gr && Gr.length && Ke && Ke.length && _t.set(Gr, Ke)
                            }
                            B(new iE(e.id, _t));
                            break
                        }
                    }
            }, [e, i, I, A, Ve]),
            Hs = _.useCallback(() => {
                const Fe = e.stuffData;
                return !Fe || !(Fe instanceof en) ? null : Fe.getValue(2)
            }, [e]);
        return e ? g(M, {
            gap: 1,
            alignItems: "end",
            children: [a(M, {
                className: "nitro-infostand rounded",
                children: g(M, {
                    overflow: "visible",
                    className: "container-fluid content-area",
                    gap: 1,
                    children: [g(M, {
                        gap: 1,
                        children: [g(P, {
                            alignItems: "center",
                            justifyContent: "between",
                            gap: 1,
                            children: [a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: e.name
                            }), a(mi, {
                                className: "cursor-pointer fa-icon",
                                onClick: t
                            })]
                        }), a("hr", {
                            className: "m-0"
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [g(P, {
                            position: "relative",
                            gap: 1,
                            children: [e.stuffData.isUnique && a("div", {
                                className: "position-absolute end-0",
                                children: a(Qv, {
                                    uniqueNumber: e.stuffData.uniqueNumber,
                                    uniqueSeries: e.stuffData.uniqueSeries
                                })
                            }), e.stuffData.rarityLevel > -1 && a("div", {
                                className: "position-absolute end-0",
                                children: a(qE, {
                                    level: e.stuffData.rarityLevel
                                })
                            }), e.image && e.image.src.length && a("img", {
                                className: "d-block mx-auto",
                                src: e.image.src,
                                alt: ""
                            })]
                        }), a("hr", {
                            className: "m-0"
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            fullWidth: !0,
                            wrap: !0,
                            textBreak: !0,
                            variant: "white",
                            small: !0,
                            children: e.description
                        }), a("hr", {
                            className: "m-0"
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [g(P, {
                            alignItems: "center",
                            gap: 1,
                            children: [a(gi, {
                                userId: e.ownerId
                            }), a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: f("furni.owner", ["name"], [e.ownerName])
                            })]
                        }), e.purchaseOfferId > 0 && a(P, {
                            children: a(y, {
                                variant: "white",
                                small: !0,
                                underline: !0,
                                pointer: !0,
                                onClick: Fe => Dt("buy_one"),
                                children: f("infostand.button.buy")
                            })
                        })]
                    }), (K || he) && g(M, {
                        gap: 1,
                        children: [a("hr", {
                            className: "m-0"
                        }), Ut === -1 && a(y, {
                            variant: "white",
                            small: !0,
                            wrap: !0,
                            children: f("infostand.jukebox.text.not.playing")
                        }), !!Xt.length && g(P, {
                            alignItems: "center",
                            gap: 1,
                            children: [a(k, {
                                className: "icon disk-icon"
                            }), a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: Xt
                            })]
                        }), !!ut.length && g(P, {
                            alignItems: "center",
                            gap: 1,
                            children: [a(k, {
                                className: "icon disk-creator"
                            }), a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: ut
                            })]
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [b && g(q, {
                            children: [a("hr", {
                                className: "m-0"
                            }), a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: f("infostand.crackable_furni.hits_remaining", ["hits", "target"], [D == null ? void 0 : D.toString(), x == null ? void 0 : x.toString()])
                            })]
                        }), e.groupId > 0 && g(q, {
                            children: [a("hr", {
                                className: "m-0"
                            }), g(P, {
                                pointer: !0,
                                alignItems: "center",
                                gap: 2,
                                onClick: () => Mu(e.groupId),
                                children: [a(Vt, {
                                    badgeCode: Hs(),
                                    isGroup: !0
                                }), a(y, {
                                    variant: "white",
                                    underline: !0,
                                    children: J
                                })]
                            })]
                        }), U && g(q, {
                            children: [a("hr", {
                                className: "m-0"
                            }), Q && g(y, {
                                small: !0,
                                wrap: !0,
                                variant: "white",
                                children: ["ID: ", e.id]
                            }), m.length > 0 && g(q, {
                                children: [a("hr", {
                                    className: "m-0"
                                }), a(M, {
                                    gap: 1,
                                    children: m.map((Fe, _t) => g(P, {
                                        alignItems: "center",
                                        gap: 1,
                                        children: [a(y, {
                                            small: !0,
                                            wrap: !0,
                                            align: "end",
                                            variant: "white",
                                            className: "col-4",
                                            children: Fe
                                        }), a("input", {
                                            type: "text",
                                            className: "form-control form-control-sm",
                                            value: E[_t],
                                            onChange: is => Cr(_t, is.target.value)
                                        })]
                                    }, _t))
                                })]
                            })]
                        }), I.length > 0 && g(q, {
                            children: [a("hr", {
                                className: "m-0 my-1"
                            }), a(M, {
                                gap: 1,
                                children: I.map((Fe, _t) => g(P, {
                                    alignItems: "center",
                                    gap: 1,
                                    children: [a(y, {
                                        small: !0,
                                        wrap: !0,
                                        align: "end",
                                        variant: "white",
                                        className: "col-4",
                                        children: Fe
                                    }), a("input", {
                                        type: "text",
                                        className: "form-control form-control-sm",
                                        value: A[_t],
                                        onChange: is => It(_t, is.target.value)
                                    })]
                                }, _t))
                            })]
                        })]
                    })]
                })
            }), g(P, {
                gap: 1,
                justifyContent: "end",
                children: [o && a(H, {
                    variant: "dark",
                    onClick: Fe => Dt("move"),
                    children: f("infostand.button.move")
                }), c && a(H, {
                    variant: "dark",
                    onClick: Fe => Dt("rotate"),
                    children: f("infostand.button.rotate")
                }), i !== x_ && a(H, {
                    variant: "dark",
                    onClick: Fe => Dt("pickup"),
                    children: f(i === xI ? "infostand.button.eject" : "infostand.button.pickup")
                }), h && a(H, {
                    variant: "dark",
                    onClick: Fe => Dt("use"),
                    children: f("infostand.button.use")
                }), m.length > 0 && E.length > 0 && m.length === E.length && a(H, {
                    variant: "dark",
                    onClick: () => Dt("save_branding_configuration"),
                    children: f("save")
                }), I.length > 0 && A.length > 0 && I.length === A.length && a(H, {
                    variant: "dark",
                    onClick: () => Dt("save_custom_variables"),
                    children: f("save")
                })]
            })]
        }) : null
    },
    q9 = s => {
        const {avatarInfo: e=null, onClose: t=null} = s,
            [r, i] = _.useState(0),
            [n, o] = _.useState(0),
            {roomSession: l=null} = vt(),
            {petRespectRemaining: c=0, respectPet: u=null} = fa();
        if (_.useEffect(() => {
            i(e.remainingGrowTime),
            o(e.remainingTimeToLive)
        }, [e]), _.useEffect(() => {
            if (e.petType !== Le.MONSTERPLANT || e.dead)
                return;
            const d = setInterval(() => {
                i(m => m - 1),
                o(m => m - 1)
            }, 1e3);
            return () => clearInterval(d)
        }, [e]), !e)
            return null;
        const h = d => {
            let m = !0;
            if (!(!d || d == "")) {
                switch (d) {
                case "respect":
                    u(e.id),
                    c - 1 >= 1 && (m = !1);
                    break;
                case "buyfood":
                    ge("catalog/open/" + oe("catalog.links")["pets.buy_food"]);
                    break;
                case "train":
                    l == null || l.requestPetCommands(e.id);
                    break;
                case "treat":
                    B(new du(e.id));
                    break;
                case "compost":
                    l == null || l.compostPlant(e.id);
                    break;
                case "pick_up":
                    l == null || l.pickupPet(e.id);
                    break
                }
                m && t()
            }
        };
        return g(M, {
            gap: 1,
            alignItems: "end",
            children: [a(M, {
                className: "nitro-infostand rounded",
                children: g(M, {
                    overflow: "visible",
                    className: "container-fluid content-area",
                    gap: 1,
                    children: [g(M, {
                        gap: 1,
                        children: [g(P, {
                            alignItems: "center",
                            justifyContent: "between",
                            gap: 1,
                            children: [a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: e.name
                            }), a(mi, {
                                className: "cursor-pointer fa-icon",
                                onClick: t
                            })]
                        }), a(y, {
                            variant: "white",
                            small: !0,
                            wrap: !0,
                            children: f(`pet.breed.${e.petType}.${e.petBreed}`)
                        }), a("hr", {
                            className: "m-0"
                        })]
                    }), e.petType === Le.MONSTERPLANT && g(q, {
                        children: [g(M, {
                            center: !0,
                            gap: 1,
                            children: [a(In, {
                                figure: e.petFigure,
                                posture: e.posture,
                                direction: 4
                            }), a("hr", {
                                className: "m-0"
                            })]
                        }), g(M, {
                            gap: 2,
                            children: [!e.dead && a(M, {
                                alignItems: "center",
                                gap: 1,
                                children: a(y, {
                                    variant: "white",
                                    center: !0,
                                    small: !0,
                                    wrap: !0,
                                    children: f("pet.level", ["level", "maxlevel"], [e.level.toString(), e.maximumLevel.toString()])
                                })
                            }), g(M, {
                                alignItems: "center",
                                gap: 1,
                                children: [a(y, {
                                    variant: "white",
                                    small: !0,
                                    truncate: !0,
                                    children: f("infostand.pet.text.wellbeing")
                                }), g(k, {
                                    fullWidth: !0,
                                    overflow: "hidden",
                                    position: "relative",
                                    className: "bg-light-dark rounded",
                                    children: [a(P, {
                                        fit: !0,
                                        center: !0,
                                        position: "absolute",
                                        children: a(y, {
                                            variant: "white",
                                            small: !0,
                                            children: e.dead ? "00:00:00" : uo(n == 0 ? e.remainingTimeToLive : n).split(":")[1] + ":" + uo(n == null || n == null ? 0 : n).split(":")[2] + ":" + uo(n == null || n == null ? 0 : n).split(":")[3]
                                        })
                                    }), a(k, {
                                        className: "bg-success rounded pet-stats",
                                        style: {
                                            width: e.dead ? "0" : Math.round(e.maximumTimeToLive * 100 / n).toString()
                                        }
                                    })]
                                })]
                            }), r != 0 && r > 0 && g(M, {
                                alignItems: "center",
                                gap: 1,
                                children: [a(y, {
                                    variant: "white",
                                    small: !0,
                                    truncate: !0,
                                    children: f("infostand.pet.text.growth")
                                }), a(b4, {
                                    className: "top-2 end-2",
                                    day: uo(r).split(":")[0],
                                    hour: uo(r).split(":")[1],
                                    minutes: uo(r).split(":")[2],
                                    seconds: uo(r).split(":")[3]
                                })]
                            }), g(M, {
                                alignItems: "center",
                                gap: 1,
                                children: [a(y, {
                                    variant: "white",
                                    small: !0,
                                    truncate: !0,
                                    children: f("infostand.pet.text.raritylevel", ["level"], [f(`infostand.pet.raritylevel.${e.rarityLevel}`)])
                                }), a(qE, {
                                    className: "top-2 end-2",
                                    level: e.rarityLevel
                                })]
                            }), a("hr", {
                                className: "m-0"
                            })]
                        }), g(M, {
                            gap: 1,
                            children: [a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: f("pet.age", ["age"], [e.age.toString()])
                            }), a("hr", {
                                className: "m-0"
                            })]
                        })]
                    }), e.petType !== Le.MONSTERPLANT && g(q, {
                        children: [g(M, {
                            gap: 1,
                            children: [g(P, {
                                gap: 1,
                                children: [a(M, {
                                    fullWidth: !0,
                                    overflow: "hidden",
                                    className: "body-image pet p-1",
                                    children: a(In, {
                                        figure: e.petFigure,
                                        posture: e.posture,
                                        direction: 4
                                    })
                                }), g(M, {
                                    grow: !0,
                                    gap: 1,
                                    children: [a(y, {
                                        variant: "white",
                                        center: !0,
                                        small: !0,
                                        wrap: !0,
                                        children: f("pet.level", ["level", "maxlevel"], [e.level.toString(), e.maximumLevel.toString()])
                                    }), g(M, {
                                        alignItems: "center",
                                        gap: 1,
                                        children: [a(y, {
                                            variant: "white",
                                            small: !0,
                                            truncate: !0,
                                            children: f("infostand.pet.text.happiness")
                                        }), g(k, {
                                            fullWidth: !0,
                                            overflow: "hidden",
                                            position: "relative",
                                            className: "bg-light-dark rounded",
                                            children: [a(P, {
                                                fit: !0,
                                                center: !0,
                                                position: "absolute",
                                                children: a(y, {
                                                    variant: "white",
                                                    small: !0,
                                                    children: e.happyness + "/" + e.maximumHappyness
                                                })
                                            }), a(k, {
                                                className: "bg-info rounded pet-stats",
                                                style: {
                                                    width: e.happyness / e.maximumHappyness * 100 + "%"
                                                }
                                            })]
                                        })]
                                    }), g(M, {
                                        alignItems: "center",
                                        gap: 1,
                                        children: [a(y, {
                                            variant: "white",
                                            small: !0,
                                            truncate: !0,
                                            children: f("infostand.pet.text.experience")
                                        }), g(k, {
                                            fullWidth: !0,
                                            overflow: "hidden",
                                            position: "relative",
                                            className: "bg-light-dark rounded",
                                            children: [a(P, {
                                                fit: !0,
                                                center: !0,
                                                position: "absolute",
                                                children: a(y, {
                                                    variant: "white",
                                                    small: !0,
                                                    children: e.experience + "/" + e.levelExperienceGoal
                                                })
                                            }), a(k, {
                                                className: "bg-purple rounded pet-stats",
                                                style: {
                                                    width: e.experience / e.levelExperienceGoal * 100 + "%"
                                                }
                                            })]
                                        })]
                                    }), g(M, {
                                        alignItems: "center",
                                        gap: 1,
                                        children: [a(y, {
                                            variant: "white",
                                            small: !0,
                                            truncate: !0,
                                            children: f("infostand.pet.text.energy")
                                        }), g(k, {
                                            fullWidth: !0,
                                            overflow: "hidden",
                                            position: "relative",
                                            className: "bg-light-dark rounded",
                                            children: [a(P, {
                                                fit: !0,
                                                center: !0,
                                                position: "absolute",
                                                children: a(y, {
                                                    variant: "white",
                                                    small: !0,
                                                    children: e.energy + "/" + e.maximumEnergy
                                                })
                                            }), a(k, {
                                                className: "bg-success rounded pet-stats",
                                                style: {
                                                    width: e.energy / e.maximumEnergy * 100 + "%"
                                                }
                                            })]
                                        })]
                                    })]
                                })]
                            }), a("hr", {
                                className: "m-0"
                            })]
                        }), g(M, {
                            gap: 1,
                            children: [e.petType !== Le.MONSTERPLANT && a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: f("infostand.text.petrespect", ["count"], [e.respect.toString()])
                            }), a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: f("pet.age", ["age"], [e.age.toString()])
                            }), a("hr", {
                                className: "m-0"
                            })]
                        })]
                    }), a(M, {
                        gap: 1,
                        children: g(P, {
                            alignItems: "center",
                            gap: 1,
                            children: [a(gi, {
                                userId: e.ownerId
                            }), a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: f("infostand.text.petowner", ["name"], [e.ownerName])
                            })]
                        })
                    })]
                })
            }), g(P, {
                gap: 1,
                justifyContent: "end",
                children: [e.petType !== Le.MONSTERPLANT && a(H, {
                    variant: "dark",
                    onClick: d => h("buyfood"),
                    children: f("infostand.button.buyfood")
                }), e.isOwner && e.petType !== Le.MONSTERPLANT && a(H, {
                    variant: "dark",
                    onClick: d => h("train"),
                    children: f("infostand.button.train")
                }), !e.dead && e.energy / e.maximumEnergy < .98 && e.petType === Le.MONSTERPLANT && a(H, {
                    variant: "dark",
                    onClick: d => h("treat"),
                    children: f("infostand.button.pettreat")
                }), (l == null ? void 0 : l.isRoomOwner) && e.petType === Le.MONSTERPLANT && a(H, {
                    variant: "dark",
                    onClick: d => h("compost"),
                    children: f("infostand.button.compost")
                }), e.isOwner && a(H, {
                    variant: "dark",
                    onClick: d => h("pick_up"),
                    children: f("inventory.pets.pickup")
                }), c > 0 && e.petType !== Le.MONSTERPLANT && a(H, {
                    variant: "dark",
                    onClick: d => h("respect"),
                    children: f("infostand.button.petrespect", ["count"], [c.toString()])
                })]
            })]
        })
    },
    X9 = s => {
        const {avatarInfo: e=null, onClose: t=null} = s,
            r = _.useMemo(() => !(e.botSkills.indexOf(rt.NO_PICK_UP) >= 0 || !e.amIOwner && !e.amIAnyRoomController), [e]),
            i = () => B(new Hd(e.webID));
        if (e)
            return g(M, {
                gap: 1,
                children: [a(M, {
                    className: "nitro-infostand rounded",
                    children: g(M, {
                        overflow: "visible",
                        className: "container-fluid content-area",
                        gap: 1,
                        children: [g(M, {
                            gap: 1,
                            children: [g(P, {
                                alignItems: "center",
                                justifyContent: "between",
                                gap: 1,
                                children: [a(y, {
                                    variant: "white",
                                    small: !0,
                                    wrap: !0,
                                    children: e.name
                                }), a(mi, {
                                    className: "cursor-pointer fa-icon",
                                    onClick: t
                                })]
                            }), a("hr", {
                                className: "m-0"
                            })]
                        }), g(M, {
                            gap: 1,
                            children: [g(P, {
                                gap: 1,
                                children: [a(M, {
                                    fullWidth: !0,
                                    className: "body-image bot",
                                    children: a(rs, {
                                        figure: e.figure,
                                        direction: 4
                                    })
                                }), a(M, {
                                    grow: !0,
                                    center: !0,
                                    gap: 0,
                                    children: e.badges.length > 0 && e.badges.map(n => a(Vt, {
                                        badgeCode: n,
                                        showInfo: !0
                                    }, n))
                                })]
                            }), a("hr", {
                                className: "m-0"
                            })]
                        }), g(M, {
                            gap: 1,
                            children: [a(P, {
                                alignItems: "center",
                                className: "bg-light-dark rounded py-1 px-2",
                                children: a(y, {
                                    fullWidth: !0,
                                    wrap: !0,
                                    textBreak: !0,
                                    variant: "white",
                                    small: !0,
                                    className: "motto-content",
                                    children: e.motto
                                })
                            }), a("hr", {
                                className: "m-0"
                            })]
                        }), g(M, {
                            gap: 1,
                            children: [g(P, {
                                alignItems: "center",
                                gap: 1,
                                children: [a(gi, {
                                    userId: e.ownerId
                                }), a(y, {
                                    variant: "white",
                                    small: !0,
                                    wrap: !0,
                                    children: f("infostand.text.botowner", ["name"], [e.ownerName])
                                })]
                            }), e.carryItem > 0 && g(q, {
                                children: [a("hr", {
                                    className: "m-0"
                                }), a(y, {
                                    variant: "white",
                                    small: !0,
                                    wrap: !0,
                                    children: f("infostand.text.handitem", ["item"], [f("handitem" + e.carryItem)])
                                })]
                            })]
                        })]
                    })
                }), r && a(P, {
                    justifyContent: "end",
                    children: a(H, {
                        variant: "dark",
                        onClick: i,
                        children: f("infostand.button.pickup")
                    })
                })]
            })
    },
    G_ = s => {
        const {type: e=-1, relationship: t=null} = s;
        if (!t)
            return null;
        const r = sr.RELATIONSHIP_NAMES[e].toLocaleLowerCase();
        return g(P, {
            alignItems: "center",
            gap: 1,
            children: [a("i", {
                className: `nitro-friends-spritesheet icon-${r}`
            }), a(P, {
                alignItems: "center",
                gap: 0,
                children: g(y, {
                    small: !0,
                    variant: "white",
                    onClick: i => Fr(t.randomFriendId),
                    children: [a("u", {
                        children: t.randomFriendName
                    }), t.friendCount > 1 && " " + f(`extendedprofile.relstatus.others.${r}`, ["count"], [(t.friendCount - 1).toString()])]
                })
            })]
        })
    },
    Q9 = s => {
        const {relationships: e=null} = s;
        return !e || !e.relationshipStatusMap.length ? null : g(q, {
            children: [a(G_, {
                type: sr.HEART,
                relationship: e.relationshipStatusMap.getValue(sr.HEART)
            }), a(G_, {
                type: sr.SMILE,
                relationship: e.relationshipStatusMap.getValue(sr.SMILE)
            }), a(G_, {
                type: sr.BOBBA,
                relationship: e.relationshipStatusMap.getValue(sr.BOBBA)
            })]
        })
    },
    J9 = s => {
        ge(`navigator/search/${s}`),
        B(new xo("hotel_view", `tag:${s}`))
    },
    Z9 = s => {
        const {tags: e=null} = s;
        return !e || !e.length ? null : g(q, {
            children: [a("hr", {
                className: "m-0"
            }), a(P, {
                className: "flex-tags",
                children: e && e.length > 0 && e.map((t, r) => a(y, {
                    variant: "white",
                    className: "text-tags",
                    onClick: i => J9(t),
                    children: t
                }, r))
            })]
        })
    },
    $9 = s => {
        const {avatarInfo: e=null, setAvatarInfo: t=null, onClose: r=null} = s,
            [i, n] = _.useState(null),
            [o, l] = _.useState(!1),
            [c, u] = _.useState(null),
            {roomSession: h=null} = vt(),
            d = p => {
                !o || p.length > oe("motto.max.length", 38) || (h.sendMottoMessage(p), l(!1))
            },
            m = p => {
                switch (p.stopPropagation(), p.key) {
                case "Enter":
                    d(p.target.value);
                    return
                }
            };
        return jt(sm.RSUBE_BADGES, p => {
            !e || e.webID !== p.userId || e.badges.join("") === p.badges.join("") || t(T => {
                const I = Ir(T);
                return I.badges = p.badges, I
            })
        }), jt(im.USER_FIGURE, p => {
            !e || e.roomIndex !== p.roomIndex || t(E => {
                const T = Ir(E);
                return T.figure = p.figure, T.motto = p.customInfo, T.achievementScore = p.activityPoints, T
            })
        }), jt($f.FAVOURITE_GROUP_UPDATE, p => {
            !e || e.roomIndex !== p.roomIndex || t(E => {
                const T = Ir(E),
                    I = p.status === -1 || p.habboGroupId <= 0;
                return T.groupId = I ? -1 : p.habboGroupId, T.groupName = I ? null : p.habboGroupName, T.groupBadgeId = I ? null : Z().getGroupBadge(p.habboGroupId), T
            })
        }), W(Wm, p => {
            const E = p.getParser();
            !e || e.webID !== E.userId || u(E)
        }), _.useEffect(() => (l(!1), n(e.motto), B(new gE(e.webID)), () => {
            l(!1),
            n(null),
            u(null)
        }), [e]), e ? a(M, {
            className: "nitro-infostand rounded",
            children: g(M, {
                overflow: "visible",
                className: "container-fluid content-area",
                gap: 1,
                children: [g(M, {
                    gap: 1,
                    children: [g(P, {
                        alignItems: "center",
                        justifyContent: "between",
                        children: [g(P, {
                            alignItems: "center",
                            gap: 1,
                            children: [a(gi, {
                                userId: e.webID
                            }), a(y, {
                                variant: "white",
                                small: !0,
                                wrap: !0,
                                children: e.name
                            })]
                        }), a(mi, {
                            className: "cursor-pointer fa-icon",
                            onClick: r
                        })]
                    }), a("hr", {
                        className: "m-0"
                    })]
                }), g(M, {
                    gap: 1,
                    children: [g(P, {
                        gap: 1,
                        children: [a(M, {
                            fullWidth: !0,
                            className: "body-image",
                            onClick: p => Fr(e.webID),
                            children: a(rs, {
                                figure: e.figure,
                                direction: 4
                            })
                        }), g(M, {
                            grow: !0,
                            alignItems: "center",
                            gap: 0,
                            children: [g(P, {
                                gap: 1,
                                children: [a(P, {
                                    center: !0,
                                    className: "badge-image",
                                    children: e.badges[0] && a(Vt, {
                                        badgeCode: e.badges[0],
                                        showInfo: !0
                                    })
                                }), a(P, {
                                    center: !0,
                                    pointer: e.groupId > 0,
                                    className: "badge-image",
                                    onClick: p => Mu(e.groupId),
                                    children: e.groupId > 0 && a(Vt, {
                                        badgeCode: e.groupBadgeId,
                                        isGroup: !0,
                                        showInfo: !0,
                                        customTitle: e.groupName
                                    })
                                })]
                            }), g(P, {
                                center: !0,
                                gap: 1,
                                children: [a(P, {
                                    center: !0,
                                    className: "badge-image",
                                    children: e.badges[1] && a(Vt, {
                                        badgeCode: e.badges[1],
                                        showInfo: !0
                                    })
                                }), a(P, {
                                    center: !0,
                                    className: "badge-image",
                                    children: e.badges[2] && a(Vt, {
                                        badgeCode: e.badges[2],
                                        showInfo: !0
                                    })
                                })]
                            }), g(P, {
                                center: !0,
                                gap: 1,
                                children: [a(P, {
                                    center: !0,
                                    className: "badge-image",
                                    children: e.badges[3] && a(Vt, {
                                        badgeCode: e.badges[3],
                                        showInfo: !0
                                    })
                                }), a(P, {
                                    center: !0,
                                    className: "badge-image",
                                    children: e.badges[4] && a(Vt, {
                                        badgeCode: e.badges[4],
                                        showInfo: !0
                                    })
                                })]
                            })]
                        })]
                    }), a("hr", {
                        className: "m-0"
                    })]
                }), g(M, {
                    gap: 1,
                    children: [g(P, {
                        alignItems: "center",
                        className: "bg-light-dark rounded py-1 px-2",
                        children: [e.type !== $t.OWN_USER && a(P, {
                            grow: !0,
                            alignItems: "center",
                            className: "motto-content",
                            children: a(y, {
                                fullWidth: !0,
                                pointer: !0,
                                wrap: !0,
                                textBreak: !0,
                                small: !0,
                                variant: "white",
                                children: i
                            })
                        }), e.type === $t.OWN_USER && g(P, {
                            grow: !0,
                            alignItems: "center",
                            gap: 2,
                            children: [a(NL, {
                                className: "small fa-icon"
                            }), g(P, {
                                grow: !0,
                                alignItems: "center",
                                className: "motto-content",
                                children: [!o && g(y, {
                                    fullWidth: !0,
                                    pointer: !0,
                                    wrap: !0,
                                    textBreak: !0,
                                    small: !0,
                                    variant: "white",
                                    onClick: p => l(!0),
                                    children: [i, " "]
                                }), o && a("input", {
                                    type: "text",
                                    className: "motto-input",
                                    maxLength: oe("motto.max.length", 38),
                                    value: i,
                                    onChange: p => n(p.target.value),
                                    onKeyDown: m,
                                    autoFocus: !0
                                })]
                            })]
                        })]
                    }), a("hr", {
                        className: "m-0"
                    })]
                }), g(M, {
                    gap: 1,
                    children: [a(y, {
                        variant: "white",
                        small: !0,
                        wrap: !0,
                        children: f("infostand.text.achievement_score") + " " + e.achievementScore
                    }), e.carryItem > 0 && g(q, {
                        children: [a("hr", {
                            className: "m-0"
                        }), a(y, {
                            variant: "white",
                            small: !0,
                            wrap: !0,
                            children: f("infostand.text.handitem", ["item"], [f("handitem" + e.carryItem)])
                        })]
                    })]
                }), a(M, {
                    gap: 1,
                    children: a(Q9, {
                        relationships: c
                    })
                }), oe("user.tags.enabled") && a(M, {
                    gap: 1,
                    className: "mt-1",
                    children: a(Z9, {
                        tags: Z().tags
                    })
                })]
            })
        }) : null
    },
    eh = 0,
    B_ = 1,
    BI = 2,
    kI = 3,
    k_ = 4,
    VI = 5,
    HI = 6,
    eQ = s => {
        const {avatarInfo: e=null, onClose: t=null} = s,
            [r, i] = _.useState(eh),
            {canRequestFriend: n=null} = ri(),
            {report: o=null} = Vi(),
            {roomSession: l=null} = vt(),
            {userRespectRemaining: c=0, respectUser: u=null} = fa(),
            h = _.useMemo(() => e.amIOwner && e.targetRoomControllerLevel < ct.GUEST && !e.isGuildRoom, [e]),
            d = _.useMemo(() => e.amIOwner && e.targetRoomControllerLevel === ct.GUEST && !e.isGuildRoom, [e]),
            m = _.useMemo(() => e.canBeKicked || e.canBeBanned || e.canBeMuted || h || d, [h, d, e]),
            p = _.useMemo(() => {
                let T = !1;
                const I = qo();
                if (I) {
                    const S = I.model.getValue(C.FIGURE_CARRY_OBJECT);
                    S > 0 && S < 999999 && (T = !0)
                }
                return T
            }, []),
            E = T => {
                let I = !0;
                if (T)
                    switch (T) {
                    case "moderate":
                        I = !1,
                        i(B_);
                        break;
                    case "ban":
                        I = !1,
                        i(BI);
                        break;
                    case "mute":
                        I = !1,
                        i(kI);
                        break;
                    case "ambassador":
                        I = !1,
                        i(k_);
                        break;
                    case "ambassador_mute":
                        I = !1,
                        i(VI);
                        break;
                    case "back_moderate":
                        I = !1,
                        i(B_);
                        break;
                    case "back_ambassador":
                        I = !1,
                        i(k_);
                        break;
                    case "back":
                        I = !1,
                        i(eh);
                        break;
                    case "whisper":
                        Ms(new ja(ja.WHISPER, e.name));
                        break;
                    case "friend":
                        ge(`friends/request/${e.webID}/${e.name}`);
                        break;
                    case "relationship":
                        I = !1,
                        i(HI);
                        break;
                    case "respect":
                        {
                            u(e.webID),
                            c - 1 >= 1 && (I = !1);
                            break
                        }case "ignore":
                        Z().ignoreUser(e.name);
                        break;
                    case "unignore":
                        Z().unignoreUser(e.name);
                        break;
                    case "kick":
                        l.sendKickMessage(e.webID);
                        break;
                    case "ban_hour":
                        l.sendBanMessage(e.webID, "RWUAM_BAN_USER_HOUR");
                        break;
                    case "ban_day":
                        l.sendBanMessage(e.webID, "RWUAM_BAN_USER_DAY");
                        break;
                    case "perm_ban":
                        l.sendBanMessage(e.webID, "RWUAM_BAN_USER_PERM");
                        break;
                    case "mute_2min":
                        l.sendMuteMessage(e.webID, 2);
                        break;
                    case "mute_5min":
                        l.sendMuteMessage(e.webID, 5);
                        break;
                    case "mute_10min":
                        l.sendMuteMessage(e.webID, 10);
                        break;
                    case "give_rights":
                        l.sendGiveRightsMessage(e.webID);
                        break;
                    case "remove_rights":
                        l.sendTakeRightsMessage(e.webID);
                        break;
                    case "trade":
                        B(new Ly(e.roomIndex));
                        break;
                    case "report":
                        o(Lt.BULLY, {
                            reportedUserId: e.webID
                        });
                        break;
                    case "pass_hand_item":
                        B(new Lb(e.webID));
                        break;
                    case "ambassador_alert":
                        l.sendAmbassadorAlertMessage(e.webID);
                        break;
                    case "ambassador_kick":
                        l.sendKickMessage(e.webID);
                        break;
                    case "ambassador_mute_2min":
                        l.sendMuteMessage(e.webID, 2);
                        break;
                    case "ambassador_mute_10min":
                        l.sendMuteMessage(e.webID, 10);
                        break;
                    case "ambassador_mute_60min":
                        l.sendMuteMessage(e.webID, 60);
                        break;
                    case "ambassador_mute_18hour":
                        l.sendMuteMessage(e.webID, 1080);
                        break;
                    case "rship_heart":
                        B(new Ol(e.webID, dr.RELATIONSHIP_HEART));
                        break;
                    case "rship_smile":
                        B(new Ol(e.webID, dr.RELATIONSHIP_SMILE));
                        break;
                    case "rship_bobba":
                        B(new Ol(e.webID, dr.RELATIONSHIP_BOBBA));
                        break;
                    case "rship_none":
                        B(new Ol(e.webID, dr.RELATIONSHIP_NONE));
                        break
                    }
                I && t()
            };
        return _.useEffect(() => {
            i(eh)
        }, [e]), g(Pn, {
            objectId: e.roomIndex,
            category: V.UNIT,
            userType: e.userType,
            onClose: t,
            collapsable: !0,
            children: [a(br, {
                className: "cursor-pointer",
                onClick: T => Fr(e.webID),
                children: e.name
            }), r === eh && g(q, {
                children: [n(e.webID) && a(te, {
                    onClick: T => E("friend"),
                    children: f("infostand.button.friend")
                }), a(te, {
                    onClick: T => E("trade"),
                    children: f("infostand.button.trade")
                }), a(te, {
                    onClick: T => E("whisper"),
                    children: f("infostand.button.whisper")
                }), c > 0 && a(te, {
                    onClick: T => E("respect"),
                    children: f("infostand.button.respect", ["count"], [c.toString()])
                }), !n(e.webID) && g(te, {
                    onClick: T => E("relationship"),
                    children: [f("infostand.link.relationship"), a(ni, {
                        className: "right fa-icon"
                    })]
                }), !e.isIgnored && a(te, {
                    onClick: T => E("ignore"),
                    children: f("infostand.button.ignore")
                }), e.isIgnored && a(te, {
                    onClick: T => E("unignore"),
                    children: f("infostand.button.unignore")
                }), a(te, {
                    onClick: T => E("report"),
                    children: f("infostand.button.report")
                }), m && g(te, {
                    onClick: T => E("moderate"),
                    children: [a(ni, {
                        className: "right fa-icon"
                    }), f("infostand.link.moderate")]
                }), e.isAmbassador && g(te, {
                    onClick: T => E("ambassador"),
                    children: [a(ni, {
                        className: "right fa-icon"
                    }), f("infostand.link.ambassador")]
                }), p && a(te, {
                    onClick: T => E("pass_hand_item"),
                    children: f("avatar.widget.pass_hand_item")
                })]
            }), r === B_ && g(q, {
                children: [a(te, {
                    onClick: T => E("kick"),
                    children: f("infostand.button.kick")
                }), g(te, {
                    onClick: T => E("mute"),
                    children: [a(ni, {
                        className: "right fa-icon"
                    }), f("infostand.button.mute")]
                }), g(te, {
                    onClick: T => E("ban"),
                    children: [a(ni, {
                        className: "right fa-icon"
                    }), f("infostand.button.ban")]
                }), h && a(te, {
                    onClick: T => E("give_rights"),
                    children: f("infostand.button.giverights")
                }), d && a(te, {
                    onClick: T => E("remove_rights"),
                    children: f("infostand.button.removerights")
                }), g(te, {
                    onClick: T => E("back"),
                    children: [a(ii, {
                        className: "left fa-icon"
                    }), f("generic.back")]
                })]
            }), r === BI && g(q, {
                children: [a(te, {
                    onClick: T => E("ban_hour"),
                    children: f("infostand.button.ban_hour")
                }), a(te, {
                    onClick: T => E("ban_day"),
                    children: f("infostand.button.ban_day")
                }), a(te, {
                    onClick: T => E("perm_ban"),
                    children: f("infostand.button.perm_ban")
                }), g(te, {
                    onClick: T => E("back_moderate"),
                    children: [a(ii, {
                        className: "left fa-icon"
                    }), f("generic.back")]
                })]
            }), r === kI && g(q, {
                children: [a(te, {
                    onClick: T => E("mute_2min"),
                    children: f("infostand.button.mute_2min")
                }), a(te, {
                    onClick: T => E("mute_5min"),
                    children: f("infostand.button.mute_5min")
                }), a(te, {
                    onClick: T => E("mute_10min"),
                    children: f("infostand.button.mute_10min")
                }), g(te, {
                    onClick: T => E("back_moderate"),
                    children: [a(ii, {
                        className: "left fa-icon"
                    }), f("generic.back")]
                })]
            }), r === k_ && g(q, {
                children: [a(te, {
                    onClick: T => E("ambassador_alert"),
                    children: f("infostand.button.alert")
                }), a(te, {
                    onClick: T => E("ambassador_kick"),
                    children: f("infostand.button.kick")
                }), g(te, {
                    onClick: T => E("ambassador_mute"),
                    children: [f("infostand.button.mute"), a(ni, {
                        className: "right fa-icon"
                    })]
                }), g(te, {
                    onClick: T => E("back"),
                    children: [a(ii, {
                        className: "left fa-icon"
                    }), f("generic.back")]
                })]
            }), r === VI && g(q, {
                children: [a(te, {
                    onClick: T => E("ambassador_mute_2min"),
                    children: f("infostand.button.mute_2min")
                }), a(te, {
                    onClick: T => E("ambassador_mute_10min"),
                    children: f("infostand.button.mute_10min")
                }), a(te, {
                    onClick: T => E("ambassador_mute_60min"),
                    children: f("infostand.button.mute_60min")
                }), a(te, {
                    onClick: T => E("ambassador_mute_18hr"),
                    children: f("infostand.button.mute_18hour")
                }), g(te, {
                    onClick: T => E("back_ambassador"),
                    children: [a(ii, {
                        className: "left fa-icon"
                    }), f("generic.back")]
                })]
            }), r === HI && g(q, {
                children: [g(P, {
                    className: "menu-list-split-3",
                    children: [a(te, {
                        onClick: T => E("rship_heart"),
                        children: a(k, {
                            pointer: !0,
                            className: "nitro-friends-spritesheet icon-heart"
                        })
                    }), a(te, {
                        onClick: T => E("rship_smile"),
                        children: a(k, {
                            pointer: !0,
                            className: "nitro-friends-spritesheet icon-smile"
                        })
                    }), a(te, {
                        onClick: T => E("rship_bobba"),
                        children: a(k, {
                            pointer: !0,
                            className: "nitro-friends-spritesheet icon-bobba"
                        })
                    })]
                }), a(te, {
                    onClick: T => E("rship_none"),
                    children: f("avatar.widget.clear_relationship")
                }), g(te, {
                    onClick: T => E("back"),
                    children: [a(ii, {
                        className: "left fa-icon"
                    }), f("generic.back")]
                })]
            })]
        })
    },
    GP = s => {
        const {classNames: e=[], ...t} = s,
            r = _.useMemo(() => {
                const i = ["menu-list"];
                return e.length && i.push(...e), i
            }, [e]);
        return a(M, {
            classNames: r,
            ...t
        })
    },
    tQ = s => {
        const {userId: e=-1, userName: t="", roomIndex: r=-1, setIsDecorating: i=null} = s;
        return a(Pn, {
            objectId: r,
            category: V.UNIT,
            onClose: null,
            children: a(GP, {
                children: a(te, {
                    onClick: n => i(!1),
                    children: f("widget.avatar.stop_decorating")
                })
            })
        })
    },
    sQ = s => {
        const {avatarInfo: e=null, onClose: t=null} = s,
            r = i => {
                if (i)
                    switch (i) {
                    case "move":
                        Al(e.id, e.category, Ne.OBJECT_MOVE);
                        break;
                    case "rotate":
                        Al(e.id, e.category, Ne.OBJECT_ROTATE_POSITIVE);
                        break;
                    case "pickup":
                        Al(e.id, e.category, Ne.OBJECT_PICKUP);
                        break;
                    case "eject":
                        Al(e.id, e.category, Ne.OBJECT_EJECT);
                        break
                    }
            };
        return g(Pn, {
            objectId: e.id,
            category: e.category,
            onClose: t,
            collapsable: !0,
            children: [a(br, {
                children: e.name
            }), g(P, {
                className: "menu-list-split-3",
                children: [a(te, {
                    onClick: i => r("move"),
                    children: a(yL, {
                        className: "center fa-icon"
                    })
                }), a(te, {
                    onClick: i => r("rotate"),
                    disabled: e.isWallItem,
                    children: a(ML, {
                        className: "center fa-icon"
                    })
                }), (e.isOwner || e.isAnyRoomController) && a(te, {
                    onClick: i => r("pickup"),
                    children: a(op, {
                        className: "center fa-icon"
                    })
                }), !e.isOwner && !e.isAnyRoomController && (e.isRoomOwner || e.roomControllerLevel >= ct.GUILD_ADMIN) && a(te, {
                    onClick: i => r("eject"),
                    children: a(op, {
                        className: "center fa-icon"
                    })
                })]
            })]
        })
    },
    jI = s => {
        const {nameInfo: e=null, onClose: t=null} = s,
            r = _.useMemo(() => {
                const i = ["name-only"];
                return e.isFriend && i.push("is-friend"), i
            }, [e]);
        return a(Pn, {
            objectId: e.roomIndex,
            category: e.category,
            userType: e.userType,
            fades: e.id !== Z().userId,
            classNames: r,
            onClose: t,
            children: a("div", {
                className: "text-shadow",
                children: e.name
            })
        })
    },
    V_ = 0,
    H_ = 1,
    WI = 3,
    YI = 4,
    rQ = s => {
        const {avatarInfo: e=null, isDancing: t=!1, setIsDecorating: r=null, onClose: i=null} = s,
            [n, o] = _.useState(t && vo() ? H_ : V_),
            {roomSession: l=null} = vt(),
            c = d => {
                let m = !0;
                if (d)
                    if (d.startsWith("sign_")) {
                        const p = parseInt(d.split("_")[1]);
                        l.sendSignMessage(p)
                    } else
                        switch (d) {
                        case "decorate":
                            r(!0);
                            break;
                        case "change_name":
                            Ms(new gd(gd.INIT));
                            break;
                        case "change_looks":
                            ge("avatar-editor/show");
                            break;
                        case "expressions":
                            m = !1,
                            o(WI);
                            break;
                        case "sit":
                            l.sendPostureMessage(ld.POSTURE_SIT);
                            break;
                        case "stand":
                            l.sendPostureMessage(ld.POSTURE_STAND);
                            break;
                        case "wave":
                            l.sendExpressionMessage(rr.WAVE.ordinal);
                            break;
                        case "blow":
                            l.sendExpressionMessage(rr.BLOW.ordinal);
                            break;
                        case "laugh":
                            l.sendExpressionMessage(rr.LAUGH.ordinal);
                            break;
                        case "idle":
                            l.sendExpressionMessage(rr.IDLE.ordinal);
                            break;
                        case "dance_menu":
                            m = !1,
                            o(H_);
                            break;
                        case "dance":
                            l.sendDanceMessage(1);
                            break;
                        case "dance_stop":
                            l.sendDanceMessage(0);
                            break;
                        case "dance_1":
                        case "dance_2":
                        case "dance_3":
                        case "dance_4":
                            l.sendDanceMessage(parseInt(d.charAt(d.length - 1)));
                            break;
                        case "signs":
                            m = !1,
                            o(YI);
                            break;
                        case "back":
                            m = !1,
                            o(V_);
                            break;
                        case "drop_carry_item":
                            B(new Pb);
                            break
                        }
                m && i()
            },
            u = () => e.amIOwner || e.amIAnyRoomController || e.roomControllerLevel > ct.GUEST,
            h = AK();
        return g(Pn, {
            objectId: e.roomIndex,
            category: V.UNIT,
            userType: e.userType,
            onClose: i,
            collapsable: !0,
            children: [a(br, {
                className: "cursor-pointer",
                onClick: d => Fr(e.webID),
                children: e.name
            }), n === V_ && g(q, {
                children: [e.allowNameChange && a(te, {
                    onClick: d => c("change_name"),
                    children: f("widget.avatar.change_name")
                }), u() && a(te, {
                    onClick: d => c("decorate"),
                    children: f("widget.avatar.decorate")
                }), a(te, {
                    onClick: d => c("change_looks"),
                    children: f("widget.memenu.myclothes")
                }), vo() && !h && g(te, {
                    onClick: d => c("dance_menu"),
                    children: [a(ni, {
                        className: "right fa-icon"
                    }), f("widget.memenu.dance")]
                }), !t && !vo() && !h && a(te, {
                    onClick: d => c("dance"),
                    children: f("widget.memenu.dance")
                }), t && !vo() && !h && a(te, {
                    onClick: d => c("dance_stop"),
                    children: f("widget.memenu.dance.stop")
                }), g(te, {
                    onClick: d => c("expressions"),
                    children: [a(ni, {
                        className: "right fa-icon"
                    }), f("infostand.link.expressions")]
                }), g(te, {
                    onClick: d => c("signs"),
                    children: [a(ni, {
                        className: "right fa-icon"
                    }), f("infostand.show.signs")]
                }), e.carryItem > 0 && a(te, {
                    onClick: d => c("drop_carry_item"),
                    children: f("avatar.widget.drop_hand_item")
                })]
            }), n === H_ && g(q, {
                children: [t && a(te, {
                    onClick: d => c("dance_stop"),
                    children: f("widget.memenu.dance.stop")
                }), a(te, {
                    onClick: d => c("dance_1"),
                    children: f("widget.memenu.dance1")
                }), a(te, {
                    onClick: d => c("dance_2"),
                    children: f("widget.memenu.dance2")
                }), a(te, {
                    onClick: d => c("dance_3"),
                    children: f("widget.memenu.dance3")
                }), a(te, {
                    onClick: d => c("dance_4"),
                    children: f("widget.memenu.dance4")
                }), g(te, {
                    onClick: d => c("back"),
                    children: [a(ii, {
                        className: "left fa-icon"
                    }), f("generic.back")]
                })]
            }), n === WI && g(q, {
                children: [SK() === ie.POSTURE_STAND && a(te, {
                    onClick: d => c("sit"),
                    children: f("widget.memenu.sit")
                }), hK() && a(te, {
                    onClick: d => c("stand"),
                    children: f("widget.memenu.stand")
                }), D_() && a(te, {
                    onClick: d => c("wave"),
                    children: f("widget.memenu.wave")
                }), D_() && g(te, {
                    disabled: !Vu(),
                    onClick: d => c("laugh"),
                    children: [!Vu() && a(us, {
                        type: "hc"
                    }), f("widget.memenu.laugh")]
                }), D_() && g(te, {
                    disabled: !Vu(),
                    onClick: d => c("blow"),
                    children: [!Vu() && a(us, {
                        type: "hc"
                    }), f("widget.memenu.blow")]
                }), a(te, {
                    onClick: d => c("idle"),
                    children: f("widget.memenu.idle")
                }), g(te, {
                    onClick: d => c("back"),
                    children: [a(ii, {
                        className: "left fa-icon"
                    }), f("generic.back")]
                })]
            }), n === YI && g(q, {
                children: [g(P, {
                    className: "menu-list-split-3",
                    children: [a(te, {
                        onClick: d => c("sign_1"),
                        children: "1"
                    }), a(te, {
                        onClick: d => c("sign_2"),
                        children: "2"
                    }), a(te, {
                        onClick: d => c("sign_3"),
                        children: "3"
                    })]
                }), g(P, {
                    className: "menu-list-split-3",
                    children: [a(te, {
                        onClick: d => c("sign_4"),
                        children: "4"
                    }), a(te, {
                        onClick: d => c("sign_5"),
                        children: "5"
                    }), a(te, {
                        onClick: d => c("sign_6"),
                        children: "6"
                    })]
                }), g(P, {
                    className: "menu-list-split-3",
                    children: [a(te, {
                        onClick: d => c("sign_7"),
                        children: "7"
                    }), a(te, {
                        onClick: d => c("sign_8"),
                        children: "8"
                    }), a(te, {
                        onClick: d => c("sign_9"),
                        children: "9"
                    })]
                }), g(P, {
                    className: "menu-list-split-3",
                    children: [a(te, {
                        onClick: d => c("sign_10"),
                        children: "10"
                    }), a(te, {
                        onClick: d => c("sign_11"),
                        children: a("i", {
                            className: "icon icon-sign-heart"
                        })
                    }), a(te, {
                        onClick: d => c("sign_12"),
                        children: a("i", {
                            className: "icon icon-sign-skull"
                        })
                    })]
                }), g(P, {
                    className: "menu-list-split-3",
                    children: [a(te, {
                        onClick: d => c("sign_0"),
                        children: "0"
                    }), a(te, {
                        onClick: d => c("sign_13"),
                        children: a("i", {
                            className: "icon icon-sign-exclamation"
                        })
                    }), a(te, {
                        onClick: d => c("sign_15"),
                        children: a("i", {
                            className: "icon icon-sign-smile"
                        })
                    })]
                }), g(P, {
                    className: "menu-list-split-3",
                    children: [a(te, {
                        onClick: d => c("sign_14"),
                        children: a("i", {
                            className: "icon icon-sign-soccer"
                        })
                    }), a(te, {
                        onClick: d => c("sign_17"),
                        children: a("i", {
                            className: "icon icon-sign-yellow"
                        })
                    }), a(te, {
                        onClick: d => c("sign_16"),
                        children: a("i", {
                            className: "icon icon-sign-red"
                        })
                    })]
                }), g(te, {
                    onClick: d => c("back"),
                    children: [a(ii, {
                        className: "left fa-icon"
                    }), f("generic.back")]
                })]
            })]
        })
    },
    j_ = 0,
    zI = 1,
    KI = 2,
    qI = 3,
    iQ = s => {
        const {avatarInfo: e=null, onClose: t=null} = s,
            [r, i] = _.useState(j_),
            {roomSession: n=null} = vt(),
            {petRespectRemaining: o=0, respectPet: l=null} = fa(),
            c = _.useMemo(() => {
                let h = !1;
                const d = qo();
                if (d) {
                    const m = d.model.getValue(C.FIGURE_CARRY_OBJECT);
                    m > 0 && m < 999999 && (h = !0)
                }
                return h
            }, []),
            u = h => {
                let d = !0;
                if (h)
                    switch (h) {
                    case "respect":
                        l(e.id),
                        o - 1 >= 1 && (d = !1);
                        break;
                    case "treat":
                        B(new du(e.id));
                        break;
                    case "pass_handitem":
                        B(new uE(e.id));
                        break;
                    case "train":
                        n.requestPetCommands(e.id);
                        break;
                    case "pick_up":
                        n.pickupPet(e.id);
                        break;
                    case "mount":
                        n.mountPet(e.id);
                        break;
                    case "toggle_riding_permission":
                        n.togglePetRiding(e.id);
                        break;
                    case "toggle_breeding_permission":
                        n.togglePetBreeding(e.id);
                        break;
                    case "dismount":
                        n.dismountPet(e.id);
                        break;
                    case "saddle_off":
                        n.removePetSaddle(e.id);
                        break;
                    case "breed":
                        break;
                    case "harvest":
                        n.harvestPet(e.id);
                        break;
                    case "revive":
                        break;
                    case "compost":
                        n.compostPlant(e.id);
                        break;
                    case "buy_saddle":
                        ge("catalog/open/" + oe("catalog.links")["pets.buy_saddle"]);
                        break
                    }
                d && t()
            };
        return _.useEffect(() => {
            i(h => e.petType === Le.MONSTERPLANT ? qI : e.saddle && !e.rider ? zI : e.rider ? KI : j_)
        }, [e]), g(Pn, {
            objectId: e.roomIndex,
            category: V.UNIT,
            userType: yt.PET,
            onClose: t,
            collapsable: !0,
            children: [a(br, {
                children: e.name
            }), r === j_ && g(q, {
                children: [o > 0 && a(te, {
                    onClick: h => u("respect"),
                    children: f("infostand.button.petrespect", ["count"], [o.toString()])
                }), a(te, {
                    onClick: h => u("train"),
                    children: f("infostand.button.train")
                }), a(te, {
                    onClick: h => u("pick_up"),
                    children: f("infostand.button.pickup")
                }), e.petType === Le.HORSE && a(te, {
                    onClick: h => u("buy_saddle"),
                    children: f("infostand.button.buy_saddle")
                }), [Le.BEAR, Le.TERRIER, Le.CAT, Le.DOG, Le.PIG].indexOf(e.petType) > -1 && a(te, {
                    onClick: h => u("breed"),
                    children: f("infostand.button.breed")
                })]
            }), r === zI && g(q, {
                children: [a(te, {
                    onClick: h => u("mount"),
                    children: f("infostand.button.mount")
                }), g(te, {
                    onClick: h => u("toggle_riding_permission"),
                    gap: 1,
                    children: [a("input", {
                        type: "checkbox",
                        checked: !!e.publiclyRideable,
                        readOnly: !0
                    }), f("infostand.button.toggle_riding_permission")]
                }), o > 0 && a(te, {
                    onClick: h => u("respect"),
                    children: f("infostand.button.petrespect", ["count"], [o.toString()])
                }), a(te, {
                    onClick: h => u("train"),
                    children: f("infostand.button.train")
                }), a(te, {
                    onClick: h => u("pick_up"),
                    children: f("infostand.button.pickup")
                }), a(te, {
                    onClick: h => u("saddle_off"),
                    children: f("infostand.button.saddleoff")
                })]
            }), r === KI && g(q, {
                children: [a(te, {
                    onClick: h => u("dismount"),
                    children: f("infostand.button.dismount")
                }), o > 0 && a(te, {
                    onClick: h => u("respect"),
                    children: f("infostand.button.petrespect", ["count"], [o.toString()])
                })]
            }), r === qI && g(q, {
                children: [a(te, {
                    onClick: h => u("pick_up"),
                    children: f("infostand.button.pickup")
                }), e.dead && a(te, {
                    onClick: h => u("revive"),
                    children: f("infostand.button.revive")
                }), n.isRoomOwner && a(te, {
                    onClick: h => u("compost"),
                    children: f("infostand.button.compost")
                }), !e.dead && e.energy / e.maximumEnergy < .98 && a(te, {
                    onClick: h => u("treat"),
                    children: f("infostand.button.pettreat")
                }), !e.dead && e.level === e.maximumLevel && e.breedable && g(q, {
                    children: [g(te, {
                        onClick: h => u("toggle_breeding_permission"),
                        gap: 1,
                        children: [a("input", {
                            type: "checkbox",
                            checked: e.publiclyBreedable,
                            readOnly: !0
                        }), f("infostand.button.toggle_breeding_permission")]
                    }), a(te, {
                        onClick: h => u("breed"),
                        children: f("infostand.button.breed")
                    })]
                })]
            }), c && a(te, {
                onClick: h => u("pass_hand_item"),
                children: f("infostand.button.pass_hand_item")
            })]
        })
    },
    W_ = 0,
    XI = 1,
    QI = 2,
    JI = 3,
    nQ = s => {
        const {avatarInfo: e=null, onClose: t=null} = s,
            [r, i] = _.useState(W_),
            {roomSession: n=null} = vt(),
            {petRespectRemaining: o=0, respectPet: l=null} = fa(),
            c = _.useMemo(() => n.isRoomOwner || n.controllerLevel >= ct.GUEST || Z().isModerator, [n]),
            u = _.useMemo(() => {
                let d = !1;
                const m = qo();
                if (m) {
                    const p = m.model.getValue(C.FIGURE_CARRY_OBJECT);
                    p > 0 && p < 999999 && (d = !0)
                }
                return d
            }, []),
            h = d => {
                let m = !0;
                if (d)
                    switch (d) {
                    case "respect":
                        l(e.id),
                        o - 1 >= 1 && (m = !1);
                        break;
                    case "treat":
                        B(new du(e.id));
                        break;
                    case "pass_handitem":
                        B(new uE(e.id));
                        break;
                    case "pick_up":
                        n.pickupPet(e.id);
                        break;
                    case "mount":
                        n.mountPet(e.id);
                        break;
                    case "dismount":
                        n.dismountPet(e.id);
                        break
                    }
                m && t()
            };
        return _.useEffect(() => {
            i(d => e.petType === Le.MONSTERPLANT ? JI : e.saddle && !e.rider ? XI : e.rider ? QI : W_)
        }, [e]), g(Pn, {
            objectId: e.roomIndex,
            category: V.UNIT,
            userType: yt.PET,
            onClose: t,
            collapsable: !0,
            children: [a(br, {
                children: e.name
            }), r === W_ && o > 0 && a(te, {
                onClick: d => h("respect"),
                children: f("infostand.button.petrespect", ["count"], [o.toString()])
            }), r === XI && g(q, {
                children: [!!e.publiclyRideable && a(te, {
                    onClick: d => h("mount"),
                    children: f("infostand.button.mount")
                }), o > 0 && a(te, {
                    onClick: d => h("respect"),
                    children: f("infostand.button.petrespect", ["count"], [o.toString()])
                })]
            }), r === QI && g(q, {
                children: [a(te, {
                    onClick: d => h("dismount"),
                    children: f("infostand.button.dismount")
                }), o > 0 && a(te, {
                    onClick: d => h("respect"),
                    children: f("infostand.button.petrespect", ["count"], [o.toString()])
                })]
            }), r === JI && !e.dead && e.energy / e.maximumEnergy < .98 && a(te, {
                onClick: d => h("treat"),
                children: f("infostand.button.pettreat")
            }), c && a(te, {
                onClick: d => h("pick_up"),
                children: f("infostand.button.pickup")
            }), u && a(te, {
                onClick: d => h("pass_hand_item"),
                children: f("infostand.button.pass_hand_item")
            })]
        })
    },
    Y_ = 0,
    ZI = 1,
    $I = 2,
    aQ = s => {
        const {avatarInfo: e=null, onClose: t=null} = s,
            [r, i] = _.useState(Y_),
            [n, o] = _.useState(""),
            [l, c] = _.useState("");
        W(VC, m => {
            const p = m.getParser();
            if (p.botId === e.webID)
                switch (p.commandId) {
                case rt.CHANGE_BOT_NAME:
                    o(p.data),
                    i(ZI);
                    return;
                case rt.CHANGE_BOT_MOTTO:
                    c(p.data),
                    i($I);
                    return;
                case rt.SETUP_CHAT:
                    {
                        const E = p.data,
                            T = E.split(E.indexOf(";#;") === -1 ? ";" : ";#;");
                        (T.length === 3 || T.length === 4) && (Ms(new jE(e.roomIndex, V.UNIT, e.webID, T[0], T[1].toLowerCase() === "true" || T[1] === "1", parseInt(T[2]), T[3] ? T[3].toLowerCase() === "true" || T[3] === "1" : !1)), t());
                        return
                    }
                }
        });
        const u = m => B(new VM(e.webID, m)),
            h = m => {
                let p = !0;
                if (m)
                    switch (m) {
                    case "donate_to_all":
                        u(rt.DONATE_TO_ALL),
                        B(new fn(e.webID, rt.DONATE_TO_ALL, ""));
                        break;
                    case "donate_to_user":
                        u(rt.DONATE_TO_USER),
                        B(new fn(e.webID, rt.DONATE_TO_USER, ""));
                        break;
                    case "change_bot_name":
                        u(rt.CHANGE_BOT_NAME),
                        p = !1;
                        break;
                    case "save_bot_name":
                        B(new fn(e.webID, rt.CHANGE_BOT_NAME, n));
                        break;
                    case "change_bot_motto":
                        u(rt.CHANGE_BOT_MOTTO),
                        p = !1;
                        break;
                    case "save_bot_motto":
                        B(new fn(e.webID, rt.CHANGE_BOT_MOTTO, l));
                        break;
                    case "dress_up":
                        B(new fn(e.webID, rt.DRESS_UP, ""));
                        break;
                    case "random_walk":
                        B(new fn(e.webID, rt.RANDOM_WALK, ""));
                        break;
                    case "setup_chat":
                        u(rt.SETUP_CHAT),
                        p = !1;
                        break;
                    case "dance":
                        B(new fn(e.webID, rt.DANCE, ""));
                        break;
                    case "nux_take_tour":
                        qe().createLinkEvent("help/tour"),
                        B(new fn(e.webID, rt.NUX_TAKE_TOUR, ""));
                        break;
                    case "pick":
                        B(new Hd(e.webID));
                        break
                    }
                p && t()
            };
        _.useEffect(() => {
            i(Y_)
        }, [e]);
        const d = e.amIOwner || e.amIAnyRoomController;
        return g(Pn, {
            objectId: e.roomIndex,
            category: V.UNIT,
            userType: yt.RENTABLE_BOT,
            onClose: t,
            collapsable: !0,
            children: [a(br, {
                children: e.name
            }), r === Y_ && d && g(q, {
                children: [e.botSkills.indexOf(rt.DONATE_TO_ALL) >= 0 && a(te, {
                    onClick: m => h("donate_to_all"),
                    children: f("avatar.widget.donate_to_all")
                }), e.botSkills.indexOf(rt.DONATE_TO_USER) >= 0 && a(te, {
                    onClick: m => h("donate_to_user"),
                    children: f("avatar.widget.donate_to_user")
                }), e.botSkills.indexOf(rt.CHANGE_BOT_NAME) >= 0 && a(te, {
                    onClick: m => h("change_bot_name"),
                    children: f("avatar.widget.change_bot_name")
                }), e.botSkills.indexOf(rt.CHANGE_BOT_MOTTO) >= 0 && a(te, {
                    onClick: m => h("change_bot_motto"),
                    children: f("avatar.widget.change_bot_motto")
                }), e.botSkills.indexOf(rt.DRESS_UP) >= 0 && a(te, {
                    onClick: m => h("dress_up"),
                    children: f("avatar.widget.dress_up")
                }), e.botSkills.indexOf(rt.RANDOM_WALK) >= 0 && a(te, {
                    onClick: m => h("random_walk"),
                    children: f("avatar.widget.random_walk")
                }), e.botSkills.indexOf(rt.SETUP_CHAT) >= 0 && a(te, {
                    onClick: m => h("setup_chat"),
                    children: f("avatar.widget.setup_chat")
                }), e.botSkills.indexOf(rt.DANCE) >= 0 && a(te, {
                    onClick: m => h("dance"),
                    children: f("avatar.widget.dance")
                }), e.botSkills.indexOf(rt.NO_PICK_UP) === -1 && a(te, {
                    onClick: m => h("pick"),
                    children: f("avatar.widget.pick_up")
                })]
            }), r === ZI && g(M, {
                className: "menu-item",
                onClick: null,
                gap: 1,
                children: [a(y, {
                    variant: "white",
                    children: f("bot.skill.name.configuration.new.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: n,
                    maxLength: oe("bot.name.max.length", 15),
                    onChange: m => o(m.target.value)
                }), g(P, {
                    alignItems: "center",
                    justifyContent: "between",
                    gap: 1,
                    children: [a(H, {
                        fullWidth: !0,
                        variant: "secondary",
                        onClick: m => h(null),
                        children: f("cancel")
                    }), a(H, {
                        fullWidth: !0,
                        variant: "success",
                        onClick: m => h("save_bot_name"),
                        children: f("save")
                    })]
                })]
            }), r === $I && g(M, {
                className: "menu-item",
                onClick: null,
                gap: 1,
                children: [a(y, {
                    variant: "white",
                    children: f("bot.skill.name.configuration.new.motto")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: l,
                    maxLength: oe("motto.max.length", 38),
                    onChange: m => c(m.target.value)
                }), g(P, {
                    alignItems: "center",
                    justifyContent: "between",
                    gap: 1,
                    children: [a(H, {
                        fullWidth: !0,
                        variant: "secondary",
                        onClick: m => h(null),
                        children: f("cancel")
                    }), a(H, {
                        fullWidth: !0,
                        variant: "success",
                        onClick: m => h("save_bot_motto"),
                        children: f("save")
                    })]
                })]
            })]
        })
    },
    oQ = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(!1),
            [n, o] = _.useState(null),
            {avatarInfo: l=null, setAvatarInfo: c=null, activeNameBubble: u=null, setActiveNameBubble: h=null, nameBubbles: d=[], removeNameBubble: m=null, productBubbles: p=[], confirmingProduct: E=null, updateConfirmingProduct: T=null, removeProductBubble: I=null, isDecorating: S=!1, setIsDecorating: A=null} = I6(),
            {roomSession: N=null} = vt();
        at(ze.NORMAL_MODE, D => {
            e && t(!1)
        }),
        at(ze.GAME_MODE, D => {
            e || t(!0)
        }),
        jt(Zf.RSDE_DANCE, D => {
            D.roomIndex === N.ownRoomIndex && i(D.danceId !== 0)
        }),
        hs(jE.UPDATE_CHAT, D => o(D));
        const b = () => {
                if (!N || e)
                    return null;
                if (u)
                    return a(jI, {
                        nameInfo: u,
                        onClose: () => h(null)
                    });
                if (l)
                    switch (l.type) {
                    case zl.FURNI:
                        {
                            const D = l;
                            return S ? a(sQ, {
                                avatarInfo: D,
                                onClose: () => c(null)
                            }) : null
                        }case $t.OWN_USER:
                    case $t.PEER:
                        {
                            const D = l;
                            return oe("user.tags.enabled") && Z().getUserTags(D.roomIndex), D.isSpectatorMode ? null : D.isOwnUser ? xs.isRunning() ? null : a(rQ, {
                                avatarInfo: D,
                                isDancing: r,
                                setIsDecorating: A,
                                onClose: () => c(null)
                            }) : a(eQ, {
                                avatarInfo: D,
                                onClose: () => c(null)
                            })
                        }case Kl.PET_INFO:
                        {
                            const D = l;
                            return D.isOwner ? a(iQ, {
                                avatarInfo: D,
                                onClose: () => c(null)
                            }) : a(nQ, {
                                avatarInfo: D,
                                onClose: () => c(null)
                            })
                        }case ql.RENTABLE_BOT:
                        return a(aQ, {
                            avatarInfo: l,
                            onClose: () => c(null)
                        })
                    }
                return null
            },
            v = () => {
                if (!l)
                    return null;
                switch (l.type) {
                case zl.FURNI:
                    return a(K9, {
                        avatarInfo: l,
                        onClose: () => c(null)
                    });
                case $t.OWN_USER:
                case $t.PEER:
                    return a($9, {
                        avatarInfo: l,
                        setAvatarInfo: c,
                        onClose: () => c(null)
                    });
                case $t.BOT:
                    return a(z9, {
                        avatarInfo: l,
                        onClose: () => c(null)
                    });
                case ql.RENTABLE_BOT:
                    return a(X9, {
                        avatarInfo: l,
                        onClose: () => c(null)
                    });
                case Kl.PET_INFO:
                    return a(q9, {
                        avatarInfo: l,
                        onClose: () => c(null)
                    })
                }
            };
        return g(q, {
            children: [S && a(tQ, {
                userId: Z().userId,
                userName: Z().userName,
                roomIndex: N.ownRoomIndex,
                setIsDecorating: A
            }), b(), l && a(M, {
                alignItems: "end",
                className: "nitro-infostand-container",
                children: v()
            }), d.length > 0 && d.map((D, G) => a(jI, {
                nameInfo: D,
                onClose: () => m(G)
            }, G)), p.length > 0 && p.map((D, G) => a(Y9, {
                item: D,
                updateConfirmingProduct: T,
                onClose: () => I(G)
            }, D.id)), n && a(B9, {
                chatEvent: n,
                onClose: () => o(null)
            }), E && a(k9, {
                item: E,
                onClose: () => T(null)
            }), a(G9, {})]
        })
    },
    lQ = s => {
        const {chatStyleId: e=0, chatStyleIds: t=null, selectChatStyleId: r=null} = s,
            [i, n] = _.useState(null),
            [o, l] = _.useState(!1),
            c = h => {
                r(h),
                l(!1)
            },
            u = h => {
                let d = !1;
                l(m => (d = !m, d)),
                d && n(h.target)
            };
        return _.useEffect(() => {
            o || n(null)
        }, [o]), g(q, {
            children: [a(k, {
                pointer: !0,
                className: "chatstyles-selector cursor-pointer",
                onClick: u
            }), a(cT, {
                show: o,
                target: i,
                placement: "top",
                children: a(Ch, {
                    className: "nitro-chat-style-selector-container",
                    children: a(Ie, {
                        overflow: "hidden",
                        className: "bg-transparent bubble-window image-rendering-pixelated",
                        children: a(fe, {
                            gap: 1,
                            columnCount: 3,
                            overflow: "auto",
                            children: t && t.length > 0 && t.map(h => a(P, {
                                center: !0,
                                pointer: !0,
                                className: "bubble-parent-container",
                                onClick: d => c(h),
                                children: a(k, {
                                    className: "bubble-container",
                                    children: a(k, {
                                        className: `chat-bubble bubble-${h}`,
                                        children: " "
                                    })
                                }, h)
                            }, h))
                        })
                    })
                })
            })]
        })
    },
    cQ = s => {
        const [e, t] = _.useState(""),
            {chatStyleId: r=0, updateChatStyleId: i=null} = fa(),
            {selectedUsername: n="", floodBlocked: o=!1, floodBlockedSeconds: l=0, setIsTyping: c=null, setIsIdle: u=null, sendChat: h=null} = R6(),
            {roomSession: d=null} = vt(),
            m = _.useRef(),
            p = _.useMemo(() => f("widgets.chatinput.mode.whisper"), []),
            E = _.useMemo(() => f("widgets.chatinput.mode.shout"), []),
            T = _.useMemo(() => f("widgets.chatinput.mode.speak"), []),
            I = _.useMemo(() => oe("chat.input.maxlength", 100), []),
            S = _.useCallback(() => {
                const x = document.activeElement;
                return !(!x || m && m.current === x || !(x instanceof HTMLInputElement) && !(x instanceof HTMLTextAreaElement))
            }, [m]),
            A = _.useCallback(() => {
                m.current.focus(),
                m.current.setSelectionRange(m.current.value.length * 2, m.current.value.length * 2)
            }, [m]),
            N = _.useCallback(() => {
                t(x => x !== p || !n.length ? x : `${x} ${n}`)
            }, [n, p]),
            b = _.useCallback((x, F=!1) => {
                if (!x || x === "")
                    return;
                let U = F ? Qi.CHAT_SHOUT : Qi.CHAT_DEFAULT,
                    z = x;
                const Q = z.split(" ");
                let j = "",
                    J = "";
                switch (Q[0]) {
                case p:
                    U = Qi.CHAT_WHISPER,
                    j = Q[1],
                    J = p + " " + j + " ",
                    Q.shift(),
                    Q.shift();
                    break;
                case E:
                    U = Qi.CHAT_SHOUT,
                    Q.shift();
                    break;
                case T:
                    U = Qi.CHAT_DEFAULT,
                    Q.shift();
                    break
                }
                z = Q.join(" "),
                c(!1),
                u(!1),
                z.length <= I && (/%CC%/g.test(encodeURIComponent(z)) ? t("") : (t(""), h(z, U, j, r))),
                t(J)
            }, [p, E, T, I, r, c, u, h]),
            v = _.useCallback(x => {
                !x || !x.length ? c(!1) : (c(!0), u(!0)),
                t(x)
            }, [c, u]),
            D = _.useCallback(x => {
                if (o || !m.current || S())
                    return;
                document.activeElement !== m.current && A();
                const F = x.target.value;
                switch (x.key) {
                case " ":
                case "Space":
                    N();
                    return;
                case "NumpadEnter":
                case "Enter":
                    b(F, x.shiftKey);
                    return;
                case "Backspace":
                    if (F) {
                        const U = F.split(" ");
                        U[0] === p && U.length === 3 && U[2] === "" && t("")
                    }
                    return
                }
            }, [o, m, p, S, A, N, b]);
        hs(ja.CHAT_INPUT_CONTENT, x => {
            switch (x.chatMode) {
            case ja.WHISPER:
                {
                    t(`${p} ${x.userName} `);
                    return
                }case ja.SHOUT:
                return
            }
        });
        const G = _.useMemo(() => {
            let x = [];
            const F = oe("chat.styles");
            for (const U of F)
                if (U) {
                    if (U.minRank > 0) {
                        Z().hasSecurity(U.minRank) && x.push(U.styleId);
                        continue
                    }
                    if (U.isSystemStyle && Z().hasSecurity(ct.MODERATOR)) {
                        x.push(U.styleId);
                        continue
                    }
                    if (!(oe("chat.styles.disabled").indexOf(U.styleId) >= 0)) {
                        if (U.isHcOnly && hi() >= gr.CLUB) {
                            x.push(U.styleId);
                            continue
                        }
                        if (U.isAmbassadorOnly && Z().isAmbassador) {
                            x.push(U.styleId);
                            continue
                        }
                        !U.isHcOnly && !U.isAmbassadorOnly && x.push(U.styleId)
                    }
                }
            return x
        }, []);
        return _.useEffect(() => (document.body.addEventListener("keydown", D), () => {
            document.body.removeEventListener("keydown", D)
        }), [D]), _.useEffect(() => {
            m.current && (m.current.parentElement.dataset.value = e)
        }, [e]), !d || d.isSpectator ? null : Vf.createPortal(g("div", {
            className: "nitro-chat-input-container",
            children: [a(lQ, {
                chatStyleId: r,
                chatStyleIds: G,
                selectChatStyleId: i
            }), g("div", {
                className: "input-sizer w-100",
                children: [!o && a("input", {
                    ref: m,
                    type: "text",
                    id: "chat-input-field",
                    className: "chat-input",
                    placeholder: f("widgets.chatinput.default"),
                    autoComplete: "chat-input",
                    value: e,
                    maxLength: I,
                    onChange: x => v(x.target.value),
                    onMouseDown: x => A()
                }), o && g(y, {
                    variant: "danger",
                    children: [f("chat.input.alert.flood", ["time"], [l.toString()]), " "]
                })]
            })]
        }), document.getElementById("toolbar-chat-input-container"))
    },
    uQ = () => {
        let s = null;
        self.onmessage = e => {
            if (!e)
                return;
            const t = e.data;
            switch (t.action) {
            case "START":
                s = setInterval(() => postMessage(null), t.content);
                break;
            case "STOP":
                s && (clearInterval(s), s = null);
                break
            }
        }
    };
class hQ extends Worker {
    constructor(e)
    {
        const t = e.toString(),
            r = new Blob([`(${t})()`]);
        super(URL.createObjectURL(r))
    }
}
const dQ = s => {
        const {chat: e=null, makeRoom: t=null, bubbleWidth: r=Tt.CHAT_BUBBLE_WIDTH_NORMAL} = s,
            [i, n] = _.useState(!1),
            [o, l] = _.useState(!1),
            c = _.useRef(),
            u = _.useMemo(() => {
                switch (r) {
                case Tt.CHAT_BUBBLE_WIDTH_NORMAL:
                    return 350;
                case Tt.CHAT_BUBBLE_WIDTH_THIN:
                    return 240;
                case Tt.CHAT_BUBBLE_WIDTH_WIDE:
                    return 2e3
                }
            }, [r]);
        return _.useEffect(() => {
            n(!1);
            const h = c.current;
            if (!h)
                return;
            const d = h.offsetWidth,
                m = h.offsetHeight;
            e.width = d,
            e.height = m,
            e.elementRef = h;
            let p = e.left,
                E = e.top;
            return !p && !E && (p = e.location.x - d / 2, E = h.parentElement.offsetHeight - m, e.left = p, e.top = E), l(!0), () => {
                e.elementRef = null,
                l(!1)
            }
        }, [e]), _.useEffect(() => {
            !o || !e || i || (t && t(e), n(!0))
        }, [e, o, i, t]), g("div", {
            ref: c,
            className: `bubble-container ${i ? "visible" : "invisible"}`,
            onClick: h => re().selectRoomObject(e.roomId, e.senderId, V.UNIT),
            children: [e.styleId === 0 && a("div", {
                className: "user-container-bg",
                style: {
                    backgroundColor: e.color
                }
            }), g("div", {
                className: `chat-bubble bubble-${e.styleId} type-${e.type}`,
                style: {
                    maxWidth: u
                },
                children: [a("div", {
                    className: "user-container",
                    children: e.imageUrl && e.imageUrl.length > 0 && a("div", {
                        className: "user-image",
                        style: {
                            backgroundImage: `url(${e.imageUrl})`
                        }
                    })
                }), g("div", {
                    className: "chat-content",
                    children: [a("b", {
                        className: "username mr-1",
                        dangerouslySetInnerHTML: {
                            __html: `${e.username}: `
                        }
                    }), a("span", {
                        className: "message",
                        dangerouslySetInnerHTML: {
                            __html: `${e.formattedText}`
                        }
                    })]
                }), a("div", {
                    className: "pointer"
                })]
            })]
        })
    },
    _Q = s => {
        const {chatMessages: e=[], setChatMessages: t=null, chatSettings: r=null, getScrollSpeed: i=6e3} = S6(),
            n = _.useRef(),
            o = _.useCallback(() => {
                t(u => {
                    if (u) {
                        const h = u.filter(d => d.top > -d.height * 2);
                        if (h.length !== u.length)
                            return h
                    }
                    return u
                })
            }, [t]),
            l = _.useCallback((u, h, d) => {
                for (let m = e.indexOf(u) - 1; m >= 0; m--) {
                    const p = e[m];
                    if (!(!p || u === p || d.indexOf(p) >= 0 || p.top + p.height - h > u.top + u.height) && h4(u, p, -h, 0)) {
                        const E = Math.abs(p.top + p.height - u.top);
                        d.push(p),
                        p.top -= E,
                        p.skipMovement = !0,
                        l(p, E, d)
                    }
                }
            }, [e]),
            c = _.useCallback(u => {
                if (r.mode === Tt.CHAT_MODE_FREE_FLOW)
                    u.skipMovement = !0,
                    l(u, 0, [u]),
                    o();
                else {
                    const h = u.top + u.height,
                        d = u.height,
                        m = n.current.offsetHeight - h,
                        p = d - m;
                    m < d && (t(E => (E.forEach(T => {
                        T !== u && (T.top -= p)
                    }), E)), o())
                }
            }, [r, l, o, t]);
        return _.useEffect(() => {
            const u = (h=null) => {
                if (!n || !n.current)
                    return;
                const d = n.current.offsetHeight,
                    m = Math.round(document.body.offsetHeight * oe("chat.viewer.height.percentage"));
                n.current.style.height = `${m}px`,
                t(p => (p && p.forEach(E => E.top -= d - m), p))
            };
            return window.addEventListener("resize", u), u(), () => {
                window.removeEventListener("resize", u)
            }
        }, [t]), _.useEffect(() => {
            const u = d => {
                    t(m => (m.forEach(p => {
                        if (p.skipMovement) {
                            p.skipMovement = !1;
                            return
                        }
                        p.top -= d
                    }), m)),
                    o()
                },
                h = new hQ(uQ);
            return h.onmessage = () => u(15), h.postMessage({
                action: "START",
                content: i
            }), () => {
                h.postMessage({
                    action: "STOP"
                })
            }
        }, [i, o, t]), a("div", {
            ref: n,
            className: "nitro-chat-widget",
            children: e.map(u => a(dQ, {
                chat: u,
                makeRoom: c,
                bubbleWidth: r.weight
            }, u.id))
        })
    },
    BP = s => {
        const {title: e=null, items: t=[], selectItem: r=null, onClose: i=null} = s,
            [n, o] = _.useState(null),
            [l, c] = _.useState(""),
            u = Z().isModerator,
            h = _.useMemo(() => {
                const d = l.toLocaleLowerCase();
                return t.filter(m => {
                    var p,
                        E;
                    return ((p = m.name) == null ? void 0 : p.toLocaleLowerCase().includes(d)) || ((E = m.id) == null ? void 0 : E.toString().includes(d))
                }).sort(function(m, p) {
                    return m.id - p.id
                })
            }, [t, l]);
        return _.useEffect(() => {
            n && r(n)
        }, [n, r]), g(Se, {
            className: "nitro-chooser-widget",
            theme: "habbo",
            children: [a(Oe, {
                headerText: e,
                onCloseClick: i
            }), g(Ie, {
                overflow: "hidden",
                gap: 2,
                children: [a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    placeholder: f("generic.search"),
                    value: l,
                    onChange: d => c(d.target.value)
                }), a(o_, {
                    rows: h,
                    rowRender: d => a(P, {
                        alignItems: "center",
                        className: cr("rounded p-1", n === d && "bg-muted"),
                        pointer: !0,
                        onClick: m => o(d),
                        children: g(y, {
                            truncate: !0,
                            children: [d.name, " ", u && " - " + d.id]
                        })
                    })
                })]
            })]
        })
    },
    gQ = s => {
        const {items: e=null, onClose: t=null, selectItem: r=null, populateChooser: i=null} = v6();
        return _.useEffect(() => {
            const n = {
                linkReceived: o => {
                    o.split("/"),
                    i()
                },
                eventUrlPrefix: "furni-chooser/"
            };
            return Ts(n), () => Rs(n)
        }, [i]), e ? a(BP, {
            title: f("widget.chooser.furni.title"),
            items: e,
            selectItem: r,
            onClose: t
        }) : null
    },
    fQ = s => {
        const {items: e=null, onClose: t=null, selectItem: r=null, populateChooser: i=null} = x6();
        return _.useEffect(() => {
            const n = {
                linkReceived: o => {
                    o.split("/"),
                    i()
                },
                eventUrlPrefix: "user-chooser/"
            };
            return Ts(n), () => Rs(n)
        }, [i]), e ? a(BP, {
            title: f("widget.chooser.user.title"),
            items: e,
            selectItem: r,
            onClose: t
        }) : null
    },
    mQ = s => {
        const [e, t] = _.useState(!1),
            {users: r=[], answer: i=null} = A6();
        return _.useEffect(() => {
            t(!!r.length)
        }, [r]), e ? g(Se, {
            className: "nitro-widget-doorbell",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("navigator.doorbell.title"),
                onCloseClick: n => t(!1)
            }), g(Ie, {
                overflow: "hidden",
                gap: 0,
                children: [a(M, {
                    gap: 2,
                    children: g(fe, {
                        gap: 1,
                        className: "text-black fw-bold border-bottom px-1 pb-1",
                        children: [a(k, {
                            className: "g-col-6",
                            children: f("generic.username")
                        }), a(k, {
                            className: "g-col-6"
                        })]
                    })
                }), a(M, {
                    overflow: "auto",
                    className: "striped-children",
                    gap: 0,
                    children: r && r.length > 0 && r.map(n => g(fe, {
                        gap: 1,
                        alignItems: "center",
                        className: "text-black border-bottom p-1",
                        children: [a(k, {
                            className: "g-col-6",
                            children: n
                        }), a(k, {
                            className: "g-col-6",
                            children: g(P, {
                                alignItems: "center",
                                justifyContent: "end",
                                gap: 1,
                                children: [a(H, {
                                    variant: "success",
                                    onClick: () => i(n, !0),
                                    children: f("generic.accept")
                                }), a(H, {
                                    variant: "danger",
                                    onClick: () => i(n, !1),
                                    children: f("generic.deny")
                                })]
                            })
                        })]
                    }, n))
                })]
            })]
        }) : null
    },
    rp = s => {
        const {objectId: e=-1, category: t=-1, noFollow: r=!1, position: i="absolute", ...n} = s,
            [o, l] = _.useState({
                x: -1,
                y: -1
            }),
            c = _.useRef();
        return _.useEffect(() => {
            let u = !1;
            const h = () => {
                    const m = dt();
                    return FE(m.roomId, e, t, 1)
                },
                d = () => {
                    const m = h();
                    !m || !c.current || l({
                        x: Math.round(m.left + m.width / 2 - c.current.offsetWidth / 2),
                        y: Math.round(m.top - c.current.offsetHeight + 10)
                    })
                };
            return r ? d() : (u = !0, ir().add(d)), () => {
                u && ir().remove(d)
            }
        }, [e, t, r]), a(k, {
            innerRef: c,
            position: i,
            visible: o.x + (c.current ? c.current.offsetWidth : 0) > -1,
            className: "object-location",
            style: {
                left: o.x,
                top: o.y
            },
            ...n
        })
    },
    EQ = s => {
        const {roomIndex: e=-1, request: t=null, hideFriendRequest: r=null, requestResponse: i=null} = s;
        return a(rp, {
            objectId: e,
            category: V.UNIT,
            children: a(k, {
                className: "nitro-friend-request-dialog nitro-context-menu p-2",
                children: g(M, {
                    children: [g(P, {
                        alignItems: "center",
                        justifyContent: "between",
                        gap: 2,
                        children: [a(y, {
                            variant: "white",
                            fontSize: 6,
                            children: f("widget.friendrequest.from", ["username"], [t.name])
                        }), a(mi, {
                            className: "cursor-pointer fa-icon",
                            onClick: n => r(t.requesterUserId)
                        })]
                    }), g(P, {
                        justifyContent: "end",
                        gap: 1,
                        children: [a(H, {
                            variant: "danger",
                            onClick: n => i(t.requesterUserId, !1),
                            children: f("widget.friendrequest.decline")
                        }), a(H, {
                            variant: "success",
                            onClick: n => i(t.requesterUserId, !0),
                            children: f("widget.friendrequest.accept")
                        })]
                    })]
                })
            })
        })
    },
    pQ = s => {
        const {displayedRequests: e=[], hideFriendRequest: t=null} = b6(),
            {requestResponse: r=null} = ri();
        return e.length ? a(q, {
            children: e.map((i, n) => a(EQ, {
                roomIndex: i.roomIndex,
                request: i.request,
                hideFriendRequest: t,
                requestResponse: r
            }, n))
        }) : null
    },
    IQ = s => {
        const {productType: e=Ue.FLOOR, classId: t=-1, extraParam: r=void 0} = s;
        switch (e) {
        case Ue.WALL:
        case Ue.FLOOR:
            return a(WE, {
                productType: e,
                productClassId: t
            });
        case Ue.BADGE:
            return a(Vt, {
                badgeCode: r
            });
        case Ue.HABBO_CLUB:
            return a(us, {
                type: "hc"
            })
        }
        return null
    },
    TQ = s => {
        const {ownerId: e=-1} = s,
            [t, r] = _.useState(0),
            [i, n] = _.useState(void 0),
            o = () => {
                t === 1 && B(new rM(e)),
                r(0),
                n(void 0)
            };
        W($S, c => {
            r(1)
        }),
        W(QS, c => {
            r(0),
            n(void 0)
        }),
        W(JS, c => {
            const u = c.getParser();
            n({
                contentType: u.contentType,
                classId: u.classId
            }),
            r(2)
        });
        const l = Z().userId === e;
        return t === 0 ? null : g(Se, {
            className: "nitro-mysterybox-dialog",
            theme: "illumina",
            children: [a(Oe, {
                headerText: f(t === 1 ? `mysterybox.dialog.${l ? "owner" : "other"}.title` : "mysterybox.reward.title"),
                onCloseClick: o,
                noCloseButton: !0
            }), g(Ie, {
                children: [t === 1 && g(q, {
                    children: [g(y, {
                        variant: "primary",
                        children: [" ", f(`mysterybox.dialog.${l ? "owner" : "other"}.subtitle`), " "]
                    }), g(y, {
                        children: [" ", f(`mysterybox.dialog.${l ? "owner" : "other"}.description`), " "]
                    }), g(y, {
                        children: [" ", f(`mysterybox.dialog.${l ? "owner" : "other"}.waiting`)]
                    }), g(H, {
                        variant: "danger",
                        onClick: o,
                        className: "mt-auto",
                        children: [" ", f(`mysterybox.dialog.${l ? "owner" : "other"}.cancel`), " "]
                    })]
                }), t === 2 && i && g(q, {
                    children: [g(y, {
                        variant: "black",
                        children: [" ", f("mysterybox.reward.text"), " "]
                    }), a(P, {
                        className: "prize-container justify-content-center mx-auto",
                        children: a(IQ, {
                            classId: i.classId,
                            productType: i.contentType
                        })
                    }), g(H, {
                        variant: "success",
                        onClick: o,
                        className: "mt-auto",
                        children: [" ", f("mysterybox.reward.close"), " "]
                    })]
                })]
            })]
        })
    },
    RQ = s => {
        const {objectId: e=-1, onClose: t=null} = s,
            {roomSession: r=null} = vt(),
            i = () => {
                r.useMultistateItem(e),
                t()
            };
        return g(Se, {
            theme: "habbo",
            className: "nitro-use-product-confirmation",
            children: [a(Oe, {
                headerText: f("effectbox.header.title"),
                onCloseClick: t
            }), a(Ie, {
                center: !0,
                children: a(P, {
                    gap: 2,
                    children: g(M, {
                        justifyContent: "between",
                        children: [a(y, {
                            children: f("effectbox.header.description")
                        }), g(P, {
                            alignItems: "center",
                            justifyContent: "between",
                            children: [a(H, {
                                variant: "danger",
                                onClick: t,
                                children: f("generic.cancel")
                            }), a(H, {
                                variant: "success",
                                onClick: i,
                                children: f("generic.ok")
                            })]
                        })]
                    })
                })
            })]
        })
    },
    th = -1,
    OQ = 0,
    SQ = s => {
        const {objectId: e=-1, onClose: t=null} = s,
            [r, i] = _.useState(null),
            [n, o] = _.useState(th),
            {roomSession: l=null} = vt(),
            c = () => {
                l.useMultistateItem(e),
                t()
            };
        return _.useEffect(() => {
            if (!l || e === -1)
                return;
            const u = $d(l.roomId, e, V.FLOOR);
            if (!u)
                return;
            i(u);
            let h = th;
            switch (u.specialType) {
            case _e.MONSTERPLANT_SEED:
                h = OQ;
                break
            }
            if (h === th) {
                t();
                return
            }
            o(h)
        }, [l, e, t]), n === th ? null : g(Se, {
            className: "nitro-use-product-confirmation",
            children: [a(Oe, {
                headerText: f("useproduct.widget.title.plant_seed", ["name"], [r.name]),
                onCloseClick: t
            }), a(Ie, {
                center: !0,
                children: g(P, {
                    gap: 2,
                    overflow: "hidden",
                    children: [a(M, {
                        children: a(k, {
                            className: "product-preview",
                            children: a(k, {
                                className: "monsterplant-image"
                            })
                        })
                    }), g(M, {
                        justifyContent: "between",
                        overflow: "auto",
                        children: [g(M, {
                            gap: 2,
                            children: [a(y, {
                                children: f("useproduct.widget.text.plant_seed", ["productName"], [r.name])
                            }), a(y, {
                                children: f("useproduct.widget.info.plant_seed")
                            })]
                        }), g(P, {
                            alignItems: "center",
                            justifyContent: "between",
                            children: [a(H, {
                                variant: "danger",
                                onClick: t,
                                children: f("useproduct.widget.cancel")
                            }), a(H, {
                                variant: "success",
                                onClick: c,
                                children: f("widget.monsterplant_seed.button.use")
                            })]
                        })]
                    })]
                })
            })]
        })
    },
    sh = -1,
    CQ = 0,
    AQ = s => {
        const {objectId: e=-1, onClose: t=null} = s,
            [r, i] = _.useState(sh),
            [n, o] = _.useState(Me.MALE),
            [l, c] = _.useState(null),
            {roomSession: u=null} = vt(),
            h = () => {
                Cf().send(new Ob(e)),
                Cf().send(new _E(n, l)),
                t()
            };
        return _.useEffect(() => {
            let d = sh;
            const m = Z().figure,
                p = Z().gender,
                E = [];
            if (u && e >= 0) {
                const T = $d(u.roomId, e, V.FLOOR);
                if (T)
                    switch (T.specialType) {
                    case _e.FIGURE_PURCHASABLE_SET:
                        d = CQ;
                        const I = T.customParams.split(",").map(S => parseInt(S));
                        for (const S of I)
                            bs().isValidFigureSetForGender(S, p) && E.push(S);
                        break
                    }
            }
            if (d === sh) {
                t();
                return
            }
            o(p),
            c(bs().getFigureStringWithFigureIds(m, p, E)),
            i(d)
        }, [u, e, t]), r === sh ? null : g(Se, {
            theme: "habbo",
            className: "nitro-use-product-confirmation",
            children: [a(Oe, {
                headerText: f("useproduct.widget.title.bind_clothing"),
                onCloseClick: t
            }), a(Ie, {
                center: !0,
                children: g(P, {
                    gap: 2,
                    overflow: "hidden",
                    children: [a(M, {
                        children: a(k, {
                            className: "mannequin-preview",
                            children: a(rs, {
                                figure: l,
                                direction: 2
                            })
                        })
                    }), g(M, {
                        justifyContent: "between",
                        overflow: "auto",
                        children: [g(M, {
                            gap: 2,
                            children: [a(y, {
                                children: f("useproduct.widget.text.bind_clothing")
                            }), a(y, {
                                children: f("useproduct.widget.info.bind_clothing")
                            })]
                        }), g(P, {
                            alignItems: "center",
                            justifyContent: "between",
                            children: [a(H, {
                                variant: "danger",
                                onClick: t,
                                children: f("useproduct.widget.cancel")
                            }), a(H, {
                                variant: "success",
                                onClick: h,
                                children: f("useproduct.widget.bind_clothing")
                            })]
                        })]
                    })]
                })
            })]
        })
    },
    NQ = s => {
        const {closeConfirm: e=null, processAction: t=null, onClose: r=null, objectId: i=-1, mode: n=null, confirmMode: o=null, confirmingObjectId: l=-1, groupData: c=null, isGroupMember: u=!1, objectOwnerId: h=-1} = Mq(),
            {simpleAlert: d=null} = Yt();
        W(YC, p => {
            const E = p.getParser();
            if (E)
                switch (E.count) {
                case 1:
                    d(f("costumehopper.costumerequired.bodytext"), null, "catalog/open/temporary_effects", f("costumehopper.costumerequired.buy"), f("costumehopper.costumerequired.header"), null);
                    break;
                case 2:
                    d(f("viphopper.viprequired.bodytext"), null, "catalog/open/habbo_club", f("viprequired.buy.vip"), f("viprequired.header"), null);
                    break;
                case 3:
                    d(f("gate.viprequired.bodytext"), null, "catalog/open/habbo_club", f("viprequired.buy.vip"), f("gate.viprequired.title"), null);
                    break
                }
        });
        const m = Z().userId === h;
        return g(q, {
            children: [o === wf && a(SQ, {
                objectId: l,
                onClose: e
            }), o === Ff && a(AQ, {
                objectId: l,
                onClose: e
            }), o === fP && a(RQ, {
                objectId: l,
                onClose: e
            }), a(TQ, {
                ownerId: h
            }), i >= 0 && n && g(Pn, {
                objectId: i,
                category: V.FLOOR,
                onClose: r,
                fades: !0,
                children: [n === xt.FRIEND_FURNITURE && g(q, {
                    children: [a(br, {
                        children: f("friendfurni.context.title")
                    }), a(te, {
                        onClick: p => t("use_friend_furni"),
                        children: f("friendfurni.context.use")
                    })]
                }), n === xt.MONSTERPLANT_SEED && g(q, {
                    children: [a(br, {
                        children: f("furni.mnstr_seed.name")
                    }), a(te, {
                        onClick: p => t("use_monsterplant_seed"),
                        children: f("widget.monsterplant_seed.button.use")
                    })]
                }), n === xt.RANDOM_TELEPORT && g(q, {
                    children: [a(br, {
                        children: f("furni.random_teleport.name")
                    }), a(te, {
                        onClick: p => t("use_random_teleport"),
                        children: f("widget.random_teleport.button.use")
                    })]
                }), n === xt.PURCHASABLE_CLOTHING && g(q, {
                    children: [a(br, {
                        children: f("furni.generic_usable.name")
                    }), a(te, {
                        onClick: p => t("use_purchaseable_clothing"),
                        children: f("widget.generic_usable.button.use")
                    })]
                }), n === xt.MYSTERY_BOX && g(q, {
                    children: [a(br, {
                        children: f("mysterybox.context.title")
                    }), a(te, {
                        onClick: p => t("use_mystery_box"),
                        children: f("mysterybox.context." + (m ? "owner" : "other") + ".use")
                    })]
                }), n === gP && c && g(q, {
                    children: [a(br, {
                        className: "cursor-pointer text-truncate",
                        onClick: () => Mu(c.guildId),
                        children: c.guildName
                    }), !u && a(te, {
                        onClick: p => t("join_group"),
                        children: f("widget.furniture.button.join.group")
                    }), a(te, {
                        onClick: p => t("go_to_group_homeroom"),
                        children: f("widget.furniture.button.go.to.group.home.room")
                    }), c.guildHasReadableForum && a(te, {
                        onClick: p => t("open_forum"),
                        children: f("widget.furniture.button.open_group_forum")
                    })]
                })]
            })]
        })
    },
    yQ = s => {
        const {objectId: e=-1, color: t=0, setColor: r=null, applyToner: i=null, toggleToner: n=null, onClose: o=null} = Cq();
        return e === -1 ? null : g(Se, {
            theme: "habbo",
            className: "nitro-room-widget-toner",
            children: [a(Oe, {
                headerText: f("widget.backgroundcolor.title"),
                onCloseClick: o
            }), g(Ie, {
                overflow: "hidden",
                justifyContent: "between",
                children: [a(M, {
                    overflow: "auto",
                    gap: 1,
                    children: a("input", {
                        type: "color",
                        className: "form-control",
                        value: wr.makeColorNumberHex(t),
                        onChange: l => r(wr.convertFromHex(l.target.value))
                    })
                }), g(M, {
                    gap: 1,
                    children: [a(H, {
                        fullWidth: !0,
                        variant: "primary",
                        onClick: n,
                        children: f("widget.backgroundcolor.button.on")
                    }), a(H, {
                        fullWidth: !0,
                        variant: "primary",
                        onClick: i,
                        children: f("widget.backgroundcolor.button.apply")
                    })]
                })]
            })]
        })
    },
    MQ = s => {
        const {objectId: e=-1, color: t="1", badgeName: r="", badgeDesc: i="", date: n="", senderName: o="", onClose: l=null} = Nq();
        return e === -1 ? null : a(Jv, {
            color: t,
            message: i,
            date: n,
            senderName: o,
            customTitle: r,
            onCloseClick: l
        })
    },
    bQ = s => {
        const {objectId: e=-1, recipes: t=[], ingredients: r=[], selectedRecipe: i=null, requiredIngredients: n=null, isCrafting: o=!1, craft: l=null, selectRecipe: c=null, onClose: u=null} = Dq(),
            {roomSession: h=null} = vt(),
            [d, m] = _.useState(!1),
            p = _.useMemo(() => {
                const I = re().getRoomObject(h.roomId, e, V.FLOOR);
                return vr(I)
            }, [e, h.roomId]),
            E = _.useMemo(() => {
                if (!n || !n.length)
                    return !1;
                for (const I of n) {
                    const S = r.find(A => A.name === I.itemName);
                    if (!S || S.count < I.count)
                        return !1
                }
                return !0
            }, [r, n]),
            T = () => {
                if (!d) {
                    m(!0);
                    return
                }
                l(),
                m(!1)
            };
        return _.useEffect(() => {
            m(!1)
        }, [i]), e === -1 ? null : g(Se, {
            className: "nitro-widget-crafting",
            theme: "primary-slim",
            children: [a(Oe, {
                headerText: f("crafting.title"),
                onCloseClick: u
            }), a(Ie, {
                children: g(P, {
                    grow: !0,
                    overflow: "hidden",
                    gap: 2,
                    children: [g(P, {
                        column: !0,
                        fullWidth: !0,
                        gap: 2,
                        children: [g(M, {
                            overflow: "hidden",
                            fullHeight: !0,
                            children: [a("div", {
                                className: "bg-muted rounded py-1 text-center",
                                children: f("crafting.title.products")
                            }), a(Mt, {
                                columnCount: 5,
                                children: t.length > 0 && t.map(I => a($e, {
                                    itemImage: I.iconUrl,
                                    itemActive: i && i.name === I.name,
                                    onClick: () => c(I)
                                }, I.name))
                            })]
                        }), g(M, {
                            overflow: "hidden",
                            fullHeight: !0,
                            children: [a("div", {
                                className: "bg-muted rounded py-1 text-center",
                                children: f("crafting.title.mixer")
                            }), a(Mt, {
                                columnCount: 5,
                                children: r.length > 0 && r.map(I => a($e, {
                                    itemImage: I.iconUrl,
                                    itemCount: I.count,
                                    itemCountMinimum: 0,
                                    className: (I.count ? "" : "opacity-0-5 ") + "cursor-default"
                                }, I.name))
                            })]
                        })]
                    }), g(P, {
                        column: !0,
                        fullWidth: !0,
                        gap: 2,
                        children: [!i && a(M, {
                            center: !0,
                            fullHeight: !0,
                            className: "text-black text-center",
                            children: f("crafting.info.start")
                        }), i && g(q, {
                            children: [g(M, {
                                overflow: "hidden",
                                fullHeight: !0,
                                children: [a("div", {
                                    className: "bg-muted rounded py-1 text-center",
                                    children: f("crafting.current_recipe")
                                }), a(Mt, {
                                    columnCount: 5,
                                    children: !!n && n.length > 0 && n.map(I => {
                                        const S = r.find(N => N.name === I.itemName),
                                            A = [];
                                        for (let N = 0; N < I.count; N++)
                                            A.push(a($e, {
                                                itemImage: S.iconUrl,
                                                className: (S.count - N <= 0 ? "opacity-0-5 " : "") + "cursor-default"
                                            }, N));
                                        return A
                                    })
                                })]
                            }), g(P, {
                                gap: 2,
                                column: !0,
                                fullHeight: !0,
                                children: [g(P, {
                                    gap: 2,
                                    className: "bg-muted rounded",
                                    column: !0,
                                    fullHeight: !0,
                                    children: [a("div", {
                                        className: "py-1 text-center",
                                        children: f("crafting.result")
                                    }), g(P, {
                                        gap: 1,
                                        center: !0,
                                        column: !0,
                                        fullHeight: !0,
                                        className: "pb-1",
                                        children: [a(M, {
                                            fullHeight: !0,
                                            children: a("img", {
                                                src: i.iconUrl
                                            })
                                        }), a("div", {
                                            className: "text-black",
                                            children: i.localizedName
                                        })]
                                    })]
                                }), g(H, {
                                    variant: !p || !E ? "danger" : d ? "warning" : o ? "primary" : "success",
                                    disabled: !p || !E || o,
                                    onClick: T,
                                    children: [!o && f(p ? E ? d ? "generic.confirm" : "crafting.btn.craft" : "crafting.status.recipe.incomplete" : "crafting.btn.notowner"), o && a(YE, {})]
                                })]
                            })]
                        })]
                    })]
                })
            })]
        })
    },
    DQ = s => {
        const [e, t] = _.useState(!1),
            {presets: r=[], dimmerState: i=0, selectedPresetId: n=0, color: o=16777215, brightness: l=255, effectId: c=0, selectedColor: u=0, setSelectedColor: h=null, selectedBrightness: d=0, setSelectedBrightness: m=null, selectedEffectId: p=0, setSelectedEffectId: E=null, selectPresetId: T=null, applyChanges: I} = Pq(),
            S = () => {
                Hr.previewDimmer(o, l, c === 2),
                t(!1)
            };
        at(ee.REMOVE_DIMMER, N => t(!1)),
        _.useEffect(() => {
            !r || !r.length || t(!0)
        }, [r]);
        const A = _.useMemo(() => oe("widget.dimmer.colorwheel", !1), []);
        return e ? g(Se, {
            className: "nitro-room-widget-dimmer",
            children: [a(Oe, {
                headerText: f("widget.dimmer.title"),
                onCloseClick: S
            }), i === 1 && a(_a, {
                children: r.map(N => a(sn, {
                    isActive: n === N.id,
                    onClick: b => T(N.id),
                    children: f(`widget.dimmer.tab.${N.id}`)
                }, N.id))
            }), g(Ie, {
                children: [i === 0 && g(M, {
                    alignItems: "center",
                    children: [a(k, {
                        className: "dimmer-banner"
                    }), a(y, {
                        center: !0,
                        className: "bg-muted rounded p-1",
                        children: f("widget.dimmer.info.off")
                    }), a(H, {
                        fullWidth: !0,
                        variant: "success",
                        onClick: () => Hr.changeState(),
                        children: f("widget.dimmer.button.on")
                    })]
                }), i === 1 && g(q, {
                    children: [g(M, {
                        gap: 1,
                        children: [a(y, {
                            fontWeight: "bold",
                            children: f("widget.backgroundcolor.hue")
                        }), A && a("input", {
                            type: "color",
                            className: "form-control",
                            value: wr.makeColorNumberHex(u),
                            onChange: N => h(wr.convertFromHex(N.target.value))
                        }), !A && a(fe, {
                            gap: 1,
                            columnCount: 7,
                            children: Hr.AVAILABLE_COLORS.map((N, b) => a(M, {
                                fullWidth: !0,
                                pointer: !0,
                                className: cr("color-swatch rounded", N === u && "active"),
                                onClick: () => h(N),
                                style: {
                                    backgroundColor: Hr.HTML_COLORS[b]
                                }
                            }, b))
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            fontWeight: "bold",
                            children: f("widget.backgroundcolor.lightness")
                        }), a(Xs, {
                            className: "nitro-slider",
                            min: Hr.MIN_BRIGHTNESS,
                            max: Hr.MAX_BRIGHTNESS,
                            value: d,
                            onChange: N => m(N),
                            thumbClassName: "thumb percent",
                            renderThumb: (N, b) => a("div", {
                                ...N,
                                children: Hr.scaleBrightness(b.valueNow)
                            })
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: p === 2,
                            onChange: N => E(N.target.checked ? 2 : 1)
                        }), a(y, {
                            children: f("widget.dimmer.type.checkbox")
                        })]
                    }), g(P, {
                        gap: 1,
                        children: [a(H, {
                            fullWidth: !0,
                            variant: "danger",
                            onClick: () => Hr.changeState(),
                            children: f("widget.dimmer.button.off")
                        }), a(H, {
                            fullWidth: !0,
                            variant: "success",
                            onClick: I,
                            children: f("widget.dimmer.button.apply")
                        })]
                    })]
                })]
            })]
        }) : null
    },
    vQ = s => {
        const {objectId: e=-1, value: t=0, onClose: r=null, redeem: i=null} = Uq();
        return e === -1 ? null : g(Se, {
            className: "nitro-widget-exchange-credit",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("catalog.redeem.dialog.title"),
                onCloseClick: r
            }), a(Ie, {
                center: !0,
                children: g(P, {
                    overflow: "hidden",
                    gap: 2,
                    children: [a(M, {
                        center: !0,
                        children: a(k, {
                            className: "exchange-image"
                        })
                    }), g(M, {
                        grow: !0,
                        justifyContent: "between",
                        overflow: "hidden",
                        children: [g(M, {
                            gap: 1,
                            overflow: "auto",
                            children: [a(y, {
                                fontWeight: "bold",
                                children: f("creditfurni.description", ["credits"], [new Intl.NumberFormat("en-US", {
                                    minimumFractionDigits: 0,
                                    maximumFractionDigits: 0
                                }).format(t)])
                            }), a(y, {
                                children: f("creditfurni.prompt")
                            })]
                        }), a(H, {
                            variant: "success",
                            onClick: i,
                            children: f("catalog.redeem.dialog.button.exchange")
                        })]
                    })]
                })
            })]
        })
    },
    PQ = s => {
        const {currentIndex: e=-1, currentPhotos: t=null} = s,
            [r, i] = _.useState(0),
            n = t && t.length ? t[r] : null,
            o = () => {
                i(c => {
                    let u = c + 1;
                    return u >= t.length && (u = 0), u
                })
            },
            l = () => {
                i(c => {
                    let u = c - 1;
                    return u < 0 && (u = t.length - 1), u
                })
            };
        return _.useEffect(() => {
            i(e)
        }, [e]), n ? g(fe, {
            style: {
                display: "flex",
                flexDirection: "column"
            },
            children: [a(P, {
                center: !0,
                className: "picture-preview border border-black",
                style: n.w ? {
    backgroundImage: n.w.startsWith('http://') || n.w.startsWith('https://')
        ? `url(${n.w})`
        : `url(//localhost:8080/camera/${n.w}.png)`
} : {},
                children: !n.w && a(y, {
                    bold: !0,
                    children: f("camera.loading")
                })
            }), n.m && n.m.length && a(y, {
                center: !0,
                children: n.m
            }), g(P, {
                alignItems: "center",
                justifyContent: "between",
                children: [a(y, {
                    children: n.n || ""
                }), a(y, {
                    children: new Date(n.t).toLocaleDateString()
                })]
            }), t.length > 1 && g(P, {
                className: "picture-preview-buttons",
                children: [a(aT, {
                    className: "cursor-pointer picture-preview-buttons-previous fa-icon",
                    onClick: l
                }), a(y, {
                    underline: !0,
                    className: "cursor-pointer",
                    onClick: c => Fr(n.oi),
                    children: n.o
                }), a(oT, {
                    className: "cursor-pointer picture-preview-buttons-next fa-icon",
                    onClick: o
                })]
            })]
        }) : null
    },
    LQ = s => {
        const {objectId: e=-1, currentPhotoIndex: t=-1, currentPhotos: r=null, onClose: i=null} = Fq(),
            {report: n=null} = Vi();
        return e === -1 || t === -1 ? null : g(Se, {
            className: "nitro-external-image-widget",
            theme: "habbo",
            children: [a(Oe, {
                headerText: "",
                isGalleryPhoto: !0,
                onReportPhoto: () => n(Lt.PHOTO, {
                    extraData: r[t].w,
                    roomId: r[t].s,
                    reportedUserId: Z().userId,
                    roomObjectId: Number(r[t].u)
                }),
                onCloseClick: i
            }), a(Ie, {
                children: a(PQ, {
                    currentIndex: t,
                    currentPhotos: r
                })
            })]
        })
    },
    UQ = s => {
        const {objectId: e=-1, type: t=0, stage: r=0, usernames: i=[], figures: n=[], date: o=null, onClose: l=null, respond: c=null} = Gq();
        if (e === -1)
            return null;
        if (r > 0)
            return g(Se, {
                className: "nitro-engraving-lock",
                theme: "primary-slim",
                children: [a(Oe, {
                    headerText: f("friend.furniture.confirm.lock.caption"),
                    onCloseClick: l
                }), g(Ie, {
                    children: [a("h5", {
                        className: "text-black text-center fw-bold mt-2 mb-2",
                        children: f("friend.furniture.confirm.lock.subtitle")
                    }), a("div", {
                        className: "d-flex justify-content-center mb-2",
                        children: a("div", {
                            className: `engraving-lock-stage-${r}`
                        })
                    }), r === 2 && a("div", {
                        className: "text-small text-black text-center mb-2",
                        children: f("friend.furniture.confirm.lock.other.locked")
                    }), g(P, {
                        gap: 1,
                        children: [a(H, {
                            fullWidth: !0,
                            onClick: u => c(!1),
                            children: f("friend.furniture.confirm.lock.button.cancel")
                        }), a(H, {
                            fullWidth: !0,
                            variant: "success",
                            onClick: u => c(!0),
                            children: f("friend.furniture.confirm.lock.button.confirm")
                        })]
                    })]
                })]
            });
        if (i.length > 0)
            return a(so, {
                handleSelector: ".nitro-engraving-lock-view",
                children: g("div", {
                    className: `nitro-engraving-lock-view engraving-lock-${t}`,
                    children: [a("div", {
                        className: "engraving-lock-close",
                        onClick: l
                    }), g(P, {
                        justifyContent: "center",
                        children: [a("div", {
                            className: "engraving-lock-avatar",
                            children: a(rs, {
                                figure: n[0],
                                direction: 2
                            })
                        }), a("div", {
                            className: "engraving-lock-avatar",
                            children: a(rs, {
                                figure: n[1],
                                direction: 4
                            })
                        })]
                    }), g(M, {
                        justifyContent: "between",
                        className: "mt-1",
                        children: [g(M, {
                            alignItems: "center",
                            justifyContent: "center",
                            gap: 1,
                            children: [g("div", {
                                children: [t === 0 && f("lovelock.engraving.caption"), t === 3 && f("wildwest.engraving.caption")]
                            }), a("div", {
                                children: o
                            })]
                        }), g(P, {
                            justifyContent: "center",
                            gap: 4,
                            children: [a("div", {
                                children: i[0]
                            }), a("div", {
                                children: i[1]
                            })]
                        })]
                    })]
                })
            })
    },
    wQ = s => {
        const {objectId: e=-1, classId: t=-1, itemType: r=null, text: i=null, isOwnerOfFurniture: n=!1, senderName: o=null, senderFigure: l=null, placedItemId: c=-1, placedItemType: u=null, placedInRoom: h=!1, imageUrl: d=null, openPresent: m=null, onClose: p=null} = $q(),
            {groupItems: E=[]} = Xo();
        if (e === -1)
            return null;
        const T = S => {
                const A = E.find(N => {
                    var b;
                    return ((b = N.getItemById(S)) == null ? void 0 : b.id) === S
                });
                A && Yl(A),
                p()
            },
            I = S => {
                B(new nE(10, S)),
                p()
            };
        return g(Se, {
            className: "nitro-gift-opening",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f(o ? "widget.furni.present.window.title_from" : "widget.furni.present.window.title", ["name"], [o]),
                onCloseClick: p
            }), g(Ie, {
                children: [c === -1 && g(M, {
                    overflow: "hidden",
                    children: [a(P, {
                        center: !0,
                        overflow: "auto",
                        children: a(Xv, {
                            userName: o,
                            figure: l,
                            message: i
                        })
                    }), n && g(P, {
                        gap: 1,
                        children: [o && a(H, {
                            fullWidth: !0,
                            onClick: S => ge("catalog/open"),
                            children: f("widget.furni.present.give_gift", ["name"], [o])
                        }), a(H, {
                            fullWidth: !0,
                            variant: "success",
                            onClick: m,
                            children: f("widget.furni.present.open_gift")
                        })]
                    })]
                }), c > -1 && g(P, {
                    gap: 2,
                    overflow: "hidden",
                    children: [a(M, {
                        center: !0,
                        className: "p-2",
                        children: a(vn, {
                            imageUrl: d
                        })
                    }), g(M, {
                        grow: !0,
                        children: [g(M, {
                            center: !0,
                            gap: 1,
                            children: [a(y, {
                                wrap: !0,
                                small: !0,
                                children: f("widget.furni.present.message_opened")
                            }), a(y, {
                                bold: !0,
                                fontSize: 5,
                                children: i
                            })]
                        }), g(M, {
                            grow: !0,
                            gap: 1,
                            children: [g(P, {
                                gap: 1,
                                children: [h && a(H, {
                                    fullWidth: !0,
                                    onClick: S => I(c),
                                    children: f("widget.furni.present.put_in_inventory")
                                }), a(H, {
                                    fullWidth: !0,
                                    variant: "success",
                                    onClick: S => T(c),
                                    children: f(h ? "widget.furni.present.keep_in_room" : "widget.furni.present.place_in_room")
                                })]
                            }), o && o.length && a(H, {
                                fullWidth: !0,
                                onClick: S => ge("catalog/open"),
                                children: f("widget.furni.present.give_gift", ["name"], [o])
                            })]
                        })]
                    })]
                })]
            })]
        })
    },
    FQ = s => {
        const {stuffDatas: e=null, getScoreType: t=null, getClearType: r=null} = Hq();
        return !e || !e.size ? null : a(q, {
            children: Array.from(e.entries()).map(([i, n], o) => a(rp, {
                objectId: i,
                category: V.FLOOR,
                children: g(M, {
                    className: "nitro-widget-high-score nitro-context-menu",
                    gap: 0,
                    children: [a(br, {
                        children: f("high.score.display.caption", ["scoretype", "cleartype"], [f(`high.score.display.scoretype.${t(n.scoreType)}`), f(`high.score.display.cleartype.${r(n.clearType)}`)])
                    }), g(GP, {
                        overflow: "hidden",
                        gap: 1,
                        className: "h-100",
                        children: [g(M, {
                            gap: 1,
                            children: [g(P, {
                                alignItems: "center",
                                children: [a(y, {
                                    center: !0,
                                    bold: !0,
                                    variant: "white",
                                    className: "col-8",
                                    children: f("high.score.display.users.header")
                                }), a(y, {
                                    center: !0,
                                    bold: !0,
                                    variant: "white",
                                    className: "col-4",
                                    children: f("high.score.display.score.header")
                                })]
                            }), a("hr", {
                                className: "m-0"
                            })]
                        }), a(M, {
                            overflow: "auto",
                            gap: 1,
                            className: "overflow-y-scroll",
                            children: n.entries.map((l, c) => g(P, {
                                alignItems: "center",
                                children: [a(y, {
                                    center: !0,
                                    variant: "white",
                                    className: "col-8",
                                    children: l.users.join(", ")
                                }), a(y, {
                                    center: !0,
                                    variant: "white",
                                    className: "col-4",
                                    children: l.score
                                })]
                            }, c))
                        })]
                    })]
                })
            }, o))
        })
    },
    xQ = s => (Yq(), null),
    GQ = -1,
    rh = 0,
    z_ = 1,
    K_ = 2,
    q_ = 3,
    X_ = 4,
    BQ = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState(GQ),
            {objectId: n=-1, figure: o=null, gender: l=null, clubLevel: c=gr.NO_CLUB, name: u=null, setName: h=null, saveFigure: d=null, wearFigure: m=null, saveName: p=null, onClose: E=null} = Kq();
        return _.useEffect(() => {
            if (n === -1)
                return;
            const T = dt();
            if (T.isRoomOwner || T.controllerLevel >= ct.GUEST || Z().isModerator) {
                i(rh);
                return
            }
            if (Z().gender.toLowerCase() !== l.toLowerCase()) {
                i(X_);
                return
            }
            if (hi() < c) {
                i(q_);
                return
            }
            i(K_)
        }, [n, l, c]), _.useEffect(() => {
            switch (r) {
            case rh:
            case X_:
                {
                    const T = bs().createFigureContainer(o);
                    vl.transformAsMannequinFigure(T),
                    t(T.getFigureString());
                    break
                }case z_:
                {
                    const T = bs().createFigureContainer(Z().figure);
                    vl.transformAsMannequinFigure(T),
                    t(T.getFigureString());
                    break
                }case K_:
            case q_:
                {
                    const T = vl.getMergedMannequinFigureContainer(Z().figure, o);
                    t(T.getFigureString());
                    break
                }
            }
        }, [r, o, c]), n === -1 ? null : g(Se, {
            className: "nitro-mannequin no-resize",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("mannequin.widget.title"),
                onCloseClick: E
            }), a(Ie, {
                center: !0,
                children: g(P, {
                    fullWidth: !0,
                    gap: 2,
                    overflow: "hidden",
                    children: [a(M, {
                        children: g(k, {
                            position: "relative",
                            className: "mannequin-preview",
                            children: [a(rs, {
                                position: "absolute",
                                figure: e,
                                direction: 2
                            }), c > 0 && a(us, {
                                className: "position-absolute end-2 bottom-2",
                                type: "hc"
                            })]
                        })
                    }), g(M, {
                        grow: !0,
                        justifyContent: "between",
                        overflow: "auto",
                        children: [r === rh && g(q, {
                            children: [a("input", {
                                type: "text",
                                className: "form-control form-control-sm",
                                value: u,
                                onChange: T => h(T.target.value),
                                onBlur: p
                            }), g(M, {
                                gap: 1,
                                children: [a(H, {
                                    variant: "success",
                                    onClick: T => i(z_),
                                    children: f("mannequin.widget.style")
                                }), a(H, {
                                    variant: "success",
                                    onClick: m,
                                    children: f("mannequin.widget.wear")
                                })]
                            })]
                        }), r === z_ && g(q, {
                            children: [g(M, {
                                gap: 1,
                                children: [a(y, {
                                    bold: !0,
                                    children: u
                                }), a(y, {
                                    wrap: !0,
                                    children: f("mannequin.widget.savetext")
                                })]
                            }), g(P, {
                                alignItems: "center",
                                justifyContent: "between",
                                children: [a(y, {
                                    underline: !0,
                                    pointer: !0,
                                    onClick: T => i(rh),
                                    children: f("mannequin.widget.back")
                                }), a(H, {
                                    variant: "success",
                                    onClick: d,
                                    children: f("mannequin.widget.save")
                                })]
                            })]
                        }), r === K_ && g(q, {
                            children: [g(M, {
                                gap: 1,
                                children: [a(y, {
                                    bold: !0,
                                    children: u
                                }), a(y, {
                                    children: f("mannequin.widget.weartext")
                                })]
                            }), a(H, {
                                variant: "success",
                                onClick: m,
                                children: f("mannequin.widget.wear")
                            })]
                        }), r === q_ && a(P, {
                            center: !0,
                            grow: !0,
                            children: a(y, {
                                children: f("mannequin.widget.clubnotification")
                            })
                        }), r === X_ && a(y, {
                            children: f("mannequin.widget.wronggender")
                        })]
                    })]
                })
            })]
        })
    },
    kQ = s => (s6(), null),
    kP = ["9CCEFF", "FF9CFF", "9CFF9C", "FFFF33"],
    VQ = ["blue", "pink", "green", "yellow"],
    HQ = s => {
        let e = kP.indexOf(s);
        return e === -1 && (e = 0), VQ[e]
    },
    jQ = s => {
        const {objectId: e=-1, color: t="0", setColor: r=null, text: i="", setText: n=null, canModify: o=!1, onClose: l=null} = i6();
        return e === -1 ? null : a(so, {
            handleSelector: ".drag-handler",
            windowPosition: qs.TOP_LEFT,
            children: g("div", {
                className: "nitro-stickie nitro-stickie-image stickie-" + HQ(t),
                children: [g("div", {
                    className: "d-flex align-items-center stickie-header drag-handler",
                    children: [a("div", {
                        className: "d-flex align-items-center flex-grow-1 h-100",
                        children: o && g(q, {
                            children: [a("div", {
                                className: "nitro-stickie-image stickie-trash header-trash",
                                onClick: l
                            }), kP.map(c => a("div", {
                                className: "stickie-color ms-1",
                                onClick: u => r(c),
                                style: {
                                    backgroundColor: wr.makeColorHex(c)
                                }
                            }, c))]
                        })
                    }), a("div", {
                        className: "d-flex align-items-center nitro-stickie-image stickie-close header-close",
                        onClick: l
                    })]
                }), a("div", {
                    className: "stickie-context",
                    children: a("textarea", {
                        className: "context-text",
                        value: i,
                        onChange: c => n(c.target.value),
                        tabIndex: 0,
                        autoFocus: !0
                    })
                })]
            })
        })
    },
    WQ = s => {
        const {objectId: e=-1, height: t=0, maxHeight: r=40, onClose: i=null, updateHeight: n=null} = a6(),
            [o, l] = _.useState(""),
            c = u => {
                l(u);
                const h = parseFloat(u);
                isNaN(h) || h === t || n(h)
            };
        return _.useEffect(() => {
            l(t.toString())
        }, [t]), e === -1 ? null : g(Se, {
            className: "nitro-widget-custom-stack-height",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("widget.custom.stack.height.title"),
                onCloseClick: i
            }), g(Ie, {
                justifyContent: "between",
                children: [a(y, {
                    children: f("widget.custom.stack.height.text")
                }), g(P, {
                    gap: 2,
                    children: [a(Xs, {
                        className: "nitro-slider",
                        min: 0,
                        max: r,
                        step: .01,
                        value: t,
                        onChange: u => n(u),
                        renderThumb: (u, h) => a("div", {
                            ...u,
                            children: h.valueNow
                        })
                    }), a("input", {
                        className: "show-number-arrows",
                        style: {
                            width: 50
                        },
                        type: "number",
                        min: 0,
                        max: r,
                        value: o,
                        onChange: u => c(u.target.value)
                    })]
                }), g(M, {
                    gap: 1,
                    children: [a(H, {
                        onClick: u => B(new Qh(e, -100)),
                        children: f("furniture.above.stack")
                    }), a(H, {
                        onClick: u => B(new Qh(e, 0)),
                        children: f("furniture.floor.level")
                    })]
                })]
            })]
        })
    },
    VP = ["9CCEFF", "FF9CFF", "9CFF9C", "FFFF33"],
    YQ = ["blue", "pink", "green", "yellow"],
    zQ = ["post_it", "post_it_shakesp", "post_it_dreams", "post_it_xmas", "post_it_vd", "post_it_juninas"],
    KQ = ["post_it", "shakesp", "dreams", "christmas", "heart", "juninas"],
    qQ = s => {
        let e = VP.indexOf(s);
        return e === -1 && (e = 0), YQ[e]
    },
    XQ = s => {
        let e = zQ.indexOf(s);
        return e === -1 && (e = 0), KQ[e]
    },
    QQ = s => {
        const {objectId: e=-1, color: t="0", text: r="", type: i="", canModify: n=!1, updateColor: o=null, updateText: l=null, trash: c=null, onClose: u=null} = l6(),
            [h, d] = _.useState(!1);
        return _.useEffect(() => {
            d(!1)
        }, [e, t, r, i]), e === -1 ? null : a(so, {
            handleSelector: ".drag-handler",
            windowPosition: qs.TOP_LEFT,
            children: g("div", {
                className: "nitro-stickie nitro-stickie-image stickie-" + (i == "post_it" ? qQ(t) : XQ(i)),
                children: [g("div", {
                    className: "d-flex align-items-center stickie-header drag-handler",
                    children: [a("div", {
                        className: "d-flex align-items-center flex-grow-1 h-100",
                        children: n && g(q, {
                            children: [a("div", {
                                className: "nitro-stickie-image stickie-trash header-trash",
                                onClick: c
                            }), i == "post_it" && a(q, {
                                children: VP.map(m => a("div", {
                                    className: "stickie-color ms-1",
                                    onClick: p => o(m),
                                    style: {
                                        backgroundColor: wr.makeColorHex(m)
                                    }
                                }, m))
                            })]
                        })
                    }), a("div", {
                        className: "d-flex align-items-center nitro-stickie-image stickie-close header-close",
                        onClick: u
                    })]
                }), a("div", {
                    className: "stickie-context",
                    children: !h || !n ? a("div", {
                        className: "context-text",
                        onClick: m => n && d(!0),
                        children: r
                    }) : a("textarea", {
                        className: "context-text",
                        defaultValue: r,
                        tabIndex: 0,
                        onBlur: m => l(m.target.value),
                        autoFocus: !0
                    })
                })]
            })
        })
    },
    JQ = s => {
        const {objectId: e=-1, color: t="1", senderName: r="", date: i="", message: n="", onClose: o=null} = u6();
        return e === -1 ? null : a(Jv, {
            color: t,
            message: n,
            date: i,
            senderName: r,
            onCloseClick: o
        })
    },
    ZQ = s => {
        const [e, t] = _.useState(null),
            {objectId: r=-1, videoId: i=null, videoStart: n=0, videoEnd: o=0, currentVideoState: l=null, selectedVideo: c=null, playlists: u=[], onClose: h=null, previous: d=null, next: m=null, pause: p=null, play: E=null, selectVideo: T=null} = m6(),
            I = A => {
                if (t(A.target), r !== -1)
                    switch (A.target.getPlayerState()) {
                    case -1:
                    case 1:
                        l !== 1 && E();
                        return;
                    case 2:
                        l !== 2 && p()
                    }
            };
        if (_.useEffect(() => {
            if (!(l === null || !e)) {
                if (l === Li.PLAYING && e.getPlayerState() !== Li.PLAYING) {
                    e.playVideo();
                    return
                }
                if (l === Li.PAUSED && e.getPlayerState() !== Li.PAUSED) {
                    e.pauseVideo();
                    return
                }
            }
        }, [l, e]), r === -1)
            return null;
        const S = {
            height: "375",
            width: "500",
            playerVars: {
                autoplay: 1,
                disablekb: 1,
                controls: 0,
                origin: window.origin,
                modestbranding: 1,
                start: n,
                end: o
            }
        };
        return g(Se, {
            className: "youtube-tv-widget",
            children: [a(Oe, {
                headerText: f("catalog.page.youtube_tvs"),
                onCloseClick: h
            }), a(Ie, {
                children: g("div", {
                    className: "row w-100 h-100",
                    children: [g("div", {
                        className: "youtube-video-container col-9 overflow-hidden",
                        children: [i && i.length > 0 && a(bL, {
                            videoId: i,
                            opts: S,
                            onReady: A => t(A.target),
                            onStateChange: I,
                            containerClassName: "youtubeContainer"
                        }), (!i || i.length === 0) && a("div", {
                            className: "empty-video w-100 h-100 justify-content-center align-items-center d-flex",
                            children: f("widget.furni.video_viewer.no_videos")
                        })]
                    }), g("div", {
                        className: "playlist-container col-3 d-flex flex-column",
                        children: [g("span", {
                            className: "playlist-controls justify-content-center d-flex",
                            children: [a("i", {
                                className: "icon icon-youtube-prev cursor-pointer",
                                onClick: d
                            }), a("i", {
                                className: "icon icon-youtube-next cursor-pointer",
                                onClick: m
                            })]
                        }), a("div", {
                            className: "mb-1",
                            children: f("widget.furni.video_viewer.playlists")
                        }), a(Mt, {
                            columnCount: 1,
                            columnMinWidth: 80,
                            columnMinHeight: 100,
                            className: "mb-1",
                            overflow: "auto",
                            children: u && u.map((A, N) => a($e, {
                                onClick: b => T(A.video),
                                itemActive: A.video === c,
                                children: a("b", {
                                    children: A.title
                                })
                            }, N))
                        })]
                    })]
                })
            })]
        })
    },
    $Q = s => {
        const {diskInventory: e=null, addToPlaylist: t=null} = s,
            [r, i] = _.useState(-1),
            [n, o] = _.useState(-1),
            l = _.useCallback((h, d) => {
                h.stopPropagation(),
                o(m => m === d ? -1 : d)
            }, []),
            c = _.useCallback((h, d) => {
                var m,
                    p;
                h.stopPropagation(),
                t(d, (p = (m = qe().soundManager.musicController) == null ? void 0 : m.getRoomItemPlaylist()) == null ? void 0 : p.length)
            }, [t]),
            u = () => {
                ge("catalog/open/" + _s.TRAX_SONGS)
            };
        return _.useEffect(() => {
            var h;
            if (n !== -1)
                return (h = qe().soundManager.musicController) == null || h.playSong(n, Fs.PRIORITY_SONG_PLAY, 0, 0, 0, 0), () => {
                    var d;
                    (d = qe().soundManager.musicController) == null || d.stop(Fs.PRIORITY_SONG_PLAY)
                }
        }, [n]), _.useEffect(() => () => o(-1), []), g(q, {
            children: [g("div", {
                className: "bg-success py-3 container-fluid justify-content-center d-flex rounded",
                children: [a("img", {
                    src: oe("image.library.url") + "playlist/title_mymusic.gif",
                    className: "my-music"
                }), a("h2", {
                    className: "ms-4",
                    children: f("playlist.editor.my.music")
                })]
            }), a("div", {
                className: "h-100 overflow-y-scroll mt-4 py-2",
                children: a(Mt, {
                    columnCount: 3,
                    columnMinWidth: 95,
                    gap: 1,
                    children: e && e.getKeys().map((h, d) => {
                        var T;
                        const m = e.getKey(d),
                            p = e.getWithIndex(d),
                            E = (T = qe().soundManager.musicController) == null ? void 0 : T.getSongInfo(p);
                        return g($e, {
                            itemActive: r === d,
                            onClick: () => i(I => I === d ? -1 : d),
                            classNames: ["text-black"],
                            children: [a("div", {
                                className: "disk-image flex-shrink-0 mb-n2",
                                style: {
                                    backgroundColor: jv(E == null ? void 0 : E.songData)
                                }
                            }), a(y, {
                                truncate: !0,
                                fullWidth: !0,
                                className: "text-center",
                                children: E == null ? void 0 : E.name
                            }), r === d && g(P, {
                                position: "absolute",
                                className: "bottom-0 mb-1 bg-secondary p-1 rounded",
                                alignItems: "center",
                                justifyContent: "center",
                                gap: 2,
                                children: [a(H, {
                                    onClick: I => l(I, p),
                                    variant: "light",
                                    children: a(k, {
                                        className: n === p ? "pause-btn" : "preview-song"
                                    })
                                }), a(H, {
                                    onClick: I => c(I, m),
                                    variant: "light",
                                    children: a(k, {
                                        className: "move-disk"
                                    })
                                })]
                            })]
                        }, d)
                    })
                })
            }), g("div", {
                className: "playlist-bottom text-black p-1",
                children: [a("h5", {
                    children: f("playlist.editor.text.get.more.music")
                }), a("div", {
                    children: f("playlist.editor.text.you.have.no.songdisks.available")
                }), a("div", {
                    children: f("playlist.editor.text.you.can.buy.some.from.the.catalogue")
                }), a("button", {
                    className: "btn btn-primary btn-sm",
                    onClick: () => u(),
                    children: f("playlist.editor.button.open.catalogue")
                })]
            }), a("img", {
                src: oe("image.library.url") + "playlist/background_get_more_music.gif",
                className: "get-more"
            })]
        })
    },
    eJ = s => {
        var h,
            d;
        const {furniId: e=-1, playlist: t=null, currentPlayingIndex: r=-1, removeFromPlaylist: i=null, togglePlayPause: n=null} = s,
            [o, l] = _.useState(-1),
            c = m => {
                o === m && i(m)
            },
            u = (m, p) => {
                n(m, p !== -1 ? p : 0)
            };
        return g(q, {
            children: [g("div", {
                className: "bg-primary py-3 container-fluid justify-content-center d-flex rounded",
                children: [a("img", {
                    src: oe("image.library.url") + "playlist/title_playlist.gif",
                    className: "playlist-img"
                }), a("h2", {
                    className: "ms-4",
                    children: f("playlist.editor.playlist")
                })]
            }), a("div", {
                className: "h-100 overflow-y-scroll py-2",
                children: a(P, {
                    column: !0,
                    gap: 2,
                    children: t && t.map((m, p) => g(P, {
                        gap: 1,
                        className: "text-black cursor-pointer " + (o === p ? "border border-muted border-2 rounded" : "border-2"),
                        alignItems: "center",
                        onClick: () => l(E => E === p ? -1 : p),
                        children: [a(k, {
                            onClick: () => c(p),
                            className: "disk-2 " + (o === p ? "selected-song" : ""),
                            style: {
                                backgroundColor: o === p ? "" : jv(m.songData)
                            }
                        }), m.name]
                    }, p))
                })
            }), (!t || t.length === 0) && g(q, {
                children: [g("div", {
                    className: "playlist-bottom text-black p-1 ms-5",
                    children: [a("h5", {
                        children: f("playlist.editor.add.songs.to.your.playlist")
                    }), a("div", {
                        children: f("playlist.editor.text.click.song.to.choose.click.again.to.move")
                    })]
                }), a("img", {
                    src: oe("image.library.url") + "playlist/background_add_songs.gif",
                    className: "add-songs"
                })]
            }), t && t.length > 0 && g(q, {
                children: [r === -1 && a(H, {
                    variant: "success",
                    size: "lg",
                    onClick: () => u(e, o),
                    children: f("playlist.editor.button.play.now")
                }), r !== -1 && g(P, {
                    gap: 1,
                    children: [a(H, {
                        variant: "danger",
                        onClick: () => u(e, o),
                        children: a(k, {
                            className: "pause-song"
                        })
                    }), g(P, {
                        column: !0,
                        children: [a(y, {
                            bold: !0,
                            display: "block",
                            children: f("playlist.editor.text.now.playing.in.your.room")
                        }), a(y, {
                            children: ((h = t[r]) == null ? void 0 : h.name) + " - " + ((d = t[r]) == null ? void 0 : d.creator)
                        })]
                    })]
                })]
            })]
        })
    },
    tJ = s => {
        const {objectId: e=-1, currentPlayingIndex: t=-1, playlist: r=null, diskInventory: i=null, onClose: n=null, togglePlayPause: o=null, removeFromPlaylist: l=null, addToPlaylist: c=null} = Xq();
        return e === -1 ? null : g(Se, {
            className: "nitro-playlist-editor-widget",
            theme: "primary-slim",
            children: [a(Oe, {
                headerText: f("playlist.editor.title"),
                onCloseClick: n
            }), a(Ie, {
                children: g("div", {
                    className: "d-flex flex-row gap-1 h-100",
                    children: [a("div", {
                        className: "w-50 position-relative overflow-hidden h-100 rounded d-flex flex-column",
                        children: a($Q, {
                            addToPlaylist: c,
                            diskInventory: i
                        })
                    }), a("div", {
                        className: "w-50 position-relative overflow-hidden h-100 rounded d-flex flex-column",
                        children: a(eJ, {
                            furniId: e,
                            removeFromPlaylist: l,
                            playlist: r,
                            togglePlayPause: o,
                            currentPlayingIndex: t
                        })
                    })]
                })
            })]
        })
    },
    sJ = s => g(k, {
        fit: !0,
        position: "absolute",
        className: "nitro-room-widgets top-0 start-0",
        children: [a(yQ, {}), a(MQ, {}), a(bQ, {}), a(DQ, {}), a(vQ, {}), a(LQ, {}), a(UQ, {}), a(wQ, {}), a(FQ, {}), a(xQ, {}), a(BQ, {}), a(tJ, {}), a(kQ, {}), a(jQ, {}), a(WQ, {}), a(QQ, {}), a(JQ, {}), a(NQ, {}), a(ZQ, {})]
    }),
    rJ = s => {
        const {isVisible: e=!1, errorResult: t=null, petName: r=null, objectType: i=null, onChangePetName: n=null, onConfirm: o=null, onClose: l=null} = L6();
        return a(q, {
            children: e && g(Se, {
                className: "nitro-pet-package no-resize",
                theme: "habbo",
                children: [a(Oe, {
                    center: !0,
                    headerText: f(i === "gnome_box" ? "widgets.gnomepackage.name.title" : "furni.petpackage.open"),
                    onCloseClick: () => l()
                }), g(Ie, {
                    children: [g(P, {
                        className: "pet-package-container-top p-3",
                        children: [a("div", {
                            className: `package-image-${i} flex-shrink-0`
                        }), a("div", {
                            className: "m-2",
                            children: a(y, {
                                variant: "white",
                                className: "package-text-big",
                                children: f(i === "gnome_box" ? "widgets.gnomepackage.name.title" : "furni.petpackage")
                            })
                        })]
                    }), a(P, {
                        className: "pet-package-container-bottom p-2",
                        children: g(M, {
                            gap: 1,
                            children: [g(P, {
                                alignItems: "center",
                                className: "bg-white rounded py-1 px-2 input-pet-package-container",
                                children: [a("input", {
                                    type: "text",
                                    className: "form-control form-control-sm input-pet-package",
                                    maxLength: oe("pet.package.name.max.length"),
                                    placeholder: f(i === "gnome_box" ? "widgets.gnomepackage.name.select" : "widgets.petpackage.name.title"),
                                    value: r,
                                    onChange: c => n(c.target.value)
                                }), a("div", {
                                    className: "package-pencil-image flex-shrink-0 small fa-icon"
                                })]
                            }), t.length > 0 && a(k, {
                                className: "invalid-feedback d-block m-0",
                                children: t
                            }), g(P, {
                                className: "mt-2",
                                gap: 5,
                                display: "flex",
                                justifyContent: "center",
                                alignItems: "center",
                                children: [a(y, {
                                    pointer: !0,
                                    className: "text-decoration",
                                    onClick: () => l(),
                                    children: f("cancel")
                                }), a(DL, {
                                    variant: r.length < 3 ? "danger" : "success",
                                    disabled: r.length < 3,
                                    onClick: () => o(),
                                    children: f(i === "gnome_box" ? "widgets.gnomepackage.name.pick" : "furni.petpackage.confirm")
                                })]
                            })]
                        })
                    })]
                })]
            })
        })
    },
    iJ = s => {
        const [e, t] = _.useState("bobba"),
            [r, i] = _.useState(""),
            [n, o] = _.useState(!1),
            {wordsFilter: l=[], isVisible: c=null, setWordsFilter: u, onClose: h=null} = y6(),
            {navigatorData: d=null} = fi(),
            m = T => {
                (n ? !r : !e) || (B(new pM(d.enteredGuestRoom.roomId, T, n ? r : e)), i(""), t("bobba"), o(!1), !(T && l.includes(n ? r : e)) && u(I => {
                    const S = [...I];
                    return T ? S.push(n ? r : e) : S.splice(S.indexOf(n ? r : e), 1), S
                }))
            },
            p = T => {
                t(T),
                o(!1)
            },
            E = T => {
                i(T),
                o(!0)
            };
        return c ? g(Se, {
            className: "nitro-guide-tool no-resize",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("navigator.roomsettings.roomfilter"),
                onCloseClick: () => h()
            }), g(Ie, {
                className: "text-black",
                children: [g(fe, {
                    className: "d-flex align-items-center justify-content-end gap-2",
                    children: [a("input", {
                        type: "text",
                        className: "form-control form-control-sm",
                        maxLength: 255,
                        value: e,
                        onChange: T => p(T.target.value)
                    }), a(H, {
                        onClick: () => m(!0),
                        children: f("navigator.roomsettings.roomfilter.addword")
                    })]
                }), a(M, {
                    overflow: "auto",
                    gap: 0,
                    className: "form-control form-control-sm",
                    style: {
                        height: "100px"
                    },
                    children: l && l.length > 0 && l.map((T, I) => a(P, {
                        alignItems: "center",
                        className: cr("rounded p-1", r === T && "bg-muted"),
                        pointer: !0,
                        onClick: S => E(T),
                        children: a(y, {
                            truncate: !0,
                            children: T
                        })
                    }, I))
                }), a(fe, {
                    className: "d-flex align-items-center justify-content-end gap-2",
                    children: a(H, {
                        variant: "danger",
                        onClick: () => m(!1),
                        disabled: l.length === 0 || !n,
                        children: f("navigator.roomsettings.roomfilter.removeword")
                    })
                })]
            })]
        }) : null
    },
    nJ = s => {
        const [e, t] = _.useState(!1),
            {roomSession: r=null} = vt();
        hs([qi.SHOW_THUMBNAIL, qi.HIDE_THUMBNAIL, qi.TOGGLE_THUMBNAIL], n => {
            switch (n.type) {
            case qi.SHOW_THUMBNAIL:
                t(!0);
                return;
            case qi.HIDE_THUMBNAIL:
                t(!1);
                return;
            case qi.TOGGLE_THUMBNAIL:
                t(o => !o);
                return
            }
        });
        const i = n => {
            re().saveTextureAsScreenshot(n, !0),
            t(!1)
        };
        return e ? a(v4, {
            roomId: r.roomId,
            textureReceiver: i,
            onClose: () => t(!1)
        }) : null
    },
    aJ = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(null),
            [n, o] = _.useState(null),
            [l, c] = _.useState(null),
            [u, h] = _.useState(!1),
            {navigatorData: d=null} = fi(),
            {roomSession: m=null} = vt(),
            p = (E, T) => {
                switch (E) {
                case "settings":
                    ge("navigator/toggle-room-info");
                    return;
                case "zoom":
                    t(I => {
                        let S = re().getRoomInstanceRenderingCanvasScale(m.roomId, 1);
                        return I ? S *= 2 : S /= 2, re().setRoomInstanceRenderingCanvasScale(m.roomId, 1, S), !I
                    });
                    return;
                case "chat_history":
                    ge("chat-history/toggle");
                    return;
                case "like_room":
                    B(new fM(1));
                    return;
                case "toggle_room_link":
                    ge("navigator/toggle-room-link");
                    return;
                case "navigator_search_tag":
                    ge(`navigator/search/${T}`),
                    B(new xo("hotel_view", `tag:${T}`));
                    return
                }
            };
        return W(na, E => {
            const T = E.getParser();
            !T.roomEnter || T.data.roomId !== m.roomId || (r !== T.data.roomName && i(T.data.roomName), n !== T.data.ownerName && o(T.data.ownerName), l !== T.data.tags && c(T.data.tags))
        }), _.useEffect(() => {
            h(!0);
            const E = setTimeout(() => h(!1), 5e3);
            return () => clearTimeout(E)
        }, [r, n, l]), g(P, {
            className: "nitro-room-tools-container",
            gap: 2,
            children: [g(M, {
                center: !0,
                className: "nitro-room-tools p-2",
                children: [a(k, {
                    pointer: !0,
                    title: f("room.settings.button.text"),
                    className: "icon icon-cog",
                    onClick: () => p("settings")
                }), a(k, {
                    pointer: !0,
                    title: f("room.zoom.button.text"),
                    onClick: () => p("zoom"),
                    className: cr("icon", !e && "icon-zoom-less", e && "icon-zoom-more")
                }), a(k, {
                    pointer: !0,
                    title: f("room.chathistory.button.text"),
                    onClick: () => p("chat_history"),
                    className: "icon icon-chat-history"
                }), d.canRate && a(k, {
                    pointer: !0,
                    title: f("room.like.button.text"),
                    onClick: () => p("like_room"),
                    className: "icon icon-like-room"
                })]
            }), a(M, {
                justifyContent: "center",
                children: a(vu, {
                    type: ws.SLIDE_LEFT,
                    inProp: u,
                    timeout: 300,
                    children: a(M, {
                        center: !0,
                        children: g(M, {
                            className: "nitro-room-tools-info rounded py-2 px-3",
                            children: [g(M, {
                                gap: 1,
                                children: [a(y, {
                                    wrap: !0,
                                    variant: "white",
                                    fontSize: 4,
                                    children: r
                                }), a(y, {
                                    variant: "muted",
                                    fontSize: 5,
                                    children: n
                                })]
                            }), l && l.length > 0 && a(P, {
                                gap: 2,
                                children: l.map((E, T) => g(y, {
                                    small: !0,
                                    pointer: !0,
                                    variant: "white",
                                    className: "rounded bg-primary p-1",
                                    onClick: () => p("navigator_search_tag", E),
                                    children: ["#", E]
                                }, T))
                            })]
                        })
                    })
                })
            })]
        })
    },
    oJ = s => {
        const {question: e=null, canVote: t=null, vote: r=null, noVotes: i=null, yesVotes: n=null} = s;
        return g(M, {
            gap: 2,
            className: "wordquiz-question p-2",
            children: [!t && g(P, {
                fullWidth: !0,
                alignItems: "center",
                gap: 2,
                children: [a(P, {
                    center: !0,
                    pointer: !0,
                    className: "bg-danger rounded p-2",
                    children: a(y, {
                        variant: "white",
                        children: i
                    })
                }), a(y, {
                    variant: "white",
                    center: !0,
                    textBreak: !0,
                    children: e
                }), a(P, {
                    center: !0,
                    pointer: !0,
                    className: "bg-success rounded p-2",
                    children: a(y, {
                        variant: "white",
                        children: n
                    })
                })]
            }), t && g(M, {
                children: [a(y, {
                    variant: "white",
                    center: !0,
                    textBreak: !0,
                    children: e
                }), g(P, {
                    fullWidth: !0,
                    justifyContent: "center",
                    gap: 1,
                    children: [a(P, {
                        center: !0,
                        pointer: !0,
                        className: "bg-danger rounded p-1",
                        onClick: o => r(cd),
                        children: a(k, {
                            className: "word-quiz-dislike"
                        })
                    }), a(P, {
                        center: !0,
                        pointer: !0,
                        className: "bg-success rounded p-1",
                        onClick: o => r(Wv),
                        children: a(k, {
                            className: "word-quiz-like"
                        })
                    })]
                })]
            })]
        })
    },
    lJ = s => {
        const {userIndex: e=null, vote: t=null, ...r} = s;
        return a(rp, {
            objectId: e,
            category: V.UNIT,
            ...r,
            children: a(P, {
                center: !0,
                pointer: !0,
                className: `bg-${t === cd ? "danger" : "success"} rounded p-1`,
                children: a(k, {
                    className: `word-quiz-${t === cd ? "dislike" : "like"}-sm`
                })
            })
        })
    },
    cJ = s => {
        const {question: e=null, answerSent: t=!1, answerCounts: r=null, userAnswers: i=null, vote: n=null} = k6();
        return g(q, {
            children: [e && a(oJ, {
                question: e.content,
                canVote: !t,
                vote: n,
                noVotes: r.get(cd) || 0,
                yesVotes: r.get(Wv) || 0
            }), i && Array.from(i.entries()).map(([o, l], c) => a(lJ, {
                userIndex: o,
                vote: l.value
            }, c))]
        })
    },
    uJ = s => {
        const {roomSession: e=null} = vt(),
            {simpleAlert: t=null} = Yt();
        return at(bh.ROOM_ZOOM, r => re().setRoomInstanceRenderingCanvasScale(r.roomId, 1, r.level, null, null, !1, r.asDelta)), at([ee.REQUEST_TEASER, ee.REQUEST_ECOTRONBOX, ee.REQUEST_CLOTHING_CHANGE, ee.REQUEST_PLAYLIST_EDITOR, ee.OPEN_WIDGET, ee.CLOSE_WIDGET, Di.FURNI_CLICK, Di.FURNI_DOUBLE_CLICK, Di.TOOLTIP_SHOW, Di.TOOLTIP_HIDE], r => {
            if (e)
                switch (r.objectId, r.category, r.type) {
                }
        }), jt([We.RSEME_KICKED, We.RSEME_PETS_FORBIDDEN_IN_HOTEL, We.RSEME_PETS_FORBIDDEN_IN_FLAT, We.RSEME_MAX_PETS, We.RSEME_MAX_NUMBER_OF_OWN_PETS, We.RSEME_NO_FREE_TILES_FOR_PET, We.RSEME_SELECTED_TILE_NOT_FREE_FOR_PET, We.RSEME_BOTS_FORBIDDEN_IN_HOTEL, We.RSEME_BOTS_FORBIDDEN_IN_FLAT, We.RSEME_BOT_LIMIT_REACHED, We.RSEME_SELECTED_TILE_NOT_FREE_FOR_BOT, We.RSEME_BOT_NAME_NOT_ACCEPTED], r => {
            let i = f("error.title"),
                n = "";
            switch (r.type) {
            case We.RSEME_MAX_PETS:
                n = f("room.error.max_pets");
                break;
            case We.RSEME_MAX_NUMBER_OF_OWN_PETS:
                n = f("room.error.max_own_pets");
                break;
            case We.RSEME_KICKED:
                n = f("room.error.kicked"),
                i = f("generic.alert.title");
                break;
            case We.RSEME_PETS_FORBIDDEN_IN_HOTEL:
                n = f("room.error.pets.forbidden_in_hotel");
                break;
            case We.RSEME_PETS_FORBIDDEN_IN_FLAT:
                n = f("room.error.pets.forbidden_in_flat");
                break;
            case We.RSEME_NO_FREE_TILES_FOR_PET:
                n = f("room.error.pets.no_free_tiles");
                break;
            case We.RSEME_SELECTED_TILE_NOT_FREE_FOR_PET:
                n = f("room.error.pets.selected_tile_not_free");
                break;
            case We.RSEME_BOTS_FORBIDDEN_IN_HOTEL:
                n = f("room.error.bots.forbidden_in_hotel");
                break;
            case We.RSEME_BOTS_FORBIDDEN_IN_FLAT:
                n = f("room.error.bots.forbidden_in_flat");
                break;
            case We.RSEME_BOT_LIMIT_REACHED:
                n = f("room.error.max_bots");
                break;
            case We.RSEME_SELECTED_TILE_NOT_FREE_FOR_BOT:
                n = f("room.error.bots.selected_tile_not_free");
                break;
            case We.RSEME_BOT_NAME_NOT_ACCEPTED:
                n = f("room.error.bots.name.not.accepted");
                break;
            default:
                return
            }
            t(n, we.DEFAULT, null, null, i)
        }), g(q, {
            children: [a(oQ, {}), a(_Q, {}), a(cQ, {}), a(mQ, {}), a(sJ, {}), a(aJ, {}), a(iJ, {}), a(nJ, {}), a(gQ, {}), a(rJ, {}), a(fQ, {}), a(cJ, {}), a(pQ, {})]
        })
    },
    hJ = s => {
        const {roomSession: e=null} = vt(),
            t = _.useRef();
        return _.useEffect(() => {
            const r = qe().application.renderer.view;
            if (!r)
                return;
            r.onclick = n => xu(n),
            r.onmousemove = n => xu(n),
            r.onmousedown = n => xu(n),
            r.onmouseup = n => xu(n),
            r.ontouchstart = n => ku(n),
            r.ontouchmove = n => ku(n),
            r.ontouchend = n => ku(n),
            r.ontouchcancel = n => ku(n);
            const i = t.current;
            i && i.appendChild(r)
        }, []), a(k, {
            fit: !0,
            innerRef: t,
            className: !e && "d-none",
            children: e && g(q, {
                children: [a(uJ, {}), e.isSpectator && a(x9, {})]
            })
        })
    },
    dJ = s => {
        const {useGuideTool: e=!1, unseenAchievementCount: t=0, setMeExpanded: r=null, children: i=null, ...n} = s,
            o = _.useRef();
        return _.useEffect(() => {
            const l = dt();
            l && re().selectRoomObject(l.roomId, l.ownRoomIndex, V.UNIT)
        }, []), _.useEffect(() => {
            const l = c => r(!1);
            return document.addEventListener("click", l), () => document.removeEventListener(le.MOUSE_CLICK, l)
        }, [r]), g(P, {
            innerRef: o,
            alignItems: "center",
            className: "nitro-toolbar-me py-2 px-4",
            gap: 4,
            children: [oe("guides.enabled") && e && g(M, {
                gap: 1,
                alignItems: "center",
                onClick: l => Ms(new hr(hr.TOGGLE_GUIDE_TOOL)),
                children: [a(k, {
                    pointer: !0,
                    className: "navigation-item icon icon-me-helper-tool"
                }), a(y, {
                    variant: "white",
                    className: "me-text",
                    children: f("widget.memenu.guide")
                })]
            }), g(M, {
                gap: 1,
                alignItems: "center",
                onClick: l => ge("achievements/toggle"),
                children: [a(k, {
                    pointer: !0,
                    className: "navigation-item icon icon-me-achievements",
                    children: t > 0 && a(Wa, {
                        count: t
                    })
                }), a(y, {
                    variant: "white",
                    className: "me-text",
                    children: f("widget.memenu.achievements")
                })]
            }), g(M, {
                gap: 1,
                alignItems: "center",
                onClick: l => Fr(Z().userId),
                children: [a(k, {
                    pointer: !0,
                    className: "navigation-item icon icon-me-profile"
                }), a(y, {
                    variant: "white",
                    className: "me-text",
                    children: f("widget.memenu.profile")
                })]
            }), g(M, {
                gap: 1,
                alignItems: "center",
                onClick: l => ge("navigator/search/myworld_view"),
                children: [a(k, {
                    pointer: !0,
                    className: "navigation-item icon icon-me-rooms"
                }), a(y, {
                    variant: "white",
                    className: "me-text",
                    children: f("widget.memenu.myrooms")
                })]
            }), g(M, {
                gap: 1,
                alignItems: "center",
                onClick: l => ge("avatar-editor/toggle"),
                children: [a(k, {
                    pointer: !0,
                    className: "navigation-item icon icon-me-clothing"
                }), a(y, {
                    variant: "white",
                    className: "me-text",
                    children: f("widget.memenu.myclothes")
                })]
            }), oe("season-pass.enabled") && g(M, {
                gap: 1,
                alignItems: "center",
                onClick: l => ge("season-pass/toggle"),
                children: [a(k, {
                    pointer: !0,
                    className: "navigation-item icon icon-me-talents"
                }), a(y, {
                    variant: "white",
                    className: "me-text",
                    children: f("widget.memenu.season-pass")
                })]
            }), i]
        })
    },
    _J = s => {
        const {isInRoom: e} = s,
            [t, r] = _.useState(!1),
            [i, n] = _.useState(!0),
            [o, l] = _.useState(!0),
            [c, u] = _.useState(!1),
            {userFigure: h=null} = fa(),
            {getFullCount: d=0} = pi(),
            {getTotalUnseen: m=0} = l_(),
            {requests: p=[]} = ri(),
            {iconState: E=ai.HIDDEN} = lP(),
            T = Z().securityLevel >= 6;
        return W(Gm, I => {
            const S = I.getParser();
            u(S.isAllowed(si.USE_GUIDE_TOOL))
        }), at(yh.ANIMATE_ICON, I => {
            ((A, N, b, v) => {
                const D = document.body.getElementsByClassName(A)[0];
                if (!D)
                    return;
                N.className = "toolbar-icon-animation",
                N.style.visibility = "visible",
                N.style.left = b + "px",
                N.style.top = v + "px",
                document.body.append(N);
                const G = D.getBoundingClientRect(),
                    x = N.getBoundingClientRect(),
                    F = x.x - G.x,
                    U = x.y - G.y,
                    z = Math.sqrt(F * F + U * U),
                    Q = 500 - Math.abs(1 / z * 100 * 500 * .5),
                    j = 20,
                    J = `ToolbarBouncing[${A}]`;
                Ha.getMotionByTag(J) || (Ha.runMotion(new yp(new lK(Q + 8), new rK(D, 400, 12))).tag = J);
                const X = new yp(new aK(new oK(N, Q, G.x - x.x + j, G.y - x.y, 100, 1), 1), new sK(N));
                Ha.runMotion(X)
            })("icon-inventory", I.image, I.x, I.y)
        }), g(q, {
            children: [a(vu, {
                type: ws.FADE_IN,
                inProp: t,
                timeout: 300,
                children: a(dJ, {
                    useGuideTool: c,
                    unseenAchievementCount: m,
                    setMeExpanded: r
                })
            }), a(P, {
                alignItems: "center",
                justifyContent: "center",
                id: "toolbar-chat-input-container"
            }), g(P, {
                alignItems: "center",
                justifyContent: "between",
                gap: 2,
                className: "nitro-toolbar py-1 px-3",
                children: [a("button", {
                    className: i ? "toolbar-left-collapse" : "toolbar-left-collapse-active",
                    onClick: () => n(I => !I)
                }), a(P, {
                    gap: 2,
                    alignItems: "center",
                    className: "toolbar-left-side",
                    children: g(P, {
                        alignItems: "center",
                        gap: 2,
                        children: [i && g(P, {
                            alignItems: "center",
                            gap: 2,
                            children: [e && a(k, {
                                pointer: !0,
                                className: "navigation-item icon icon-habbo",
                                title: f("toolbar.icon.tooltip.exitroom.hotelview"),
                                onClick: I => wE()
                            }), !e && a(k, {
                                pointer: !0,
                                className: "navigation-item icon icon-house",
                                title: f("toolbar.icon.tooltip.exitroom.home"),
                                onClick: I => ge("navigator/goto/home")
                            }), a(k, {
                                pointer: !0,
                                className: "navigation-item icon icon-rooms",
                                title: f("toolbar.icon.label.navigator"),
                                onClick: I => ge("navigator/toggle")
                            }), oe("game.center.enabled") && a(k, {
                                pointer: !0,
                                className: "navigation-item icon icon-game",
                                title: f("toolbar.icon.label.games"),
                                onClick: I => ge("games/toggle")
                            })]
                        }), a(k, {
                            pointer: !0,
                            className: "navigation-item icon icon-catalog",
                            title: f("tooltip.shop"),
                            onClick: I => ge("catalog/toggle")
                        }), a(k, {
                            pointer: !0,
                            className: "navigation-item icon icon-inventory",
                            title: f("toolbar.icon.label.inventory"),
                            onClick: I => ge("inventory/toggle"),
                            children: d > 0 && a(Wa, {
                                count: d
                            })
                        }), g(P, {
                            center: !0,
                            pointer: !0,
                            className: "navigation-item item-avatar " + (t ? "active " : ""),
                            title: f("toolbar.icon.label.memenu"),
                            onClick: I => r(!t),
                            children: [a(rs, {
                                figure: h,
                                direction: 2,
                                position: "absolute"
                            }), m > 0 && a(Wa, {
                                count: m
                            })]
                        }), e && a(k, {
                            pointer: !0,
                            className: "navigation-item icon icon-camera",
                            title: f("camera.interface.title"),
                            onClick: I => ge("camera/toggle")
                        }), T && a(k, {
                            pointer: !0,
                            className: "navigation-item icon icon-modtools",
                            onClick: I => ge("mod-tools/toggle")
                        })]
                    })
                }), g(P, {
                    alignItems: "center",
                    gap: 2,
                    className: o ? "toolbar-right-side" : "",
                    children: [g(P, {
                        gap: 2,
                        className: E === ai.SHOW || E === ai.UNREAD ? "" : "margin-friends",
                        children: [a(k, {
                            pointer: !0,
                            className: "navigation-item icon icon-friendall",
                            title: f("friend.bar.friends.title"),
                            onClick: I => ge("friends/toggle"),
                            children: p.length > 0 && a(Wa, {
                                count: p.length
                            })
                        }), (E === ai.SHOW || E === ai.UNREAD) && a(k, {
                            pointer: !0,
                            className: `navigation-item icon icon-message ${E === ai.UNREAD && "is-unseen"}`,
                            onClick: I => r_()
                        })]
                    }), a(k, {
                        id: "toolbar-friend-bar-container",
                        className: o ? "d-none d-lg-block" : "d-none"
                    })]
                }), a("button", {
                    className: o ? "toolbar-right-collapse" : "toolbar-right-collapse-active",
                    onClick: () => l(I => !I)
                })]
            })]
        })
    },
    gJ = s => {
        const {badges: e=null, gap: t=1, justifyContent: r="between", ...i} = s;
        return a(q, {
            children: e && e.length > 0 && e.map((n, o) => a(M, {
                center: !0,
                children: a(Vt, {
                    badgeCode: n
                }, n)
            }, n))
        })
    },
    fJ = s => {
        const {relationships: e=null} = s,
            t = ({type: r}) => {
                const i = e && e.relationshipStatusMap.hasKey(r) ? e.relationshipStatusMap.getValue(r) : null,
                    n = sr.RELATIONSHIP_NAMES[r].toLocaleLowerCase();
                return g(P, {
                    fullWidth: !0,
                    gap: 1,
                    children: [a(P, {
                        center: !0,
                        className: "user-relationship",
                        children: a("i", {
                            className: `nitro-friends-spritesheet icon-${n}`
                        })
                    }), g(M, {
                        grow: !0,
                        gap: 0,
                        children: [g(P, {
                            alignItems: "center",
                            justifyContent: "between",
                            className: "bg-white rounded px-2 py-1 user-relationship",
                            children: [g(y, {
                                underline: !0,
                                pointer: !0,
                                onClick: o => i && i.randomFriendId >= 1 && Fr(i.randomFriendId),
                                children: [(!i || i.friendCount === 0) && f("extendedprofile.add.friends"), i && i.friendCount >= 1 && i.randomFriendName]
                            }), i && i.friendCount >= 1 && a(P, {
                                center: !0,
                                position: "relative",
                                className: "avatar-image-container",
                                children: a(rs, {
                                    figure: i.randomFriendFigure,
                                    headOnly: !0,
                                    direction: 4
                                })
                            })]
                        }), g(y, {
                            small: !0,
                            italics: !0,
                            className: "user-relationship-count",
                            children: [(!i || i.friendCount === 0) && f("extendedprofile.no.friends.in.this.category"), i && i.friendCount > 1 && f(`extendedprofile.relstatus.others.${n}`, ["count"], [(i.friendCount - 1).toString()]), " "]
                        })]
                    })]
                })
            };
        return g(q, {
            children: [a(t, {
                type: sr.HEART
            }), a(t, {
                type: sr.SMILE
            }), a(t, {
                type: sr.BOBBA
            })]
        })
    },
    mJ = s => {
        const {relationships: e=null, friendsCount: t=null} = s;
        return g(M, {
            gap: 1,
            children: [g(y, {
                small: !0,
                children: [a("b", {
                    children: f("extendedprofile.friends.count")
                }), " ", t]
            }), a(y, {
                bold: !0,
                children: f("extendedprofile.relstatus")
            }), a(M, {
                children: a(fJ, {
                    relationships: e
                })
            })]
        })
    },
    EJ = s => {
        const {itsMe: e=null, groups: t=null, onLeaveGroup: r=null, overflow: i="hidden", gap: n=2, ...o} = s,
            [l, c] = _.useState(null),
            [u, h] = _.useState(null);
        return W(ec, d => {
            const m = d.getParser();
            !l || l !== m.id || m.flag || h(m)
        }), _.useEffect(() => {
            l && B(new Gl(l, !1))
        }, [l]), _.useEffect(() => {
            h(null),
            t.length > 0 && c(d => (d === t[0].groupId && B(new Gl(t[0].groupId, !1)), t[0].groupId))
        }, [t]), !t || !t.length ? a(M, {
            center: !0,
            fullHeight: !0,
            children: g(P, {
                justifyContent: "center",
                gap: 2,
                children: [a(k, {
                    className: "no-group-spritesheet image-1"
                }), a(k, {
                    className: "no-group-spritesheet image-2"
                }), a(k, {
                    className: "no-group-spritesheet image-3"
                })]
            })
        }) : g(fe, {
            overflow: i,
            gap: 2,
            ...o,
            children: [a(M, {
                alignItems: "center",
                size: 2,
                overflow: "auto",
                children: a(Mt, {
                    overflow: null,
                    columnCount: 1,
                    columnMinHeight: 50,
                    className: "user-groups-container",
                    children: t.map((d, m) => g($e, {
                        overflow: "unset",
                        itemActive: l === d.groupId,
                        onClick: () => c(d.groupId),
                        className: "p-1",
                        children: [e && a("i", {
                            className: "position-absolute end-0 top-0 z-index-1 icon icon-group-" + (d.favourite ? "favorite" : "not-favorite"),
                            onClick: () => i4(d)
                        }), a(Vt, {
                            badgeCode: d.badgeCode,
                            isGroup: !0
                        })]
                    }, m))
                })
            }), a(M, {
                size: 10,
                overflow: "hidden",
                children: u && a(PP, {
                    groupInformation: u,
                    onClose: r
                })
            })]
        })
    },
    pJ = s => {
        const {userProfile: e=null} = s,
            [t, r] = _.useState(e.requestSent),
            i = e.id === Z().userId,
            n = !t && !i && !e.isMyFriend && !e.requestSent,
            o = () => {
                r(!0),
                B(new Jm(e.username))
            };
        return _.useEffect(() => {
            r(e.requestSent)
        }, [e]), g(P, {
            gap: 2,
            children: [a(M, {
                center: !0,
                className: "avatar-container",
                children: a(rs, {
                    figure: e.figure,
                    direction: 2
                })
            }), g(M, {
                children: [g(M, {
                    gap: 0,
                    children: [a(y, {
                        bold: !0,
                        children: e.username
                    }), g(y, {
                        italics: !0,
                        textBreak: !0,
                        small: !0,
                        children: [e.motto, " "]
                    })]
                }), g(M, {
                    gap: 1,
                    children: [g(y, {
                        children: [a("b", {
                            children: f("extendedprofile.created")
                        }), " ", e.registration]
                    }), g(y, {
                        children: [a("b", {
                            children: f("extendedprofile.last.login")
                        }), " ", _r.format(e.secondsSinceLastVisit, ".ago", 2)]
                    }), g(y, {
                        children: [a("b", {
                            children: f("extendedprofile.achievementscore")
                        }), " ", e.achievementPoints]
                    })]
                }), g(P, {
                    gap: 2,
                    children: [e.isOnline && a("i", {
                        className: "icon icon-pf-online"
                    }), !e.isOnline && a("i", {
                        className: "icon icon-pf-offline"
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [n && a(y, {
                            small: !0,
                            underline: !0,
                            pointer: !0,
                            onClick: o,
                            children: f("extendedprofile.addasafriend")
                        }), !n && g(q, {
                            children: [a("i", {
                                className: "icon icon-pf-tick"
                            }), i && a(y, {
                                bold: !0,
                                children: f("extendedprofile.me")
                            }), e.isMyFriend && a(y, {
                                children: f("extendedprofile.friend")
                            }), (t || e.requestSent) && a(y, {
                                children: f("extendedprofile.friendrequestsent")
                            })]
                        })]
                    })]
                })]
            })]
        })
    },
    IJ = s => {
        const [e, t] = _.useState(null),
            [r, i] = _.useState([]),
            [n, o] = _.useState(null),
            l = () => {
                t(null),
                i([]),
                o(null)
            },
            c = () => {
                !e || e.id !== Z().userId || Fr(e.id)
            };
        return W(Ym, u => {
            const h = u.getParser();
            !e || h.userId !== e.id || i(h.badges)
        }), W(Wm, u => {
            const h = u.getParser();
            !e || h.userId !== e.id || o(h)
        }), W(vA, u => {
            const h = u.getParser();
            let d = !1;
            t(m => (m && m.id && (d = m.id === h.id), h)),
            d || (i([]), o(null)),
            B(new dE(h.id)),
            B(new gE(h.id))
        }), W(UA, u => {
            const h = u.getParser();
            h.userId == (e == null ? void 0 : e.id) && Fr(h.userId)
        }), at(de.SELECTED, u => {
            if (!e || u.category !== V.UNIT)
                return;
            const h = dt().userDataManager.getUserDataByIndex(u.objectId);
            h.type === yt.USER && Fr(h.webID)
        }), e ? g(Se, {
            uniqueKey: "nitro-user-profile",
            theme: "habbo",
            className: "user-profile",
            children: [a(Oe, {
                headerText: f("extendedprofile.caption"),
                onCloseClick: l
            }), g(Ie, {
                overflow: "hidden",
                children: [g(fe, {
                    fullHeight: !1,
                    gap: 2,
                    children: [g(M, {
                        size: 7,
                        gap: 2,
                        className: "user-container pe-2",
                        children: [a(pJ, {
                            userProfile: e
                        }), a(fe, {
                            columnCount: 5,
                            fullHeight: !0,
                            className: "rounded px-2 py-1",
                            style: {
                                background: "#aeaeae"
                            },
                            children: a(gJ, {
                                fullWidth: !0,
                                center: !0,
                                badges: r
                            })
                        })]
                    }), a(M, {
                        size: 5,
                        children: n && a(mJ, {
                            relationships: n,
                            friendsCount: e.friendsCount
                        })
                    })]
                }), a(P, {
                    alignItems: "center",
                    className: "rooms-button-container px-2 py-2",
                    children: g(P, {
                        alignItems: "center",
                        gap: 2,
                        onClick: u => ge(`navigator/search/hotel_view/owner:${e.username}`),
                        children: [a("i", {
                            className: "icon icon-profile-rooms"
                        }), a(y, {
                            bold: !0,
                            underline: !0,
                            pointer: !0,
                            children: f("extendedprofile.rooms")
                        })]
                    })
                }), a(EJ, {
                    fullWidth: !0,
                    itsMe: e.id === Z().userId,
                    groups: e.groups,
                    onLeaveGroup: c
                })]
            })]
        }) : null
    },
    TJ = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(null),
            [n, o] = aP(),
            [l, c] = oP(),
            u = (d, m) => {
                let p = !0;
                const E = r.clone();
                switch (d) {
                case "close_view":
                    t(!1),
                    p = !1;
                    return;
                case "oldchat":
                    E.oldChat = m,
                    B(new lD(E.oldChat));
                    break;
                case "room_invites":
                    E.roomInvites = m,
                    B(new cD(E.roomInvites));
                    break;
                case "camera_follow":
                    E.cameraFollow = m,
                    B(new oD(E.cameraFollow));
                    break;
                case "system_volume":
                    E.volumeSystem = m,
                    E.volumeSystem = Math.max(0, E.volumeSystem),
                    E.volumeSystem = Math.min(100, E.volumeSystem);
                    break;
                case "furni_volume":
                    E.volumeFurni = m,
                    E.volumeFurni = Math.max(0, E.volumeFurni),
                    E.volumeFurni = Math.min(100, E.volumeFurni);
                    break;
                case "trax_volume":
                    E.volumeTrax = m,
                    E.volumeTrax = Math.max(0, E.volumeTrax),
                    E.volumeTrax = Math.min(100, E.volumeTrax);
                    break
                }
                p && i(E),
                yf(E)
            },
            h = d => {
                switch (d) {
                case "volume":
                    B(new uD(Math.round(r.volumeSystem), Math.round(r.volumeFurni), Math.round(r.volumeTrax)));
                    break
                }
            };
        return W(zm, d => {
            const m = d.getParser(),
                p = new Lo;
            p.volumeSystem = m.volumeSystem,
            p.volumeFurni = m.volumeFurni,
            p.volumeTrax = m.volumeTrax,
            p.oldChat = m.oldChat,
            p.roomInvites = m.roomInvites,
            p.cameraFollow = m.cameraFollow,
            p.flags = m.flags,
            p.chatType = m.chatType,
            i(p),
            yf(p)
        }), _.useEffect(() => {
            const d = {
                linkReceived: m => {
                    const p = m.split("/");
                    if (!(p.length < 2))
                        switch (p[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(E => !E);
                            return
                        }
                },
                eventUrlPrefix: "user-settings/"
            };
            return Ts(d), () => Rs(d)
        }, []), _.useEffect(() => {
            r && Ms(r)
        }, [r]), !e || !r ? null : g(Se, {
            uniqueKey: "user-settings",
            className: "user-settings-window",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("widget.memenu.settings.title"),
                onCloseClick: d => u("close_view")
            }), g(Ie, {
                className: "text-black",
                children: [g(M, {
                    gap: 1,
                    children: [g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: r.oldChat,
                            onChange: d => u("oldchat", d.target.checked)
                        }), a(y, {
                            children: f("memenu.settings.chat.prefer.old.chat")
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: r.roomInvites,
                            onChange: d => u("room_invites", d.target.checked)
                        }), a(y, {
                            children: f("memenu.settings.other.ignore.room.invites")
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: r.cameraFollow,
                            onChange: d => u("camera_follow", d.target.checked)
                        }), a(y, {
                            children: f("memenu.settings.other.disable.room.camera.follow")
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: n,
                            onChange: d => o(d.target.checked)
                        }), a(y, {
                            children: f("memenu.settings.other.place.multiple.objects")
                        })]
                    }), g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: l,
                            onChange: d => c(d.target.checked)
                        }), a(y, {
                            children: f("memenu.settings.other.skip.purchase.confirmation")
                        })]
                    })]
                }), g(M, {
                    children: [a(y, {
                        bold: !0,
                        children: f("widget.memenu.settings.volume")
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            children: f("widget.memenu.settings.volume.ui")
                        }), g(P, {
                            alignItems: "center",
                            gap: 1,
                            children: [r.volumeSystem === 0 && a(p_, {
                                className: cr(r.volumeSystem >= 50 && "text-muted", "fa-icon")
                            }), r.volumeSystem > 0 && a(I_, {
                                className: cr(r.volumeSystem >= 50 && "text-muted", "fa-icon")
                            }), a("input", {
                                type: "range",
                                className: "custom-range w-100",
                                min: "0",
                                max: "100",
                                step: "1",
                                id: "volumeSystem",
                                value: r.volumeSystem,
                                onChange: d => u("system_volume", d.target.value),
                                onMouseUp: () => h("volume")
                            }), a(T_, {
                                className: cr(r.volumeSystem < 50 && "text-muted", "fa-icon")
                            })]
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            children: f("widget.memenu.settings.volume.furni")
                        }), g(P, {
                            alignItems: "center",
                            gap: 1,
                            children: [r.volumeFurni === 0 && a(p_, {
                                className: cr(r.volumeFurni >= 50 && "text-muted", "fa-icon")
                            }), r.volumeFurni > 0 && a(I_, {
                                className: cr(r.volumeFurni >= 50 && "text-muted", "fa-icon")
                            }), a("input", {
                                type: "range",
                                className: "custom-range w-100",
                                min: "0",
                                max: "100",
                                step: "1",
                                id: "volumeFurni",
                                value: r.volumeFurni,
                                onChange: d => u("furni_volume", d.target.value),
                                onMouseUp: () => h("volume")
                            }), a(T_, {
                                className: cr(r.volumeFurni < 50 && "text-muted", "fa-icon")
                            })]
                        })]
                    }), g(M, {
                        gap: 1,
                        children: [a(y, {
                            children: f("widget.memenu.settings.volume.trax")
                        }), g(P, {
                            alignItems: "center",
                            gap: 1,
                            children: [r.volumeTrax === 0 && a(p_, {
                                className: cr(r.volumeTrax >= 50 && "text-muted", "fa-icon")
                            }), r.volumeTrax > 0 && a(I_, {
                                className: cr(r.volumeTrax >= 50 && "text-muted", "fa-icon")
                            }), a("input", {
                                type: "range",
                                className: "custom-range w-100",
                                min: "0",
                                max: "100",
                                step: "1",
                                id: "volumeTrax",
                                value: r.volumeTrax,
                                onChange: d => u("trax_volume", d.target.value),
                                onMouseUp: () => h("volume")
                            }), a(T_, {
                                className: cr(r.volumeTrax < 50 && "text-muted", "fa-icon")
                            })]
                        })]
                    })]
                })]
            })]
        })
    },
    RJ = s => {
        const {trigger: e=null, furniIds: t=[]} = st();
        return g(M, {
            gap: 1,
            children: [a(y, {
                bold: !0,
                children: f("wiredfurni.pickfurnis.caption", ["count", "limit"], [t.length.toString(), e.maximumItemSelectionCount.toString()])
            }), a(y, {
                small: !0,
                children: f("wiredfurni.pickfurnis.desc")
            })]
        })
    },
    ip = s => {
        const {wiredType: e="", requiresFurni: t=Re.STUFF_SELECTION_OPTION_NONE, save: r=null, validate: i=null, children: n=null, hasSpecialInput: o=!1} = s,
            [l, c] = _.useState(null),
            [u, h] = _.useState(null),
            [d, m] = _.useState(!1),
            {trigger: p=null, setTrigger: E=null, setIntParams: T=null, setStringParam: I=null, setFurniIds: S=null, setAllowsFurni: A=null, saveWired: N=null} = st(),
            b = () => E(null),
            v = () => {
                i && !i() || (r && r(), m(!0))
            };
        return _.useEffect(() => {
            d && (N(), m(!1))
        }, [d, N]), _.useEffect(() => {
            if (!p)
                return;
            const D = p.spriteId || -1,
                G = Z().getFloorItemData(D);
            G ? (c(G.name), h(G.description)) : (c("NAME: " + D), h("NAME: " + D)),
            o && (T(p.intData), I(p.stringData)),
            t > Re.STUFF_SELECTION_OPTION_NONE && S(x => (x && x.length && Pl.clearSelectionShaderFromFurni(x), p.selectedItems && p.selectedItems.length ? (Pl.applySelectionShaderToFurni(p.selectedItems), p.selectedItems) : [])),
            A(t)
        }, [p, o, t, T, I, S, A]), g(Se, {
            uniqueKey: "nitro-wired",
            className: "nitro-wired",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("wiredfurni.title"),
                onCloseClick: b
            }), g(Ie, {
                children: [g(M, {
                    gap: 1,
                    children: [g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("i", {
                            className: `icon icon-wired-${e}`
                        }), a(y, {
                            bold: !0,
                            children: l
                        })]
                    }), a(y, {
                        small: !0,
                        children: u
                    })]
                }), !!n && a("hr", {
                    className: "m-0 bg-dark"
                }), n, t > Re.STUFF_SELECTION_OPTION_NONE && g(q, {
                    children: [a("hr", {
                        className: "m-0 bg-dark"
                    }), a(RJ, {})]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a(H, {
                        fullWidth: !0,
                        variant: "success",
                        onClick: v,
                        children: f("wiredfurni.ready")
                    }), a(H, {
                        fullWidth: !0,
                        variant: "secondary",
                        onClick: b,
                        children: f("cancel")
                    })]
                })]
            })]
        })
    },
    gs = s => {
        const {requiresFurni: e=Re.STUFF_SELECTION_OPTION_NONE, save: t=null, hasSpecialInput: r=!1, children: i=null} = s,
            {trigger: n=null, actionDelay: o=0, setActionDelay: l=null} = st();
        return _.useEffect(() => {
            l(n.delayInPulses)
        }, [n, l]), g(ip, {
            wiredType: "action",
            requiresFurni: e,
            save: t,
            hasSpecialInput: r,
            children: [i, !!i && a("hr", {
                className: "m-0 bg-dark"
            }), g(M, {
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.delay", ["seconds"], [Du(o)])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 0,
                    max: 20,
                    value: o,
                    onChange: c => l(c)
                })]
            })]
        })
    },
    OJ = "hd-180-1.ch-210-66.lg-270-82.sh-290-81",
    SJ = s => {
        const [e, t] = _.useState(""),
            [r, i] = _.useState(""),
            {trigger: n=null, setStringParam: o=null} = st(),
            l = () => o(e + Xl + r);
        return _.useEffect(() => {
            const c = n.stringData.split(Xl);
            c.length > 0 && t(c[0]),
            c.length > 1 && i(c[1].length > 0 ? c[1] : OJ)
        }, [n]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: l,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.bot.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: 32,
                    value: e,
                    onChange: c => t(c.target.value)
                })]
            }), g(P, {
                center: !0,
                children: [a(rs, {
                    figure: r,
                    direction: 4
                }), a(H, {
                    onClick: c => i(Z().figure),
                    children: f("wiredfurni.params.capture.figure")
                })]
            })]
        })
    },
    CJ = s => {
        const [e, t] = _.useState(""),
            [r, i] = _.useState(-1),
            {trigger: n=null, setStringParam: o=null, setIntParams: l=null} = st(),
            c = () => {
                o(e),
                l([r])
            };
        return _.useEffect(() => {
            t(n.stringData),
            i(n.intData.length > 0 ? n.intData[0] : 0)
        }, [n]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: c,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.bot.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: 32,
                    value: e,
                    onChange: u => t(u.target.value)
                })]
            }), g(M, {
                gap: 1,
                children: [g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "followMode",
                        id: "followMode1",
                        checked: r === 1,
                        onChange: u => i(1)
                    }), a(y, {
                        children: f("wiredfurni.params.start.following")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "followMode",
                        id: "followMode2",
                        checked: r === 0,
                        onChange: u => i(0)
                    }), a(y, {
                        children: f("wiredfurni.params.stop.following")
                    })]
                })]
            })]
        })
    },
    AJ = [2, 5, 7, 8, 9, 10, 27],
    NJ = s => {
        const [e, t] = _.useState(""),
            [r, i] = _.useState(-1),
            {trigger: n=null, setStringParam: o=null, setIntParams: l=null} = st(),
            c = () => {
                o(e),
                l([r])
            };
        return _.useEffect(() => {
            t(n.stringData),
            i(n.intData.length > 0 ? n.intData[0] : 0)
        }, [n]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: c,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.bot.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: 32,
                    value: e,
                    onChange: u => t(u.target.value)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.handitem")
                }), g("select", {
                    className: "form-select form-select-sm",
                    value: r,
                    onChange: u => i(parseInt(u.target.value)),
                    children: [a("option", {
                        value: "0",
                        children: "------"
                    }), AJ.map(u => a("option", {
                        value: u,
                        children: f(`handitem${u}`)
                    }, u))]
                })]
            })]
        })
    },
    yJ = s => {
        const [e, t] = _.useState(""),
            {trigger: r=null, setStringParam: i=null} = st(),
            n = () => i(e);
        return _.useEffect(() => {
            t(r.stringData)
        }, [r]), a(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.bot.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: 32,
                    value: e,
                    onChange: o => t(o.target.value)
                })]
            })
        })
    },
    MJ = s => {
        const [e, t] = _.useState(""),
            [r, i] = _.useState(""),
            [n, o] = _.useState(-1),
            {trigger: l=null, setStringParam: c=null, setIntParams: u=null} = st(),
            h = () => {
                c(e + Xl + r),
                u([n])
            };
        return _.useEffect(() => {
            const d = l.stringData.split(Xl);
            d.length > 0 && t(d[0]),
            d.length > 1 && i(d[1].length > 0 ? d[1] : ""),
            o(l.intData.length > 0 ? l.intData[0] : 0)
        }, [l]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: h,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.bot.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: 32,
                    value: e,
                    onChange: d => t(d.target.value)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.message")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: oe("wired.action.bot.talk.to.avatar.max.length", 64),
                    value: r,
                    onChange: d => i(d.target.value)
                })]
            }), g(M, {
                gap: 1,
                children: [g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "talkMode",
                        id: "talkMode1",
                        checked: n === 0,
                        onChange: d => o(0)
                    }), a(y, {
                        children: f("wiredfurni.params.talk")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "talkMode",
                        id: "talkMode2",
                        checked: n === 1,
                        onChange: d => o(1)
                    }), a(y, {
                        children: f("wiredfurni.params.whisper")
                    })]
                })]
            })]
        })
    },
    bJ = s => {
        const [e, t] = _.useState(""),
            [r, i] = _.useState(""),
            [n, o] = _.useState(-1),
            {trigger: l=null, setStringParam: c=null, setIntParams: u=null} = st(),
            h = () => {
                c(e + Xl + r),
                u([n])
            };
        return _.useEffect(() => {
            const d = l.stringData.split(Xl);
            d.length > 0 && t(d[0]),
            d.length > 1 && i(d[1].length > 0 ? d[1] : ""),
            o(l.intData.length > 0 ? l.intData[0] : 0)
        }, [l]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: h,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.bot.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: 32,
                    value: e,
                    onChange: d => t(d.target.value)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.message")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: oe("wired.action.bot.talk.max.length", 64),
                    value: r,
                    onChange: d => i(d.target.value)
                })]
            }), g(M, {
                gap: 1,
                children: [g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "talkMode",
                        id: "talkMode1",
                        checked: n === 0,
                        onChange: d => o(0)
                    }), a(y, {
                        children: f("wiredfurni.params.talk")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "talkMode",
                        id: "talkMode2",
                        checked: n === 1,
                        onChange: d => o(1)
                    }), a(y, {
                        children: f("wiredfurni.params.shout")
                    })]
                })]
            })]
        })
    },
    DJ = s => {
        const [e, t] = _.useState(""),
            {trigger: r=null, setStringParam: i=null} = st(),
            n = () => i(e);
        return _.useEffect(() => {
            t(r.stringData)
        }, [r]), a(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.bot.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: 32,
                    value: e,
                    onChange: o => t(o.target.value)
                })]
            })
        })
    },
    vJ = s => a(gs, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT,
        hasSpecialInput: !1,
        save: null
    }),
    PJ = s => a(gs, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT,
        hasSpecialInput: !1,
        save: null
    }),
    LJ = s => {
        const [e, t] = _.useState(""),
            {trigger: r=null, setStringParam: i=null} = st(),
            n = () => i(e);
        return _.useEffect(() => {
            t(r.stringData)
        }, [r]), a(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.message")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: e,
                    onChange: o => t(o.target.value),
                    maxLength: oe("wired.action.chat.max.length", 100)
                })]
            })
        })
    },
    UJ = s => a(gs, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT,
        hasSpecialInput: !1,
        save: null
    }),
    wJ = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(1),
            [n, o] = _.useState(!1),
            [l, c] = _.useState(1),
            [u, h] = _.useState(1),
            [d, m] = _.useState([]),
            {trigger: p=null, setIntParams: E=null, setStringParam: T=null} = st(),
            I = () => m(b => [...b, {
                isBadge: !1,
                itemCode: "",
                probability: null
            }]),
            S = b => {
                m(v => {
                    const D = Array.from(v);
                    return D.splice(b, 1), D
                })
            },
            A = (b, v, D, G) => {
                const x = Array.from(d),
                    F = x[b];
                F && (F.isBadge = v, F.itemCode = D, F.probability = G, m(x))
            },
            N = () => {
                let b = [];
                for (const v of d) {
                    if (!v.itemCode)
                        continue;
                    const D = [v.isBadge ? "0" : "1", v.itemCode, v.probability.toString()];
                    b.push(D.join(","))
                }
                b.length > 0 && (T(b.join(";")), E([r, n ? 1 : 0, l, u]))
            };
        return _.useEffect(() => {
            const b = [];
            if (p.stringData.length > 0 && p.stringData.includes(";")) {
                const v = p.stringData.split(";");
                for (const D of v) {
                    const G = D.split(",");
                    G.length === 3 && b.push({
                        isBadge: G[0] === "0",
                        itemCode: G[1],
                        probability: Number(G[2])
                    })
                }
            }
            b.length === 0 && b.push({
                isBadge: !1,
                itemCode: "",
                probability: null
            }),
            i(p.intData.length > 0 ? p.intData[0] : 0),
            o(p.intData.length > 1 ? p.intData[1] === 1 : !1),
            c(p.intData.length > 2 ? p.intData[2] : 0),
            h(p.intData.length > 3 ? p.intData[3] : 0),
            t(p.intData.length > 3 ? p.intData[3] > 0 : !1),
            m(b)
        }, [p]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: N,
            children: [g(P, {
                alignItems: "center",
                gap: 1,
                children: [a("input", {
                    className: "form-check-input",
                    type: "checkbox",
                    id: "limitEnabled",
                    onChange: b => t(b.target.checked)
                }), a(y, {
                    children: f("wiredfurni.params.prizelimit", ["amount"], [e ? l.toString() : ""])
                })]
            }), !e && a(y, {
                center: !0,
                small: !0,
                className: "bg-muted rounded p-1",
                children: "Reward limit not set. Make sure rewards are badges or non-tradeable items."
            }), e && a(Xs, {
                className: "nitro-slider",
                min: 1,
                max: 1e3,
                value: l,
                onChange: b => c(b)
            }), a("hr", {
                className: "m-0 bg-dark"
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: "How often can a user be rewarded?"
                }), g(P, {
                    gap: 1,
                    children: [g("select", {
                        className: "form-select form-select-sm w-100",
                        value: r,
                        onChange: b => i(Number(b.target.value)),
                        children: [a("option", {
                            value: "0",
                            children: "Once"
                        }), g("option", {
                            value: "3",
                            children: ["Once every ", u, " minutes"]
                        }), g("option", {
                            value: "2",
                            children: ["Once every ", u, " hours"]
                        }), g("option", {
                            value: "1",
                            children: ["Once every ", u, " days"]
                        })]
                    }), r > 0 && a("input", {
                        type: "number",
                        className: "form-control form-control-sm",
                        value: u,
                        onChange: b => h(Number(b.target.value))
                    })]
                })]
            }), a("hr", {
                className: "m-0 bg-dark"
            }), g(P, {
                alignItems: "center",
                gap: 1,
                children: [a("input", {
                    className: "form-check-input",
                    type: "checkbox",
                    id: "uniqueRewards",
                    checked: n,
                    onChange: b => o(b.target.checked)
                }), a(y, {
                    children: "Unique rewards"
                })]
            }), a(y, {
                center: !0,
                small: !0,
                className: "bg-muted rounded p-1",
                children: "If checked each reward will be given once to each user. This will disable the probabilities option."
            }), a("hr", {
                className: "m-0 bg-dark"
            }), g(P, {
                justifyContent: "between",
                alignItems: "center",
                children: [a(y, {
                    bold: !0,
                    children: "Rewards"
                }), a(H, {
                    variant: "success",
                    onClick: I,
                    children: a(tu, {
                        className: "fa-icon"
                    })
                })]
            }), a(M, {
                gap: 1,
                children: d && d.map((b, v) => g(P, {
                    gap: 1,
                    children: [g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "checkbox",
                            checked: b.isBadge,
                            onChange: D => A(v, D.target.checked, b.itemCode, b.probability)
                        }), a(y, {
                            small: !0,
                            children: "Badge?"
                        })]
                    }), a("input", {
                        type: "text",
                        className: "form-control form-control-sm",
                        value: b.itemCode,
                        onChange: D => A(v, b.isBadge, D.target.value, b.probability),
                        placeholder: "Item Code"
                    }), a("input", {
                        type: "number",
                        className: "form-control form-control-sm",
                        value: b.probability,
                        onChange: D => A(v, b.isBadge, b.itemCode, Number(D.target.value)),
                        placeholder: "Probability"
                    }), v > 0 && a(H, {
                        variant: "danger",
                        onClick: D => S(v),
                        children: a(Id, {
                            className: "fa-icon"
                        })
                    })]
                }, v))
            })]
        })
    },
    FJ = s => {
        const [e, t] = _.useState(1),
            [r, i] = _.useState(1),
            [n, o] = _.useState(1),
            {trigger: l=null, setIntParams: c=null} = st(),
            u = () => c([e, r, n]);
        return _.useEffect(() => {
            l.intData.length >= 2 ? (t(l.intData[0]), i(l.intData[1]), o(l.intData[2])) : (t(1), i(1), o(1))
        }, [l]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: u,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.setpoints", ["points"], [e.toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 100,
                    value: e,
                    onChange: h => t(h)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.settimesingame", ["times"], [r.toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 10,
                    value: r,
                    onChange: h => i(h)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.team")
                }), [1, 2, 3, 4].map(h => g(P, {
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "selectedTeam",
                        id: `selectedTeam${h}`,
                        checked: n === h,
                        onChange: d => o(h)
                    }), a(y, {
                        children: f("wiredfurni.params.team." + h)
                    })]
                }, h))]
            })]
        })
    },
    xJ = s => {
        const [e, t] = _.useState(1),
            [r, i] = _.useState(1),
            {trigger: n=null, setIntParams: o=null} = st(),
            l = () => o([e, r]);
        return _.useEffect(() => {
            n.intData.length >= 2 ? (t(n.intData[0]), i(n.intData[1])) : (t(1), i(1))
        }, [n]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: l,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.setpoints", ["points"], [e.toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 100,
                    value: e,
                    onChange: c => t(c)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.settimesingame", ["times"], [r.toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 10,
                    value: r,
                    onChange: c => i(c)
                })]
            })]
        })
    },
    GJ = s => {
        const [e, t] = _.useState(-1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.team")
                }), [1, 2, 3, 4].map(o => g(P, {
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "selectedTeam",
                        id: `selectedTeam${o}`,
                        checked: e === o,
                        onChange: l => t(o)
                    }), a(y, {
                        children: f(`wiredfurni.params.team.${o}`)
                    })]
                }, o))]
            })
        })
    },
    BJ = s => {
        const [e, t] = _.useState(""),
            {trigger: r=null, setStringParam: i=null} = st(),
            n = () => i(e);
        return _.useEffect(() => {
            t(r.stringData)
        }, [r]), a(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.message")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: e,
                    onChange: o => t(o.target.value),
                    maxLength: oe("wired.action.kick.from.room.max.length", 100)
                })]
            })
        })
    },
    kJ = s => a(gs, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
        hasSpecialInput: !1,
        save: null
    }),
    VJ = [{
        value: 0,
        icon: "ne"
    }, {
        value: 2,
        icon: "se"
    }, {
        value: 4,
        icon: "sw"
    }, {
        value: 6,
        icon: "nw"
    }],
    HJ = [0, 1, 2, 3, 4, 5, 6],
    jJ = s => {
        const [e, t] = _.useState(-1),
            [r, i] = _.useState(-1),
            {trigger: n=null, setIntParams: o=null} = st(),
            l = () => o([e, r]);
        return _.useEffect(() => {
            n.intData.length >= 2 ? (t(n.intData[0]), i(n.intData[1])) : (t(-1), i(-1))
        }, [n]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT,
            hasSpecialInput: !0,
            save: l,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.startdir")
                }), a(P, {
                    gap: 1,
                    children: VJ.map(c => g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "radio",
                            name: "movement",
                            id: `movement${c.value}`,
                            checked: e === c.value,
                            onChange: u => t(c.value)
                        }), a(y, {
                            children: a("i", {
                                className: `icon icon-${c.icon}`
                            })
                        })]
                    }, c.value))
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.turn")
                }), HJ.map(c => g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "rotation",
                        id: `rotation${c}`,
                        checked: r === c,
                        onChange: u => i(c)
                    }), a(y, {
                        children: f(`wiredfurni.params.turn.${c}`)
                    })]
                }, c))]
            })]
        })
    },
    WJ = [{
        value: 0,
        icon: "ne"
    }, {
        value: 2,
        icon: "se"
    }, {
        value: 4,
        icon: "sw"
    }, {
        value: 6,
        icon: "nw"
    }],
    YJ = s => {
        const [e, t] = _.useState(-1),
            [r, i] = _.useState(-1),
            {trigger: n=null, setIntParams: o=null} = st(),
            l = () => o([r, e]);
        return _.useEffect(() => {
            n.intData.length >= 2 ? (t(n.intData[1]), i(n.intData[0])) : (t(-1), i(-1))
        }, [n]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_OR_BY_TYPE,
            hasSpecialInput: !0,
            save: l,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.emptytiles", ["tiles"], [e.toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 5,
                    value: e,
                    onChange: c => t(c)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.startdir")
                }), a(P, {
                    gap: 1,
                    children: WJ.map(c => g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "radio",
                            name: "movement",
                            id: `movement${c.value}`,
                            checked: r === c.value,
                            onChange: u => i(c.value)
                        }), a(y, {
                            children: a("i", {
                                className: `icon icon-${c.icon}`
                            })
                        })]
                    }, c.value))
                })]
            })]
        })
    },
    zJ = [{
        value: 4,
        icon: "ne"
    }, {
        value: 5,
        icon: "se"
    }, {
        value: 6,
        icon: "sw"
    }, {
        value: 7,
        icon: "nw"
    }, {
        value: 2,
        icon: "mv-2"
    }, {
        value: 3,
        icon: "mv-3"
    }, {
        value: 1,
        icon: "mv-1"
    }],
    KJ = [0, 1, 2, 3],
    qJ = s => {
        const [e, t] = _.useState(-1),
            [r, i] = _.useState(-1),
            {trigger: n=null, setIntParams: o=null} = st(),
            l = () => o([e, r]);
        return _.useEffect(() => {
            n.intData.length >= 2 ? (t(n.intData[0]), i(n.intData[1])) : (t(-1), i(-1))
        }, [n]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT,
            hasSpecialInput: !0,
            save: l,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.movefurni")
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "selectedTeam",
                        id: "movement0",
                        checked: e === 0,
                        onChange: c => t(0)
                    }), a(y, {
                        children: f("wiredfurni.params.movefurni.0")
                    })]
                }), g(P, {
                    gap: 1,
                    children: [zJ.map(c => g(P, {
                        alignItems: "center",
                        gap: 1,
                        children: [a("input", {
                            className: "form-check-input",
                            type: "radio",
                            name: "movement",
                            id: `movement${c.value}`,
                            checked: e === c.value,
                            onChange: u => t(c.value)
                        }), a("i", {
                            className: `icon icon-${c.icon}`
                        })]
                    }, c.value)), a("div", {
                        className: "col"
                    })]
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.rotatefurni")
                }), KJ.map(c => g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "rotation",
                        id: `rotation${c}`,
                        checked: r === c,
                        onChange: u => i(c)
                    }), g(y, {
                        children: [[1, 2].includes(c) && a("i", {
                            className: `icon icon-rot-${c}`
                        }), f(`wiredfurni.params.rotatefurni.${c}`)]
                    })]
                }, c))]
            })]
        })
    },
    XJ = s => {
        const [e, t] = _.useState(-1),
            [r, i] = _.useState(""),
            {trigger: n=null, setIntParams: o=null, setStringParam: l=null} = st(),
            c = () => {
                o([e]),
                l(r)
            };
        return _.useEffect(() => {
            t(n.intData.length > 0 ? n.intData[0] : 0),
            i(n.stringData)
        }, [n]), g(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: c,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.length.minutes", ["minutes"], [e.toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 10,
                    value: e,
                    onChange: u => t(u)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.message")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: r,
                    onChange: u => i(u.target.value),
                    maxLength: oe("wired.action.mute.user.max.length", 100)
                })]
            })]
        })
    },
    QJ = s => a(gs, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
        hasSpecialInput: !1,
        save: null
    }),
    JJ = s => {
        const [e, t] = _.useState(0),
            [r, i] = _.useState(0),
            [n, o] = _.useState(0),
            {trigger: l=null, setIntParams: c=null} = st(),
            u = () => c([e, r, n]);
        return _.useEffect(() => {
            t(l.getBoolean(0) ? 1 : 0),
            i(l.getBoolean(1) ? 1 : 0),
            o(l.getBoolean(2) ? 1 : 0)
        }, [l]), a(gs, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID,
            hasSpecialInput: !0,
            save: u,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.conditions")
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "checkbox",
                        id: "stateFlag",
                        checked: !!e,
                        onChange: h => t(h.target.checked ? 1 : 0)
                    }), a(y, {
                        children: f("wiredfurni.params.condition.state")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "checkbox",
                        id: "directionFlag",
                        checked: !!r,
                        onChange: h => i(h.target.checked ? 1 : 0)
                    }), a(y, {
                        children: f("wiredfurni.params.condition.direction")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "checkbox",
                        id: "positionFlag",
                        checked: !!n,
                        onChange: h => o(h.target.checked ? 1 : 0)
                    }), a(y, {
                        children: f("wiredfurni.params.condition.position")
                    })]
                })]
            })
        })
    },
    ZJ = s => a(gs, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT,
        hasSpecialInput: !1,
        save: null
    }),
    $J = s => a(gs, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT,
        hasSpecialInput: !1,
        save: null
    }),
    eZ = s => {
        switch (s) {
        case je.BOT_CHANGE_FIGURE:
            return a(SJ, {});
        case je.BOT_FOLLOW_AVATAR:
            return a(CJ, {});
        case je.BOT_GIVE_HAND_ITEM:
            return a(NJ, {});
        case je.BOT_MOVE:
            return a(yJ, {});
        case je.BOT_TALK:
            return a(bJ, {});
        case je.BOT_TALK_DIRECT_TO_AVTR:
            return a(MJ, {});
        case je.BOT_TELEPORT:
            return a(DJ, {});
        case je.CALL_ANOTHER_STACK:
            return a(vJ, {});
        case je.CHASE:
            return a(PJ, {});
        case je.CHAT:
            return a(LJ, {});
        case je.FLEE:
            return a(UJ, {});
        case je.GIVE_REWARD:
            return a(wJ, {});
        case je.GIVE_SCORE:
            return a(xJ, {});
        case je.GIVE_SCORE_TO_PREDEFINED_TEAM:
            return a(FJ, {});
        case je.JOIN_TEAM:
            return a(GJ, {});
        case je.KICK_FROM_ROOM:
            return a(BJ, {});
        case je.LEAVE_TEAM:
            return a(kJ, {});
        case je.MOVE_FURNI:
            return a(qJ, {});
        case je.MOVE_AND_ROTATE_FURNI:
            return a(jJ, {});
        case je.MOVE_FURNI_TO:
            return a(YJ, {});
        case je.MUTE_USER:
            return a(XJ, {});
        case je.RESET:
            return a(QJ, {});
        case je.SET_FURNI_STATE:
            return a(JJ, {});
        case je.TELEPORT:
            return a(ZJ, {});
        case je.TOGGLE_FURNI_STATE:
            return a($J, {})
        }
        return null
    },
    Or = s => {
        const {requiresFurni: e=Re.STUFF_SELECTION_OPTION_NONE, save: t=null, hasSpecialInput: r=!1, children: i=null} = s;
        return a(ip, {
            wiredType: "condition",
            requiresFurni: e,
            hasSpecialInput: r,
            save: () => t && t(),
            children: i
        })
    },
    tZ = [2, 5, 7, 8, 9, 10, 27],
    sZ = s => {
        const [e, t] = _.useState(-1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.handitem")
                }), a("select", {
                    className: "form-select form-select-sm",
                    value: e,
                    onChange: o => t(parseInt(o.target.value)),
                    children: tZ.map(o => a("option", {
                        value: o,
                        children: f(`handitem${o}`)
                    }, o))
                })]
            })
        })
    },
    rZ = s => a(Or, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
        hasSpecialInput: !1,
        save: null
    }),
    iZ = s => a(Or, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID,
        hasSpecialInput: !1,
        save: null
    }),
    nZ = [1, 2, 3, 4],
    aZ = s => {
        const [e, t] = _.useState(-1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.team")
                }), nZ.map(o => g(P, {
                    gap: 1,
                    alignItems: "center",
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "selectedTeam",
                        id: `selectedTeam${o}`,
                        checked: e === o,
                        onChange: l => t(o)
                    }), a(y, {
                        children: f(`wiredfurni.params.team.${o}`)
                    })]
                }, o))]
            })
        })
    },
    oZ = s => {
        const [e, t] = _.useState(""),
            {trigger: r=null, setStringParam: i=null} = st(),
            n = () => i(e);
        return _.useEffect(() => {
            t(r.stringData)
        }, [r]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.badgecode")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: e,
                    onChange: o => t(o.target.value)
                })]
            })
        })
    },
    lZ = s => {
        const [e, t] = _.useState(-1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t((r == null ? void 0 : r.stringData) !== "" ? parseInt(r == null ? void 0 : r.stringData) : 0)
        }, [r]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.tooltip.effectid")
                }), a("input", {
                    type: "number",
                    className: "form-control form-control-sm",
                    value: e,
                    onChange: o => t(parseInt(o.target.value))
                })]
            })
        })
    },
    cZ = s => {
        const [e, t] = _.useState(""),
            [r, i] = _.useState(""),
            {trigger: n=null, setIntParams: o=null} = st(),
            l = () => {
                let c = 0,
                    u = 0;
                const h = new Date(e),
                    d = new Date(r);
                h && d && (c = h.getTime() / 1e3, u = d.getTime() / 1e3),
                o([c, u])
            };
        return _.useEffect(() => {
            if (n.intData.length >= 2) {
                let c = new Date,
                    u = new Date;
                n.intData[0] > 0 && (c = new Date(n.intData[0] * 1e3)),
                n.intData[1] > 0 && (u = new Date(n.intData[1] * 1e3)),
                t(Yp(c)),
                i(Yp(u))
            }
        }, [n]), g(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: l,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.startdate")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: e,
                    onChange: c => t(c.target.value)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.enddate")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: r,
                    onChange: c => i(c.target.value)
                })]
            })]
        })
    },
    uZ = s => a(Or, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID,
        hasSpecialInput: !1,
        save: null
    }),
    hZ = s => {
        const [e, t] = _.useState(-1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.requireall")
                }), [0, 1].map(o => g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "requireAll",
                        id: `requireAll${o}`,
                        checked: e === o,
                        onChange: l => t(o)
                    }), a(y, {
                        children: f("wiredfurni.params.requireall." + o)
                    })]
                }, o))]
            })
        })
    },
    dZ = s => {
        const [e, t] = _.useState(-1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.not_requireall")
                }), [0, 1].map(o => g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "requireAll",
                        id: `requireAll${o}`,
                        checked: e === o,
                        onChange: l => t(o)
                    }), a(y, {
                        children: f(`wiredfurni.params.not_requireall.${o}`)
                    })]
                }, o))]
            })
        })
    },
    _Z = s => a(Or, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_OR_BY_TYPE,
        hasSpecialInput: !1,
        save: null
    }),
    gZ = s => {
        const [e, t] = _.useState(0),
            [r, i] = _.useState(0),
            [n, o] = _.useState(0),
            {trigger: l=null, setIntParams: c=null} = st(),
            u = () => c([e, r, n]);
        return _.useEffect(() => {
            t(l.getBoolean(0) ? 1 : 0),
            i(l.getBoolean(1) ? 1 : 0),
            o(l.getBoolean(2) ? 1 : 0)
        }, [l]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID,
            hasSpecialInput: !0,
            save: u,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.conditions")
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "checkbox",
                        id: "stateFlag",
                        checked: !!e,
                        onChange: h => t(h.target.checked ? 1 : 0)
                    }), a(y, {
                        children: f("wiredfurni.params.condition.state")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "checkbox",
                        id: "directionFlag",
                        checked: !!r,
                        onChange: h => i(h.target.checked ? 1 : 0)
                    }), a(y, {
                        children: f("wiredfurni.params.condition.direction")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "checkbox",
                        id: "positionFlag",
                        checked: !!n,
                        onChange: h => o(h.target.checked ? 1 : 0)
                    }), a(y, {
                        children: f("wiredfurni.params.condition.position")
                    })]
                })]
            })
        })
    },
    fZ = s => {
        const [e, t] = _.useState(-1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.allowbefore", ["seconds"], [Du(e)])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 1200,
                    value: e,
                    onChange: o => t(o)
                })]
            })
        })
    },
    mZ = s => {
        const [e, t] = _.useState(-1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.allowafter", ["seconds"], [Du(e)])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 1200,
                    value: e,
                    onChange: o => t(o)
                })]
            })
        })
    },
    EZ = s => {
        const [e, t] = _.useState(1),
            [r, i] = _.useState(1),
            {trigger: n=null, setIntParams: o=null} = st(),
            l = () => o([e, r]);
        return _.useEffect(() => {
            n.intData.length >= 2 ? (t(n.intData[0]), i(n.intData[1])) : (t(1), i(1))
        }, [n]), g(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: l,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.usercountmin", ["value"], [e.toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 50,
                    value: e,
                    onChange: c => t(c)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.usercountmax", ["value"], [r.toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 50,
                    value: r,
                    onChange: c => i(c)
                })]
            })]
        })
    },
    pZ = [{
        key: "wave",
        value: 0
    }, {
        key: "blow",
        value: 1
    }, {
        key: "laugh",
        value: 2
    }, {
        key: "respect",
        value: 3
    }, {
        key: "awake",
        value: 4
    }, {
        key: "sleep",
        value: 5
    }, {
        key: "sit",
        value: 6
    }, {
        key: "stand",
        value: 7
    }, {
        key: "lay",
        value: 8
    }, {
        key: "sign",
        value: 10
    }, {
        key: "dance",
        value: 11
    }],
    IZ = s => {
        const [e, t] = _.useState(-1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Or, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.action")
                }), a("select", {
                    className: "form-select form-select-sm",
                    value: e,
                    onChange: o => t(parseInt(o.target.value)),
                    children: pZ.map(o => a("option", {
                        value: o.value,
                        children: f(o.key)
                    }, o.value))
                })]
            })
        })
    },
    TZ = s => {
        switch (s) {
        case ke.ACTOR_HAS_HANDITEM:
            return a(sZ, {});
        case ke.ACTOR_IS_GROUP_MEMBER:
        case ke.NOT_ACTOR_IN_GROUP:
            return a(rZ, {});
        case ke.ACTOR_IS_ON_FURNI:
        case ke.NOT_ACTOR_ON_FURNI:
            return a(iZ, {});
        case ke.ACTOR_IS_IN_TEAM:
        case ke.NOT_ACTOR_IN_TEAM:
            return a(aZ, {});
        case ke.ACTOR_IS_WEARING_BADGE:
        case ke.NOT_ACTOR_WEARS_BADGE:
            return a(oZ, {});
        case ke.ACTOR_IS_WEARING_EFFECT:
        case ke.NOT_ACTOR_WEARING_EFFECT:
            return a(lZ, {});
        case ke.DATE_RANGE_ACTIVE:
            return a(cZ, {});
        case ke.FURNIS_HAVE_AVATARS:
        case ke.FURNI_NOT_HAVE_HABBO:
            return a(uZ, {});
        case ke.HAS_STACKED_FURNIS:
            return a(hZ, {});
        case ke.NOT_HAS_STACKED_FURNIS:
            return a(dZ, {});
        case ke.STUFF_TYPE_MATCHES:
        case ke.NOT_FURNI_IS_OF_TYPE:
            return a(_Z, {});
        case ke.STATES_MATCH:
        case ke.NOT_STATES_MATCH:
            return a(gZ, {});
        case ke.TIME_ELAPSED_LESS:
            return a(fZ, {});
        case ke.TIME_ELAPSED_MORE:
            return a(mZ, {});
        case ke.USER_COUNT_IN:
        case ke.NOT_USER_COUNT_IN:
            return a(EZ, {});
        case ke.PERFORMING_ACTION:
            return a(IZ, {})
        }
        return null
    },
    Sr = s => {
        const {requiresFurni: e=Re.STUFF_SELECTION_OPTION_NONE, save: t=null, hasSpecialInput: r=!1, children: i=null} = s;
        return a(ip, {
            wiredType: "trigger",
            requiresFurni: e,
            hasSpecialInput: r,
            save: () => t && t(),
            children: i
        })
    },
    RZ = s => {
        const [e, t] = _.useState(""),
            [r, i] = _.useState(0),
            {trigger: n=null, setStringParam: o=null} = st(),
            l = () => o(r === 1 ? e : "");
        return _.useEffect(() => {
            t(n.stringData),
            i(n.stringData ? 1 : 0)
        }, [n]), a(Sr, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: l,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.picktriggerer")
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "avatarMode",
                        id: "avatarMode0",
                        checked: r === 0,
                        onChange: c => i(0)
                    }), a(y, {
                        children: f("wiredfurni.params.anyavatar")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "avatarMode",
                        id: "avatarMode1",
                        checked: r === 1,
                        onChange: c => i(1)
                    }), a(y, {
                        children: f("wiredfurni.params.certainavatar")
                    })]
                }), r === 1 && a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: e,
                    onChange: c => t(c.target.value)
                })]
            })
        })
    },
    OZ = s => {
        const [e, t] = _.useState(""),
            [r, i] = _.useState(-1),
            {trigger: n=null, setStringParam: o=null, setIntParams: l=null} = st(),
            c = () => {
                o(e),
                l([r])
            };
        return _.useEffect(() => {
            t(n.stringData),
            i(n.intData.length > 0 ? n.intData[0] : 0)
        }, [n]), g(Sr, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: c,
            children: [g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.whatissaid")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    value: e,
                    onChange: u => t(u.target.value)
                })]
            }), g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.picktriggerer")
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "triggererAvatar",
                        id: "triggererAvatar0",
                        checked: r === 0,
                        onChange: u => i(0)
                    }), a(y, {
                        children: f("wiredfurni.params.anyavatar")
                    })]
                }), g(P, {
                    alignItems: "center",
                    gap: 1,
                    children: [a("input", {
                        className: "form-check-input",
                        type: "radio",
                        name: "triggererAvatar",
                        id: "triggererAvatar1",
                        checked: r === 1,
                        onChange: u => i(1)
                    }), a(y, {
                        children: Z().userName
                    })]
                })]
            })]
        })
    },
    SZ = s => a(Sr, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_OR_BY_TYPE,
        hasSpecialInput: !1,
        save: null
    }),
    CZ = s => a(Sr, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_OR_BY_TYPE,
        hasSpecialInput: !1,
        save: null
    }),
    AZ = s => {
        const [e, t] = _.useState(""),
            {trigger: r=null, setStringParam: i=null} = st(),
            n = () => i(e);
        return _.useEffect(() => {
            t(r.stringData)
        }, [r]), a(Sr, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.bot.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: 32,
                    value: e,
                    onChange: o => t(o.target.value)
                })]
            })
        })
    },
    NZ = s => {
        const [e, t] = _.useState(""),
            {trigger: r=null, setStringParam: i=null} = st(),
            n = () => i(e);
        return _.useEffect(() => {
            t(r.stringData)
        }, [r]), a(Sr, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_OR_BY_TYPE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.bot.name")
                }), a("input", {
                    type: "text",
                    className: "form-control form-control-sm",
                    maxLength: 32,
                    value: e,
                    onChange: o => t(o.target.value)
                })]
            })
        })
    },
    yZ = s => a(Sr, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
        hasSpecialInput: !1,
        save: null
    }),
    MZ = s => {
        const [e, t] = _.useState(1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Sr, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.settime", ["seconds"], [Du(e)])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 1200,
                    value: e,
                    onChange: o => t(o)
                })]
            })
        })
    },
    bZ = s => {
        const [e, t] = _.useState(1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Sr, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.setlongtime", ["time"], [_r.format(e * 5).toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 120,
                    value: e,
                    onChange: o => t(o)
                })]
            })
        })
    },
    DZ = s => {
        const [e, t] = _.useState(1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Sr, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.settime", ["seconds"], [Du(e)])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 60,
                    value: e,
                    onChange: o => t(o)
                })]
            })
        })
    },
    vZ = s => a(Sr, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
        hasSpecialInput: !1,
        save: null
    }),
    PZ = s => a(Sr, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
        hasSpecialInput: !1,
        save: null
    }),
    LZ = s => {
        const [e, t] = _.useState(1),
            {trigger: r=null, setIntParams: i=null} = st(),
            n = () => i([e]);
        return _.useEffect(() => {
            t(r.intData.length > 0 ? r.intData[0] : 0)
        }, [r]), a(Sr, {
            requiresFurni: Re.STUFF_SELECTION_OPTION_NONE,
            hasSpecialInput: !0,
            save: n,
            children: g(M, {
                gap: 1,
                children: [a(y, {
                    bold: !0,
                    children: f("wiredfurni.params.setscore", ["points"], [e.toString()])
                }), a(Xs, {
                    className: "nitro-slider",
                    min: 1,
                    max: 1e3,
                    value: e,
                    onChange: o => t(o)
                })]
            })
        })
    },
    UZ = s => a(Sr, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_OR_BY_TYPE,
        hasSpecialInput: !1,
        save: null
    }),
    wZ = s => a(Sr, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_OR_BY_TYPE,
        hasSpecialInput: !1,
        save: null
    }),
    FZ = s => a(Sr, {
        requiresFurni: Re.STUFF_SELECTION_OPTION_BY_ID_OR_BY_TYPE,
        hasSpecialInput: !1,
        save: null
    }),
    xZ = s => {
        switch (s) {
        case Ft.AVATAR_ENTERS_ROOM:
            return a(RZ, {});
        case Ft.AVATAR_SAYS_SOMETHING:
            return a(OZ, {});
        case Ft.AVATAR_WALKS_OFF_FURNI:
            return a(SZ, {});
        case Ft.AVATAR_WALKS_ON_FURNI:
            return a(CZ, {});
        case Ft.BOT_REACHED_AVATAR:
            return a(AZ, {});
        case Ft.BOT_REACHED_STUFF:
            return a(NZ, {});
        case Ft.COLLISION:
            return a(yZ, {});
        case Ft.EXECUTE_ONCE:
            return a(MZ, {});
        case Ft.EXECUTE_PERIODICALLY:
            return a(DZ, {});
        case Ft.EXECUTE_PERIODICALLY_LONG:
            return a(bZ, {});
        case Ft.GAME_ENDS:
            return a(vZ, {});
        case Ft.GAME_STARTS:
            return a(PZ, {});
        case Ft.SCORE_ACHIEVED:
            return a(LZ, {});
        case Ft.TOGGLE_FURNI:
            return a(UZ, {});
        case Ft.AVATAR_CLICKS_FURNI:
            return a(wZ, {});
        case Ft.AVATAR_CLICKS_TILE:
            return a(FZ, {})
        }
        return null
    },
    GZ = s => {
        const {trigger: e=null} = st();
        return e ? e instanceof Om ? eZ(e.code) : e instanceof Rm ? xZ(e.code) : e instanceof Tm ? TZ(e.code) : null : null
    },
    BZ = s => {
        const [e, t] = _.useState(!1);
        return _.useEffect(() => {
            const r = {
                linkReceived: i => {
                    const n = i.split("/");
                    if (!(n.length < 2))
                        switch (n[1]) {
                        case "show":
                            t(!0);
                            return;
                        case "hide":
                            t(!1);
                            return;
                        case "toggle":
                            t(o => !o);
                            return
                        }
                },
                eventUrlPrefix: "season-pass/"
            };
            return Ts(r), () => Rs(r)
        }, []), e ? g(Se, {
            uniqueKey: "season-pass",
            className: "nitro-season-pass no-resize",
            theme: "habbo",
            children: [a(Oe, {
                headerText: f("season-pass.title"),
                onCloseClick: r => t(!1)
            }), a(Ie, {
                children: a("p", {
                    children: "Test"
                })
            })]
        }) : null
    },
    kZ = s => {
        const [e, t] = _.useState(!1),
            [r, i] = _.useState(!0);
        return jt(Ce.CREATED, n => i(!1)), jt(Ce.ENDED, n => i(n.openLandingView)), _.useEffect(() => {
            t(!0),
            qc().connection.onReady()
        }, []), _.useEffect(() => {
            const n = {
                linkReceived: o => {
                    const l = o.split("/");
                    if (!(l.length < 2))
                        switch (l[1]) {
                        case "open":
                            if (l.length > 2)
                                switch (l[2]) {
                                case "credits":
                                    break;
                                default:
                                    {
                                        const c = l[2];
                                        Gi.openHabblet(c)
                                    }
                                }
                            return
                        }
                },
                eventUrlPrefix: "habblet/"
            };
            return Ts(n), () => Rs(n)
        }, []), g(k, {
            fit: !0,
            children: [a(vu, {
                type: ws.FADE_IN,
                inProp: r,
                timeout: 300,
                children: a(S8, {})
            }), a(_J, {
                isInRoom: !r
            }), a(Q8, {}), a(hJ, {}), a($X, {}), a(GZ, {}), a(iX, {}), a(X6, {}), a(h9, {}), a(w8, {}), a(ZX, {}), a(S7, {}), a(F9, {}), a(TJ, {}), a(IJ, {}), a(k7, {}), a(hX, {}), a(m8, {}), a(_9, {}), a(J7, {}), a(Z7, {}), a(gX, {}), a(y7, {}), a(u7, {}), a(BZ, {})]
        })
    };
Ql.UI_VERSION = Lv();
const VZ = s => {
    const [e, t] = _.useState(!1),
        [r, i] = _.useState(!1),
        [n, o] = _.useState("Getting Ready"),
        [l, c] = _.useState(0),
        [u, h] = _.useState(!0);
    if (!qe()) {
        if (!NitroConfig)
            throw new Error("NitroConfig is not defined!");
        Ee.bootstrap()
    }
    const d = _.useCallback(async m => {
        switch (m.type) {
        case bi.LOADED:
            qe().localization.init(),
            c(p => p + 20);
            return;
        case bi.FAILED:
            i(!0),
            o("Configuration Failed");
            return;
        case Ee.WEBGL_UNAVAILABLE:
            i(!0),
            o("WebGL Required");
            return;
        case Ee.WEBGL_CONTEXT_LOST:
            i(!0),
            o("WebGL Context Lost - Reloading"),
            setTimeout(() => window.location.reload(), 1500);
            return;
        case ss.CONNECTION_HANDSHAKING:
            c(p => p + 20);
            return;
        case ss.CONNECTION_HANDSHAKE_FAILED:
            i(!0),
            o("Handshake Failed");
            return;
        case ss.CONNECTION_AUTHENTICATED:
            c(p => p + 20),
            qe().init(),
            Ze.available && Ze.call("legacyTrack", "authentication", "authok", []);
            return;
        case ss.CONNECTION_ERROR:
            i(!0),
            o("Connection Error");
            return;
        case ss.CONNECTION_CLOSED:
            qe().roomEngine && qe().roomEngine.dispose(),
            Gi.send(-1, "client.init.handshake.fail"),
            i(!0),
            o("Server closed Connection");
            return;
        case ze.ENGINE_INITIALIZED:
            c(p => p + 20),
            setTimeout(() => t(!0), 300);
            return;
        case va.LOADED:
            {
                const p = oe("preload.assets.urls"),
                    E = [];
                if (p && p.length)
                    for (const I of p)
                        E.push(ye.interpolate(I));
                await zr().downloadAssets(E) ? (qc().init(), c(I => I + 20)) : (i(!0), o("Assets Failed"));
                return
            }
        }
    }, []);
    return ho(Ee.WEBGL_UNAVAILABLE, d), ho(Ee.WEBGL_CONTEXT_LOST, d), ho(ss.CONNECTION_HANDSHAKING, d), ho(ss.CONNECTION_HANDSHAKE_FAILED, d), ho(ss.CONNECTION_AUTHENTICATED, d), ho(ss.CONNECTION_ERROR, d), ho(ss.CONNECTION_CLOSED, d), at(ze.ENGINE_INITIALIZED, d), x4(va.LOADED, d), qp(bi.LOADED, d), qp(bi.FAILED, d), _.useEffect(() => {
        qe().core.configuration.init();
        const m = p => h(!(window.devicePixelRatio % 1));
        return window.addEventListener("resize", m), m(), () => {
            window.removeEventListener("resize", m)
        }
    }, []), g(k, {
        fit: !0,
        overflow: "hidden",
        className: u && "image-rendering-pixelated",
        children: [(!e || r) && a(w4, {
            isError: r,
            message: n,
            percent: l
        }), a(vu, {
            type: ws.FADE_IN,
            inProp: e,
            children: a(kZ, {})
        }), a(k, {
            id: "draggable-windows-container"
        })]
    })
};
vL(document.getElementById("root")).render(a(VZ, {}));
